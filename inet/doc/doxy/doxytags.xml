<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>AbstractQueue.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_abstract_queue_8cc</filename>
    <includes id="_abstract_queue_8h" name="AbstractQueue.h" local="yes" imported="no">AbstractQueue.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractQueue.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_abstract_queue_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">AbstractQueue</class>
  </compound>
  <compound kind="file">
    <name>AbstractRadio.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/radio/</path>
    <filename>_abstract_radio_8cc</filename>
    <includes id="_abstract_radio_8h" name="AbstractRadio.h" local="yes" imported="no">AbstractRadio.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <includes id="_phy_control_info__m_8h" name="PhyControlInfo_m.h" local="yes" imported="no">PhyControlInfo_m.h</includes>
    <includes id="_ieee80211_consts_8h" name="Ieee80211Consts.h" local="yes" imported="no">Ieee80211Consts.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MK_TRANSMISSION_OVER</name>
      <anchorfile>_abstract_radio_8cc.html</anchorfile>
      <anchor>a2a9cfeaaf7c63479165e7050a39b24ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MK_RECEPTION_COMPLETE</name>
      <anchorfile>_abstract_radio_8cc.html</anchorfile>
      <anchor>aebda9a0d17a20bb583e3a05765538194</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AbstractRadio.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/radio/</path>
    <filename>_abstract_radio_8h</filename>
    <includes id="_channel_access_8h" name="ChannelAccess.h" local="yes" imported="no">ChannelAccess.h</includes>
    <includes id="_radio_state_8h" name="RadioState.h" local="yes" imported="no">RadioState.h</includes>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">AirFrame_m.h</includes>
    <includes id="_i_radio_model_8h" name="IRadioModel.h" local="yes" imported="no">IRadioModel.h</includes>
    <includes id="_i_reception_model_8h" name="IReceptionModel.h" local="yes" imported="no">IReceptionModel.h</includes>
    <includes id="_snr_list_8h" name="SnrList.h" local="yes" imported="no">SnrList.h</includes>
    <class kind="class">AbstractRadio</class>
    <class kind="struct">AbstractRadio::SnrStruct</class>
  </compound>
  <compound kind="file">
    <name>AirFrame_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mfcore/</path>
    <filename>_air_frame__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <class kind="class">AirFrame</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_air_frame__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_air_frame__m_8h.html</anchorfile>
      <anchor>a60d0647cb956093d74affad0c7fa5b0d</anchor>
      <arglist>(cCommBuffer *b, AirFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_air_frame__m_8h.html</anchorfile>
      <anchor>a94392181cddff429b5cae665ff96b9e7</anchor>
      <arglist>(cCommBuffer *b, AirFrame &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ANSimMobility.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/mobility/</path>
    <filename>_a_n_sim_mobility_8cc</filename>
    <includes id="_a_n_sim_mobility_8h" name="ANSimMobility.h" local="yes" imported="no">ANSimMobility.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_a_n_sim_mobility_8cc.html</anchorfile>
      <anchor>a399bcb71d016b6dd8bf522e59e8932f1</anchor>
      <arglist>(ANSimMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ANSimMobility.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/mobility/</path>
    <filename>_a_n_sim_mobility_8h</filename>
    <includes id="_line_segments_mobility_base_8h" name="LineSegmentsMobilityBase.h" local="yes" imported="no">LineSegmentsMobilityBase.h</includes>
    <class kind="class">ANSimMobility</class>
  </compound>
  <compound kind="file">
    <name>ARP.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/arp/</path>
    <filename>_a_r_p_8cc</filename>
    <includes id="_a_r_p_8h" name="ARP.h" local="yes" imported="no">ARP.h</includes>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_a_r_p_8cc.html</anchorfile>
      <anchor>a7fea41317a83afddd3e6e0b931b23e9f</anchor>
      <arglist>(ARP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ARP.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/arp/</path>
    <filename>_a_r_p_8h</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_a_r_p_packet__m_8h" name="ARPPacket_m.h" local="yes" imported="no">ARPPacket_m.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
    <includes id="_i_interface_table_8h" name="IInterfaceTable.h" local="yes" imported="no">IInterfaceTable.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_i_routing_table_8h" name="IRoutingTable.h" local="yes" imported="no">IRoutingTable.h</includes>
    <includes id="_routing_table_access_8h" name="RoutingTableAccess.h" local="yes" imported="no">RoutingTableAccess.h</includes>
    <class kind="class">ARP</class>
    <class kind="struct">ARP::ARPCacheEntry</class>
  </compound>
  <compound kind="file">
    <name>ARPPacket_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/arp/</path>
    <filename>_a_r_p_packet__m_8h</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <class kind="class">ARPPacket</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_a_r_p_packet__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARP_HEADER_BYTES</name>
      <anchorfile>_a_r_p_packet__m_8h.html</anchorfile>
      <anchor>a95eebb7ce34185c7fc05723b2fcb8231</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ARPOpcode</name>
      <anchorfile>_a_r_p_packet__m_8h.html</anchorfile>
      <anchor>af8a3b5bb320ff19f496b22c85bc69e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARP_REQUEST</name>
      <anchorfile>_a_r_p_packet__m_8h.html</anchorfile>
      <anchor>af8a3b5bb320ff19f496b22c85bc69e10afb58ccf8b7b11505ff2117a10bf6ff61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARP_REPLY</name>
      <anchorfile>_a_r_p_packet__m_8h.html</anchorfile>
      <anchor>af8a3b5bb320ff19f496b22c85bc69e10a8bb24a026264a5b22435864179f874d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARP_RARP_REQUEST</name>
      <anchorfile>_a_r_p_packet__m_8h.html</anchorfile>
      <anchor>af8a3b5bb320ff19f496b22c85bc69e10a5c3f9a85dd0adaabbb911a85bb9a4855</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARP_RARP_REPLY</name>
      <anchorfile>_a_r_p_packet__m_8h.html</anchorfile>
      <anchor>af8a3b5bb320ff19f496b22c85bc69e10ad874c2c91081ae9c0627e5f267609ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_a_r_p_packet__m_8h.html</anchorfile>
      <anchor>adc0c3a7455f6f2386d2431f543b68caf</anchor>
      <arglist>(cCommBuffer *b, ARPPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_a_r_p_packet__m_8h.html</anchorfile>
      <anchor>aac75be5a06fdb21a927245b32d6de0fa</anchor>
      <arglist>(cCommBuffer *b, ARPPacket &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ASExternalLSA.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/router/</path>
    <filename>_a_s_external_l_s_a_8cc</filename>
    <includes id="_l_s_a_8h" name="LSA.h" local="yes" imported="no">LSA.h</includes>
  </compound>
  <compound kind="file">
    <name>BasicDecider.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mfcore/</path>
    <filename>_basic_decider_8cc</filename>
    <includes id="_basic_decider_8h" name="BasicDecider.h" local="yes" imported="no">BasicDecider.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>coreEV</name>
      <anchorfile>_basic_decider_8cc.html</anchorfile>
      <anchor>a27f667d27591f62ecf86a99a79ea8f42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_basic_decider_8cc.html</anchorfile>
      <anchor>a13b5ddeb46f91ce5237219118539c1bb</anchor>
      <arglist>(BasicDecider)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasicDecider.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mfcore/</path>
    <filename>_basic_decider_8h</filename>
    <includes id="_basic_module_8h" name="BasicModule.h" local="yes" imported="no">BasicModule.h</includes>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">AirFrame_m.h</includes>
    <includes id="_snr_control_info__m_8h" name="SnrControlInfo_m.h" local="yes" imported="no">SnrControlInfo_m.h</includes>
    <class kind="class">BasicDecider</class>
  </compound>
  <compound kind="file">
    <name>BasicDSCPClassifier.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/queue/</path>
    <filename>_basic_d_s_c_p_classifier_8cc</filename>
    <includes id="_basic_d_s_c_p_classifier_8h" name="BasicDSCPClassifier.h" local="yes" imported="no">BasicDSCPClassifier.h</includes>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
    <includes id="_i_pv6_datagram_8h" name="IPv6Datagram.h" local="yes" imported="no">IPv6Datagram.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>BEST_EFFORT</name>
      <anchorfile>_basic_d_s_c_p_classifier_8cc.html</anchorfile>
      <anchor>a7e50b31f4954e8f57d1d5f3bf7587a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>_basic_d_s_c_p_classifier_8cc.html</anchorfile>
      <anchor>ab1395ff508b8d7133f580eec9046d60e</anchor>
      <arglist>(BasicDSCPClassifier)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasicDSCPClassifier.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/queue/</path>
    <filename>_basic_d_s_c_p_classifier_8h</filename>
    <includes id="_i_qo_s_classifier_8h" name="IQoSClassifier.h" local="yes" imported="no">IQoSClassifier.h</includes>
    <class kind="class">BasicDSCPClassifier</class>
  </compound>
  <compound kind="file">
    <name>BasicMobility.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/mobility/</path>
    <filename>_basic_mobility_8cc</filename>
    <includes id="_basic_mobility_8h" name="BasicMobility.h" local="yes" imported="no">BasicMobility.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>coreEV</name>
      <anchorfile>_basic_mobility_8cc.html</anchorfile>
      <anchor>a27f667d27591f62ecf86a99a79ea8f42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasicMobility.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/mobility/</path>
    <filename>_basic_mobility_8h</filename>
    <includes id="_basic_module_8h" name="BasicModule.h" local="yes" imported="no">BasicModule.h</includes>
    <includes id="_channel_control_8h" name="ChannelControl.h" local="yes" imported="no">ChannelControl.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <class kind="class">BasicMobility</class>
  </compound>
  <compound kind="file">
    <name>BasicModule.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_basic_module_8cc</filename>
    <includes id="_basic_module_8h" name="BasicModule.h" local="yes" imported="no">BasicModule.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>coreEV</name>
      <anchorfile>_basic_module_8cc.html</anchorfile>
      <anchor>a27f667d27591f62ecf86a99a79ea8f42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasicModule.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_basic_module_8h</filename>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <class kind="class">BasicModule</class>
    <member kind="define">
      <type>#define</type>
      <name>EV</name>
      <anchorfile>_basic_module_8h.html</anchorfile>
      <anchor>a650ef3eff8a2900bef69dae29c05d2dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasicSnrEval.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mfcore/</path>
    <filename>_basic_snr_eval_8cc</filename>
    <includes id="_basic_snr_eval_8h" name="BasicSnrEval.h" local="yes" imported="no">BasicSnrEval.h</includes>
    <includes id="_transm_complete__m_8h" name="TransmComplete_m.h" local="yes" imported="no">TransmComplete_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>coreEV</name>
      <anchorfile>_basic_snr_eval_8cc.html</anchorfile>
      <anchor>a27f667d27591f62ecf86a99a79ea8f42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_basic_snr_eval_8cc.html</anchorfile>
      <anchor>ad8790328dc75fca797f74ad921617d5e</anchor>
      <arglist>(BasicSnrEval)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasicSnrEval.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mfcore/</path>
    <filename>_basic_snr_eval_8h</filename>
    <includes id="_channel_access_8h" name="ChannelAccess.h" local="yes" imported="no">ChannelAccess.h</includes>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">AirFrame_m.h</includes>
    <includes id="_snr_control_info__m_8h" name="SnrControlInfo_m.h" local="yes" imported="no">SnrControlInfo_m.h</includes>
    <class kind="class">BasicSnrEval</class>
  </compound>
  <compound kind="file">
    <name>Blackboard.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_blackboard_8cc</filename>
    <includes id="_blackboard_8h" name="Blackboard.h" local="yes" imported="no">Blackboard.h</includes>
    <includes id="_module_access_8h" name="ModuleAccess.h" local="yes" imported="no">ModuleAccess.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>coreEV</name>
      <anchorfile>_blackboard_8cc.html</anchorfile>
      <anchor>a27f667d27591f62ecf86a99a79ea8f42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_blackboard_8cc.html</anchorfile>
      <anchor>a067c2b9e38dcf6e2fd0b476c7fc2415d</anchor>
      <arglist>(Blackboard)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_blackboard_8cc.html</anchorfile>
      <anchor>ad88b75c472c0c0ae58b54b4c9a3c5932</anchor>
      <arglist>(std::ostream &amp;os, const Blackboard::BBItem &amp;bbi)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Blackboard.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_blackboard_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">Blackboard</class>
    <class kind="class">Blackboard::BBItem</class>
    <class kind="class">Blackboard::iterator</class>
    <class kind="class">BlackboardAccess</class>
    <member kind="typedef">
      <type>Blackboard::BBItemRef</type>
      <name>BBItemRef</name>
      <anchorfile>_blackboard_8h.html</anchorfile>
      <anchor>a5a61f21841a3e7669d4ac20e157a13a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BonnMotionFileCache.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/mobility/</path>
    <filename>_bonn_motion_file_cache_8cc</filename>
    <includes id="_bonn_motion_file_cache_8h" name="BonnMotionFileCache.h" local="yes" imported="no">BonnMotionFileCache.h</includes>
  </compound>
  <compound kind="file">
    <name>BonnMotionFileCache.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/mobility/</path>
    <filename>_bonn_motion_file_cache_8h</filename>
    <includes id="_basic_mobility_8h" name="BasicMobility.h" local="yes" imported="no">BasicMobility.h</includes>
    <class kind="class">BonnMotionFile</class>
    <class kind="class">BonnMotionFileCache</class>
  </compound>
  <compound kind="file">
    <name>BonnMotionMobility.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/mobility/</path>
    <filename>_bonn_motion_mobility_8cc</filename>
    <includes id="_bonn_motion_mobility_8h" name="BonnMotionMobility.h" local="yes" imported="no">BonnMotionMobility.h</includes>
    <includes id="_bonn_motion_file_cache_8h" name="BonnMotionFileCache.h" local="yes" imported="no">BonnMotionFileCache.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_bonn_motion_mobility_8cc.html</anchorfile>
      <anchor>a3cbeb0ea11367495cb833ac9e536bd68</anchor>
      <arglist>(BonnMotionMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BonnMotionMobility.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/mobility/</path>
    <filename>_bonn_motion_mobility_8h</filename>
    <includes id="_line_segments_mobility_base_8h" name="LineSegmentsMobilityBase.h" local="yes" imported="no">LineSegmentsMobilityBase.h</includes>
    <includes id="_bonn_motion_file_cache_8h" name="BonnMotionFileCache.h" local="yes" imported="no">BonnMotionFileCache.h</includes>
    <class kind="class">BonnMotionMobility</class>
  </compound>
  <compound kind="file">
    <name>bsdint.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/headerserializers/headers/</path>
    <filename>bsdint_8h</filename>
    <member kind="typedef">
      <type>uint8_t</type>
      <name>u_int8_t</name>
      <anchorfile>bsdint_8h.html</anchorfile>
      <anchor>a56d7c2fd64ccd607e3d67262a0741ba9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint16_t</type>
      <name>u_int16_t</name>
      <anchorfile>bsdint_8h.html</anchorfile>
      <anchor>a5812174a8236d5da1d9add5a828a94bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>u_int32_t</name>
      <anchorfile>bsdint_8h.html</anchorfile>
      <anchor>a0d5a2542b430beb8568bacccd2c657ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint64_t</type>
      <name>u_int64_t</name>
      <anchorfile>bsdint_8h.html</anchorfile>
      <anchor>afecfb8149081bd9b746bf968fe118a1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>uchar</name>
      <anchorfile>bsdint_8h.html</anchorfile>
      <anchor>a65f85814a8290f9797005d3b28e7e5fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>ushort</name>
      <anchorfile>bsdint_8h.html</anchorfile>
      <anchor>ab95f123a6c9bcfee6a343170ef8c5f69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>uint</name>
      <anchorfile>bsdint_8h.html</anchorfile>
      <anchor>a91ad9478d81a7aaf2593e8d9c3d06a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>ulong</name>
      <anchorfile>bsdint_8h.html</anchorfile>
      <anchor>a718b4eb2652c286f4d42dc18a8e71a1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>u_char</name>
      <anchorfile>bsdint_8h.html</anchorfile>
      <anchor>ae2b02ed168fc99cff3851603910b1fb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>u_short</name>
      <anchorfile>bsdint_8h.html</anchorfile>
      <anchor>aa1a19deefc008737e6397f44d983cfd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>u_int</name>
      <anchorfile>bsdint_8h.html</anchorfile>
      <anchor>ac319c165d52643e43249fe003e18bdf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>u_long</name>
      <anchorfile>bsdint_8h.html</anchorfile>
      <anchor>a8f25a50daf29ce2cee1ec038a4d744ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ByteArrayMessage.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_byte_array_message_8cc</filename>
    <includes id="_byte_array_message_8h" name="ByteArrayMessage.h" local="yes" imported="no">ByteArrayMessage.h</includes>
  </compound>
  <compound kind="file">
    <name>ByteArrayMessage.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_byte_array_message_8h</filename>
    <includes id="_byte_array_message__m_8h" name="ByteArrayMessage_m.h" local="yes" imported="no">ByteArrayMessage_m.h</includes>
    <class kind="class">ByteArrayMessage</class>
  </compound>
  <compound kind="file">
    <name>ByteArrayMessage_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_byte_array_message__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">ByteArrayMessage_Base</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_byte_array_message__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChannelAccess.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/world/</path>
    <filename>_channel_access_8cc</filename>
    <includes id="_channel_access_8h" name="ChannelAccess.h" local="yes" imported="no">ChannelAccess.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>coreEV</name>
      <anchorfile>_channel_access_8cc.html</anchorfile>
      <anchor>a27f667d27591f62ecf86a99a79ea8f42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChannelAccess.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/world/</path>
    <filename>_channel_access_8h</filename>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">AirFrame_m.h</includes>
    <includes id="_basic_module_8h" name="BasicModule.h" local="yes" imported="no">BasicModule.h</includes>
    <includes id="_channel_control_8h" name="ChannelControl.h" local="yes" imported="no">ChannelControl.h</includes>
    <class kind="class">ChannelAccess</class>
  </compound>
  <compound kind="file">
    <name>ChannelControl.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/world/</path>
    <filename>_channel_control_8cc</filename>
    <includes id="_channel_control_8h" name="ChannelControl.h" local="yes" imported="no">ChannelControl.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>coreEV</name>
      <anchorfile>_channel_control_8cc.html</anchorfile>
      <anchor>a27f667d27591f62ecf86a99a79ea8f42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_channel_control_8cc.html</anchorfile>
      <anchor>a6a079ed0cd774c78277bc0abcb523951</anchor>
      <arglist>(ChannelControl)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_channel_control_8cc.html</anchorfile>
      <anchor>aed410678f0796eff10b4aab6754de8ac</anchor>
      <arglist>(std::ostream &amp;os, const ChannelControl::HostEntry &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_channel_control_8cc.html</anchorfile>
      <anchor>a4137b2a6ea71d64336b1d84ba29c3903</anchor>
      <arglist>(std::ostream &amp;os, const ChannelControl::TransmissionList &amp;tl)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChannelControl.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/world/</path>
    <filename>_channel_control_8h</filename>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">AirFrame_m.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <class kind="class">ChannelControl</class>
    <class kind="struct">ChannelControl::HostEntry</class>
    <member kind="define">
      <type>#define</type>
      <name>LIGHT_SPEED</name>
      <anchorfile>_channel_control_8h.html</anchorfile>
      <anchor>a2f3addaba3e40cfb6e78224398707712</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TRANSMISSION_PURGE_INTERVAL</name>
      <anchorfile>_channel_control_8h.html</anchorfile>
      <anchor>a710d1af75b4de39da770f1418e8a1ac9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChannelInstaller.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/world/</path>
    <filename>_channel_installer_8cc</filename>
    <includes id="_channel_installer_8h" name="ChannelInstaller.h" local="yes" imported="no">ChannelInstaller.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_channel_installer_8cc.html</anchorfile>
      <anchor>afa29e0506da6a2c35ff44152cdc249f9</anchor>
      <arglist>(ChannelInstaller)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChannelInstaller.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/world/</path>
    <filename>_channel_installer_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">ChannelInstaller</class>
  </compound>
  <compound kind="file">
    <name>CircleMobility.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/mobility/</path>
    <filename>_circle_mobility_8cc</filename>
    <includes id="_circle_mobility_8h" name="CircleMobility.h" local="yes" imported="no">CircleMobility.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_circle_mobility_8cc.html</anchorfile>
      <anchor>a973b7c1d16f3e30541ded67c288f6dbd</anchor>
      <arglist>(CircleMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CircleMobility.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/mobility/</path>
    <filename>_circle_mobility_8h</filename>
    <includes id="_basic_mobility_8h" name="BasicMobility.h" local="yes" imported="no">BasicMobility.h</includes>
    <class kind="class">CircleMobility</class>
  </compound>
  <compound kind="file">
    <name>common.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/</path>
    <filename>common_8cc</filename>
    <includes id="common_8h" name="common.h" local="yes" imported="no">common.h</includes>
    <member kind="function">
      <type>std::string</type>
      <name>intToString</name>
      <anchorfile>common_8cc.html</anchorfile>
      <anchor>a564cc0728dab658af537e6d42c194dc1</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>vectorToString</name>
      <anchorfile>common_8cc.html</anchorfile>
      <anchor>a91f0d11e7f76b141cb75b84c14d15e93</anchor>
      <arglist>(IPAddressVector vec)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>vectorToString</name>
      <anchorfile>common_8cc.html</anchorfile>
      <anchor>aafc4f09f011b597f56de05091379b94f</anchor>
      <arglist>(IPAddressVector vec, const char *delim)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>vectorToString</name>
      <anchorfile>common_8cc.html</anchorfile>
      <anchor>a9b3dea0930a28e095d9c24f119091795</anchor>
      <arglist>(EroVector vec)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>vectorToString</name>
      <anchorfile>common_8cc.html</anchorfile>
      <anchor>ac9af45e83b239b207c13296af3f6cbc6</anchor>
      <arglist>(EroVector vec, const char *delim)</arglist>
    </member>
    <member kind="function">
      <type>EroVector</type>
      <name>routeToEro</name>
      <anchorfile>common_8cc.html</anchorfile>
      <anchor>a5ec7c9fef25db3dce12889b475239449</anchor>
      <arglist>(IPAddressVector rro)</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getLevel</name>
      <anchorfile>common_8cc.html</anchorfile>
      <anchor>a6f8b246051a225410fd4eba9aa2a9f54</anchor>
      <arglist>(IPvXAddress addr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>common.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/</path>
    <filename>common_8h</filename>
    <includes id="_int_serv_8h" name="IntServ.h" local="yes" imported="no">IntServ.h</includes>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
    <member kind="function">
      <type>std::string</type>
      <name>intToString</name>
      <anchorfile>common_8h.html</anchorfile>
      <anchor>a564cc0728dab658af537e6d42c194dc1</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>vectorToString</name>
      <anchorfile>common_8h.html</anchorfile>
      <anchor>a91f0d11e7f76b141cb75b84c14d15e93</anchor>
      <arglist>(IPAddressVector vec)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>vectorToString</name>
      <anchorfile>common_8h.html</anchorfile>
      <anchor>aafc4f09f011b597f56de05091379b94f</anchor>
      <arglist>(IPAddressVector vec, const char *delim)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>vectorToString</name>
      <anchorfile>common_8h.html</anchorfile>
      <anchor>a9b3dea0930a28e095d9c24f119091795</anchor>
      <arglist>(EroVector vec)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>vectorToString</name>
      <anchorfile>common_8h.html</anchorfile>
      <anchor>ac9af45e83b239b207c13296af3f6cbc6</anchor>
      <arglist>(EroVector vec, const char *delim)</arglist>
    </member>
    <member kind="function">
      <type>EroVector</type>
      <name>routeToEro</name>
      <anchorfile>common_8h.html</anchorfile>
      <anchor>a5ec7c9fef25db3dce12889b475239449</anchor>
      <arglist>(IPAddressVector rro)</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getLevel</name>
      <anchorfile>common_8h.html</anchorfile>
      <anchor>a6f8b246051a225410fd4eba9aa2a9f54</anchor>
      <arglist>(IPvXAddress addr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Consts80211.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mf80211/macLayer/</path>
    <filename>_consts80211_8h</filename>
    <member kind="enumeration">
      <name>_802_11frameType</name>
      <anchorfile>_consts80211_8h.html</anchorfile>
      <anchor>ad70ed57eb996b190fc586f309107250e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA</name>
      <anchorfile>_consts80211_8h.html</anchorfile>
      <anchor>ad70ed57eb996b190fc586f309107250ea9d7d6f31868d66330397c967c4afd2d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BROADCAST</name>
      <anchorfile>_consts80211_8h.html</anchorfile>
      <anchor>ad70ed57eb996b190fc586f309107250ea78386e426adecb3fd26350119a3cb7c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTS</name>
      <anchorfile>_consts80211_8h.html</anchorfile>
      <anchor>ad70ed57eb996b190fc586f309107250eae58caa68ff8b6e4838007985c7e3ae66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CTS</name>
      <anchorfile>_consts80211_8h.html</anchorfile>
      <anchor>ad70ed57eb996b190fc586f309107250ea97dc7d7bbe8a217f4bc934b4a868c521</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACK</name>
      <anchorfile>_consts80211_8h.html</anchorfile>
      <anchor>ad70ed57eb996b190fc586f309107250ea41246e9c8691b7e33bc79b345e06b48e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACKRTS</name>
      <anchorfile>_consts80211_8h.html</anchorfile>
      <anchor>ad70ed57eb996b190fc586f309107250ea9ec72957f3d528f3f305bc5b98150b59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BEGIN_RECEPTION</name>
      <anchorfile>_consts80211_8h.html</anchorfile>
      <anchor>ad70ed57eb996b190fc586f309107250eae00de8094e37dcde8ebe30e410e07246</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BITERROR</name>
      <anchorfile>_consts80211_8h.html</anchorfile>
      <anchor>ad70ed57eb996b190fc586f309107250ea46f67b4287ec5f32a482fe2245acb694</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COLLISION</name>
      <anchorfile>_consts80211_8h.html</anchorfile>
      <anchor>ad70ed57eb996b190fc586f309107250ead5384d1822c72da119100438c5051831</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>LENGTH_RTS</name>
      <anchorfile>_consts80211_8h.html</anchorfile>
      <anchor>a994032d4c974294f5a24e0e3160d90f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>LENGTH_CTS</name>
      <anchorfile>_consts80211_8h.html</anchorfile>
      <anchor>a615c2db16153273956d34e0a7b4a46cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>LENGTH_ACK</name>
      <anchorfile>_consts80211_8h.html</anchorfile>
      <anchor>a91dfe4eeae95a6cf191fe0cfddeac182</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>ST</name>
      <anchorfile>_consts80211_8h.html</anchorfile>
      <anchor>a7e9c1ba366ac3bbe95ba564f18e8f058</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>SIFS</name>
      <anchorfile>_consts80211_8h.html</anchorfile>
      <anchor>a5edea541cf37694f81281fa84f71684c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>DIFS</name>
      <anchorfile>_consts80211_8h.html</anchorfile>
      <anchor>a2cd88f6cbb29ff78e2d359320cd23417</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>RETRY_LIMIT</name>
      <anchorfile>_consts80211_8h.html</anchorfile>
      <anchor>ad862aa3dc4895082a85ebc53f5bec08e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>CW_MIN</name>
      <anchorfile>_consts80211_8h.html</anchorfile>
      <anchor>a104d9aa9c5a73eeecc9799c60b238289</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>CW_MAX</name>
      <anchorfile>_consts80211_8h.html</anchorfile>
      <anchor>a785c5f49538e2a36c5d3b31253740014</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PHY_HEADER_LENGTH</name>
      <anchorfile>_consts80211_8h.html</anchorfile>
      <anchor>a0ecba1599d2ee7a3f33cf1970abdb90a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>HEADER_WITHOUT_PREAMBLE</name>
      <anchorfile>_consts80211_8h.html</anchorfile>
      <anchor>a28c69472ed4119dd2d98ca00d7f11ae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>BITRATE_HEADER</name>
      <anchorfile>_consts80211_8h.html</anchorfile>
      <anchor>a0454abde1a622bc79c2528d728e466ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>BANDWIDTH</name>
      <anchorfile>_consts80211_8h.html</anchorfile>
      <anchor>a007aaecac439a0b64fa29eef0da1d9b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>MAC_GENERATOR</name>
      <anchorfile>_consts80211_8h.html</anchorfile>
      <anchor>a0c14cacca0c26f291b4c74a836e1dc81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>PROCESSING_TIMEOUT</name>
      <anchorfile>_consts80211_8h.html</anchorfile>
      <anchor>a2b72096124b11c53887d11ad46644138</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConstSpeedMobility.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/mobility/</path>
    <filename>_const_speed_mobility_8cc</filename>
    <includes id="_const_speed_mobility_8h" name="ConstSpeedMobility.h" local="yes" imported="no">ConstSpeedMobility.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_const_speed_mobility_8cc.html</anchorfile>
      <anchor>acaab822b5e908d51b5d97d6070172a3d</anchor>
      <arglist>(ConstSpeedMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConstSpeedMobility.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/mobility/</path>
    <filename>_const_speed_mobility_8h</filename>
    <includes id="_basic_mobility_8h" name="BasicMobility.h" local="yes" imported="no">BasicMobility.h</includes>
    <class kind="class">ConstSpeedMobility</class>
  </compound>
  <compound kind="file">
    <name>ConstType.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/mpls/</path>
    <filename>_const_type_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <namespace>ConstType</namespace>
    <member kind="enumeration">
      <name>messageKind</name>
      <anchorfile>_const_type_8h.html</anchorfile>
      <anchor>af04e35ff7624a0ca683f7cdaf88e6e46</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPLS_KIND</name>
      <anchorfile>_const_type_8h.html</anchorfile>
      <anchor>af04e35ff7624a0ca683f7cdaf88e6e46a980cdcf612a1b181e7902bb4ff016a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LDP_KIND</name>
      <anchorfile>_const_type_8h.html</anchorfile>
      <anchor>af04e35ff7624a0ca683f7cdaf88e6e46a05cf7b6bb468492b44957a79ef1dc941</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNAL_KIND</name>
      <anchorfile>_const_type_8h.html</anchorfile>
      <anchor>af04e35ff7624a0ca683f7cdaf88e6e46a0e4b2b8196a5988c9aad66f7f3d019e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>libDataMarker</name>
      <anchorfile>namespace_const_type.html</anchorfile>
      <anchor>a8508f8afe8e287e0281c19895dbb82ea</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>prtDataMarker</name>
      <anchorfile>namespace_const_type.html</anchorfile>
      <anchor>a0155b7dea0d056a6a9bdba7db526d4fb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>UnknownData</name>
      <anchorfile>namespace_const_type.html</anchorfile>
      <anchor>aa420fb21ac0b7e11a3136ca9f392b721</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>NoLabel</name>
      <anchorfile>namespace_const_type.html</anchorfile>
      <anchor>a2eef76e17cf0d9b44d67242f8b919ee6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>wildcast</name>
      <anchorfile>namespace_const_type.html</anchorfile>
      <anchor>a43c92ceb4fb2521883284dc104a9af5e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>empty</name>
      <anchorfile>namespace_const_type.html</anchorfile>
      <anchor>a292c6824a659d30847032a3c0d1c0217</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>ldp_port</name>
      <anchorfile>namespace_const_type.html</anchorfile>
      <anchor>a3e52513fcc6c9eecd73ab4369eb00b16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>LDP_KIND</name>
      <anchorfile>namespace_const_type.html</anchorfile>
      <anchor>aef316a5cfb9408a60d2b5abfa85a3e22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>HOW_KIND</name>
      <anchorfile>namespace_const_type.html</anchorfile>
      <anchor>acfbe71c2603724a07b0374830aff2160</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ControlManetRouting_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv4/</path>
    <filename>_control_manet_routing__m_8h</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <class kind="class">ControlManetRouting</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_control_manet_routing__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ManetControlType</name>
      <anchorfile>_control_manet_routing__m_8h.html</anchorfile>
      <anchor>ac4642943024e66ea297043ab40d3fa27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MANET_ROUTE_NO_OPTION</name>
      <anchorfile>_control_manet_routing__m_8h.html</anchorfile>
      <anchor>ac4642943024e66ea297043ab40d3fa27abc17f17008be5804fff72732f234a0c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MANET_ROUTE_UPDATE</name>
      <anchorfile>_control_manet_routing__m_8h.html</anchorfile>
      <anchor>ac4642943024e66ea297043ab40d3fa27a456bb67f931acaf43c29de6208e173e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MANET_ROUTE_NOROUTE</name>
      <anchorfile>_control_manet_routing__m_8h.html</anchorfile>
      <anchor>ac4642943024e66ea297043ab40d3fa27ab338147e36db733fdb631148ea4247ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_control_manet_routing__m_8h.html</anchorfile>
      <anchor>aed1081d29ce3029ae8fb1ff785ca176f</anchor>
      <arglist>(cCommBuffer *b, ControlManetRouting &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_control_manet_routing__m_8h.html</anchorfile>
      <anchor>a4c153d8a70570e6312d6ccee23f0e4dc</anchor>
      <arglist>(cCommBuffer *b, ControlManetRouting &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Coord.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_coord_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <class kind="class">Coord</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_coord_8h.html</anchorfile>
      <anchor>a8c1991dbbe58ef68597baf656b5d726e</anchor>
      <arglist>(std::ostream &amp;os, const Coord &amp;coord)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>creator.py</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/examples/rtp/multicast2/</path>
    <filename>creator_8py</filename>
    <namespace>creator</namespace>
    <member kind="variable">
      <type>int</type>
      <name>secondaryRouters</name>
      <anchorfile>namespacecreator.html</anchorfile>
      <anchor>ad2c1ad3cd677aa34deb8638829b69438</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>hostsPerRouter</name>
      <anchorfile>namespacecreator.html</anchorfile>
      <anchor>aa806a492c63163b8a8fdb74054821f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tuple</type>
      <name>mainRouterFile</name>
      <anchorfile>namespacecreator.html</anchorfile>
      <anchor>af5876fc8cd43b08198e336687396eab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tuple</type>
      <name>secondaryRouterFile</name>
      <anchorfile>namespacecreator.html</anchorfile>
      <anchor>acd03107c8f9326e996ce09cc844846c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tuple</type>
      <name>hostRoutingFile</name>
      <anchorfile>namespacecreator.html</anchorfile>
      <anchor>a577abc70ca7c724eaaa1c5f48ae4837c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tuple</type>
      <name>networkFile</name>
      <anchorfile>namespacecreator.html</anchorfile>
      <anchor>a091469d01f07ed443bc3da5a120856ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tuple</type>
      <name>omnetppiniFile</name>
      <anchorfile>namespacecreator.html</anchorfile>
      <anchor>aa6f5967db051f093b1952d6572f08c68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CSMAMacLayer.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mf80211/macLayer/</path>
    <filename>_c_s_m_a_mac_layer_8cc</filename>
    <includes id="_c_s_m_a_mac_layer_8h" name="CSMAMacLayer.h" local="yes" imported="no">CSMAMacLayer.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <includes id="_i_interface_table_8h" name="IInterfaceTable.h" local="yes" imported="no">IInterfaceTable.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_c_s_m_a_mac_layer_8cc.html</anchorfile>
      <anchor>a7e0cffa4a416ce354a28c471e0849e8b</anchor>
      <arglist>(CSMAMacLayer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CSMAMacLayer.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mf80211/macLayer/</path>
    <filename>_c_s_m_a_mac_layer_8h</filename>
    <includes id="_wireless_mac_base_8h" name="WirelessMacBase.h" local="yes" imported="no">WirelessMacBase.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <includes id="_radio_state_8h" name="RadioState.h" local="yes" imported="no">RadioState.h</includes>
    <includes id="_mac_pkt__m_8h" name="MacPkt_m.h" local="yes" imported="no">MacPkt_m.h</includes>
    <class kind="class">CSMAMacLayer</class>
  </compound>
  <compound kind="file">
    <name>cSocketRTScheduler.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ext/</path>
    <filename>c_socket_r_t_scheduler_8cc</filename>
    <includes id="c_socket_r_t_scheduler_8h" name="cSocketRTScheduler.h" local="yes" imported="no">cSocketRTScheduler.h</includes>
    <includes id="ethernet_8h" name="ethernet.h" local="no" imported="no">headers/ethernet.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IPPROTO_SCTP</name>
      <anchorfile>c_socket_r_t_scheduler_8cc.html</anchorfile>
      <anchor>afce983cef8c9dfb0595ee46f7a955aa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PCAP_SNAPLEN</name>
      <anchorfile>c_socket_r_t_scheduler_8cc.html</anchorfile>
      <anchor>aed6005eb1c40eef377731c5488c11c43</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PCAP_TIMEOUT</name>
      <anchorfile>c_socket_r_t_scheduler_8cc.html</anchorfile>
      <anchor>abbabc53dafa7fe1d8411b171aa45faa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>c_socket_r_t_scheduler_8cc.html</anchorfile>
      <anchor>a0449c4ae7d5ca617748d193057bdb5e0</anchor>
      <arglist>(cSocketRTScheduler)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>c_socket_r_t_scheduler_8cc.html</anchorfile>
      <anchor>a9319cd38b603869ec8f086b89365ca2f</anchor>
      <arglist>(std::ostream &amp;out, const timeval &amp;tv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cSocketRTScheduler.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ext/</path>
    <filename>c_socket_r_t_scheduler_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="bsdint_8h" name="bsdint.h" local="yes" imported="no">bsdint.h</includes>
    <includes id="_ext_frame__m_8h" name="ExtFrame_m.h" local="yes" imported="no">ExtFrame_m.h</includes>
    <class kind="class">cSocketRTScheduler</class>
    <member kind="define">
      <type>#define</type>
      <name>WANT_WINSOCK2</name>
      <anchorfile>c_socket_r_t_scheduler_8h.html</anchorfile>
      <anchor>a105264025fbdfc308077979bc21a5474</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_U_INT8_T</name>
      <anchorfile>c_socket_r_t_scheduler_8h.html</anchorfile>
      <anchor>a5c801f5197bad37d7b7aa6823672d32c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_U_INT16_T</name>
      <anchorfile>c_socket_r_t_scheduler_8h.html</anchorfile>
      <anchor>a0869d466ddab46e5420ae22728f6b6eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_U_INT32_T</name>
      <anchorfile>c_socket_r_t_scheduler_8h.html</anchorfile>
      <anchor>a7d0770a801b850407689c3f008b5a9f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_U_INT64_T</name>
      <anchorfile>c_socket_r_t_scheduler_8h.html</anchorfile>
      <anchor>a0690b52f145f45ddac92d2b6d2603abf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DatabaseDescriptionHandler.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/messagehandler/</path>
    <filename>_database_description_handler_8cc</filename>
    <includes id="_database_description_handler_8h" name="DatabaseDescriptionHandler.h" local="yes" imported="no">DatabaseDescriptionHandler.h</includes>
    <includes id="_o_s_p_f_neighbor_8h" name="OSPFNeighbor.h" local="yes" imported="no">OSPFNeighbor.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
  </compound>
  <compound kind="file">
    <name>DatabaseDescriptionHandler.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/messagehandler/</path>
    <filename>_database_description_handler_8h</filename>
    <includes id="_i_message_handler_8h" name="IMessageHandler.h" local="yes" imported="no">IMessageHandler.h</includes>
    <class kind="class">OSPF::DatabaseDescriptionHandler</class>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>Decider80211.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mf80211/phyLayer/decider/</path>
    <filename>_decider80211_8cc</filename>
    <includes id="_decider80211_8h" name="Decider80211.h" local="yes" imported="no">Decider80211.h</includes>
    <includes id="_consts80211_8h" name="Consts80211.h" local="yes" imported="no">Consts80211.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_decider80211_8cc.html</anchorfile>
      <anchor>a4354abffc4a81d1295b804a03dbb1843</anchor>
      <arglist>(Decider80211)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Decider80211.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mf80211/phyLayer/decider/</path>
    <filename>_decider80211_8h</filename>
    <includes id="_basic_decider_8h" name="BasicDecider.h" local="no" imported="no">BasicDecider.h</includes>
    <class kind="class">Decider80211</class>
  </compound>
  <compound kind="file">
    <name>defs.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/headerserializers/headers/</path>
    <filename>defs_8h</filename>
  </compound>
  <compound kind="file">
    <name>DropsGenerator.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ppp/</path>
    <filename>_drops_generator_8cc</filename>
    <includes id="_drops_generator_8h" name="DropsGenerator.h" local="yes" imported="no">DropsGenerator.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_drops_generator_8cc.html</anchorfile>
      <anchor>a3d69a403e45cd25371925b3444a29049</anchor>
      <arglist>(DropsGenerator)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DropsGenerator.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ppp/</path>
    <filename>_drops_generator_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">DropsGenerator</class>
  </compound>
  <compound kind="file">
    <name>DropTailQoSQueue.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/queue/</path>
    <filename>_drop_tail_qo_s_queue_8cc</filename>
    <includes id="_drop_tail_qo_s_queue_8h" name="DropTailQoSQueue.h" local="yes" imported="no">DropTailQoSQueue.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_drop_tail_qo_s_queue_8cc.html</anchorfile>
      <anchor>a8fd2058eebd8041ebbb90c146f86de8b</anchor>
      <arglist>(DropTailQoSQueue)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DropTailQoSQueue.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/queue/</path>
    <filename>_drop_tail_qo_s_queue_8h</filename>
    <includes id="_passive_queue_base_8h" name="PassiveQueueBase.h" local="yes" imported="no">PassiveQueueBase.h</includes>
    <includes id="_i_qo_s_classifier_8h" name="IQoSClassifier.h" local="yes" imported="no">IQoSClassifier.h</includes>
    <class kind="class">DropTailQoSQueue</class>
  </compound>
  <compound kind="file">
    <name>DropTailQueue.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/queue/</path>
    <filename>_drop_tail_queue_8cc</filename>
    <includes id="_drop_tail_queue_8h" name="DropTailQueue.h" local="yes" imported="no">DropTailQueue.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_drop_tail_queue_8cc.html</anchorfile>
      <anchor>ab841f612b79fc224846c30c82f881e21</anchor>
      <arglist>(DropTailQueue)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DropTailQueue.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/queue/</path>
    <filename>_drop_tail_queue_8h</filename>
    <includes id="_passive_queue_base_8h" name="PassiveQueueBase.h" local="yes" imported="no">PassiveQueueBase.h</includes>
    <class kind="class">DropTailQueue</class>
  </compound>
  <compound kind="file">
    <name>flavours/DumbTCP.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/flavours/</path>
    <filename>flavours_2_dumb_t_c_p_8cc</filename>
    <includes id="_dumb_t_c_p_8h" name="DumbTCP.h" local="yes" imported="no">DumbTCP.h</includes>
    <includes id="_t_c_p_8h" name="TCP.h" local="yes" imported="no">TCP.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>REXMIT_TIMEOUT</name>
      <anchorfile>flavours_2_dumb_t_c_p_8cc.html</anchorfile>
      <anchor>af8657b062d44e947414efe060f392bdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>flavours_2_dumb_t_c_p_8cc.html</anchorfile>
      <anchor>aff0944a7a9ec0d103039032125b787e1</anchor>
      <arglist>(DumbTCP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>old/flavours/DumbTCP.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/flavours/</path>
    <filename>old_2flavours_2_dumb_t_c_p_8cc</filename>
    <includes id="_dumb_t_c_p__old_8h" name="DumbTCP_old.h" local="yes" imported="no">DumbTCP_old.h</includes>
    <includes id="_t_c_p__old_8h" name="TCP_old.h" local="yes" imported="no">TCP_old.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>REXMIT_TIMEOUT</name>
      <anchorfile>old_2flavours_2_dumb_t_c_p_8cc.html</anchorfile>
      <anchor>af8657b062d44e947414efe060f392bdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>old_2flavours_2_dumb_t_c_p_8cc.html</anchorfile>
      <anchor>aff0944a7a9ec0d103039032125b787e1</anchor>
      <arglist>(DumbTCP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DumbTCP.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/flavours/</path>
    <filename>_dumb_t_c_p_8h</filename>
    <includes id="_t_c_p_algorithm_8h" name="TCPAlgorithm.h" local="yes" imported="no">TCPAlgorithm.h</includes>
    <class kind="class">DumbTCPStateVariables</class>
    <class kind="class">DumbTCP</class>
  </compound>
  <compound kind="file">
    <name>DumbTCP_old.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/flavours/</path>
    <filename>_dumb_t_c_p__old_8h</filename>
    <includes id="_t_c_p_algorithm__old_8h" name="TCPAlgorithm_old.h" local="yes" imported="no">TCPAlgorithm_old.h</includes>
    <class kind="class">tcp_old::DumbTCPStateVariables</class>
    <class kind="class">tcp_old::DumbTCP</class>
    <namespace>tcp_old</namespace>
  </compound>
  <compound kind="file">
    <name>Dummy.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/extras/</path>
    <filename>_dummy_8cc</filename>
    <class kind="class">Dummy</class>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_dummy_8cc.html</anchorfile>
      <anchor>ab2c7870294710ac364c82d698f5ee181</anchor>
      <arglist>(Dummy)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DuplicatesGenerator.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ppp/</path>
    <filename>_duplicates_generator_8cc</filename>
    <includes id="_duplicates_generator_8h" name="DuplicatesGenerator.h" local="yes" imported="no">DuplicatesGenerator.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_duplicates_generator_8cc.html</anchorfile>
      <anchor>a3cebd87917d0356136b0cf4386133b4c</anchor>
      <arglist>(DuplicatesGenerator)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DuplicatesGenerator.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ppp/</path>
    <filename>_duplicates_generator_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">DuplicatesGenerator</class>
  </compound>
  <compound kind="file">
    <name>EnqueueHook.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_enqueue_hook_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">EnqueueHook</class>
  </compound>
  <compound kind="file">
    <name>ErrAndCollDecider.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mf80211/phyLayer/decider/</path>
    <filename>_err_and_coll_decider_8cc</filename>
    <includes id="_err_and_coll_decider_8h" name="ErrAndCollDecider.h" local="yes" imported="no">ErrAndCollDecider.h</includes>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">AirFrame_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_err_and_coll_decider_8cc.html</anchorfile>
      <anchor>ab3a301ef2edd32038998927dd90b4351</anchor>
      <arglist>(ErrAndCollDecider)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ErrAndCollDecider.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mf80211/phyLayer/decider/</path>
    <filename>_err_and_coll_decider_8h</filename>
    <includes id="_snr_decider_8h" name="SnrDecider.h" local="yes" imported="no">SnrDecider.h</includes>
    <class kind="class">ErrAndCollDecider</class>
  </compound>
  <compound kind="file">
    <name>ErrorHandling.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv4/</path>
    <filename>_error_handling_8cc</filename>
    <includes id="_error_handling_8h" name="ErrorHandling.h" local="yes" imported="no">ErrorHandling.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
    <includes id="_i_c_m_p_message_8h" name="ICMPMessage.h" local="yes" imported="no">ICMPMessage.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_error_handling_8cc.html</anchorfile>
      <anchor>a75dac8d7f14054725fed329dab8535a0</anchor>
      <arglist>(ErrorHandling)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ErrorHandling.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv4/</path>
    <filename>_error_handling_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <class kind="class">ErrorHandling</class>
  </compound>
  <compound kind="file">
    <name>EtherApp_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/ethernet/</path>
    <filename>_ether_app__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">EtherAppReq</class>
    <class kind="class">EtherAppResp</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_ether_app__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERAPP_CLI_SAP</name>
      <anchorfile>_ether_app__m_8h.html</anchorfile>
      <anchor>afc67e31d0f294093a5882d91afe5d290</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERAPP_SRV_SAP</name>
      <anchorfile>_ether_app__m_8h.html</anchorfile>
      <anchor>afd3274337777308ebdfcbed8dd129dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ether_app__m_8h.html</anchorfile>
      <anchor>a2d55b47847e5e13094271b01e433bf16</anchor>
      <arglist>(cCommBuffer *b, EtherAppReq &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ether_app__m_8h.html</anchorfile>
      <anchor>a5d6f31c6076574d12ef450d365d6cc40</anchor>
      <arglist>(cCommBuffer *b, EtherAppReq &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ether_app__m_8h.html</anchorfile>
      <anchor>aa26fd6c68b4b20b9dc9ff19795578790</anchor>
      <arglist>(cCommBuffer *b, EtherAppResp &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ether_app__m_8h.html</anchorfile>
      <anchor>af3b0d1eb1bf87a3ce45e201f6fbf6b7c</anchor>
      <arglist>(cCommBuffer *b, EtherAppResp &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EtherAppCli.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/ethernet/</path>
    <filename>_ether_app_cli_8cc</filename>
    <includes id="_ether_app_cli_8h" name="EtherAppCli.h" local="yes" imported="no">EtherAppCli.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <includes id="_ether_app__m_8h" name="EtherApp_m.h" local="yes" imported="no">EtherApp_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_ether_app_cli_8cc.html</anchorfile>
      <anchor>abf346c028a3c694e3a78e998c663a6c7</anchor>
      <arglist>(EtherAppCli)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EtherAppCli.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/ethernet/</path>
    <filename>_ether_app_cli_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <class kind="class">EtherAppCli</class>
  </compound>
  <compound kind="file">
    <name>EtherAppSrv.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/ethernet/</path>
    <filename>_ether_app_srv_8cc</filename>
    <includes id="_ether_app_srv_8h" name="EtherAppSrv.h" local="yes" imported="no">EtherAppSrv.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <includes id="_ether_app__m_8h" name="EtherApp_m.h" local="yes" imported="no">EtherApp_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_ether_app_srv_8cc.html</anchorfile>
      <anchor>aa923f1d83c581a5abb6040d485d0e702</anchor>
      <arglist>(EtherAppSrv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EtherAppSrv.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/ethernet/</path>
    <filename>_ether_app_srv_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <class kind="class">EtherAppSrv</class>
    <member kind="define">
      <type>#define</type>
      <name>MAX_REPLY_CHUNK_SIZE</name>
      <anchorfile>_ether_app_srv_8h.html</anchorfile>
      <anchor>a4ee7696fdaea61c635c4c28e910113b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EtherBus.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ethernet/</path>
    <filename>_ether_bus_8cc</filename>
    <includes id="_ether_bus_8h" name="EtherBus.h" local="yes" imported="no">EtherBus.h</includes>
    <includes id="_ether_frame__m_8h" name="EtherFrame_m.h" local="yes" imported="no">EtherFrame_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_ether_bus_8cc.html</anchorfile>
      <anchor>aaafb5d44bdc0510515051d1aca4598db</anchor>
      <arglist>(EtherBus)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EtherBus.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ethernet/</path>
    <filename>_ether_bus_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">EtherBus</class>
    <class kind="struct">EtherBus::BusTap</class>
    <member kind="define">
      <type>#define</type>
      <name>UPSTREAM</name>
      <anchorfile>_ether_bus_8h.html</anchorfile>
      <anchor>aecc70b06b9893c001633b54e288ff29d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DOWNSTREAM</name>
      <anchorfile>_ether_bus_8h.html</anchorfile>
      <anchor>a0fdd4161dbd1e51472cb8977d633f144</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EtherEncap.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ethernet/</path>
    <filename>_ether_encap_8cc</filename>
    <includes id="_ether_encap_8h" name="EtherEncap.h" local="yes" imported="no">EtherEncap.h</includes>
    <includes id="_ether_frame__m_8h" name="EtherFrame_m.h" local="yes" imported="no">EtherFrame_m.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <includes id="_i_interface_table_8h" name="IInterfaceTable.h" local="yes" imported="no">IInterfaceTable.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_ether_m_a_c_8h" name="EtherMAC.h" local="yes" imported="no">EtherMAC.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_ether_encap_8cc.html</anchorfile>
      <anchor>a56d9fb957b3702fe2e4f843dd2147812</anchor>
      <arglist>(EtherEncap)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EtherEncap.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ethernet/</path>
    <filename>_ether_encap_8h</filename>
    <includes id="_ethernet_8h" name="Ethernet.h" local="yes" imported="no">Ethernet.h</includes>
    <includes id="_ether_frame__m_8h" name="EtherFrame_m.h" local="yes" imported="no">EtherFrame_m.h</includes>
    <class kind="class">EtherEncap</class>
  </compound>
  <compound kind="file">
    <name>EtherFrame_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ethernet/</path>
    <filename>_ether_frame__m_8h</filename>
    <includes id="_ethernet_8h" name="Ethernet.h" local="yes" imported="no">Ethernet.h</includes>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <class kind="class">EtherJam</class>
    <class kind="class">EtherFrame</class>
    <class kind="class">EthernetIIFrame</class>
    <class kind="class">EtherFrameWithLLC</class>
    <class kind="class">EtherFrameWithSNAP</class>
    <class kind="class">EtherPauseFrame</class>
    <class kind="class">EtherAutoconfig</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_ether_frame__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ether_frame__m_8h.html</anchorfile>
      <anchor>abe97794babbdb9b7fc5fd468e404a84f</anchor>
      <arglist>(cCommBuffer *b, EtherJam &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ether_frame__m_8h.html</anchorfile>
      <anchor>a737c4776c3db57308f39231afd78c841</anchor>
      <arglist>(cCommBuffer *b, EtherJam &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ether_frame__m_8h.html</anchorfile>
      <anchor>a13f0b0823902b59297418ad17f8bc342</anchor>
      <arglist>(cCommBuffer *b, EtherFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ether_frame__m_8h.html</anchorfile>
      <anchor>a65180189ac2a52d7fd91bd89f1fe8225</anchor>
      <arglist>(cCommBuffer *b, EtherFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ether_frame__m_8h.html</anchorfile>
      <anchor>a8b272db68477294f9f0d5dae6bac96b3</anchor>
      <arglist>(cCommBuffer *b, EthernetIIFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ether_frame__m_8h.html</anchorfile>
      <anchor>a0ff3523ca23a64ff640c741ac47293ce</anchor>
      <arglist>(cCommBuffer *b, EthernetIIFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ether_frame__m_8h.html</anchorfile>
      <anchor>ae8cc0b5b79738e03cdefd8b5d8bfb34c</anchor>
      <arglist>(cCommBuffer *b, EtherFrameWithLLC &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ether_frame__m_8h.html</anchorfile>
      <anchor>a7cb78f0a6bd04fb5650464f5ede0614c</anchor>
      <arglist>(cCommBuffer *b, EtherFrameWithLLC &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ether_frame__m_8h.html</anchorfile>
      <anchor>a24f01734aa2f09b54aee2d9a6f5dce99</anchor>
      <arglist>(cCommBuffer *b, EtherFrameWithSNAP &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ether_frame__m_8h.html</anchorfile>
      <anchor>a68384eff6ccca2141ba4c26dd85031ed</anchor>
      <arglist>(cCommBuffer *b, EtherFrameWithSNAP &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ether_frame__m_8h.html</anchorfile>
      <anchor>ad7a17dd463848b221ed3cffede457460</anchor>
      <arglist>(cCommBuffer *b, EtherPauseFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ether_frame__m_8h.html</anchorfile>
      <anchor>a2dce7edc1a0c43815e3d211196953d32</anchor>
      <arglist>(cCommBuffer *b, EtherPauseFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ether_frame__m_8h.html</anchorfile>
      <anchor>a4aebe8fcae09709f8cceeaa2a36d4124</anchor>
      <arglist>(cCommBuffer *b, EtherAutoconfig &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ether_frame__m_8h.html</anchorfile>
      <anchor>a22967075f66807db91995db9b4c24c36</anchor>
      <arglist>(cCommBuffer *b, EtherAutoconfig &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EtherHub.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ethernet/</path>
    <filename>_ether_hub_8cc</filename>
    <includes id="_ether_hub_8h" name="EtherHub.h" local="yes" imported="no">EtherHub.h</includes>
    <includes id="_ether_frame__m_8h" name="EtherFrame_m.h" local="yes" imported="no">EtherFrame_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_ether_hub_8cc.html</anchorfile>
      <anchor>ac149e2bda813a35f898279b9a091fdee</anchor>
      <arglist>(EtherHub)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EtherHub.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ethernet/</path>
    <filename>_ether_hub_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">EtherHub</class>
  </compound>
  <compound kind="file">
    <name>EtherLLC.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ethernet/</path>
    <filename>_ether_l_l_c_8cc</filename>
    <includes id="_ether_l_l_c_8h" name="EtherLLC.h" local="yes" imported="no">EtherLLC.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_ether_l_l_c_8cc.html</anchorfile>
      <anchor>ac00f421e940f2eefd90ff941c3e5d70d</anchor>
      <arglist>(EtherLLC)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EtherLLC.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ethernet/</path>
    <filename>_ether_l_l_c_8h</filename>
    <includes id="_ethernet_8h" name="Ethernet.h" local="yes" imported="no">Ethernet.h</includes>
    <includes id="_ether_frame__m_8h" name="EtherFrame_m.h" local="yes" imported="no">EtherFrame_m.h</includes>
    <class kind="class">EtherLLC</class>
  </compound>
  <compound kind="file">
    <name>EtherMAC.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ethernet/</path>
    <filename>_ether_m_a_c_8cc</filename>
    <includes id="_ether_m_a_c_8h" name="EtherMAC.h" local="yes" imported="no">EtherMAC.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <includes id="_i_passive_queue_8h" name="IPassiveQueue.h" local="yes" imported="no">IPassiveQueue.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CASE</name>
      <anchorfile>_ether_m_a_c_8cc.html</anchorfile>
      <anchor>a60cc06bef97da802b8522d258ac4fe89</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_ether_m_a_c_8cc.html</anchorfile>
      <anchor>aaafe92cf43a371ea0bae4edbc5e23e85</anchor>
      <arglist>(EtherMAC)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EtherMAC.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ethernet/</path>
    <filename>_ether_m_a_c_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_ethernet_8h" name="Ethernet.h" local="yes" imported="no">Ethernet.h</includes>
    <includes id="_ether_frame__m_8h" name="EtherFrame_m.h" local="yes" imported="no">EtherFrame_m.h</includes>
    <includes id="_ether_m_a_c_base_8h" name="EtherMACBase.h" local="yes" imported="no">EtherMACBase.h</includes>
    <class kind="class">EtherMAC</class>
    <member kind="define">
      <type>#define</type>
      <name>AUTOCONFIG_PERIOD</name>
      <anchorfile>_ether_m_a_c_8h.html</anchorfile>
      <anchor>a1df9f117db9f094bb52bf213fdf70628</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EtherMAC2.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ethernet/</path>
    <filename>_ether_m_a_c2_8cc</filename>
    <includes id="_ether_m_a_c2_8h" name="EtherMAC2.h" local="yes" imported="no">EtherMAC2.h</includes>
    <includes id="_i_passive_queue_8h" name="IPassiveQueue.h" local="yes" imported="no">IPassiveQueue.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_ether_m_a_c2_8cc.html</anchorfile>
      <anchor>a5ce9ee3903769afe03c6e5f22879b28d</anchor>
      <arglist>(EtherMAC2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EtherMAC2.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ethernet/</path>
    <filename>_ether_m_a_c2_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_ether_frame__m_8h" name="EtherFrame_m.h" local="yes" imported="no">EtherFrame_m.h</includes>
    <includes id="_ether_m_a_c_base_8h" name="EtherMACBase.h" local="yes" imported="no">EtherMACBase.h</includes>
    <class kind="class">EtherMAC2</class>
  </compound>
  <compound kind="file">
    <name>EtherMACBase.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ethernet/</path>
    <filename>_ether_m_a_c_base_8cc</filename>
    <includes id="_ether_m_a_c_base_8h" name="EtherMACBase.h" local="yes" imported="no">EtherMACBase.h</includes>
    <includes id="_i_passive_queue_8h" name="IPassiveQueue.h" local="yes" imported="no">IPassiveQueue.h</includes>
    <includes id="_i_interface_table_8h" name="IInterfaceTable.h" local="yes" imported="no">IInterfaceTable.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
  </compound>
  <compound kind="file">
    <name>EtherMACBase.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ethernet/</path>
    <filename>_ether_m_a_c_base_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_ethernet_8h" name="Ethernet.h" local="yes" imported="no">Ethernet.h</includes>
    <includes id="_ether_frame__m_8h" name="EtherFrame_m.h" local="yes" imported="no">EtherFrame_m.h</includes>
    <includes id="_interface_entry_8h" name="InterfaceEntry.h" local="yes" imported="no">InterfaceEntry.h</includes>
    <includes id="_tx_notif_details_8h" name="TxNotifDetails.h" local="yes" imported="no">TxNotifDetails.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <class kind="class">EtherMACBase</class>
    <member kind="define">
      <type>#define</type>
      <name>ENDIFG</name>
      <anchorfile>_ether_m_a_c_base_8h.html</anchorfile>
      <anchor>ac45d3cc5822040e35e2937be632832b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENDRECEPTION</name>
      <anchorfile>_ether_m_a_c_base_8h.html</anchorfile>
      <anchor>a9330bc9c8a7ef3d0acef63b2e9573c08</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENDBACKOFF</name>
      <anchorfile>_ether_m_a_c_base_8h.html</anchorfile>
      <anchor>a64b191c4f0a78fe8aa485d15bb8ee30e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENDTRANSMISSION</name>
      <anchorfile>_ether_m_a_c_base_8h.html</anchorfile>
      <anchor>a4bb2ae3fedcd3dacd0f824a7b658cff8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENDJAMMING</name>
      <anchorfile>_ether_m_a_c_base_8h.html</anchorfile>
      <anchor>a4f424177ed127c705b0e598400fd60e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENDPAUSE</name>
      <anchorfile>_ether_m_a_c_base_8h.html</anchorfile>
      <anchor>a8c8095093aff928ef167df7aeca1ec59</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENDAUTOCONFIG</name>
      <anchorfile>_ether_m_a_c_base_8h.html</anchorfile>
      <anchor>a24863fe0bcb7303a1201d982d1debea6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TX_IDLE_STATE</name>
      <anchorfile>_ether_m_a_c_base_8h.html</anchorfile>
      <anchor>a743f3e7b25f8aea548d06e5ae9f574bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WAIT_IFG_STATE</name>
      <anchorfile>_ether_m_a_c_base_8h.html</anchorfile>
      <anchor>ab1ad012473593829a3005e2fd881d987</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TRANSMITTING_STATE</name>
      <anchorfile>_ether_m_a_c_base_8h.html</anchorfile>
      <anchor>a2cee1ac453a7df93ad9e888e99f01773</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAMMING_STATE</name>
      <anchorfile>_ether_m_a_c_base_8h.html</anchorfile>
      <anchor>a6148d5d92429d7c40e7dbc1da199afd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BACKOFF_STATE</name>
      <anchorfile>_ether_m_a_c_base_8h.html</anchorfile>
      <anchor>a6ef9793e5ef80133ad65789aab1e271f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PAUSE_STATE</name>
      <anchorfile>_ether_m_a_c_base_8h.html</anchorfile>
      <anchor>af922d8152d8f868d834d1627fbd90e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RX_IDLE_STATE</name>
      <anchorfile>_ether_m_a_c_base_8h.html</anchorfile>
      <anchor>a172dd8a0691f58fedfadb4a29632fba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RECEIVING_STATE</name>
      <anchorfile>_ether_m_a_c_base_8h.html</anchorfile>
      <anchor>a2aca0dfa94e8e793bf8c576ca1dafae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RX_COLLISION_STATE</name>
      <anchorfile>_ether_m_a_c_base_8h.html</anchorfile>
      <anchor>a5bd43cc4f64aaeb7c20d49fc4e817fdc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ethernet.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/headerserializers/headers/</path>
    <filename>ethernet_8h</filename>
    <class kind="struct">ether_header</class>
    <class kind="struct">ether_addr</class>
    <member kind="define">
      <type>#define</type>
      <name>ETHER_ADDR_LEN</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>abf4fcaacb1ad2010711b7c880ec2ed20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHER_TYPE_LEN</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a6bced6e28d100419b71b35671da0551d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHER_CRC_LEN</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a05b33d6afd13562a40e1a00188351cff</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHER_ALIGN</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>aed60d74f2767f5c6508dd81085a23aaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHER_HDR_LEN</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a4e7484afbe095e65767c43feb3a106cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHER_MIN_LEN</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a0b09f14d44f1b37e96c75b02ca7b58a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHER_MAX_LEN</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>aaebedff0cce73327398dd3139ba50e43</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHER_IS_VALID_LEN</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>af016e02972b9ab6985ba1491201e79c6</anchor>
      <arglist>(foo)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHER_CRC_POLY_LE</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ae7391a2afb5b7111d95e27eb6d4270be</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHER_CRC_POLY_BE</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>af9594ef1be0d289cb9fe422c9f9286ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHER_IS_MULTICAST</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a584715cfae762144e443028a4e638f1c</anchor>
      <arglist>(addr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_8023</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>aa1ad59c82a1678ea5f4e355e7b7ed488</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_PUP</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a17471f2d0d180ef15ed20835686f42bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_PUPAT</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a8ae823bfb75f3a6f8d82878794af99ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_SPRITE</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>aaf064ed783e9a594ee6cd4679085d375</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_NS</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>af8b896efcfca254083401386f9785903</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_NSAT</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a6474f70483b6bb3d80a6b005be1dce47</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_DLOG1</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ab6d41f50780d0d9d2342014a745a0a5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_DLOG2</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a4c94d301a46de75354b4f9d4980a2d67</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_IP</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ae2021b6951d9782a2ba9cb243abdea93</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_X75</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a427df0d69c8efdd8201f642302cf7ad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_NBS</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a1d3122dd6b05d2d419ba2221d45bbc17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_ECMA</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ad1a5879250ee1b07fb6b9983215a5b1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_CHAOS</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a4937b85454f5afd095947efe45d40485</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_X25</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>acb45877a6834d74be6c7e2b20b6671f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_ARP</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a58349316842ce4bdc5ff10568ec5dc31</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_NSCOMPAT</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>adc48e9c228637c46d818586ca1a449dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_FRARP</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a5b5929cb5396be99e37ed6c65dd4abc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_UBDEBUG</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>afa63b1711afd7a234eb5c0203d476810</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_IEEEPUP</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a2fd12ad456cd2cb966ae976e8a08711c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_IEEEPUPAT</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a02037a458904b47b0d4209d61db50f38</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_VINES</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>af834dbcac161d24baf93e931e49f54b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_VINESLOOP</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ab6980aa30382dde8c9ce1e4a6cafd91b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_VINESECHO</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a2529cf6144498210c67ee3dc90e541ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_TRAIL</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a937179dd60d6ff0be6686405ed4ea031</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_NTRAILER</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ae7e8edb1e17458d784bb94bfebf92815</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_DCA</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a4deece2acbfb2f80e7145c0268cb0d9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_VALID</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a342f930ab5db95b907e215905f503248</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_DOGFIGHT</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>af81852db08cc272381fee253abea4807</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_RCL</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a0f89ee82c8b020c530e413724f6c6ba9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_NBPVCD</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a34bdededed5c7caece77682515a8f34d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_NBPSCD</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a5b6c9a0c7d6fb3fef1a5656b85f09cbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_NBPCREQ</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a9451e37cec846209835f6b243f6d566b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_NBPCRSP</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a80af990cf92f71588bd787264c642569</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_NBPCC</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a9b95093e36ead898a54b18add56ee9bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_NBPCLREQ</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a4430395dbf53555e4ea3d2085ddd5ff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_NBPCLRSP</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ab430324f029d605d14cab866b4328c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_NBPDG</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a10e3c0faae8af2f793640ed7e8e76fe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_NBPDGB</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a33d0e0270b443e58fe38e12f65e6ead5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_NBPCLAIM</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>aefa2281fc183972207f98490247a180d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_NBPDLTE</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a286b12241b2a9fa5484cb8c09ee9c8d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_NBPRAS</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a51660cbf1d1695e508b5dafeb901ad2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_NBPRAR</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ad729572056109da147ffc75dc22daf10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_NBPRST</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a16bc46b553c9904eacb904f0d7ef3ad1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_PCS</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ae7a58f060a565a2cf3dcaa49834a9624</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_IMLBLDIAG</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a01163e62bae6df0523dd35c2b7e84c2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_DIDDLE</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a6b6accb1410c5af36d68276a6915b8d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_IMLBL</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a5aa9eb53f1d728986345f321f36d8f6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_SIMNET</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a6e50d97d5aaf08a3b6ded882442c85bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_DECEXPER</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>af569314606b3f81a1481ddf240e32c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_MOPDL</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>aa21251d135a8057aba7ed95744313f80</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_MOPRC</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a770db23e88aa088be7af0c73b262cf9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_DECnet</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a940d5ec8673f3e047fd7a3d008bb2cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_DN</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a706d57ddf9b56f5ba4523884f95a74b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_LAT</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>addb47d19e88092d1ac890d3f15009191</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_DECDIAG</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a088c20795a0afb289c5d4696326cdd2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_DECCUST</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>adf49b136f9572a3f37f74a1dd1b76440</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_SCA</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>afa7c9597486411ae8efe8136cccfcd47</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_AMBER</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a4f8850ca068fdd0cee1e8aa77e47c229</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_DECMUMPS</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ae3d0e1da52d81c7f85456594c5574f8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_TRANSETHER</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ae9828331a4e7d48a7159b556328563f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_RAWFR</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a0acc1b7b85c71d96f9254a29bf2de28c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_UBDL</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a676fce8a73168254734cf687e8828bea</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_UBNIU</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a33e84682912c8807cb3a7e597f35f4c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_UBDIAGLOOP</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>af268f6cea61805f781d826273fab1183</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_UBNMC</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a0754ed929bb0565e50d0b15675c7882a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_UBBST</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a8d0cc256b0e5005a8e1d61c72d2d3a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_OS9</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>aebeebe4137401835de85fd89121ae54f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_OS9NET</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a635b071049e677ab72e6cc0db0f3f39b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_RACAL</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>aea321cd1f69fce6c26d07e51150c82cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_PRIMENTS</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a780470c6a11ca3ebe06eb43031e610c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_CABLETRON</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ab5e7028f3c2d9fc56f5cd98b58bec0f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_CRONUSVLN</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>aa1656f712df311402667fb4c9a2c1e7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_CRONUS</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a46243aade12c25e17ac3bd2785a88153</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_HP</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a9202ad1061ff5f3251c41e6187872503</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_NESTAR</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>aafaed5d57c36b98ce13064e3b2cb0a6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_ATTSTANFORD</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a9c0181e2db8f32742b5560dee3d8ef55</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_EXCELAN</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a9c3e84fa26872e0ba3c575aeeaf6753a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_SG_DIAG</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a29da2c0c90578f6aacbaf105cde0fbd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_SG_NETGAMES</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a9b89797a8b1b766b972eb7cd196f1bf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_SG_RESV</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>aada0fad4179c5ac87168c82a001d7ab4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_SG_BOUNCE</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a04fa5ed05f027d1d934bef6b918f5bcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_APOLLODOMAIN</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a371045b150cdc5c398de9bdd7d70ede2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_TYMSHARE</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a7fa6fe4701e80770e4fb88fbf557df59</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_TIGAN</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a02602a397c6dd4c048e11ff8db83f59d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_REVARP</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a1d8bc382d37844a65bae2006a05046f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_AEONIC</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a3206bcf008574e76e8b8ad672dd1f109</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_IPXNEW</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a8588542751313a37d038130c6f1af2df</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_LANBRIDGE</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a1f82a3745df916398443988aa8b5e82e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_DSMD</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>abe12f188441a9df4f13a09be6712499d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_ARGONAUT</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a613cb3f1787bf00d16c539f4a0238c06</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_VAXELN</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>af8ce386cc376a773150b3da56dc6427c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_DECDNS</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a558bf719e95edffa300bba73e1da8714</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_ENCRYPT</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>aae00ccd4cb54951927663f75b73213f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_DECDTS</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>aa5c55be334d1d4be479f511cf92b4743</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_DECLTM</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a72b8341e6df0d256b37404dce96d8237</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_DECNETBIOS</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a437497bcf7a7fe0c2730f93a2a6a3e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_DECLAST</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a0c713a41234e2deb9c023ae78d16a540</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_PLANNING</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a574287e4087df68eb771aa6dfb4c7d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_DECAM</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>afac4d821816878aa43be5e3eb350782a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_EXPERDATA</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>aafde5906643804e0a231cf516199bc3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_VEXP</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a942b0b84578d73e3b82711a381ad9f35</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_VPROD</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a9765c2ca1a19cdfe619a57e428dd0e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_ES</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a6e57d3cb8ec6e401241f217858ea06b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_LITTLE</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a9e8d06b6095216706eaf80ca1018db59</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_COUNTERPOINT</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a7fba3ec445da7f3a7e4c5f9ed464b182</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_VEECO</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a44a7fea133f2de991b7b56bcdcf28d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_GENDYN</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ae06521f9aa886120eb1ff7007d33eef9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_ATT</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ab1b8eddaa999c9f00cf0bd92c009ce6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_AUTOPHON</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ac76b05063cff5955e684891ddc9c1169</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_COMDESIGN</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a636b706a34544915c994afc038079088</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_COMPUGRAPHIC</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ae8a12abaf60340be6022f774bf54ff04</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_MATRA</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ad7bd0bf8ca64d168580dd218e9b9699f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_DDE</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a8c20b1be4c609e3d4f772736cb2e966f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_MERIT</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a100dc08ac430679cd34630a4ef9553d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_VLTLMAN</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>af5a96452573884ac65ad08517b0cff24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_ATALK</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a1b3ed9773a8bef2701bda5d7b64fce30</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_AT</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a5363e5c55bf76c08ec5ae9dcf9556e7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_APPLETALK</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>acc06d9c1197365870a777b667c3954e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_SPIDER</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a3155758c97ddd79c81f899848c1d301c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_PACER</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>affee3bcdda0f85ef9c79f5eb70ce3891</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_APPLITEK</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a88f3f3f3a8e1f00587a045cf23611bee</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_SNA</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a17b7e8509f49aa054eef37ef5530dc56</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_VARIAN</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a671f1e78fa19456724189c4ecf36fb30</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_RETIX</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>acfaeb2637c71c882db9ac40ad3a38472</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_AARP</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>aa2692ff7ce9c6412385d9465d0d6d152</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_APOLLO</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a2e1f4db6669c3b1ea8cd959cbb45d110</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_VLAN</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a0eee73f1048c0756b951674570977ff9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_BOFL</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a916319a75c66de64e911cc044233aaa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_WELLFLEET</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ad0d9e5bc4a3dd20147ff17e9dcd2a869</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_TALARIS</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ab06f3dbd2014dfc5e276c68b93af7e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_WATERLOO</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a1e18afd4133b3604f474efccc18c80d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_HAYES</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a1dc61dffc227e01b74fe207b593cdb0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_VGLAB</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a55f52b394c35681d2ab5d54f0f1b2b79</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_IPX</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>acd7f031a1b6e69f9b5e74c2b26edd2e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_NOVELL</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>aebc4d5628d09b116500bdc99b2f33ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_MUMPS</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a15783cae211c856f65acabf5c2c6082e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_AMOEBA</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a69ee6933f74e653e8988a1c9559c7d8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_FLIP</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>abb5461150eb82bb59d7bf82ec95f0a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_VURESERVED</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>aa5d0be2d762e8888f2369dcd4865df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_LOGICRAFT</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a18b034d2d95989ddbd02b45a261a299b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_NCD</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ad3dc7ae134191f415b263d710cfcb8d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_ALPHA</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>afdd0f0473780fc05efe3e4928a365ced</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_SNMP</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>abfaffbc6e8454968431a7e0ed5f8cffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_TEC</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a6fea7d9c4ef9c0119103ded6627af943</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_RATIONAL</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a3a3311a3156770a425b7454b6f899883</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_XTP</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ac4f6fa022200c3f5ead7e851749463bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_SGITW</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ae110f31a7ba3ae9a9315cd7927b15c66</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_HIPPI_FP</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a182cc966fedd18333caa0e7bcdc9cc1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_STP</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>aa88279ed8d1c838d55fffea322c6ad0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_MOTOROLA</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a852ac21a89c798df73bdc5972313243b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_NETBEUI</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a62eee7a52fdfe90cde1487c485e4c484</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_ACCTON</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ab2c60128e133fd44baef520e7a822481</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_TALARISMC</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>acd212dc2f21c36c5b518e0edd8daa8cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_KALPANA</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a56fafdb7770c429393d15c4688acffc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_SECTRA</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a8af258cef98dba88cdb6761d78fbb633</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_IPV6</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ac25537090a27d590178d14ab1b63b66b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_DELTACON</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a2da7ba4a6970d710e3e9d8996f46ad22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_ATOMIC</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a354ff55fbf6f2b6d7f0c95e964bc769e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_RDP</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a2f286430704cd2975d6abda132404ab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_MICP</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>abf71d1a66003656638773fb37155faa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_TCPCOMP</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a539d09735c7208575ba521e7cba03a8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_IPAS</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a62f0ee4ae56bba7da6fc3dddd47c5786</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_SECUREDATA</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a63df705f5c9550886488936cf9324aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_FLOWCONTROL</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>aabb3c31256a2e6a2f6933757f1b89d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_PPP</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a93fe2c3557551950bdb8b414e4adaf1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_HITACHI</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a218fd3ce9e2be5d91ea7a0c5b4005a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_MPLS</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a366bec338345160bb4022acfe49b342b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_MPLS_MCAST</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>abfbfe0175363c76e0de5951a0fb66897</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_AXIS</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ad832c7e58cfc42abb6e302e28976dfe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_PPPOEDISC</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ac5c499dc98e7f84ec684d8625d90280c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_PPPOE</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a8fd3933318a8d052c8ae0ed997466380</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_LANPROBE</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ae63f4d63b0b6c3f34e1a46295f7edb8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_PAE</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>af74677d6c783c666778f49103bc63234</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_LOOPBACK</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a9656435139954003bf149ed68fcc4ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_LBACK</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a9c64aeabb2425bf7842780de41e5687a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_XNSSM</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a6cbece70c6ccfc7430d1bafae62fac44</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_TCPSM</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a5b5c0549c36977df1c487a055e874ce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_BCLOOP</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>aa48a7d9aee25c5d8085da29a73d8c58b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_DEBNI</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a697c8f294018c0b56447de95b8f6aafa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_SONIX</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a7635d1d86ae5cefe64a60a7a2611cbc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_VITAL</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>af2feb6e533f106ddb8fa69c1d74882be</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_MAX</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a9e84baede2e8c5c4991e2c7754a903c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_TRAIL</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a937179dd60d6ff0be6686405ed4ea031</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERTYPE_NTRAILER</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ae7e8edb1e17458d784bb94bfebf92815</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERMTU</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>a4baa77b0245fb4398faaecfc9b803649</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERMIN</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>ace763069f0ff4956e8286dc534f47c67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>etherbroadcastaddr</name>
      <anchorfile>ethernet_8h.html</anchorfile>
      <anchor>af772d5e3d83487218b35b60cf21e6e63</anchor>
      <arglist>[ETHER_ADDR_LEN]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ethernet.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ethernet/</path>
    <filename>_ethernet_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MAX_PACKETBURST</name>
      <anchorfile>_ethernet_8h.html</anchorfile>
      <anchor>a746dcbd0375c0181c140f091ee19dfdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GIGABIT_MAX_BURST_BYTES</name>
      <anchorfile>_ethernet_8h.html</anchorfile>
      <anchor>afe56617bc748c0c74c417cdcc1b76505</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_ETHERNET_DATA</name>
      <anchorfile>_ethernet_8h.html</anchorfile>
      <anchor>a63f2d609a430faaddbb3a7a41a2fc3cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_ETHERNET_FRAME</name>
      <anchorfile>_ethernet_8h.html</anchorfile>
      <anchor>a03c1f781ac52d5c4f4659d7dee3129ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_ETHERNET_FRAME</name>
      <anchorfile>_ethernet_8h.html</anchorfile>
      <anchor>ad43a3667e074eb7349900f0f6bd2c61f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GIGABIT_MIN_FRAME_WITH_EXT</name>
      <anchorfile>_ethernet_8h.html</anchorfile>
      <anchor>a3111bb851481ce2404040b2385afe5de</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INTERFRAME_GAP_BITS</name>
      <anchorfile>_ethernet_8h.html</anchorfile>
      <anchor>ac417a97debcbbfc4433c8b8b8c8b8808</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERNET_TXRATE</name>
      <anchorfile>_ethernet_8h.html</anchorfile>
      <anchor>a8f040fd8c5b69fdcae86053f113c03f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FAST_ETHERNET_TXRATE</name>
      <anchorfile>_ethernet_8h.html</anchorfile>
      <anchor>a7c04ae75b210528ec3e4c1e3755e2814</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GIGABIT_ETHERNET_TXRATE</name>
      <anchorfile>_ethernet_8h.html</anchorfile>
      <anchor>aa8978ec728d9d906f37bbc723803f020</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FAST_GIGABIT_ETHERNET_TXRATE</name>
      <anchorfile>_ethernet_8h.html</anchorfile>
      <anchor>a2ae003240543b6630e2f8d90f4cbf300</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SLOT_TIME</name>
      <anchorfile>_ethernet_8h.html</anchorfile>
      <anchor>a429738f114e5407581003d4cbbeaa797</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GIGABIT_SLOT_TIME</name>
      <anchorfile>_ethernet_8h.html</anchorfile>
      <anchor>a175934fe467e7c1e7d7982fc86232e39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_ATTEMPTS</name>
      <anchorfile>_ethernet_8h.html</anchorfile>
      <anchor>a7e1856ac7c6ed757978fc30bb92ace74</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BACKOFF_RANGE_LIMIT</name>
      <anchorfile>_ethernet_8h.html</anchorfile>
      <anchor>a1592d1d1a4a90325054c3a62b56337f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAM_SIGNAL_BYTES</name>
      <anchorfile>_ethernet_8h.html</anchorfile>
      <anchor>a7723123f880ac4868c09146452417300</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PREAMBLE_BYTES</name>
      <anchorfile>_ethernet_8h.html</anchorfile>
      <anchor>a7d9c5baa3aead7d06ae791833bde0d88</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SFD_BYTES</name>
      <anchorfile>_ethernet_8h.html</anchorfile>
      <anchor>ad9ee8ec9d34ff29becf20068ee649edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PAUSE_BITTIME</name>
      <anchorfile>_ethernet_8h.html</anchorfile>
      <anchor>a404417dd041bbd8868cf8efa3a6bc58e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHER_MAC_FRAME_BYTES</name>
      <anchorfile>_ethernet_8h.html</anchorfile>
      <anchor>a3c5d9c2db970ea9ce868348ad6c9e9f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHER_LLC_HEADER_LENGTH</name>
      <anchorfile>_ethernet_8h.html</anchorfile>
      <anchor>aa4ced7a483afb3b8d25abafd54aef699</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHER_SNAP_HEADER_LENGTH</name>
      <anchorfile>_ethernet_8h.html</anchorfile>
      <anchor>a7d0bbbbb8c34dab1e7364824e1d92f27</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHER_PAUSE_COMMAND_BYTES</name>
      <anchorfile>_ethernet_8h.html</anchorfile>
      <anchor>aff1b4580fde9bf042764fdf094dcaf82</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ExtFrame_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ext/</path>
    <filename>_ext_frame__m_8h</filename>
    <class kind="class">ExtFrame</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_ext_frame__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ext_frame__m_8h.html</anchorfile>
      <anchor>aab1978863fc37c2ff14b3d5c2fae6799</anchor>
      <arglist>(cCommBuffer *b, ExtFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ext_frame__m_8h.html</anchorfile>
      <anchor>aa52956d9bf16661a8ec771383f50b0b5</anchor>
      <arglist>(cCommBuffer *b, ExtFrame &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ExtInterface.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ext/</path>
    <filename>_ext_interface_8cc</filename>
    <includes id="_interface_table_8h" name="InterfaceTable.h" local="yes" imported="no">InterfaceTable.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_ext_interface_8h" name="ExtInterface.h" local="yes" imported="no">ExtInterface.h</includes>
    <includes id="_i_p_serializer_8h" name="IPSerializer.h" local="yes" imported="no">IPSerializer.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>WANT_WINSOCK2</name>
      <anchorfile>_ext_interface_8cc.html</anchorfile>
      <anchor>a105264025fbdfc308077979bc21a5474</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_ext_interface_8cc.html</anchorfile>
      <anchor>a4bc31a5e0460405c573d4d79f31cfc02</anchor>
      <arglist>(ExtInterface)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ExtInterface.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ext/</path>
    <filename>_ext_interface_8h</filename>
    <includes id="_ext_frame__m_8h" name="ExtFrame_m.h" local="yes" imported="no">ExtFrame_m.h</includes>
    <includes id="c_socket_r_t_scheduler_8h" name="cSocketRTScheduler.h" local="yes" imported="no">cSocketRTScheduler.h</includes>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
    <class kind="class">ExtInterface</class>
    <member kind="define">
      <type>#define</type>
      <name>MAX_MTU_SIZE</name>
      <anchorfile>_ext_interface_8h.html</anchorfile>
      <anchor>ab799ae981fc187ad5f3bcf175fce3b35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FailureManager.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/extras/</path>
    <filename>_failure_manager_8cc</filename>
    <includes id="_failure_manager_8h" name="FailureManager.h" local="yes" imported="no">FailureManager.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_failure_manager_8cc.html</anchorfile>
      <anchor>a282f2bebf78d1f3b1ff1398b953d4de4</anchor>
      <arglist>(FailureManager)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FailureManager.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/extras/</path>
    <filename>_failure_manager_8h</filename>
    <includes id="_i_scriptable_8h" name="IScriptable.h" local="yes" imported="no">IScriptable.h</includes>
    <class kind="class">FailureManager</class>
  </compound>
  <compound kind="file">
    <name>FlatNetworkConfigurator.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/autorouting/</path>
    <filename>_flat_network_configurator_8cc</filename>
    <includes id="_i_routing_table_8h" name="IRoutingTable.h" local="yes" imported="no">IRoutingTable.h</includes>
    <includes id="_i_interface_table_8h" name="IInterfaceTable.h" local="yes" imported="no">IInterfaceTable.h</includes>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <includes id="_flat_network_configurator_8h" name="FlatNetworkConfigurator.h" local="yes" imported="no">FlatNetworkConfigurator.h</includes>
    <includes id="_interface_entry_8h" name="InterfaceEntry.h" local="yes" imported="no">InterfaceEntry.h</includes>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_flat_network_configurator_8cc.html</anchorfile>
      <anchor>a0ff4616a3b112b59ced7a427309b9abb</anchor>
      <arglist>(FlatNetworkConfigurator)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FlatNetworkConfigurator.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/autorouting/</path>
    <filename>_flat_network_configurator_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <class kind="class">FlatNetworkConfigurator</class>
    <class kind="struct">FlatNetworkConfigurator::NodeInfo</class>
  </compound>
  <compound kind="file">
    <name>FlatNetworkConfigurator6.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/autorouting/</path>
    <filename>_flat_network_configurator6_8cc</filename>
    <includes id="_flat_network_configurator6_8h" name="FlatNetworkConfigurator6.h" local="yes" imported="no">FlatNetworkConfigurator6.h</includes>
    <includes id="_i_interface_table_8h" name="IInterfaceTable.h" local="yes" imported="no">IInterfaceTable.h</includes>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <includes id="_i_pv6_interface_data_8h" name="IPv6InterfaceData.h" local="yes" imported="no">IPv6InterfaceData.h</includes>
    <includes id="_routing_table6_8h" name="RoutingTable6.h" local="yes" imported="no">RoutingTable6.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_flat_network_configurator6_8cc.html</anchorfile>
      <anchor>a868a0d1b4a87636cde205a4ee428905c</anchor>
      <arglist>(FlatNetworkConfigurator6)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FlatNetworkConfigurator6.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/autorouting/</path>
    <filename>_flat_network_configurator6_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">FlatNetworkConfigurator6</class>
  </compound>
  <compound kind="file">
    <name>FSMA.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_f_s_m_a_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>FSMA_Switch</name>
      <anchorfile>_f_s_m_a_8h.html</anchorfile>
      <anchor>a585618c58d438c04d23005cf88a537b7</anchor>
      <arglist>(fsm)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSMA_Print</name>
      <anchorfile>_f_s_m_a_8h.html</anchorfile>
      <anchor>acfeaa0fe17b1a4782e7dce7be8a8f823</anchor>
      <arglist>(exiting)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSMA_State</name>
      <anchorfile>_f_s_m_a_8h.html</anchorfile>
      <anchor>a8291ad6e80866efe80d61d383e50ef3c</anchor>
      <arglist>(s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSMA_Event_Transition</name>
      <anchorfile>_f_s_m_a_8h.html</anchorfile>
      <anchor>ac70de60b30e30958d33808d2aceacc09</anchor>
      <arglist>(transition, condition, target, action)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSMA_No_Event_Transition</name>
      <anchorfile>_f_s_m_a_8h.html</anchorfile>
      <anchor>abd229cc2e176b0e81494a93c14f18e8f</anchor>
      <arglist>(transition, condition, target, action)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSMA_Transition</name>
      <anchorfile>_f_s_m_a_8h.html</anchorfile>
      <anchor>aaa2d285159e79a0cb1665928b6261a6b</anchor>
      <arglist>(transition, condition, target, action)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSMA_Enter</name>
      <anchorfile>_f_s_m_a_8h.html</anchorfile>
      <anchor>a12c2433a4260c7583d61162fa951bca7</anchor>
      <arglist>(action)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FWMath.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/</path>
    <filename>_f_w_math_8h</filename>
    <class kind="class">FWMath</class>
    <member kind="define">
      <type>#define</type>
      <name>M_PI</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>ae71449b1cc6e6250b91f539153a7a0d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPSILON</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>a002b2f4894492820fe708b1b7e7c5e70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GenericAppMsg_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/tcpapp/</path>
    <filename>_generic_app_msg__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">GenericAppMsg</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_generic_app_msg__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_generic_app_msg__m_8h.html</anchorfile>
      <anchor>ab8959490fbdee27f004f244510b619b0</anchor>
      <arglist>(cCommBuffer *b, GenericAppMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_generic_app_msg__m_8h.html</anchorfile>
      <anchor>aed6e3d1530f966156a430e7819239b66</anchor>
      <arglist>(cCommBuffer *b, GenericAppMsg &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GenericRadio.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/radio/</path>
    <filename>_generic_radio_8cc</filename>
    <includes id="_generic_radio_8h" name="GenericRadio.h" local="yes" imported="no">GenericRadio.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_generic_radio_8cc.html</anchorfile>
      <anchor>a38a1c25cbd225f2a1268a8f854cebf10</anchor>
      <arglist>(GenericRadio)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GenericRadio.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/radio/</path>
    <filename>_generic_radio_8h</filename>
    <includes id="_abstract_radio_8h" name="AbstractRadio.h" local="yes" imported="no">AbstractRadio.h</includes>
    <class kind="class">GenericRadio</class>
  </compound>
  <compound kind="file">
    <name>GenericRadioModel.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/radio/</path>
    <filename>_generic_radio_model_8cc</filename>
    <includes id="_generic_radio_model_8h" name="GenericRadioModel.h" local="yes" imported="no">GenericRadioModel.h</includes>
    <includes id="_modulation_8h" name="Modulation.h" local="yes" imported="no">Modulation.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>_generic_radio_model_8cc.html</anchorfile>
      <anchor>aafbf028e4a24abfd3b2db2da6855908b</anchor>
      <arglist>(GenericRadioModel)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GenericRadioModel.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/radio/</path>
    <filename>_generic_radio_model_8h</filename>
    <includes id="_i_radio_model_8h" name="IRadioModel.h" local="yes" imported="no">IRadioModel.h</includes>
    <includes id="_i_modulation_8h" name="IModulation.h" local="yes" imported="no">IModulation.h</includes>
    <class kind="class">GenericRadioModel</class>
  </compound>
  <compound kind="file">
    <name>GilbertElliotSnr.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mf80211/phyLayer/snrEval/</path>
    <filename>_gilbert_elliot_snr_8cc</filename>
    <includes id="_gilbert_elliot_snr_8h" name="GilbertElliotSnr.h" local="yes" imported="no">GilbertElliotSnr.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_gilbert_elliot_snr_8cc.html</anchorfile>
      <anchor>a4c0633540f68d289026cb858513acfe3</anchor>
      <arglist>(GilbertElliotSnr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GilbertElliotSnr.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mf80211/phyLayer/snrEval/</path>
    <filename>_gilbert_elliot_snr_8h</filename>
    <includes id="_snr_eval_8h" name="SnrEval.h" local="yes" imported="no">SnrEval.h</includes>
    <class kind="class">GilbertElliotSnr</class>
  </compound>
  <compound kind="file">
    <name>HelloHandler.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/messagehandler/</path>
    <filename>_hello_handler_8cc</filename>
    <includes id="_hello_handler_8h" name="HelloHandler.h" local="yes" imported="no">HelloHandler.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_o_s_p_f_neighbor_8h" name="OSPFNeighbor.h" local="yes" imported="no">OSPFNeighbor.h</includes>
  </compound>
  <compound kind="file">
    <name>HelloHandler.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/messagehandler/</path>
    <filename>_hello_handler_8h</filename>
    <includes id="_i_message_handler_8h" name="IMessageHandler.h" local="yes" imported="no">IMessageHandler.h</includes>
    <class kind="class">OSPF::HelloHandler</class>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>IClassifier.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/mpls/</path>
    <filename>_i_classifier_8h</filename>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
    <includes id="_l_i_b_table_8h" name="LIBTable.h" local="yes" imported="no">LIBTable.h</includes>
    <class kind="class">IClassifier</class>
  </compound>
  <compound kind="file">
    <name>ICMP.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv4/</path>
    <filename>_i_c_m_p_8cc</filename>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_c_m_p_8h" name="ICMP.h" local="yes" imported="no">ICMP.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_i_c_m_p_8cc.html</anchorfile>
      <anchor>ace7d0c5d98b7d8106f0bb853f96ab5c8</anchor>
      <arglist>(ICMP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ICMP.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv4/</path>
    <filename>_i_c_m_p_8h</filename>
    <includes id="_routing_table_access_8h" name="RoutingTableAccess.h" local="yes" imported="no">RoutingTableAccess.h</includes>
    <includes id="_i_c_m_p_message_8h" name="ICMPMessage.h" local="yes" imported="no">ICMPMessage.h</includes>
    <class kind="class">ICMP</class>
  </compound>
  <compound kind="file">
    <name>ICMPAccess.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv4/</path>
    <filename>_i_c_m_p_access_8h</filename>
    <includes id="_module_access_8h" name="ModuleAccess.h" local="yes" imported="no">ModuleAccess.h</includes>
    <includes id="_i_c_m_p_8h" name="ICMP.h" local="yes" imported="no">ICMP.h</includes>
    <class kind="class">ICMPAccess</class>
  </compound>
  <compound kind="file">
    <name>ICMPMessage.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv4/</path>
    <filename>_i_c_m_p_message_8h</filename>
    <includes id="_i_c_m_p_message__m_8h" name="ICMPMessage_m.h" local="yes" imported="no">ICMPMessage_m.h</includes>
  </compound>
  <compound kind="file">
    <name>ICMPMessage_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv4/</path>
    <filename>_i_c_m_p_message__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">ICMPMessage</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>ICMPCode</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>ab8a57059e8c320489b5a3cc7d18ccb8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ICMPDestinationUnreachableCodes</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>afbe2051fc16d270d8016371533b8d632</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_NETWORK_UNREACHABLE</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>afbe2051fc16d270d8016371533b8d632aa716f5d20620f9cfcc9fe02ffd85c342</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_HOST_UNREACHABLE</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>afbe2051fc16d270d8016371533b8d632af4ca8daec0c4009ad4644c32c8968389</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_PROTOCOL_UNREACHABLE</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>afbe2051fc16d270d8016371533b8d632a89cc4e16667c571746f15cbc4dc8f1d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_PORT_UNREACHABLE</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>afbe2051fc16d270d8016371533b8d632af99b57d67aef38527f238049ed756ea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_FRAGMENTATION_NEEDED</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>afbe2051fc16d270d8016371533b8d632a6c7b421fc93e498512fcb9f6d66ee6b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_SOURCE_ROUTE_FAILED</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>afbe2051fc16d270d8016371533b8d632a209d5133b78e5efe511e43ff0ea6ab28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_DESTINATION_NETWORK_UNKNOWN</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>afbe2051fc16d270d8016371533b8d632a99940c4119d03f691fd8d675f9696a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_DESTINATION_HOST_UNKNOWN</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>afbe2051fc16d270d8016371533b8d632ae50ff7b74c50b4a1370022ce4273fea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_SOURCE_HOST_ISOLATED</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>afbe2051fc16d270d8016371533b8d632a6945d1a0adfec5e76ead0e516f537fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_NETWORK_PROHIBITED</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>afbe2051fc16d270d8016371533b8d632a167b533eb46589b33449542571a0d2b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_HOST_PROHIBITED</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>afbe2051fc16d270d8016371533b8d632a2f1f8c2717e0c93ebd5e90d419a183f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_NETWORK_UNREACHABLE_FOR_TYPE_OF_SERVICE</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>afbe2051fc16d270d8016371533b8d632af8668cc0785a2853cc56293c7da2b45e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_HOST_UNREACHABLE_FOR_TYPE_OF_SERVICE</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>afbe2051fc16d270d8016371533b8d632ab65a0d981ac2e14b01df8a53bb079322</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_COMMUNICATION_PROHIBITED</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>afbe2051fc16d270d8016371533b8d632a1db93193b42304ef486e98a20ba0d207</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_HOST_PRECEDENCE_VIOLATION</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>afbe2051fc16d270d8016371533b8d632ab79f6b8a20593c042a34102e67d7bc18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_PRECEDENCE_CUTOFF_IN_EFFECT</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>afbe2051fc16d270d8016371533b8d632affe50ad4ea888ea5561cd4a88cbcd0e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_AODV_QUEUE_FULL</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>afbe2051fc16d270d8016371533b8d632a302b712f91cddc6745f57e28e8d76476</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ICMPType</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>a58484b3a48e17f8f130c3c0f890d21b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DESTINATION_UNREACHABLE</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>a58484b3a48e17f8f130c3c0f890d21b6a3fdf41118f21173da27f0001f4c37535</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_REDIRECT</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>a58484b3a48e17f8f130c3c0f890d21b6a5956db2beb3fbfef02b0b50fed21ec0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_TIME_EXCEEDED</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>a58484b3a48e17f8f130c3c0f890d21b6a828813505e7f882556a4400c9edae078</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_PARAMETER_PROBLEM</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>a58484b3a48e17f8f130c3c0f890d21b6a13ad83d4a67286f80bde1708bcf9ff5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_ECHO_REQUEST</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>a58484b3a48e17f8f130c3c0f890d21b6a65c0b673722ac5aa7f38ee101a0a2e0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_ECHO_REPLY</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>a58484b3a48e17f8f130c3c0f890d21b6a040ff029e5746bdc1b9fd08db66b3b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_TIMESTAMP_REQUEST</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>a58484b3a48e17f8f130c3c0f890d21b6a75d1135ac7040855a486048eb7182b0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_TIMESTAMP_REPLY</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>a58484b3a48e17f8f130c3c0f890d21b6ad882d3d3fdbb9b12371ba3d066bdc6a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>a6a0c45e4e9234f66267a970be7fdc557</anchor>
      <arglist>(cCommBuffer *b, ICMPMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_c_m_p_message__m_8h.html</anchorfile>
      <anchor>a9962074d18d044709e13fdd585d5e23a</anchor>
      <arglist>(cCommBuffer *b, ICMPMessage &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ICMPSerializer.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/headerserializers/</path>
    <filename>_i_c_m_p_serializer_8cc</filename>
    <includes id="defs_8h" name="defs.h" local="yes" imported="no">headers/defs.h</includes>
    <includes id="bsdint_8h" name="bsdint.h" local="yes" imported="no">headers/bsdint.h</includes>
    <includes id="in_8h" name="in.h" local="yes" imported="no">headers/in.h</includes>
    <includes id="in__systm_8h" name="in_systm.h" local="yes" imported="no">headers/in_systm.h</includes>
    <includes id="ip_8h" name="ip.h" local="yes" imported="no">headers/ip.h</includes>
    <includes id="ip__icmp_8h" name="ip_icmp.h" local="yes" imported="no">headers/ip_icmp.h</includes>
    <includes id="_i_p_serializer_8h" name="IPSerializer.h" local="yes" imported="no">IPSerializer.h</includes>
    <includes id="_i_c_m_p_serializer_8h" name="ICMPSerializer.h" local="yes" imported="no">ICMPSerializer.h</includes>
    <includes id="_ping_payload__m_8h" name="PingPayload_m.h" local="yes" imported="no">PingPayload_m.h</includes>
    <includes id="_t_c_p_i_pchecksum_8h" name="TCPIPchecksum.h" local="yes" imported="no">TCPIPchecksum.h</includes>
    <class kind="struct">INETFw::in_addr</class>
    <class kind="struct">INETFw::ip</class>
    <class kind="struct">INETFw::ip_timestamp</class>
    <class kind="union">INETFw::ip_timestamp::ipt_timestamp</class>
    <class kind="struct">INETFw::ip_timestamp::ipt_timestamp::ipt_ta</class>
    <class kind="struct">INETFw::icmp_ra_addr</class>
    <class kind="struct">INETFw::icmp</class>
    <namespace>INETFw</namespace>
    <member kind="typedef">
      <type>uint8_t</type>
      <name>u_int8_t</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>a23812f1766cbbe0c6937e1f6a0bd1e44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint16_t</type>
      <name>u_int16_t</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>a6072db88dd85bd17edbe11fd6b549fc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>u_int32_t</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>adf1477229faac921e666df15f0b2393e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint64_t</type>
      <name>u_int64_t</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>a38563a06a87032668abf8d1f38e432b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>uchar</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>a9b4dc1e44f295beef00449594caada09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>ushort</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>ab83dab3a4f17cb2c315b96667bb2ac6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>uint</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>a7a7a977b39f779a2541f01094113f2e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>ulong</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>a91375c46de81adeef975dfba55a7ac6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>u_char</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>addded7fc9139f96ecde2be7640fd2168</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>u_short</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>aa670e1c87fd1f37e0370245c3660e2ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>u_int</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>a43e2f06570b9dd04cf51b8babde74a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>u_long</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>a76239570618a6d9fa72bffcab9357df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>u_int32_t</type>
      <name>in_addr_t</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>a779e0264fd3f7f10d2b38ecefcfeaaf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>u_int16_t</type>
      <name>n_short</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>a01865de570dce6ede2a3d9de920259fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>u_int32_t</type>
      <name>n_long</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>ab0ee9def2a61115a60290d8c8da871b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>u_int32_t</type>
      <name>n_time</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>a3a80e9084be58a6137a1b2963c564655</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ICMPSerializer.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/headerserializers/</path>
    <filename>_i_c_m_p_serializer_8h</filename>
    <includes id="_i_c_m_p_message__m_8h" name="ICMPMessage_m.h" local="yes" imported="no">ICMPMessage_m.h</includes>
    <class kind="class">ICMPSerializer</class>
  </compound>
  <compound kind="file">
    <name>ICMPv6.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/icmpv6/</path>
    <filename>_i_c_m_pv6_8cc</filename>
    <includes id="_i_c_m_pv6_8h" name="ICMPv6.h" local="yes" imported="no">ICMPv6.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_i_c_m_pv6_8cc.html</anchorfile>
      <anchor>a992ac4dae2b6fd84dd4a84277ff74c94</anchor>
      <arglist>(ICMPv6)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ICMPv6.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/icmpv6/</path>
    <filename>_i_c_m_pv6_8h</filename>
    <includes id="_routing_table6_access_8h" name="RoutingTable6Access.h" local="yes" imported="no">RoutingTable6Access.h</includes>
    <includes id="_i_pv6_datagram_8h" name="IPv6Datagram.h" local="yes" imported="no">IPv6Datagram.h</includes>
    <includes id="_i_c_m_pv6_message__m_8h" name="ICMPv6Message_m.h" local="yes" imported="no">ICMPv6Message_m.h</includes>
    <includes id="_i_pv6_control_info_8h" name="IPv6ControlInfo.h" local="yes" imported="no">IPv6ControlInfo.h</includes>
    <class kind="class">ICMPv6</class>
  </compound>
  <compound kind="file">
    <name>ICMPv6Access.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/icmpv6/</path>
    <filename>_i_c_m_pv6_access_8h</filename>
    <includes id="_module_access_8h" name="ModuleAccess.h" local="yes" imported="no">ModuleAccess.h</includes>
    <includes id="_i_c_m_pv6_8h" name="ICMPv6.h" local="yes" imported="no">ICMPv6.h</includes>
    <class kind="class">ICMPv6Access</class>
  </compound>
  <compound kind="file">
    <name>ICMPv6Message_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/icmpv6/</path>
    <filename>_i_c_m_pv6_message__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">ICMPv6Message</class>
    <class kind="class">ICMPv6DestUnreachableMsg</class>
    <class kind="class">ICMPv6PacketTooBigMsg</class>
    <class kind="class">ICMPv6TimeExceededMsg</class>
    <class kind="class">ICMPv6ParamProblemMsg</class>
    <class kind="class">ICMPv6EchoRequestMsg</class>
    <class kind="class">ICMPv6EchoReplyMsg</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMPv6_HEADER_BYTES</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>ab4939765bddb7ea5907f03cff4b031a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ICMPv6Type</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a007402fd73fa0142d3b888578b1280f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_UNSPECIFIED</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a007402fd73fa0142d3b888578b1280f8acff0e4569f9a3b509ad1e3e6e0938f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_DESTINATION_UNREACHABLE</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a007402fd73fa0142d3b888578b1280f8a41a9a5f4838bc4483b77b0fdcd13f72b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_PACKET_TOO_BIG</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a007402fd73fa0142d3b888578b1280f8a9fd6c04d078837b701add65951544230</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_TIME_EXCEEDED</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a007402fd73fa0142d3b888578b1280f8aad2a907b4913018dba811497389c011d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_PARAMETER_PROBLEM</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a007402fd73fa0142d3b888578b1280f8a4f3281972041ca8e0c57bc4378b174a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_ECHO_REQUEST</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a007402fd73fa0142d3b888578b1280f8a741607e7d95c4075a063b6c94da961b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_ECHO_REPLY</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a007402fd73fa0142d3b888578b1280f8a501210ae1007b9de971da8ef2b9c0712</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_MLD_QUERY</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a007402fd73fa0142d3b888578b1280f8a2954fcb9ed63f94b0aed4733479c72ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_MLD_REPORT</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a007402fd73fa0142d3b888578b1280f8a2024cc2ee2186cd3c4c0027a3d9a331a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_MLD_DONE</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a007402fd73fa0142d3b888578b1280f8a8f941d78480d0ab59883eb5a1bc2c17f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_ROUTER_SOL</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a007402fd73fa0142d3b888578b1280f8af937f0d524ed38f43ca7e122fe415294</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_ROUTER_AD</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a007402fd73fa0142d3b888578b1280f8a174c9cf27d2d2203dad02feefb9b0281</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_NEIGHBOUR_SOL</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a007402fd73fa0142d3b888578b1280f8affcf80b9ec52fe2943c51544b9a3f5ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_NEIGHBOUR_AD</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a007402fd73fa0142d3b888578b1280f8ac69f967e5e2ab02173535b75ebbfbfc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_REDIRECT</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a007402fd73fa0142d3b888578b1280f8ac60a8328fb5c35a24712bcb9476f0203</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_MLDv2_REPORT</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a007402fd73fa0142d3b888578b1280f8a05c0d090a395edf515e6154a7e2f492b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ICMPv6DEST_UN</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a0de5d721e9e426e7acecf6830de1331f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_ROUTE_TO_DEST</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a0de5d721e9e426e7acecf6830de1331fab458cf17d1a4b7018719211a9ed053fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMM_WITH_DEST_PROHIBITED</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a0de5d721e9e426e7acecf6830de1331fa4439f14133442c7994b631c73c40677f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADDRESS_UNREACHABLE</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a0de5d721e9e426e7acecf6830de1331fa91cfe5d64331066d0fe0df66b9fa9442</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PORT_UNREACHABLE</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a0de5d721e9e426e7acecf6830de1331fab2b3f40a670851f27dce16f11123f05c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ICMPv6_TIME_EX</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a6deb6348a867ae2a8ca07c0f6a5b61d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ND_HOP_LIMIT_EXCEEDED</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a6deb6348a867ae2a8ca07c0f6a5b61d3a1c022400868ff16c7e320fc9e12f10eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ND_FRAGMENT_REASSEMBLY_TIME</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a6deb6348a867ae2a8ca07c0f6a5b61d3abf7943baedaafdec22414448e23f638a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ICMPv6_PARAMETER_PROB</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>aa95bab4ecede743964c3b0b40e4da7f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ERROREOUS_HDR_FIELD</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>aa95bab4ecede743964c3b0b40e4da7f5aab8378a867f86c700f80ea2492eb1d36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNRECOGNIZED_NEXT_HDR_TYPE</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>aa95bab4ecede743964c3b0b40e4da7f5a2196ae94901b54ad403c89bddb165b29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNRECOGNIZED_IPV6_OPTION</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>aa95bab4ecede743964c3b0b40e4da7f5a2f64b63d08b16e6525ef8de0fba97023</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a88353f2f36367e314fa9bfff5bb4a5fe</anchor>
      <arglist>(cCommBuffer *b, ICMPv6Message &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>aaaca9343103778bba46e27ba9fbc5b6b</anchor>
      <arglist>(cCommBuffer *b, ICMPv6Message &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>ab159ea6ca0534629f982436557a4dda4</anchor>
      <arglist>(cCommBuffer *b, ICMPv6DestUnreachableMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>ac7ba1c2d71a5a64b8e22b556268cb42e</anchor>
      <arglist>(cCommBuffer *b, ICMPv6DestUnreachableMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a30c828265c63c00db832253f561a7e1b</anchor>
      <arglist>(cCommBuffer *b, ICMPv6PacketTooBigMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>aee3c2b777853a0fe06fa29cf2698bed7</anchor>
      <arglist>(cCommBuffer *b, ICMPv6PacketTooBigMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>ac6a180b2ca0a447dbd1e5ed8f8c35ab9</anchor>
      <arglist>(cCommBuffer *b, ICMPv6TimeExceededMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>af778ab568f0af8729af1af10f3c2f9da</anchor>
      <arglist>(cCommBuffer *b, ICMPv6TimeExceededMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>af2a30e93735332ae19c36c1c80ea2316</anchor>
      <arglist>(cCommBuffer *b, ICMPv6ParamProblemMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a4931602b90c484e49ce1f1d18eab4533</anchor>
      <arglist>(cCommBuffer *b, ICMPv6ParamProblemMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>a1d1abb6c59bd6244031149e5ba2f7bd2</anchor>
      <arglist>(cCommBuffer *b, ICMPv6EchoRequestMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>ae21d3cddd84cf2cbb58e254260bb7a1d</anchor>
      <arglist>(cCommBuffer *b, ICMPv6EchoRequestMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>ad456290ee58c378ada3f0c8dd9328a41</anchor>
      <arglist>(cCommBuffer *b, ICMPv6EchoReplyMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_c_m_pv6_message__m_8h.html</anchorfile>
      <anchor>aecfc66cfd90d60625d002d33e74bbb2e</anchor>
      <arglist>(cCommBuffer *b, ICMPv6EchoReplyMsg &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211AgentSTA.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ieee80211/mgmt/</path>
    <filename>_ieee80211_agent_s_t_a_8cc</filename>
    <includes id="_ieee80211_agent_s_t_a_8h" name="Ieee80211AgentSTA.h" local="yes" imported="no">Ieee80211AgentSTA.h</includes>
    <includes id="_ieee80211_primitives__m_8h" name="Ieee80211Primitives_m.h" local="yes" imported="no">Ieee80211Primitives_m.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MK_STARTUP</name>
      <anchorfile>_ieee80211_agent_s_t_a_8cc.html</anchorfile>
      <anchor>af5ae77821f118f5709ed5e3487d38119</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_ieee80211_agent_s_t_a_8cc.html</anchorfile>
      <anchor>ac83024199c0996ce874bc19d5b063c9c</anchor>
      <arglist>(Ieee80211AgentSTA)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211AgentSTA.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ieee80211/mgmt/</path>
    <filename>_ieee80211_agent_s_t_a_8h</filename>
    <includes id="_ieee80211_primitives__m_8h" name="Ieee80211Primitives_m.h" local="yes" imported="no">Ieee80211Primitives_m.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <class kind="class">Ieee80211AgentSTA</class>
  </compound>
  <compound kind="file">
    <name>Ieee80211Consts.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ieee80211/mac/</path>
    <filename>_ieee80211_consts_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>BITERROR</name>
      <anchorfile>_ieee80211_consts_8h.html</anchorfile>
      <anchor>adc91194d5fc156e1d3b796361b38a54d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COLLISION</name>
      <anchorfile>_ieee80211_consts_8h.html</anchorfile>
      <anchor>aafd826a123a41fd03a9c88842387a821</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>LENGTH_RTS</name>
      <anchorfile>_ieee80211_consts_8h.html</anchorfile>
      <anchor>a994032d4c974294f5a24e0e3160d90f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>LENGTH_CTS</name>
      <anchorfile>_ieee80211_consts_8h.html</anchorfile>
      <anchor>a615c2db16153273956d34e0a7b4a46cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>LENGTH_ACK</name>
      <anchorfile>_ieee80211_consts_8h.html</anchorfile>
      <anchor>a91dfe4eeae95a6cf191fe0cfddeac182</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const_simtime_t</type>
      <name>ST</name>
      <anchorfile>_ieee80211_consts_8h.html</anchorfile>
      <anchor>ac168f3508b776571f17ccfaba704dd2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const_simtime_t</type>
      <name>SIFS</name>
      <anchorfile>_ieee80211_consts_8h.html</anchorfile>
      <anchor>a302795c4c8b76861bfc0ca2ec2c7d171</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const_simtime_t</type>
      <name>DIFS</name>
      <anchorfile>_ieee80211_consts_8h.html</anchorfile>
      <anchor>a48db305f0a645cc92737c0384b248cde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const_simtime_t</type>
      <name>MAX_PROPAGATION_DELAY</name>
      <anchorfile>_ieee80211_consts_8h.html</anchorfile>
      <anchor>a326bc90ca8d16cf60d60f761b6494a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>RETRY_LIMIT</name>
      <anchorfile>_ieee80211_consts_8h.html</anchorfile>
      <anchor>ad862aa3dc4895082a85ebc53f5bec08e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>CW_MIN</name>
      <anchorfile>_ieee80211_consts_8h.html</anchorfile>
      <anchor>a104d9aa9c5a73eeecc9799c60b238289</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>CW_MAX</name>
      <anchorfile>_ieee80211_consts_8h.html</anchorfile>
      <anchor>a785c5f49538e2a36c5d3b31253740014</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PHY_HEADER_LENGTH</name>
      <anchorfile>_ieee80211_consts_8h.html</anchorfile>
      <anchor>a0ecba1599d2ee7a3f33cf1970abdb90a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>HEADER_WITHOUT_PREAMBLE</name>
      <anchorfile>_ieee80211_consts_8h.html</anchorfile>
      <anchor>a28c69472ed4119dd2d98ca00d7f11ae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>BITRATE_HEADER</name>
      <anchorfile>_ieee80211_consts_8h.html</anchorfile>
      <anchor>a0454abde1a622bc79c2528d728e466ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>BANDWIDTH</name>
      <anchorfile>_ieee80211_consts_8h.html</anchorfile>
      <anchor>a007aaecac439a0b64fa29eef0da1d9b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211Frame_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ieee80211/mac/</path>
    <filename>_ieee80211_frame__m_8h</filename>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <class kind="class">Ieee80211Frame</class>
    <class kind="class">Ieee80211OneAddressFrame</class>
    <class kind="class">Ieee80211ACKFrame</class>
    <class kind="class">Ieee80211TwoAddressFrame</class>
    <class kind="class">Ieee80211RTSFrame</class>
    <class kind="class">Ieee80211CTSFrame</class>
    <class kind="class">Ieee80211DataOrMgmtFrame</class>
    <class kind="class">Ieee80211DataFrame</class>
    <class kind="class">Ieee80211ManagementFrame</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Ieee80211FrameType</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a81c1fb7c4ee711ca8f669578c7422e2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_ASSOCIATIONREQUEST</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a81c1fb7c4ee711ca8f669578c7422e2aa449a85b5a9fc50b00769dc404b63a65b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_ASSOCIATIONRESPONSE</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a81c1fb7c4ee711ca8f669578c7422e2aad17f14450e52ebab2235290078f037ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_REASSOCIATIONREQUEST</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a81c1fb7c4ee711ca8f669578c7422e2aa0a1dc23066e4af4d4c8b2bb3c30f12c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_REASSOCIATIONRESPONSE</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a81c1fb7c4ee711ca8f669578c7422e2aa4bf538b187cdde6392baa2ea6a80d7a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_PROBEREQUEST</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a81c1fb7c4ee711ca8f669578c7422e2aa2491eb9bc831aa3ad7d2574c52a6805c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_PROBERESPONSE</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a81c1fb7c4ee711ca8f669578c7422e2aa0924c5055b10c707eac7b58867511ccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_BEACON</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a81c1fb7c4ee711ca8f669578c7422e2aad034436c9556d89c61d5a0187cc0888f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_ATIM</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a81c1fb7c4ee711ca8f669578c7422e2aad8198b02dc4d9de7396ba4eaccabf2fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_DISASSOCIATION</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a81c1fb7c4ee711ca8f669578c7422e2aae45a266d05e46a4917dfb48c6ce2c357</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_AUTHENTICATION</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a81c1fb7c4ee711ca8f669578c7422e2aaaf1c18c1536a274a745a658bdc18f74e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_DEAUTHENTICATION</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a81c1fb7c4ee711ca8f669578c7422e2aa3178b9bb61896a1891bc19f7b0ccb9e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_PSPOLL</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a81c1fb7c4ee711ca8f669578c7422e2aa544dcc99f2257ffffb346b47450afddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_RTS</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a81c1fb7c4ee711ca8f669578c7422e2aadc75816b0f8ed30512ca871fb63aa9c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_CTS</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a81c1fb7c4ee711ca8f669578c7422e2aae212c16f05fadee6dd4a28d5fa50deda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_ACK</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a81c1fb7c4ee711ca8f669578c7422e2aa5b43b6f6f246f109c30a32078fadad5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_DATA</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a81c1fb7c4ee711ca8f669578c7422e2aa9d7e281cb06e8891cdddfcfb6846dbf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>ad31babedacb6834264e0337d65393c42</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Frame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>ac6821b27d680201f8bcf341d4e8c9a82</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Frame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>ae71cd589398643cee9f64ff47d848d38</anchor>
      <arglist>(cCommBuffer *b, Ieee80211OneAddressFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a427e29ec3efed8b5064a7ae98b39a3f0</anchor>
      <arglist>(cCommBuffer *b, Ieee80211OneAddressFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a4c97ebe5eb79ec69aa24b7faea5f17ed</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ACKFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a2e461b362c4e71d01cd5646ea86e5547</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ACKFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a68099e83339ce4f919e0554053a415df</anchor>
      <arglist>(cCommBuffer *b, Ieee80211TwoAddressFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a0afc28096f21ce10b786efe0cab67a88</anchor>
      <arglist>(cCommBuffer *b, Ieee80211TwoAddressFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a5467a0c06983b65c9e96aead90667618</anchor>
      <arglist>(cCommBuffer *b, Ieee80211RTSFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a2dfe4e9a47b7b9566b57eca3a75961ea</anchor>
      <arglist>(cCommBuffer *b, Ieee80211RTSFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>ab51f3dafd667fbef29c56003115ff4de</anchor>
      <arglist>(cCommBuffer *b, Ieee80211CTSFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>ae5a6bd5fe0182a41632cbe9da9cec66c</anchor>
      <arglist>(cCommBuffer *b, Ieee80211CTSFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a2af3cba157bfc72242c5794b57867a1e</anchor>
      <arglist>(cCommBuffer *b, Ieee80211DataOrMgmtFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>ad82f0eb620d59eb9f3ec785f79a7c610</anchor>
      <arglist>(cCommBuffer *b, Ieee80211DataOrMgmtFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a936f7b5fdcd9efb9b3ad3b8c9a6adc81</anchor>
      <arglist>(cCommBuffer *b, Ieee80211DataFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a89e24e8ae36cbddffe818ebf1a980c5a</anchor>
      <arglist>(cCommBuffer *b, Ieee80211DataFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>a90da98b0ebd9fbd684ed7b8d68606a39</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ManagementFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_frame__m_8h.html</anchorfile>
      <anchor>add988989287e5315104741984c45d356</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ManagementFrame &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211Mac.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ieee80211/mac/</path>
    <filename>_ieee80211_mac_8cc</filename>
    <includes id="_ieee80211_mac_8h" name="Ieee80211Mac.h" local="yes" imported="no">Ieee80211Mac.h</includes>
    <includes id="_radio_state_8h" name="RadioState.h" local="yes" imported="no">RadioState.h</includes>
    <includes id="_i_interface_table_8h" name="IInterfaceTable.h" local="yes" imported="no">IInterfaceTable.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_phy_control_info__m_8h" name="PhyControlInfo_m.h" local="yes" imported="no">PhyControlInfo_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CASE</name>
      <anchorfile>_ieee80211_mac_8cc.html</anchorfile>
      <anchor>a60cc06bef97da802b8522d258ac4fe89</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_ieee80211_mac_8cc.html</anchorfile>
      <anchor>acf24c774c16d48465a63d78c4906e9d9</anchor>
      <arglist>(Ieee80211Mac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_Enum</name>
      <anchorfile>_ieee80211_mac_8cc.html</anchorfile>
      <anchor>a399f3d44bdfc4dc5218229f0a1f63c3c</anchor>
      <arglist>(Ieee80211Mac,(Ieee80211Mac::IDLE, Ieee80211Mac::DEFER, Ieee80211Mac::WAITDIFS, Ieee80211Mac::BACKOFF, Ieee80211Mac::WAITACK, Ieee80211Mac::WAITBROADCAST, Ieee80211Mac::WAITCTS, Ieee80211Mac::WAITSIFS, Ieee80211Mac::RECEIVE))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_Enum</name>
      <anchorfile>_ieee80211_mac_8cc.html</anchorfile>
      <anchor>a87f35ef94d132c95b0655dee2bb62a47</anchor>
      <arglist>(RadioState,(RadioState::IDLE, RadioState::RECV, RadioState::TRANSMIT, RadioState::SLEEP))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211Mac.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ieee80211/mac/</path>
    <filename>_ieee80211_mac_8h</filename>
    <includes id="_wireless_mac_base_8h" name="WirelessMacBase.h" local="yes" imported="no">WirelessMacBase.h</includes>
    <includes id="_i_passive_queue_8h" name="IPassiveQueue.h" local="yes" imported="no">IPassiveQueue.h</includes>
    <includes id="_ieee80211_frame__m_8h" name="Ieee80211Frame_m.h" local="yes" imported="no">Ieee80211Frame_m.h</includes>
    <includes id="_ieee80211_consts_8h" name="Ieee80211Consts.h" local="yes" imported="no">Ieee80211Consts.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <includes id="_radio_state_8h" name="RadioState.h" local="yes" imported="no">RadioState.h</includes>
    <includes id="_f_s_m_a_8h" name="FSMA.h" local="yes" imported="no">FSMA.h</includes>
    <class kind="class">Ieee80211Mac</class>
    <class kind="struct">Ieee80211Mac::Ieee80211ASFTuple</class>
    <member kind="define">
      <type>#define</type>
      <name>FSM_DEBUG</name>
      <anchorfile>_ieee80211_mac_8h.html</anchorfile>
      <anchor>af70e50e85456b54bffd9583a60377faa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtAdhoc.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ieee80211/mgmt/</path>
    <filename>_ieee80211_mgmt_adhoc_8cc</filename>
    <includes id="_ieee80211_mgmt_adhoc_8h" name="Ieee80211MgmtAdhoc.h" local="yes" imported="no">Ieee80211MgmtAdhoc.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_ieee80211_mgmt_adhoc_8cc.html</anchorfile>
      <anchor>a2fa5621aea37e353b78b7195bf7bf025</anchor>
      <arglist>(Ieee80211MgmtAdhoc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtAdhoc.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ieee80211/mgmt/</path>
    <filename>_ieee80211_mgmt_adhoc_8h</filename>
    <includes id="_ieee80211_mgmt_base_8h" name="Ieee80211MgmtBase.h" local="yes" imported="no">Ieee80211MgmtBase.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <class kind="class">Ieee80211MgmtAdhoc</class>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtAP.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ieee80211/mgmt/</path>
    <filename>_ieee80211_mgmt_a_p_8cc</filename>
    <includes id="_ieee80211_mgmt_a_p_8h" name="Ieee80211MgmtAP.h" local="yes" imported="no">Ieee80211MgmtAP.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <includes id="_ether_frame__m_8h" name="EtherFrame_m.h" local="yes" imported="no">EtherFrame_m.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <includes id="_radio_state_8h" name="RadioState.h" local="yes" imported="no">RadioState.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_ieee80211_mgmt_a_p_8cc.html</anchorfile>
      <anchor>a6dc940701ca64ee3e5d0f22a9eef5db6</anchor>
      <arglist>(Ieee80211MgmtAP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtAP.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ieee80211/mgmt/</path>
    <filename>_ieee80211_mgmt_a_p_8h</filename>
    <includes id="_ieee80211_mgmt_a_p_base_8h" name="Ieee80211MgmtAPBase.h" local="yes" imported="no">Ieee80211MgmtAPBase.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <class kind="class">Ieee80211MgmtAP</class>
    <class kind="struct">Ieee80211MgmtAP::STAInfo</class>
    <class kind="struct">Ieee80211MgmtAP::MAC_compare</class>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtAPBase.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ieee80211/mgmt/</path>
    <filename>_ieee80211_mgmt_a_p_base_8cc</filename>
    <includes id="_ieee80211_mgmt_a_p_base_8h" name="Ieee80211MgmtAPBase.h" local="yes" imported="no">Ieee80211MgmtAPBase.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <includes id="_ether_frame__m_8h" name="EtherFrame_m.h" local="yes" imported="no">EtherFrame_m.h</includes>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtAPBase.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ieee80211/mgmt/</path>
    <filename>_ieee80211_mgmt_a_p_base_8h</filename>
    <includes id="_ieee80211_mgmt_base_8h" name="Ieee80211MgmtBase.h" local="yes" imported="no">Ieee80211MgmtBase.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <class kind="class">Ieee80211MgmtAPBase</class>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtAPSimplified.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ieee80211/mgmt/</path>
    <filename>_ieee80211_mgmt_a_p_simplified_8cc</filename>
    <includes id="_ieee80211_mgmt_a_p_simplified_8h" name="Ieee80211MgmtAPSimplified.h" local="yes" imported="no">Ieee80211MgmtAPSimplified.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <includes id="_ether_frame__m_8h" name="EtherFrame_m.h" local="yes" imported="no">EtherFrame_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_ieee80211_mgmt_a_p_simplified_8cc.html</anchorfile>
      <anchor>a31fb77dcde09898bb4dd76d7f8b034db</anchor>
      <arglist>(Ieee80211MgmtAPSimplified)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtAPSimplified.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ieee80211/mgmt/</path>
    <filename>_ieee80211_mgmt_a_p_simplified_8h</filename>
    <includes id="_ieee80211_mgmt_a_p_base_8h" name="Ieee80211MgmtAPBase.h" local="yes" imported="no">Ieee80211MgmtAPBase.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <class kind="class">Ieee80211MgmtAPSimplified</class>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtBase.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ieee80211/mgmt/</path>
    <filename>_ieee80211_mgmt_base_8cc</filename>
    <includes id="_ieee80211_mgmt_base_8h" name="Ieee80211MgmtBase.h" local="yes" imported="no">Ieee80211MgmtBase.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtBase.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ieee80211/mgmt/</path>
    <filename>_ieee80211_mgmt_base_8h</filename>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <includes id="_passive_queue_base_8h" name="PassiveQueueBase.h" local="yes" imported="no">PassiveQueueBase.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <includes id="_ieee80211_frame__m_8h" name="Ieee80211Frame_m.h" local="yes" imported="no">Ieee80211Frame_m.h</includes>
    <includes id="_ieee80211_mgmt_frames__m_8h" name="Ieee80211MgmtFrames_m.h" local="yes" imported="no">Ieee80211MgmtFrames_m.h</includes>
    <class kind="class">Ieee80211MgmtBase</class>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtFrames_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ieee80211/mgmt/</path>
    <filename>_ieee80211_mgmt_frames__m_8h</filename>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <includes id="_ieee80211_frame__m_8h" name="Ieee80211Frame_m.h" local="yes" imported="no">Ieee80211Frame_m.h</includes>
    <class kind="struct">Ieee80211CapabilityInformation</class>
    <class kind="struct">Ieee80211HandoverParameters</class>
    <class kind="struct">Ieee80211SupportedRatesElement</class>
    <class kind="class">Ieee80211FrameBody</class>
    <class kind="class">Ieee80211AuthenticationFrameBody</class>
    <class kind="class">Ieee80211DeauthenticationFrameBody</class>
    <class kind="class">Ieee80211DisassociationFrameBody</class>
    <class kind="class">Ieee80211ProbeRequestFrameBody</class>
    <class kind="class">Ieee80211AssociationRequestFrameBody</class>
    <class kind="class">Ieee80211ReassociationRequestFrameBody</class>
    <class kind="class">Ieee80211AssociationResponseFrameBody</class>
    <class kind="class">Ieee80211ReassociationResponseFrameBody</class>
    <class kind="class">Ieee80211BeaconFrameBody</class>
    <class kind="class">Ieee80211ProbeResponseFrameBody</class>
    <class kind="class">Ieee80211AuthenticationFrame</class>
    <class kind="class">Ieee80211DeauthenticationFrame</class>
    <class kind="class">Ieee80211DisassociationFrame</class>
    <class kind="class">Ieee80211ProbeRequestFrame</class>
    <class kind="class">Ieee80211AssociationRequestFrame</class>
    <class kind="class">Ieee80211ReassociationRequestFrame</class>
    <class kind="class">Ieee80211AssociationResponseFrame</class>
    <class kind="class">Ieee80211ReassociationResponseFrame</class>
    <class kind="class">Ieee80211BeaconFrame</class>
    <class kind="class">Ieee80211ProbeResponseFrame</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Ieee80211ReasonCode</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a914acd5b8ce599505d208f72c808fa1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RC_UNSPECIFIED</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a914acd5b8ce599505d208f72c808fa1eabe6b8a5e82461317724dc48d07c3d768</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RC_PREV_AUTH_EXPIRED</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a914acd5b8ce599505d208f72c808fa1ea1809175faf376c2bfaa95f7af0827cf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RC_DEAUTH_MS_LEAVING</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a914acd5b8ce599505d208f72c808fa1ea2d8a9acd4ae1723d417d98fe86040f79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RC_DISASS_INACTIVITY</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a914acd5b8ce599505d208f72c808fa1ea392d0b1700a25714779b6b13391a89b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RC_DISASS_TOO_MANY_MS</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a914acd5b8ce599505d208f72c808fa1ea046b5a665b6378d0bcb47ef13c6d09ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RC_NONAUTH_CLASS2</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a914acd5b8ce599505d208f72c808fa1ea8065a0b1a2afd6eed756112ae0149206</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RC_NONASS_CLASS3</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a914acd5b8ce599505d208f72c808fa1ea134b518e7e491f64f3e3dfc3d909b10e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RC_DIASS_MS_LEAVING</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a914acd5b8ce599505d208f72c808fa1ea68ab305aac76d01200bd8a45a24f9eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RC_NONAUTH_ASS_REQUEST</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a914acd5b8ce599505d208f72c808fa1ea03ab1ef142cb5d12b4b882cf7567e37b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Ieee80211StatusCode</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a90b16216c554aa51602ec9ad0299dfda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_SUCCESSFUL</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a90b16216c554aa51602ec9ad0299dfdaabba3de905fd2e432abe4c4bb33836ece</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_UNSPECIFIED</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a90b16216c554aa51602ec9ad0299dfdaac16bdcfcfe479641c8cd6793b89d691d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_UNSUP_CAP</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a90b16216c554aa51602ec9ad0299dfdaa0f7dcb2ced0fa5cddee1644f96d162d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_REASS_DENIED</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a90b16216c554aa51602ec9ad0299dfdaa7663307c7decc483ae6736b416ace50f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ASS_DENIED_UNKNOWN</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a90b16216c554aa51602ec9ad0299dfdaac60f8b85a3e7352cee89cbb3a856f5fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_AUTH_ALG0_UNSUP</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a90b16216c554aa51602ec9ad0299dfdaa1aec07d14e0c3364465f4d7d1177a993</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_AUTH_OUT_OF_SEQ</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a90b16216c554aa51602ec9ad0299dfdaa0fbb0f6f71757afefc9231cffe91238d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_AUTH_CHALLENGE_FAIL</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a90b16216c554aa51602ec9ad0299dfdaadb646bd03c47fb2be52d706975cdd6d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_AUTH_TIMEOUT</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a90b16216c554aa51602ec9ad0299dfdaa234516a5c4754f4a9cfe94e9fa8fb21e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ASS_TOO_MANY_MS</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a90b16216c554aa51602ec9ad0299dfdaad5a722e82afa836e8d386460f65b71db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_DATARATE_UNSUP</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a90b16216c554aa51602ec9ad0299dfdaa4f37b15b88fad1f1a106064a253f3b29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>ac1801da0f4f10e32931cc9b827d844e9</anchor>
      <arglist>(cCommBuffer *b, Ieee80211CapabilityInformation &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a4d4cbd5ebb37f9f32e15825a8a5f7428</anchor>
      <arglist>(cCommBuffer *b, Ieee80211CapabilityInformation &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a0edd64dffb966da5f89e9f07aaf019d6</anchor>
      <arglist>(cCommBuffer *b, Ieee80211HandoverParameters &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a00247c160902ea38e893bde01f73367f</anchor>
      <arglist>(cCommBuffer *b, Ieee80211HandoverParameters &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>aa89234173de751dafec7ba53dc99d9f8</anchor>
      <arglist>(cCommBuffer *b, Ieee80211SupportedRatesElement &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>aafbb49c769702ce5d338ed4618e7f66d</anchor>
      <arglist>(cCommBuffer *b, Ieee80211SupportedRatesElement &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a02386a413bf1806642ae3db93a33d690</anchor>
      <arglist>(cCommBuffer *b, Ieee80211FrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a1a9043bd9832db6734bff084a4749dc0</anchor>
      <arglist>(cCommBuffer *b, Ieee80211FrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>ade643ba5fe7cfe8273d5bea19fcada54</anchor>
      <arglist>(cCommBuffer *b, Ieee80211AuthenticationFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a66a9bb7710777eb552e8a50697dd747c</anchor>
      <arglist>(cCommBuffer *b, Ieee80211AuthenticationFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a817616f5510258e560df15b122bc0801</anchor>
      <arglist>(cCommBuffer *b, Ieee80211DeauthenticationFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a52b477d91ecc4df2b3d670e7b4becd7d</anchor>
      <arglist>(cCommBuffer *b, Ieee80211DeauthenticationFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>afa85e5bc52fe833517c84a6c6a4f0df0</anchor>
      <arglist>(cCommBuffer *b, Ieee80211DisassociationFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a7dfac72c9609c93d410499002dcf84aa</anchor>
      <arglist>(cCommBuffer *b, Ieee80211DisassociationFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a2e4b6352998ee36f098cb09a10f695e8</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ProbeRequestFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a0a524752c18ff09638e47e18b62c69bd</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ProbeRequestFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a7ae258e6dc702a13f8146a3793899505</anchor>
      <arglist>(cCommBuffer *b, Ieee80211AssociationRequestFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a5f87c9424701ec3584fc145585f76c14</anchor>
      <arglist>(cCommBuffer *b, Ieee80211AssociationRequestFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>af1f50eaa9d3d1e641b6cf6b26483760d</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ReassociationRequestFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>af77f275a6afbb59a4d4f9eb05eeb3b8c</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ReassociationRequestFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>af36dfa84dca93e5e3a8dfde87e514084</anchor>
      <arglist>(cCommBuffer *b, Ieee80211AssociationResponseFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>ab1befff6f4863638b06f64182515405e</anchor>
      <arglist>(cCommBuffer *b, Ieee80211AssociationResponseFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a781f8490510eb4c96ff7aaa07ac0da8c</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ReassociationResponseFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>adef4c63fc31ca86d918e0d262a6b3d52</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ReassociationResponseFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a96fea7fba0e8072567760272dff0bb51</anchor>
      <arglist>(cCommBuffer *b, Ieee80211BeaconFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>aab7398963bb6f02bf3f670e810538010</anchor>
      <arglist>(cCommBuffer *b, Ieee80211BeaconFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a9440a9fe2705f1b7c7db26f5e50f5a08</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ProbeResponseFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>aae870cf70f15154063b62e6a437d7b45</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ProbeResponseFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a7eacb433825f633c44384b30573e9dd2</anchor>
      <arglist>(cCommBuffer *b, Ieee80211AuthenticationFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a4991b006096131efd1e3c9942037ac58</anchor>
      <arglist>(cCommBuffer *b, Ieee80211AuthenticationFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a145bcbd7442de9b8640df43e1b7f3228</anchor>
      <arglist>(cCommBuffer *b, Ieee80211DeauthenticationFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a79fc851a33f8af7e95d1e963ec37f12f</anchor>
      <arglist>(cCommBuffer *b, Ieee80211DeauthenticationFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a1c7fd39f1b70a1705f29fa28e2a488ae</anchor>
      <arglist>(cCommBuffer *b, Ieee80211DisassociationFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>ab0ef895caf80136a0308ee8a7ee64fac</anchor>
      <arglist>(cCommBuffer *b, Ieee80211DisassociationFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>ac052aa06835b432f710161e113e7b432</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ProbeRequestFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a973c1c9ce7660f4dc434e10037d4745f</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ProbeRequestFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a78f17cce0e18caf1125dfcefc0c49f90</anchor>
      <arglist>(cCommBuffer *b, Ieee80211AssociationRequestFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a3775e0d32f03b1bff4931b3e6886e3fe</anchor>
      <arglist>(cCommBuffer *b, Ieee80211AssociationRequestFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a33667efd3ed3ad58c2fc4d53eb7beefc</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ReassociationRequestFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a6dd481d60e18609ab1adecea5769017b</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ReassociationRequestFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>affb4a7c7996e36750c8e9b7bd57b256a</anchor>
      <arglist>(cCommBuffer *b, Ieee80211AssociationResponseFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a69307a79ff3327d9b1ee4c540a542f0f</anchor>
      <arglist>(cCommBuffer *b, Ieee80211AssociationResponseFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>ab23c4c5a296c322045f95679b1a6d514</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ReassociationResponseFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a261aff1f6b8f15c69d8a7cf62f983ce5</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ReassociationResponseFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>aaf8ff5739de2a7a9e1ac99550190d53e</anchor>
      <arglist>(cCommBuffer *b, Ieee80211BeaconFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>ac70a2aa9b052174aab445c4e98b5b545</anchor>
      <arglist>(cCommBuffer *b, Ieee80211BeaconFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a3f6537cbc03c3ec47f91d25a51bbdd70</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ProbeResponseFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_mgmt_frames__m_8h.html</anchorfile>
      <anchor>a85f1c487239007650675c96ac50d4997</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ProbeResponseFrame &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtSTA.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ieee80211/mgmt/</path>
    <filename>_ieee80211_mgmt_s_t_a_8cc</filename>
    <includes id="_ieee80211_mgmt_s_t_a_8h" name="Ieee80211MgmtSTA.h" local="yes" imported="no">Ieee80211MgmtSTA.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <includes id="_phy_control_info__m_8h" name="PhyControlInfo_m.h" local="yes" imported="no">PhyControlInfo_m.h</includes>
    <includes id="_radio_state_8h" name="RadioState.h" local="yes" imported="no">RadioState.h</includes>
    <includes id="_channel_control_8h" name="ChannelControl.h" local="yes" imported="no">ChannelControl.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MK_AUTH_TIMEOUT</name>
      <anchorfile>_ieee80211_mgmt_s_t_a_8cc.html</anchorfile>
      <anchor>a4954a20361b1471d06b579a24a03c4c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MK_ASSOC_TIMEOUT</name>
      <anchorfile>_ieee80211_mgmt_s_t_a_8cc.html</anchorfile>
      <anchor>abedd6deda8bd384300b05496fa3179bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MK_SCAN_SENDPROBE</name>
      <anchorfile>_ieee80211_mgmt_s_t_a_8cc.html</anchorfile>
      <anchor>a82cbde4c5e4102d6449d9d99730ef469</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MK_SCAN_MINCHANNELTIME</name>
      <anchorfile>_ieee80211_mgmt_s_t_a_8cc.html</anchorfile>
      <anchor>abcbcd3dfce85b2a0c18b55b0c6d8c755</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MK_SCAN_MAXCHANNELTIME</name>
      <anchorfile>_ieee80211_mgmt_s_t_a_8cc.html</anchorfile>
      <anchor>a0342cd73bde3f6b8242e2bf7bd3e2353</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MK_BEACON_TIMEOUT</name>
      <anchorfile>_ieee80211_mgmt_s_t_a_8cc.html</anchorfile>
      <anchor>a4f4d97bdeb791bed1c5e8e7c7d76860c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_BEACONS_MISSED</name>
      <anchorfile>_ieee80211_mgmt_s_t_a_8cc.html</anchorfile>
      <anchor>aaa791d21ced0605da36984946ca322fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_ieee80211_mgmt_s_t_a_8cc.html</anchorfile>
      <anchor>a780e2355028575b7ae7f5df38bb3599f</anchor>
      <arglist>(Ieee80211MgmtSTA)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_ieee80211_mgmt_s_t_a_8cc.html</anchorfile>
      <anchor>adab7c7deef45faeda6ee25e4857a840e</anchor>
      <arglist>(std::ostream &amp;os, const Ieee80211MgmtSTA::ScanningInfo &amp;scanning)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_ieee80211_mgmt_s_t_a_8cc.html</anchorfile>
      <anchor>ad7d5c3283acf5ebc4d72bb5626ef640d</anchor>
      <arglist>(std::ostream &amp;os, const Ieee80211MgmtSTA::APInfo &amp;ap)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_ieee80211_mgmt_s_t_a_8cc.html</anchorfile>
      <anchor>aff3e1ae96603bcda59b71a011865c174</anchor>
      <arglist>(std::ostream &amp;os, const Ieee80211MgmtSTA::AssociatedAPInfo &amp;assocAP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtSTA.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ieee80211/mgmt/</path>
    <filename>_ieee80211_mgmt_s_t_a_8h</filename>
    <includes id="_ieee80211_mgmt_base_8h" name="Ieee80211MgmtBase.h" local="yes" imported="no">Ieee80211MgmtBase.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <includes id="_ieee80211_primitives__m_8h" name="Ieee80211Primitives_m.h" local="yes" imported="no">Ieee80211Primitives_m.h</includes>
    <class kind="class">Ieee80211MgmtSTA</class>
    <class kind="struct">Ieee80211MgmtSTA::ScanningInfo</class>
    <class kind="struct">Ieee80211MgmtSTA::APInfo</class>
    <class kind="struct">Ieee80211MgmtSTA::AssociatedAPInfo</class>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtSTASimplified.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ieee80211/mgmt/</path>
    <filename>_ieee80211_mgmt_s_t_a_simplified_8cc</filename>
    <includes id="_ieee80211_mgmt_s_t_a_simplified_8h" name="Ieee80211MgmtSTASimplified.h" local="yes" imported="no">Ieee80211MgmtSTASimplified.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_ieee80211_mgmt_s_t_a_simplified_8cc.html</anchorfile>
      <anchor>a9351998c744ed347a2c3761f021245c6</anchor>
      <arglist>(Ieee80211MgmtSTASimplified)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtSTASimplified.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ieee80211/mgmt/</path>
    <filename>_ieee80211_mgmt_s_t_a_simplified_8h</filename>
    <includes id="_ieee80211_mgmt_base_8h" name="Ieee80211MgmtBase.h" local="yes" imported="no">Ieee80211MgmtBase.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <class kind="class">Ieee80211MgmtSTASimplified</class>
  </compound>
  <compound kind="file">
    <name>Ieee80211Primitives_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ieee80211/mgmt/</path>
    <filename>_ieee80211_primitives__m_8h</filename>
    <includes id="_ieee80211_mgmt_frames__m_8h" name="Ieee80211MgmtFrames_m.h" local="yes" imported="no">Ieee80211MgmtFrames_m.h</includes>
    <class kind="class">Ieee80211PrimRequest</class>
    <class kind="class">Ieee80211PrimConfirm</class>
    <class kind="class">Ieee80211Prim_ScanRequest</class>
    <class kind="class">Ieee80211Prim_BSSDescription</class>
    <class kind="class">Ieee80211Prim_ScanConfirm</class>
    <class kind="class">Ieee80211Prim_AuthenticateRequest</class>
    <class kind="class">Ieee80211Prim_AuthenticateConfirm</class>
    <class kind="class">Ieee80211Prim_DeauthenticateRequest</class>
    <class kind="class">Ieee80211Prim_AssociateRequest</class>
    <class kind="class">Ieee80211Prim_AssociateConfirm</class>
    <class kind="class">Ieee80211Prim_ReassociateRequest</class>
    <class kind="class">Ieee80211Prim_ReassociateConfirm</class>
    <class kind="class">Ieee80211Prim_DisassociateRequest</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Ieee80211PrimRequestCode</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>af46d72cce8b2efafc938d7898683a9c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PR_SCAN_REQUEST</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>af46d72cce8b2efafc938d7898683a9c1a38ed47042ebf4971a5c464e6319ea974</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PR_AUTHENTICATE_REQUEST</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>af46d72cce8b2efafc938d7898683a9c1a9664600e78269952b2654e4046d953e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PR_DEAUTHENTICATE_REQUEST</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>af46d72cce8b2efafc938d7898683a9c1a8df92c87e5e511122023977baa7527da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PR_ASSOCIATE_REQUEST</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>af46d72cce8b2efafc938d7898683a9c1ab8c28d5cfc7394afd10f020daacd1ed7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PR_REASSOCIATE_REQUEST</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>af46d72cce8b2efafc938d7898683a9c1a1ad9696404687110e37d454c0e1c64e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PR_DISASSOCIATE_REQUEST</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>af46d72cce8b2efafc938d7898683a9c1a20341febe37a2f650225a4871387e601</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Ieee80211PrimConfirmCode</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a487b05883d178ff7d468fa5a41948b1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PR_SCAN_CONFIRM</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a487b05883d178ff7d468fa5a41948b1ba8e50e2b8f5cc004bb2a4d59257cafae8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PR_AUTHENTICATE_CONFIRM</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a487b05883d178ff7d468fa5a41948b1ba46dd524c7aa2d3fd6efa4d830c2de84e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PR_DEAUTHENTICATE_CONFIRM</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a487b05883d178ff7d468fa5a41948b1ba33b1222943f43acb670ef89c838b6e0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PR_ASSOCIATE_CONFIRM</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a487b05883d178ff7d468fa5a41948b1ba5411d6a627f2b9b15851341d770e612f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PR_REASSOCIATE_CONFIRM</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a487b05883d178ff7d468fa5a41948b1ba25bb59bc94aebd5ba5f4def40119b58e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PR_DISASSOCIATE_CONFIRM</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a487b05883d178ff7d468fa5a41948b1bae3a756925a2580acc8cdcae9ee234681</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Ieee80211BSSType</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>abcfc16dcb5cb70f02bb9562b2cfd15cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BSSTYPE_ANY</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>abcfc16dcb5cb70f02bb9562b2cfd15cfa8c4214fca94d7aaa59fdbe6b82104941</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BSSTYPE_INFRASTRUCTURE</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>abcfc16dcb5cb70f02bb9562b2cfd15cfa9914cdfff36f990faf440d556052de77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BSSTYPE_INDEPENDENT</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>abcfc16dcb5cb70f02bb9562b2cfd15cfaace0342f1c71cec5bdeb0c86c3f3b901</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Ieee80211PrimResultCode</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a6d2c695c367feca45aecf2d1d6e0f01a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRC_SUCCESS</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a6d2c695c367feca45aecf2d1d6e0f01aa89024386484763074cce3e68956a0bba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRC_INVALID_PARAMETERS</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a6d2c695c367feca45aecf2d1d6e0f01aab0a01637c84389ce1340187d86240f54</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRC_TIMEOUT</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a6d2c695c367feca45aecf2d1d6e0f01aae7d9e3304c97241fbffb70a74c6c2400</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRC_TOO_MANY_SIMULTANEOUS_REQUESTS</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a6d2c695c367feca45aecf2d1d6e0f01aae2cd2a1f2eec60a3ecaf0be3b49ca2a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRC_REFUSED</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a6d2c695c367feca45aecf2d1d6e0f01aa45693d70208c65d8538f6a380c31d642</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>ad3c79f98028865a6a6c0cb40a5b53909</anchor>
      <arglist>(cCommBuffer *b, Ieee80211PrimRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a03eb3ad1be2be92573ec395cbb10cebb</anchor>
      <arglist>(cCommBuffer *b, Ieee80211PrimRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>ab1315a467ce60d04b401a064092fced6</anchor>
      <arglist>(cCommBuffer *b, Ieee80211PrimConfirm &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a9db332362b7e86d3d319e2cfba5dce8a</anchor>
      <arglist>(cCommBuffer *b, Ieee80211PrimConfirm &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a5ccd0105e977f3c7b7f7fdc97e783cc0</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_ScanRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a73622e061477e19e87a98abf55c9e41f</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_ScanRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>af87ce6f12896307c4c13c8a0228497bd</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_BSSDescription &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a7b1760f06e9fb713e598afe99274cf69</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_BSSDescription &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>adfb56dae4b9735a8a720e1f950a62f03</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_ScanConfirm &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>aad8402f8cf0fab4a0703fee5936c0c62</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_ScanConfirm &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a4e093c93a5a0d39b4269fa375f031bd4</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_AuthenticateRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a5d7c933e63d3093169790df72b9ef184</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_AuthenticateRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a72951dc04d79739be9df1487db67340d</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_AuthenticateConfirm &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a480dd2e057f4a003196d393499eca5a1</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_AuthenticateConfirm &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>ab20979bfd8421a7e918331274ef414e5</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_DeauthenticateRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a9cfc00b665d98637010fb45db5c204b7</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_DeauthenticateRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>ae72750ac8dff1a92b132057303e99e4a</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_AssociateRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a75e5a0100d2072192d71d3dc17ee0b39</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_AssociateRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>abf86e84749febb15bba95afe81ce459f</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_AssociateConfirm &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a4c0201685bf910820c727a4b93a414cf</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_AssociateConfirm &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a5321ccd120da4db393aebcaa2f0e7637</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_ReassociateRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a6b3142daa15580f997967c3a8ef752fa</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_ReassociateRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>aa3c845040ff3006b30df6b416d0964b6</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_ReassociateConfirm &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>acfc00abde20a50c4979ab440c58fca2b</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_ReassociateConfirm &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>ad2451a83feb0544af5999fded0436772</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_DisassociateRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee80211_primitives__m_8h.html</anchorfile>
      <anchor>a49fc076b72b503e44b79c9687647ae9b</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_DisassociateRequest &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211Radio.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/radio/</path>
    <filename>_ieee80211_radio_8cc</filename>
    <includes id="_ieee80211_radio_8h" name="Ieee80211Radio.h" local="yes" imported="no">Ieee80211Radio.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_ieee80211_radio_8cc.html</anchorfile>
      <anchor>aa77acbd4072361f5a108b46ab5adf6c2</anchor>
      <arglist>(Ieee80211Radio)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211Radio.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/radio/</path>
    <filename>_ieee80211_radio_8h</filename>
    <includes id="_abstract_radio_8h" name="AbstractRadio.h" local="yes" imported="no">AbstractRadio.h</includes>
    <class kind="class">Ieee80211Radio</class>
  </compound>
  <compound kind="file">
    <name>Ieee80211RadioModel.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/radio/</path>
    <filename>_ieee80211_radio_model_8cc</filename>
    <includes id="_ieee80211_radio_model_8h" name="Ieee80211RadioModel.h" local="yes" imported="no">Ieee80211RadioModel.h</includes>
    <includes id="_ieee80211_consts_8h" name="Ieee80211Consts.h" local="yes" imported="no">Ieee80211Consts.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>_ieee80211_radio_model_8cc.html</anchorfile>
      <anchor>a528ec203658531f3ce2da87643d2f820</anchor>
      <arglist>(Ieee80211RadioModel)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211RadioModel.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/radio/</path>
    <filename>_ieee80211_radio_model_8h</filename>
    <includes id="_i_radio_model_8h" name="IRadioModel.h" local="yes" imported="no">IRadioModel.h</includes>
    <class kind="class">Ieee80211RadioModel</class>
  </compound>
  <compound kind="file">
    <name>Ieee802Ctrl_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/contract/</path>
    <filename>_ieee802_ctrl__m_8h</filename>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <class kind="class">Ieee802Ctrl</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_ieee802_ctrl__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Ieee802MessageKind</name>
      <anchorfile>_ieee802_ctrl__m_8h.html</anchorfile>
      <anchor>a8f72082671aca5776ee2d6e71073063a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IEEE802CTRL_DATA</name>
      <anchorfile>_ieee802_ctrl__m_8h.html</anchorfile>
      <anchor>a8f72082671aca5776ee2d6e71073063aa82af7cdbc92bb31a042837b5de905299</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IEEE802CTRL_REGISTER_DSAP</name>
      <anchorfile>_ieee802_ctrl__m_8h.html</anchorfile>
      <anchor>a8f72082671aca5776ee2d6e71073063aaea76fe12af0c60121e8adb3126267026</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IEEE802CTRL_DEREGISTER_DSAP</name>
      <anchorfile>_ieee802_ctrl__m_8h.html</anchorfile>
      <anchor>a8f72082671aca5776ee2d6e71073063aa6605561fc3663110864591f08251c79c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IEEE802CTRL_SENDPAUSE</name>
      <anchorfile>_ieee802_ctrl__m_8h.html</anchorfile>
      <anchor>a8f72082671aca5776ee2d6e71073063aa7af3a9b285b07e132be9f1a789a248eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SAPCode</name>
      <anchorfile>_ieee802_ctrl__m_8h.html</anchorfile>
      <anchor>a88157cd6f842b7299f380a06b1953c51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAP_IBM_SNA</name>
      <anchorfile>_ieee802_ctrl__m_8h.html</anchorfile>
      <anchor>a88157cd6f842b7299f380a06b1953c51a406d0fad21df7dcb3f7e74bd10ce081f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAP_IP</name>
      <anchorfile>_ieee802_ctrl__m_8h.html</anchorfile>
      <anchor>a88157cd6f842b7299f380a06b1953c51a5600414efaf4d5425304f171598a2afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAP_3COM</name>
      <anchorfile>_ieee802_ctrl__m_8h.html</anchorfile>
      <anchor>a88157cd6f842b7299f380a06b1953c51a5323a4043b2e5be6c20442702f3c5bab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAP_SNAP</name>
      <anchorfile>_ieee802_ctrl__m_8h.html</anchorfile>
      <anchor>a88157cd6f842b7299f380a06b1953c51a84e4e60fe9dfc0263a5daea0c6febe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAP_BANYAN</name>
      <anchorfile>_ieee802_ctrl__m_8h.html</anchorfile>
      <anchor>a88157cd6f842b7299f380a06b1953c51a333c28b49434641f1c086582c282cbaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAP_NOVELL_IPX</name>
      <anchorfile>_ieee802_ctrl__m_8h.html</anchorfile>
      <anchor>a88157cd6f842b7299f380a06b1953c51a3e2ec8f16104c6dbdc3475e3a1489910</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAP_LAN_MANAGER</name>
      <anchorfile>_ieee802_ctrl__m_8h.html</anchorfile>
      <anchor>a88157cd6f842b7299f380a06b1953c51aa188f17250e61582dab3fc673f866906</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAP_CLNS</name>
      <anchorfile>_ieee802_ctrl__m_8h.html</anchorfile>
      <anchor>a88157cd6f842b7299f380a06b1953c51a4516537fa65430f1d4ca1ae16c1b2518</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EtherType</name>
      <anchorfile>_ieee802_ctrl__m_8h.html</anchorfile>
      <anchor>a0786b7c38992d7a0faa09df8fe644fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ETHERTYPE_IP</name>
      <anchorfile>_ieee802_ctrl__m_8h.html</anchorfile>
      <anchor>a0786b7c38992d7a0faa09df8fe644fe6ac0213905e4c5639ab217dbdf6750e75e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ETHERTYPE_ARP</name>
      <anchorfile>_ieee802_ctrl__m_8h.html</anchorfile>
      <anchor>a0786b7c38992d7a0faa09df8fe644fe6ab78454b9340abb34bd92a17f01a8060d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ETHERTYPE_RARP</name>
      <anchorfile>_ieee802_ctrl__m_8h.html</anchorfile>
      <anchor>a0786b7c38992d7a0faa09df8fe644fe6aba8d8ed5977d33fac692d7bd511c6e4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ieee802_ctrl__m_8h.html</anchorfile>
      <anchor>af8293aceab2b4903b15139fc2b5b17de</anchor>
      <arglist>(cCommBuffer *b, Ieee802Ctrl &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ieee802_ctrl__m_8h.html</anchorfile>
      <anchor>ab4a1ceddae81cdc7c9acff92a3207025</anchor>
      <arglist>(cCommBuffer *b, Ieee802Ctrl &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IInterfaceTable.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/common/</path>
    <filename>_i_interface_table_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_interface_entry_8h" name="InterfaceEntry.h" local="yes" imported="no">InterfaceEntry.h</includes>
    <class kind="class">IInterfaceTable</class>
  </compound>
  <compound kind="file">
    <name>IMessageHandler.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/messagehandler/</path>
    <filename>_i_message_handler_8h</filename>
    <includes id="_o_s_p_f_packet__m_8h" name="OSPFPacket_m.h" local="yes" imported="no">OSPFPacket_m.h</includes>
    <class kind="class">OSPF::IMessageHandler</class>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>IModulation.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/radio/</path>
    <filename>_i_modulation_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">IModulation</class>
  </compound>
  <compound kind="file">
    <name>in.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/headerserializers/headers/</path>
    <filename>in_8h</filename>
    <class kind="struct">in_addr</class>
    <member kind="typedef">
      <type>u_int32_t</type>
      <name>in_addr_t</name>
      <anchorfile>in_8h.html</anchorfile>
      <anchor>a9efa4e372dfee78a4d5dc1d8294b7938</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>in_systm.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/headerserializers/headers/</path>
    <filename>in__systm_8h</filename>
    <member kind="typedef">
      <type>u_int16_t</type>
      <name>n_short</name>
      <anchorfile>in__systm_8h.html</anchorfile>
      <anchor>ab6cdc14ada3945e3a21719421f0f1c46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>u_int32_t</type>
      <name>n_long</name>
      <anchorfile>in__systm_8h.html</anchorfile>
      <anchor>a64bb31cfb2a0b6186f00a9f3d2b13767</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>u_int32_t</type>
      <name>n_time</name>
      <anchorfile>in__systm_8h.html</anchorfile>
      <anchor>a697a748be1aa924b67aab95d8de3215b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>index.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/</path>
    <filename>index_8h</filename>
  </compound>
  <compound kind="file">
    <name>INETDefs.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_i_n_e_t_defs_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>INET_API</name>
      <anchorfile>_i_n_e_t_defs_8h.html</anchorfile>
      <anchor>ad4fa1dc2a221d8f0c1c417d4b993c51a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV</name>
      <anchorfile>_i_n_e_t_defs_8h.html</anchorfile>
      <anchor>a650ef3eff8a2900bef69dae29c05d2dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CHK</name>
      <anchorfile>_i_n_e_t_defs_8h.html</anchorfile>
      <anchor>af3e4d5321e837cae974ef2a2871d9e0e</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PK</name>
      <anchorfile>_i_n_e_t_defs_8h.html</anchorfile>
      <anchor>ae5b816f7de3c5248c812bdb6920f4e06</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>ushort</name>
      <anchorfile>_i_n_e_t_defs_8h.html</anchorfile>
      <anchor>ab95f123a6c9bcfee6a343170ef8c5f69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>uint</name>
      <anchorfile>_i_n_e_t_defs_8h.html</anchorfile>
      <anchor>a91ad9478d81a7aaf2593e8d9c3d06a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>ulong</name>
      <anchorfile>_i_n_e_t_defs_8h.html</anchorfile>
      <anchor>a718b4eb2652c286f4d42dc18a8e71a1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>__checknull</name>
      <anchorfile>_i_n_e_t_defs_8h.html</anchorfile>
      <anchor>ad49654746b803b02cd6569927bf3feba</anchor>
      <arglist>(T *p, const char *expr, const char *file, int line)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>INotifiable.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_i_notifiable_8h</filename>
    <class kind="class">INotifiable</class>
  </compound>
  <compound kind="file">
    <name>InterfaceEntry.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/common/</path>
    <filename>_interface_entry_8cc</filename>
    <includes id="_interface_entry_8h" name="InterfaceEntry.h" local="yes" imported="no">InterfaceEntry.h</includes>
    <includes id="_i_interface_table_8h" name="IInterfaceTable.h" local="yes" imported="no">IInterfaceTable.h</includes>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
    <includes id="_i_pv6_interface_data_8h" name="IPv6InterfaceData.h" local="yes" imported="no">IPv6InterfaceData.h</includes>
  </compound>
  <compound kind="file">
    <name>InterfaceEntry.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/common/</path>
    <filename>_interface_entry_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <includes id="_interface_token_8h" name="InterfaceToken.h" local="yes" imported="no">InterfaceToken.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <class kind="class">InterfaceProtocolData</class>
    <class kind="class">InterfaceEntry</class>
  </compound>
  <compound kind="file">
    <name>InterfaceTable.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/common/</path>
    <filename>_interface_table_8cc</filename>
    <includes id="_interface_table_8h" name="InterfaceTable.h" local="yes" imported="no">InterfaceTable.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>INTERFACEIDS_START</name>
      <anchorfile>_interface_table_8cc.html</anchorfile>
      <anchor>a9bf80e6c16c5a791c8e7057e3030a290</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_interface_table_8cc.html</anchorfile>
      <anchor>a3a0ec050a9314500a598bbd8e7d92c90</anchor>
      <arglist>(InterfaceTable)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_interface_table_8cc.html</anchorfile>
      <anchor>af832fbd2198aec2111cc278dadf6cbe1</anchor>
      <arglist>(std::ostream &amp;os, const InterfaceEntry &amp;e)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InterfaceTable.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/common/</path>
    <filename>_interface_table_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_interface_table_8h" name="IInterfaceTable.h" local="yes" imported="no">IInterfaceTable.h</includes>
    <includes id="_interface_entry_8h" name="InterfaceEntry.h" local="yes" imported="no">InterfaceEntry.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <class kind="class">InterfaceTable</class>
  </compound>
  <compound kind="file">
    <name>InterfaceTableAccess.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/common/</path>
    <filename>_interface_table_access_8h</filename>
    <includes id="_module_access_8h" name="ModuleAccess.h" local="yes" imported="no">ModuleAccess.h</includes>
    <includes id="_i_interface_table_8h" name="IInterfaceTable.h" local="yes" imported="no">IInterfaceTable.h</includes>
    <class kind="class">InterfaceTableAccess</class>
  </compound>
  <compound kind="file">
    <name>InterfaceToken.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/common/</path>
    <filename>_interface_token_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">InterfaceToken</class>
  </compound>
  <compound kind="file">
    <name>IntServ.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/rsvp_te/</path>
    <filename>_int_serv_8h</filename>
    <includes id="_int_serv__m_8h" name="IntServ_m.h" local="yes" imported="no">IntServ_m.h</includes>
  </compound>
  <compound kind="file">
    <name>IntServ_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/rsvp_te/</path>
    <filename>_int_serv__m_8h</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <class kind="struct">SessionObj_t</class>
    <class kind="struct">RsvpHopObj_t</class>
    <class kind="struct">SenderTemplateObj_t</class>
    <class kind="struct">SenderTspecObj_t</class>
    <class kind="struct">FlowSpecObj_t</class>
    <class kind="struct">FilterSpecObj_t</class>
    <class kind="struct">LabelRequestObj_t</class>
    <class kind="struct">SenderDescriptor_t</class>
    <class kind="struct">EroObj_t</class>
    <class kind="struct">FlowDescriptor_t</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_int_serv__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; IPAddress &gt;</type>
      <name>IPAddressVector</name>
      <anchorfile>_int_serv__m_8h.html</anchorfile>
      <anchor>a5a288b0560755f2dc3b29915cf366ff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; struct EroObj_t &gt;</type>
      <name>EroVector</name>
      <anchorfile>_int_serv__m_8h.html</anchorfile>
      <anchor>aea4ecacf78719a59508153fbdbd5cc7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; struct FlowDescriptor_t &gt;</type>
      <name>FlowDescriptorVector</name>
      <anchorfile>_int_serv__m_8h.html</anchorfile>
      <anchor>a4ff28796cce84a2b2c3c2f5db7f5e3ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_int_serv__m_8h.html</anchorfile>
      <anchor>a19218f30debfc758d3572a6865e9cd0f</anchor>
      <arglist>(cCommBuffer *b, SessionObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_int_serv__m_8h.html</anchorfile>
      <anchor>a6edaf30be2a09ccc69bd8ca78e0270b4</anchor>
      <arglist>(cCommBuffer *b, SessionObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_int_serv__m_8h.html</anchorfile>
      <anchor>ae474b529b3de204e7e96deb2c51162fe</anchor>
      <arglist>(cCommBuffer *b, RsvpHopObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_int_serv__m_8h.html</anchorfile>
      <anchor>a0a40ef02f86bfb4a20b75ac5048fbce9</anchor>
      <arglist>(cCommBuffer *b, RsvpHopObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_int_serv__m_8h.html</anchorfile>
      <anchor>a23e710019ea08c41290a8a1e29f9ef7f</anchor>
      <arglist>(cCommBuffer *b, SenderTemplateObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_int_serv__m_8h.html</anchorfile>
      <anchor>afb5961bd3f028c58ec0ec5ae5dc3c05c</anchor>
      <arglist>(cCommBuffer *b, SenderTemplateObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_int_serv__m_8h.html</anchorfile>
      <anchor>a7ebee9ad5041bc9c2dd1ae504eade01d</anchor>
      <arglist>(cCommBuffer *b, SenderTspecObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_int_serv__m_8h.html</anchorfile>
      <anchor>ac001a3b6e5ba239460a801399896a69f</anchor>
      <arglist>(cCommBuffer *b, SenderTspecObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_int_serv__m_8h.html</anchorfile>
      <anchor>abcde90fbfb17e9b188d5fb93cdb318d3</anchor>
      <arglist>(cCommBuffer *b, FlowSpecObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_int_serv__m_8h.html</anchorfile>
      <anchor>af5051720e1c8780fe2b0cfa9382c11d8</anchor>
      <arglist>(cCommBuffer *b, FlowSpecObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_int_serv__m_8h.html</anchorfile>
      <anchor>ade158128f451010e3e57b912117d4c14</anchor>
      <arglist>(cCommBuffer *b, FilterSpecObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_int_serv__m_8h.html</anchorfile>
      <anchor>a3b1d526b5ae18cfdfa66d92368bc80e3</anchor>
      <arglist>(cCommBuffer *b, FilterSpecObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_int_serv__m_8h.html</anchorfile>
      <anchor>a62e4864234ba1cb54859ea76ef18c29f</anchor>
      <arglist>(cCommBuffer *b, LabelRequestObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_int_serv__m_8h.html</anchorfile>
      <anchor>a8923f7b7b422a77615be4388e47a8ff3</anchor>
      <arglist>(cCommBuffer *b, LabelRequestObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_int_serv__m_8h.html</anchorfile>
      <anchor>a6c326cf9cdad188527359d63369d7708</anchor>
      <arglist>(cCommBuffer *b, SenderDescriptor_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_int_serv__m_8h.html</anchorfile>
      <anchor>a3ad06f1e94ee412a4716230031dd696d</anchor>
      <arglist>(cCommBuffer *b, SenderDescriptor_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_int_serv__m_8h.html</anchorfile>
      <anchor>a3f4e9c006148c28f1a2fc7e7ef842bdd</anchor>
      <arglist>(cCommBuffer *b, EroObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_int_serv__m_8h.html</anchorfile>
      <anchor>ae37bc20e5faaf4620f31a5d2f2cadfd5</anchor>
      <arglist>(cCommBuffer *b, EroObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_int_serv__m_8h.html</anchorfile>
      <anchor>a108a95bc49c0deeadd8968acda393f32</anchor>
      <arglist>(cCommBuffer *b, FlowDescriptor_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_int_serv__m_8h.html</anchorfile>
      <anchor>a5eae18f293a52d140ae390b0b6240ff6</anchor>
      <arglist>(cCommBuffer *b, FlowDescriptor_t &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IP.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv4/</path>
    <filename>_i_p_8cc</filename>
    <includes id="_i_p_8h" name="IP.h" local="yes" imported="no">IP.h</includes>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_c_m_p_message__m_8h" name="ICMPMessage_m.h" local="yes" imported="no">ICMPMessage_m.h</includes>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
    <includes id="_a_r_p_packet__m_8h" name="ARPPacket_m.h" local="yes" imported="no">ARPPacket_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_i_p_8cc.html</anchorfile>
      <anchor>a600d042142f5ad5a40ea2598f6351c9a</anchor>
      <arglist>(IP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ip.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/headerserializers/headers/</path>
    <filename>ip_8h</filename>
    <class kind="struct">ip</class>
    <class kind="struct">ip_timestamp</class>
    <class kind="union">ip_timestamp::ipt_timestamp</class>
    <class kind="struct">ip_timestamp::ipt_timestamp::ipt_ta</class>
    <member kind="define">
      <type>#define</type>
      <name>IPVERSION</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>abbcc4e9f6ee199a20a25720e333f1453</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_RF</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>a895709708f8f909cf7b7459491d549e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_DF</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>ae2473f4a88d141d5298f92a4335b714a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_MF</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>ae8afe1e04bb9bad791443556c3b2cd73</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_OFFMASK</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>ad059798b16d1f615b5af8770175121ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_MAXPACKET</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>a1554ef48c7e8f7bd5d6ef2655e59ed07</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_LOWDELAY</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>a417721f0e1f1445e71fc0f55e04c7026</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_THROUGHPUT</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>a130bd030a96cdf2ad079d4d0e452af8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_RELIABILITY</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>a4dab62eb6b0c87716f292a38ea179f60</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_MINCOST</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>a6dc4cfef3512b905e64164e25a611e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_CE</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>aea710e788ff43835714af0fe1b128819</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_ECT</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>ab7e3e1cad9a071b1097f0a94d354ec17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_NETCONTROL</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>abbadb580e845deee10f08617b37c9f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_INTERNETCONTROL</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>aad2536be3b05d82e79158c07c0d26142</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_CRITIC_ECP</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>ae85f29854b413cd4e025c72dcab4b91b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_FLASHOVERRIDE</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>ae3b1617689bb38814e538ee7fa8156db</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_FLASH</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>ad77807141a68a553295ca04447c90d84</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_IMMEDIATE</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>a19815ff979eaed79adc64041ac70e3ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_PRIORITY</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>a5cf64e373ede3045bf4b1c57ce371383</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_ROUTINE</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>abc94cde17aa2536a76fd5904fd2b25e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_COPIED</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>a2f576310e1dd324526b1ec03b36c1dd0</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_CLASS</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>a4cdf02a87b8ae7d4a55fff548c9a09fa</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_NUMBER</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>ad2ea3e192069e64294ed9ac6b4dfa462</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_CONTROL</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>aa3948f2989d22110df00b0301c0737e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_RESERVED1</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>a91bdc607d6324d5e68e4ef7d61bbd2d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_DEBMEAS</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>a2354b40fe6732b1f1ae473f7e6f7323d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_RESERVED2</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>a0b475a0720d067692ee62f40aa8f419b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_EOL</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>ac2869192c4bfaa89e4bdd6ab2c98ae10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_NOP</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>a5e4aedfe163639f80c2468f1a8dd6788</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_RR</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>a9f851f42f39dbe9ff8703b595a644e7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_TS</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>aec6d37aacfaeaf5593d85596a8669249</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECURITY</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>a8e54d98b4cfd49a65cfc74e03ab44d6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_LSRR</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>adc4d2331a3afd78eec093954b690cba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SATID</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>a516eecde3b5f0838f7abfe48a9c92df3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SSRR</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>ae0d24c291d3c7b0cdca26d4cb976d3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_RA</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>ada562d99bf7cb8a4cecdbbe9b831b0cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_OPTVAL</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>aacddf7c2b5ba5c5ea3d2a2f1caa3c825</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_OLEN</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>a334fafc1507c026b2f17469efb246bec</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_OFFSET</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>a7f27c48643e3b3994dbd572b7bfacf39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_MINOFF</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>a4dc517fdf859f51d63178223ccfa9a4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_TS_TSONLY</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>aece8b1ca2334675a11d1c2b5db05c347</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_TS_TSANDADDR</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>a97454703cfe4ae9632b3a73d1f1511e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_TS_PRESPEC</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>af4e2e8e242f96af283deff1707edbcba</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_UNCLASS</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>a3d77d518dcdc111da8b787184369f5af</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_CONFID</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>af12d45d892c69a53bb474a275623755f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_EFTO</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>a7511337b6071f0d916d80ead4ba69e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_MMMM</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>a5c7856e3bddefdb5480e7d55c167e30c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_RESTR</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>ac33987ef5244891278f4d84bf3a67ac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_SECRET</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>aa52b93944b9f51f46c11f0e6f427657a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_TOPSECRET</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>a044f6230b745428951a9d9ea15267ab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXTTL</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>ab8974c8c20e3a7cfdf98dfcb9c184c0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPDEFTTL</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>a96b0b2c3456f31b9c5d4ff5ffe2b4144</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPFRAGTTL</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>add16d7c3fd617a08256d86dbf61057a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTTLDEC</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>a083e5d1a4b4a9b3e41c957bc2f43b1dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_MSS</name>
      <anchorfile>ip_8h.html</anchorfile>
      <anchor>ac1be60dbb2e443d125d88c1b9e51f55c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPVERSION</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>abbcc4e9f6ee199a20a25720e333f1453</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_RF</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a895709708f8f909cf7b7459491d549e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_DF</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>ae2473f4a88d141d5298f92a4335b714a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_MF</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>ae8afe1e04bb9bad791443556c3b2cd73</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_OFFMASK</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>ad059798b16d1f615b5af8770175121ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_MAXPACKET</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a1554ef48c7e8f7bd5d6ef2655e59ed07</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_LOWDELAY</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a417721f0e1f1445e71fc0f55e04c7026</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_THROUGHPUT</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a130bd030a96cdf2ad079d4d0e452af8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_RELIABILITY</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a4dab62eb6b0c87716f292a38ea179f60</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_MINCOST</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a6dc4cfef3512b905e64164e25a611e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_CE</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>aea710e788ff43835714af0fe1b128819</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_ECT</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>ab7e3e1cad9a071b1097f0a94d354ec17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_NETCONTROL</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>abbadb580e845deee10f08617b37c9f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_INTERNETCONTROL</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>aad2536be3b05d82e79158c07c0d26142</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_CRITIC_ECP</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>ae85f29854b413cd4e025c72dcab4b91b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_FLASHOVERRIDE</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>ae3b1617689bb38814e538ee7fa8156db</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_FLASH</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>ad77807141a68a553295ca04447c90d84</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_IMMEDIATE</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a19815ff979eaed79adc64041ac70e3ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_PRIORITY</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a5cf64e373ede3045bf4b1c57ce371383</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_ROUTINE</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>abc94cde17aa2536a76fd5904fd2b25e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_COPIED</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a2f576310e1dd324526b1ec03b36c1dd0</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_CLASS</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a4cdf02a87b8ae7d4a55fff548c9a09fa</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_NUMBER</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>ad2ea3e192069e64294ed9ac6b4dfa462</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_CONTROL</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>aa3948f2989d22110df00b0301c0737e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_RESERVED1</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a91bdc607d6324d5e68e4ef7d61bbd2d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_DEBMEAS</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a2354b40fe6732b1f1ae473f7e6f7323d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_RESERVED2</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a0b475a0720d067692ee62f40aa8f419b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_EOL</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>ac2869192c4bfaa89e4bdd6ab2c98ae10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_NOP</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a5e4aedfe163639f80c2468f1a8dd6788</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_RR</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a9f851f42f39dbe9ff8703b595a644e7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_TS</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>aec6d37aacfaeaf5593d85596a8669249</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECURITY</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a8e54d98b4cfd49a65cfc74e03ab44d6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_LSRR</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>adc4d2331a3afd78eec093954b690cba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SATID</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a516eecde3b5f0838f7abfe48a9c92df3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SSRR</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>ae0d24c291d3c7b0cdca26d4cb976d3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_RA</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>ada562d99bf7cb8a4cecdbbe9b831b0cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_OPTVAL</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>aacddf7c2b5ba5c5ea3d2a2f1caa3c825</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_OLEN</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a334fafc1507c026b2f17469efb246bec</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_OFFSET</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a7f27c48643e3b3994dbd572b7bfacf39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_MINOFF</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a4dc517fdf859f51d63178223ccfa9a4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_TS_TSONLY</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>aece8b1ca2334675a11d1c2b5db05c347</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_TS_TSANDADDR</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a97454703cfe4ae9632b3a73d1f1511e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_TS_PRESPEC</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>af4e2e8e242f96af283deff1707edbcba</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_UNCLASS</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a3d77d518dcdc111da8b787184369f5af</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_CONFID</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>af12d45d892c69a53bb474a275623755f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_EFTO</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a7511337b6071f0d916d80ead4ba69e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_MMMM</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a5c7856e3bddefdb5480e7d55c167e30c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_RESTR</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>ac33987ef5244891278f4d84bf3a67ac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_SECRET</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>aa52b93944b9f51f46c11f0e6f427657a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_TOPSECRET</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a044f6230b745428951a9d9ea15267ab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXTTL</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>ab8974c8c20e3a7cfdf98dfcb9c184c0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPDEFTTL</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a96b0b2c3456f31b9c5d4ff5ffe2b4144</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPFRAGTTL</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>add16d7c3fd617a08256d86dbf61057a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTTLDEC</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a083e5d1a4b4a9b3e41c957bc2f43b1dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_MSS</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>ac1be60dbb2e443d125d88c1b9e51f55c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPVERSION</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>abbcc4e9f6ee199a20a25720e333f1453</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_RF</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>a895709708f8f909cf7b7459491d549e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_DF</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>ae2473f4a88d141d5298f92a4335b714a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_MF</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>ae8afe1e04bb9bad791443556c3b2cd73</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_OFFMASK</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>ad059798b16d1f615b5af8770175121ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_MAXPACKET</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>a1554ef48c7e8f7bd5d6ef2655e59ed07</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_LOWDELAY</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>a417721f0e1f1445e71fc0f55e04c7026</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_THROUGHPUT</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>a130bd030a96cdf2ad079d4d0e452af8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_RELIABILITY</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>a4dab62eb6b0c87716f292a38ea179f60</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_MINCOST</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>a6dc4cfef3512b905e64164e25a611e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_CE</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>aea710e788ff43835714af0fe1b128819</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_ECT</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>ab7e3e1cad9a071b1097f0a94d354ec17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_NETCONTROL</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>abbadb580e845deee10f08617b37c9f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_INTERNETCONTROL</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>aad2536be3b05d82e79158c07c0d26142</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_CRITIC_ECP</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>ae85f29854b413cd4e025c72dcab4b91b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_FLASHOVERRIDE</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>ae3b1617689bb38814e538ee7fa8156db</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_FLASH</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>ad77807141a68a553295ca04447c90d84</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_IMMEDIATE</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>a19815ff979eaed79adc64041ac70e3ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_PRIORITY</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>a5cf64e373ede3045bf4b1c57ce371383</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_ROUTINE</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>abc94cde17aa2536a76fd5904fd2b25e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_COPIED</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>a2f576310e1dd324526b1ec03b36c1dd0</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_CLASS</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>a4cdf02a87b8ae7d4a55fff548c9a09fa</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_NUMBER</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>ad2ea3e192069e64294ed9ac6b4dfa462</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_CONTROL</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>aa3948f2989d22110df00b0301c0737e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_RESERVED1</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>a91bdc607d6324d5e68e4ef7d61bbd2d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_DEBMEAS</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>a2354b40fe6732b1f1ae473f7e6f7323d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_RESERVED2</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>a0b475a0720d067692ee62f40aa8f419b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_EOL</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>ac2869192c4bfaa89e4bdd6ab2c98ae10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_NOP</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>a5e4aedfe163639f80c2468f1a8dd6788</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_RR</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>a9f851f42f39dbe9ff8703b595a644e7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_TS</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>aec6d37aacfaeaf5593d85596a8669249</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECURITY</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>a8e54d98b4cfd49a65cfc74e03ab44d6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_LSRR</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>adc4d2331a3afd78eec093954b690cba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SATID</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>a516eecde3b5f0838f7abfe48a9c92df3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SSRR</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>ae0d24c291d3c7b0cdca26d4cb976d3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_RA</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>ada562d99bf7cb8a4cecdbbe9b831b0cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_OPTVAL</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>aacddf7c2b5ba5c5ea3d2a2f1caa3c825</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_OLEN</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>a334fafc1507c026b2f17469efb246bec</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_OFFSET</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>a7f27c48643e3b3994dbd572b7bfacf39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_MINOFF</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>a4dc517fdf859f51d63178223ccfa9a4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_TS_TSONLY</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>aece8b1ca2334675a11d1c2b5db05c347</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_TS_TSANDADDR</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>a97454703cfe4ae9632b3a73d1f1511e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_TS_PRESPEC</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>af4e2e8e242f96af283deff1707edbcba</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_UNCLASS</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>a3d77d518dcdc111da8b787184369f5af</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_CONFID</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>af12d45d892c69a53bb474a275623755f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_EFTO</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>a7511337b6071f0d916d80ead4ba69e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_MMMM</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>a5c7856e3bddefdb5480e7d55c167e30c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_RESTR</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>ac33987ef5244891278f4d84bf3a67ac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_SECRET</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>aa52b93944b9f51f46c11f0e6f427657a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_TOPSECRET</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>a044f6230b745428951a9d9ea15267ab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXTTL</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>ab8974c8c20e3a7cfdf98dfcb9c184c0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPDEFTTL</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>a96b0b2c3456f31b9c5d4ff5ffe2b4144</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPFRAGTTL</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>add16d7c3fd617a08256d86dbf61057a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTTLDEC</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>a083e5d1a4b4a9b3e41c957bc2f43b1dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_MSS</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>ac1be60dbb2e443d125d88c1b9e51f55c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPVERSION</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>abbcc4e9f6ee199a20a25720e333f1453</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_RF</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a895709708f8f909cf7b7459491d549e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_DF</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>ae2473f4a88d141d5298f92a4335b714a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_MF</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>ae8afe1e04bb9bad791443556c3b2cd73</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_OFFMASK</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>ad059798b16d1f615b5af8770175121ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_MAXPACKET</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a1554ef48c7e8f7bd5d6ef2655e59ed07</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_LOWDELAY</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a417721f0e1f1445e71fc0f55e04c7026</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_THROUGHPUT</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a130bd030a96cdf2ad079d4d0e452af8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_RELIABILITY</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a4dab62eb6b0c87716f292a38ea179f60</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_MINCOST</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a6dc4cfef3512b905e64164e25a611e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_CE</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>aea710e788ff43835714af0fe1b128819</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_ECT</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>ab7e3e1cad9a071b1097f0a94d354ec17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_NETCONTROL</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>abbadb580e845deee10f08617b37c9f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_INTERNETCONTROL</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>aad2536be3b05d82e79158c07c0d26142</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_CRITIC_ECP</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>ae85f29854b413cd4e025c72dcab4b91b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_FLASHOVERRIDE</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>ae3b1617689bb38814e538ee7fa8156db</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_FLASH</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>ad77807141a68a553295ca04447c90d84</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_IMMEDIATE</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a19815ff979eaed79adc64041ac70e3ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_PRIORITY</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a5cf64e373ede3045bf4b1c57ce371383</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_ROUTINE</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>abc94cde17aa2536a76fd5904fd2b25e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_COPIED</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a2f576310e1dd324526b1ec03b36c1dd0</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_CLASS</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a4cdf02a87b8ae7d4a55fff548c9a09fa</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_NUMBER</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>ad2ea3e192069e64294ed9ac6b4dfa462</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_CONTROL</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>aa3948f2989d22110df00b0301c0737e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_RESERVED1</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a91bdc607d6324d5e68e4ef7d61bbd2d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_DEBMEAS</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a2354b40fe6732b1f1ae473f7e6f7323d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_RESERVED2</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a0b475a0720d067692ee62f40aa8f419b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_EOL</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>ac2869192c4bfaa89e4bdd6ab2c98ae10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_NOP</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a5e4aedfe163639f80c2468f1a8dd6788</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_RR</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a9f851f42f39dbe9ff8703b595a644e7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_TS</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>aec6d37aacfaeaf5593d85596a8669249</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECURITY</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a8e54d98b4cfd49a65cfc74e03ab44d6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_LSRR</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>adc4d2331a3afd78eec093954b690cba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SATID</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a516eecde3b5f0838f7abfe48a9c92df3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SSRR</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>ae0d24c291d3c7b0cdca26d4cb976d3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_RA</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>ada562d99bf7cb8a4cecdbbe9b831b0cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_OPTVAL</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>aacddf7c2b5ba5c5ea3d2a2f1caa3c825</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_OLEN</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a334fafc1507c026b2f17469efb246bec</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_OFFSET</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a7f27c48643e3b3994dbd572b7bfacf39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_MINOFF</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a4dc517fdf859f51d63178223ccfa9a4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_TS_TSONLY</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>aece8b1ca2334675a11d1c2b5db05c347</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_TS_TSANDADDR</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a97454703cfe4ae9632b3a73d1f1511e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_TS_PRESPEC</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>af4e2e8e242f96af283deff1707edbcba</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_UNCLASS</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a3d77d518dcdc111da8b787184369f5af</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_CONFID</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>af12d45d892c69a53bb474a275623755f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_EFTO</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a7511337b6071f0d916d80ead4ba69e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_MMMM</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a5c7856e3bddefdb5480e7d55c167e30c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_RESTR</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>ac33987ef5244891278f4d84bf3a67ac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_SECRET</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>aa52b93944b9f51f46c11f0e6f427657a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_TOPSECRET</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a044f6230b745428951a9d9ea15267ab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXTTL</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>ab8974c8c20e3a7cfdf98dfcb9c184c0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPDEFTTL</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a96b0b2c3456f31b9c5d4ff5ffe2b4144</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPFRAGTTL</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>add16d7c3fd617a08256d86dbf61057a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTTLDEC</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a083e5d1a4b4a9b3e41c957bc2f43b1dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_MSS</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>ac1be60dbb2e443d125d88c1b9e51f55c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IP.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv4/</path>
    <filename>_i_p_8h</filename>
    <includes id="_queue_base_8h" name="QueueBase.h" local="yes" imported="no">QueueBase.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_routing_table_access_8h" name="RoutingTableAccess.h" local="yes" imported="no">RoutingTableAccess.h</includes>
    <includes id="_i_routing_table_8h" name="IRoutingTable.h" local="yes" imported="no">IRoutingTable.h</includes>
    <includes id="_i_c_m_p_access_8h" name="ICMPAccess.h" local="yes" imported="no">ICMPAccess.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
    <includes id="_i_p_frag_buf_8h" name="IPFragBuf.h" local="yes" imported="no">IPFragBuf.h</includes>
    <includes id="_protocol_map_8h" name="ProtocolMap.h" local="yes" imported="no">ProtocolMap.h</includes>
    <class kind="class">IP</class>
    <member kind="variable">
      <type>const int</type>
      <name>ICMP_FRAGMENTATION_ERROR_CODE</name>
      <anchorfile>_i_p_8h.html</anchorfile>
      <anchor>acf7c44180fe91018c790ae3a7c24cadd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ip_icmp.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/headerserializers/headers/</path>
    <filename>ip__icmp_8h</filename>
    <class kind="struct">icmp_ra_addr</class>
    <class kind="struct">icmp</class>
    <member kind="define">
      <type>#define</type>
      <name>icmp_pptr</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>adc7cc163039bbc2acd42778625840b7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_gwaddr</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a674c1075d278307789e93363acc62d05</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_id</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a6832094d6d482b2569352caffebdcf17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_seq</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a1846768098258c8f755b89b292963305</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_void</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a9e4593f2d889228c356847ac48ac3e90</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_pmvoid</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a6888a30b9ffde1b58a91e9f78fe3610b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_nextmtu</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a5a17149ac6c297d3fdabbef5b3415fd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_num_addrs</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a8fcd478739f0f8b9fe1e38b602574f98</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_wpa</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a220ec65cd2db8a7e34b65dd76ac58360</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_lifetime</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a5525cd587008106e35d1be74437f1dac</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_otime</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a8bac2b5e6906ad248e6c2a46f02ddb90</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_rtime</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a3b20e3c85b88ed3b08410d1cefe58590</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_ttime</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a06a745e0e8dc401e32f85256aed575e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_ip</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>af352a429b02a4a385ca78f801b23a541</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_radv</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a33040be8eae743da88181a3da44a84b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_mask</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a3e2342abd5f9e3bd8ee0a5411292ffcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_data</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a7eae76e1c45a7a97fc0e050a4df1920f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_MINLEN</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a4f29f52b21f278ac2f6786b17f0b9d61</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_TSLEN</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>ac88c6c41dfda324c068017b36695de35</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_MASKLEN</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a75a31666674028f820564fd152a1abbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_ADVLENMIN</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>abd3aa4703919ce3d55fa1c102782a563</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_ADVLEN</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a1ebc93fd61550d0c4c72cce50bc42166</anchor>
      <arglist>(p)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_ECHOREPLY</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a82c3c22ccc3ab020f598fa6832a78d12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>ad3a53e748928a6746ecf58e63a37a76a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_NET</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>ad695f7aac7128e3abc82915c6f2a9721</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_HOST</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a25d5002e95e22a988eb8ce9122c1daf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_PROTOCOL</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a75a0a4e438c2f095e306318d02897c7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_PORT</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>af9db0dedc4a6ca12e315542afd11db9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_NEEDFRAG</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a32101bbef8beda8004e7112ad8af3029</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_SRCFAIL</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a79fc9e676e979520db8247b9302802f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_NET_UNKNOWN</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a28c9f635a6551ba5d842f8672a58774c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_HOST_UNKNOWN</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>acd00983d980abbda9a0762bb6e7fee69</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_ISOLATED</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a4546803be674575ba2ec6424011eb5e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_NET_PROHIB</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a1386dd7a5fa25c72b3345b086cfaa908</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_HOST_PROHIB</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>ae0e91190bde99d43f5c018b2dc762bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_TOSNET</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>ac9430643f92cb6de557b75fb7ffab333</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_TOSHOST</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a511e02898ef2f8ab6ff8455eedbd652f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_FILTER_PROHIB</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>ad0d4d06c5c5b571be8f5a7a1d2ac5518</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_HOST_PRECEDENCE</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a529f5737053a7478ba08ab0dd96956e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_PRECEDENCE_CUTOFF</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a8f7acb47770cdf234afdfa27b6adb43e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_SOURCEQUENCH</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a8504ceb34b1a35c57b9d5ae26ad4b2c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_REDIRECT_NET</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>ad8e40976e1ea1c02d94c95154c409cbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_REDIRECT_HOST</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a6ecef2568746345474500899111438e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_REDIRECT_TOSNET</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>aed025a114e8d4c90a71e4d5c6760f0f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_REDIRECT_TOSHOST</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a960ac5195a093f09344ab2799f40efa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_ECHO</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>ad58231410d58e34b455328b888a9e73c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_ROUTERADVERT</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a378e8c9e15b519665b52161df53eea56</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_ROUTERSOLICIT</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a3c94ac7432cd169ab5c9ef37d50ad981</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_TIMXCEED</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a8e3af9a982f823093f685c01ea77903c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_TIMXCEED_INTRANS</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a86217329cd3fbb7c747942d172423c42</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_TIMXCEED_REASS</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>ae99744be808ccf1c4dc27c16cd91a7de</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_PARAMPROB</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>aa4319c170ff4577ab7bd22a070643db7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_PARAMPROB_ERRATPTR</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a3403fed706f95fcb348285336fe2b08b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_PARAMPROB_OPTABSENT</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a863452dc23f115cd09b48b53771fd330</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_PARAMPROB_LENGTH</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a3cf9b5f1a7c6e0383cfdc63ecfacbfe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_TSTAMP</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a62bf3a7886f5cbbd6f0f67303a39fc8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_TSTAMPREPLY</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>afa0adb2fb9705db67f1145ab92d581a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_IREQ</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a3fd3b310a59aa6bad86a0c37a99aeb8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_IREQREPLY</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>ac25271988d45328dc281f8ed301d0b2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_MASKREQ</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>ad200822fc3735b19416dbd8376b02e37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_MASKREPLY</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>aeecbd895301a4ebe549f270a6486b0c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_MAXTYPE</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>a45cc8a1d1420b4048b8ee5bf2c8518a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_INFOTYPE</name>
      <anchorfile>ip__icmp_8h.html</anchorfile>
      <anchor>aa1f2425f19b05145a368dfb2a827a993</anchor>
      <arglist>(type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_pptr</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>adc7cc163039bbc2acd42778625840b7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_gwaddr</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a674c1075d278307789e93363acc62d05</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_id</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a6832094d6d482b2569352caffebdcf17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_seq</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a1846768098258c8f755b89b292963305</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_void</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a9e4593f2d889228c356847ac48ac3e90</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_pmvoid</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a6888a30b9ffde1b58a91e9f78fe3610b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_nextmtu</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a5a17149ac6c297d3fdabbef5b3415fd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_num_addrs</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a8fcd478739f0f8b9fe1e38b602574f98</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_wpa</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a220ec65cd2db8a7e34b65dd76ac58360</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_lifetime</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a5525cd587008106e35d1be74437f1dac</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_otime</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a8bac2b5e6906ad248e6c2a46f02ddb90</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_rtime</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a3b20e3c85b88ed3b08410d1cefe58590</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_ttime</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a06a745e0e8dc401e32f85256aed575e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_ip</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>af352a429b02a4a385ca78f801b23a541</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_radv</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a33040be8eae743da88181a3da44a84b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_mask</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a3e2342abd5f9e3bd8ee0a5411292ffcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_data</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a7eae76e1c45a7a97fc0e050a4df1920f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_MINLEN</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a4f29f52b21f278ac2f6786b17f0b9d61</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_TSLEN</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>ac88c6c41dfda324c068017b36695de35</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_MASKLEN</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a75a31666674028f820564fd152a1abbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_ADVLENMIN</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>abd3aa4703919ce3d55fa1c102782a563</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_ADVLEN</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a1ebc93fd61550d0c4c72cce50bc42166</anchor>
      <arglist>(p)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_ECHOREPLY</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a82c3c22ccc3ab020f598fa6832a78d12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>ad3a53e748928a6746ecf58e63a37a76a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_NET</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>ad695f7aac7128e3abc82915c6f2a9721</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_HOST</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a25d5002e95e22a988eb8ce9122c1daf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_PROTOCOL</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a75a0a4e438c2f095e306318d02897c7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_PORT</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>af9db0dedc4a6ca12e315542afd11db9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_NEEDFRAG</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a32101bbef8beda8004e7112ad8af3029</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_SRCFAIL</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a79fc9e676e979520db8247b9302802f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_NET_UNKNOWN</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a28c9f635a6551ba5d842f8672a58774c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_HOST_UNKNOWN</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>acd00983d980abbda9a0762bb6e7fee69</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_ISOLATED</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a4546803be674575ba2ec6424011eb5e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_NET_PROHIB</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a1386dd7a5fa25c72b3345b086cfaa908</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_HOST_PROHIB</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>ae0e91190bde99d43f5c018b2dc762bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_TOSNET</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>ac9430643f92cb6de557b75fb7ffab333</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_TOSHOST</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a511e02898ef2f8ab6ff8455eedbd652f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_FILTER_PROHIB</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>ad0d4d06c5c5b571be8f5a7a1d2ac5518</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_HOST_PRECEDENCE</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a529f5737053a7478ba08ab0dd96956e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_PRECEDENCE_CUTOFF</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a8f7acb47770cdf234afdfa27b6adb43e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_SOURCEQUENCH</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a8504ceb34b1a35c57b9d5ae26ad4b2c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_REDIRECT_NET</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>ad8e40976e1ea1c02d94c95154c409cbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_REDIRECT_HOST</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a6ecef2568746345474500899111438e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_REDIRECT_TOSNET</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>aed025a114e8d4c90a71e4d5c6760f0f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_REDIRECT_TOSHOST</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a960ac5195a093f09344ab2799f40efa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_ECHO</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>ad58231410d58e34b455328b888a9e73c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_ROUTERADVERT</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a378e8c9e15b519665b52161df53eea56</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_ROUTERSOLICIT</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a3c94ac7432cd169ab5c9ef37d50ad981</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_TIMXCEED</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a8e3af9a982f823093f685c01ea77903c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_TIMXCEED_INTRANS</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a86217329cd3fbb7c747942d172423c42</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_TIMXCEED_REASS</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>ae99744be808ccf1c4dc27c16cd91a7de</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_PARAMPROB</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>aa4319c170ff4577ab7bd22a070643db7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_PARAMPROB_ERRATPTR</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a3403fed706f95fcb348285336fe2b08b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_PARAMPROB_OPTABSENT</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a863452dc23f115cd09b48b53771fd330</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_PARAMPROB_LENGTH</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a3cf9b5f1a7c6e0383cfdc63ecfacbfe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_TSTAMP</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a62bf3a7886f5cbbd6f0f67303a39fc8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_TSTAMPREPLY</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>afa0adb2fb9705db67f1145ab92d581a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_IREQ</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a3fd3b310a59aa6bad86a0c37a99aeb8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_IREQREPLY</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>ac25271988d45328dc281f8ed301d0b2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_MASKREQ</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>ad200822fc3735b19416dbd8376b02e37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_MASKREPLY</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>aeecbd895301a4ebe549f270a6486b0c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_MAXTYPE</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>a45cc8a1d1420b4048b8ee5bf2c8518a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_INFOTYPE</name>
      <anchorfile>_i_c_m_p_serializer_8cc.html</anchorfile>
      <anchor>aa1f2425f19b05145a368dfb2a827a993</anchor>
      <arglist>(type)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPAddress.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/contract/</path>
    <filename>_i_p_address_8cc</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
  </compound>
  <compound kind="file">
    <name>IPAddress.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/contract/</path>
    <filename>_i_p_address_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">IPAddress</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_i_p_address_8h.html</anchorfile>
      <anchor>a3630ccbb6159913229c39c607d7bef64</anchor>
      <arglist>(std::ostream &amp;os, const IPAddress &amp;ip)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_p_address_8h.html</anchorfile>
      <anchor>a5dd1404033a1dbb7fd1f6ed8ead9a352</anchor>
      <arglist>(cCommBuffer *buf, const IPAddress &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_p_address_8h.html</anchorfile>
      <anchor>a161bd0690030e371136adb976350f44a</anchor>
      <arglist>(cCommBuffer *buf, IPAddress &amp;addr)</arglist>
    </member>
    <member kind="variable">
      <type>const short</type>
      <name>PORT_UNDEF</name>
      <anchorfile>_i_p_address_8h.html</anchorfile>
      <anchor>af1fbd9b1c7fd9da1fdebcf3afd0d111c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const short</type>
      <name>PORT_MAX</name>
      <anchorfile>_i_p_address_8h.html</anchorfile>
      <anchor>a2914b6a61308210c0b04a0525589a49f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPAddressResolver.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/contract/</path>
    <filename>_i_p_address_resolver_8cc</filename>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <includes id="_i_interface_table_8h" name="IInterfaceTable.h" local="yes" imported="no">IInterfaceTable.h</includes>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
    <includes id="_i_routing_table_8h" name="IRoutingTable.h" local="yes" imported="no">IRoutingTable.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <includes id="_i_pv6_interface_data_8h" name="IPv6InterfaceData.h" local="yes" imported="no">IPv6InterfaceData.h</includes>
    <includes id="_routing_table6_8h" name="RoutingTable6.h" local="yes" imported="no">RoutingTable6.h</includes>
  </compound>
  <compound kind="file">
    <name>IPAddressResolver.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/contract/</path>
    <filename>_i_p_address_resolver_8h</filename>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
    <class kind="class">IPAddressResolver</class>
  </compound>
  <compound kind="file">
    <name>IPassiveQueue.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_i_passive_queue_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">IPassiveQueue</class>
  </compound>
  <compound kind="file">
    <name>IPControlInfo.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/contract/</path>
    <filename>_i_p_control_info_8cc</filename>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
  </compound>
  <compound kind="file">
    <name>IPControlInfo.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/contract/</path>
    <filename>_i_p_control_info_8h</filename>
    <includes id="_i_p_control_info__m_8h" name="IPControlInfo_m.h" local="yes" imported="no">IPControlInfo_m.h</includes>
    <class kind="class">IPControlInfo</class>
  </compound>
  <compound kind="file">
    <name>IPControlInfo_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/contract/</path>
    <filename>_i_p_control_info__m_8h</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_i_p_protocol_id__m_8h" name="IPProtocolId_m.h" local="yes" imported="no">IPProtocolId_m.h</includes>
    <class kind="class">IPControlInfo_Base</class>
    <class kind="class">IPRoutingDecision</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_i_p_control_info__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_p_control_info__m_8h.html</anchorfile>
      <anchor>aa39c24f3d6c17d9a81e542154c1cd05e</anchor>
      <arglist>(cCommBuffer *b, IPRoutingDecision &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_p_control_info__m_8h.html</anchorfile>
      <anchor>a9165ecbf29dfb0484bd0139cda17660a</anchor>
      <arglist>(cCommBuffer *b, IPRoutingDecision &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPDatagram.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv4/</path>
    <filename>_i_p_datagram_8h</filename>
    <includes id="_i_p_datagram__m_8h" name="IPDatagram_m.h" local="yes" imported="no">IPDatagram_m.h</includes>
  </compound>
  <compound kind="file">
    <name>IPDatagram_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv4/</path>
    <filename>_i_p_datagram__m_8h</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_i_p_protocol_id__m_8h" name="IPProtocolId_m.h" local="yes" imported="no">IPProtocolId_m.h</includes>
    <class kind="class">IPRecordRouteOption</class>
    <class kind="class">IPTimestampOption</class>
    <class kind="class">IPSourceRoutingOption</class>
    <class kind="class">IPDatagram</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>IPOptionClass</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>abfa570ee9584127311c1716117ac7ed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPOPTION_CLASS_CONTROL</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>abfa570ee9584127311c1716117ac7ed9a0b6d1423eae744b3cae4f2d2deabc254</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPOPTION_CLASS_RESERVED</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>abfa570ee9584127311c1716117ac7ed9ae4abb4c1b9bd666808b75a86e5e771d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPOPTION_CLASS_DEBUGGING</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>abfa570ee9584127311c1716117ac7ed9ada98754823d9bee3a2e8c716332198f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPOPTION_CLASS_RESERVED2</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>abfa570ee9584127311c1716117ac7ed9a51fd8bfd9f9fdaddcf05d72487da5611</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>IPOption</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>aa9ab5c94a72746d79e5adbb089ceaf15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPOPTION_END_OF_OPTIONS</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>aa9ab5c94a72746d79e5adbb089ceaf15a7dd3c5c6e686124ea2bf1c4e6d696cd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPOPTION_NO_OPTION</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>aa9ab5c94a72746d79e5adbb089ceaf15ab66e1534282e065015aafbfa17755640</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPOPTION_SECURITY</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>aa9ab5c94a72746d79e5adbb089ceaf15a8188c74d1f5f8fc920179c4adf504f53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPOPTION_LOOSE_SOURCE_ROUTING</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>aa9ab5c94a72746d79e5adbb089ceaf15abfd10f7603658eaafe9919d7ea48d68f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPOPTION_TIMESTAMP</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>aa9ab5c94a72746d79e5adbb089ceaf15abb8f3fd8d553141da085a276b4769f1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPOPTION_RECORD_ROUTE</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>aa9ab5c94a72746d79e5adbb089ceaf15a68e51dffde4cf43082b8c718f8e52a6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPOPTION_STREAM_ID</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>aa9ab5c94a72746d79e5adbb089ceaf15ae18007338e5aa690807eca360d37f357</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPOPTION_STRICT_SOURCE_ROUTING</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>aa9ab5c94a72746d79e5adbb089ceaf15a199322549c177c21482a5bfd447ec383</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPOPTION_ROUTER_ALERT</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>aa9ab5c94a72746d79e5adbb089ceaf15af217a7592a3e3db9375b367df8f9770d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TimestampFlag</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>acc1267dc708aa8efc86ad0572d575e33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_TIMESTAMP_TIMESTAMP_ONLY</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>acc1267dc708aa8efc86ad0572d575e33ace7d6d716d77e1fe18134c8b38c844d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_TIMESTAMP_WITH_ADDRESS</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>acc1267dc708aa8efc86ad0572d575e33a83d8173330dc86d2a88b7ad0e043ac72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_TIMESTAMP_SENDER_INIT_ADDRESS</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>acc1267dc708aa8efc86ad0572d575e33a2e7d23d4754323e53f5ecdfc037dc233</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>a5dfada00820080658103a5230b27f174</anchor>
      <arglist>(cCommBuffer *b, IPRecordRouteOption &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>a5ad5405e8d1b6bcb70b0e634ffefe2b8</anchor>
      <arglist>(cCommBuffer *b, IPRecordRouteOption &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>add633c2f7931f7620edd0f64eae14b73</anchor>
      <arglist>(cCommBuffer *b, IPTimestampOption &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>a354ed0f04c3d88650d724d341b68211c</anchor>
      <arglist>(cCommBuffer *b, IPTimestampOption &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>a0390c5207f43866c3ed677830668cdab</anchor>
      <arglist>(cCommBuffer *b, IPSourceRoutingOption &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>ac1820470e0362f5253957251c3127051</anchor>
      <arglist>(cCommBuffer *b, IPSourceRoutingOption &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>ab37f31183c79d2f008ebebbfe0a3c63e</anchor>
      <arglist>(cCommBuffer *b, IPDatagram &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>a4b5bdc0373b35f86567d56978b867db6</anchor>
      <arglist>(cCommBuffer *b, IPDatagram &amp;obj)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>IP_HEADER_BYTES</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>a55f0b603ebc964b1dc679f0d6741a9d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>IP_MAX_HEADER_BYTES</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>ac849bbae039e87714709568464b80331</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>MAX_IPADDR_OPTION_ENTRIES</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>a45953099e6b180590191a1b62712b2a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>MAX_TIMESTAMP_OPTION_ENTRIES</name>
      <anchorfile>_i_p_datagram__m_8h.html</anchorfile>
      <anchor>aa63fb93171345e2644c58c1d3922788f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPFragBuf.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv4/</path>
    <filename>_i_p_frag_buf_8cc</filename>
    <includes id="_i_p_frag_buf_8h" name="IPFragBuf.h" local="yes" imported="no">IPFragBuf.h</includes>
    <includes id="_i_c_m_p_8h" name="ICMP.h" local="yes" imported="no">ICMP.h</includes>
  </compound>
  <compound kind="file">
    <name>IPFragBuf.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv4/</path>
    <filename>_i_p_frag_buf_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_reassembly_buffer_8h" name="ReassemblyBuffer.h" local="yes" imported="no">ReassemblyBuffer.h</includes>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
    <class kind="class">IPFragBuf</class>
    <class kind="struct">IPFragBuf::Key</class>
    <class kind="struct">IPFragBuf::DatagramBuffer</class>
  </compound>
  <compound kind="file">
    <name>IPProtocolId_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/contract/</path>
    <filename>_i_p_protocol_id__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_i_p_protocol_id__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>IPProtocolId</name>
      <anchorfile>_i_p_protocol_id__m_8h.html</anchorfile>
      <anchor>a4297c2f400ba53cf6866e6d45bc81b70</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_ICMP</name>
      <anchorfile>_i_p_protocol_id__m_8h.html</anchorfile>
      <anchor>a4297c2f400ba53cf6866e6d45bc81b70ae193d750e5a16d9ab14225311325dd59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_IGMP</name>
      <anchorfile>_i_p_protocol_id__m_8h.html</anchorfile>
      <anchor>a4297c2f400ba53cf6866e6d45bc81b70a5358f69e9aa1fbed0a9f5514e597de01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_IP</name>
      <anchorfile>_i_p_protocol_id__m_8h.html</anchorfile>
      <anchor>a4297c2f400ba53cf6866e6d45bc81b70aaa2ec340c0022e40c080d203075a8959</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_TCP</name>
      <anchorfile>_i_p_protocol_id__m_8h.html</anchorfile>
      <anchor>a4297c2f400ba53cf6866e6d45bc81b70a69fd8777dfd279b247a88b6eec793bd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_EGP</name>
      <anchorfile>_i_p_protocol_id__m_8h.html</anchorfile>
      <anchor>a4297c2f400ba53cf6866e6d45bc81b70a2f85f967f45e08ee061403cdef6c9b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_IGP</name>
      <anchorfile>_i_p_protocol_id__m_8h.html</anchorfile>
      <anchor>a4297c2f400ba53cf6866e6d45bc81b70a8ba207ee12f37b7adb9dc66dc603c0d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_UDP</name>
      <anchorfile>_i_p_protocol_id__m_8h.html</anchorfile>
      <anchor>a4297c2f400ba53cf6866e6d45bc81b70ab9e6b0f8ec9223d758f4825004489bd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_XTP</name>
      <anchorfile>_i_p_protocol_id__m_8h.html</anchorfile>
      <anchor>a4297c2f400ba53cf6866e6d45bc81b70a9d0e352304e7fb10c2c70cce4d8df1c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_IPv6</name>
      <anchorfile>_i_p_protocol_id__m_8h.html</anchorfile>
      <anchor>a4297c2f400ba53cf6866e6d45bc81b70a67a21123d6c6f03044aaf20e35625c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_RSVP</name>
      <anchorfile>_i_p_protocol_id__m_8h.html</anchorfile>
      <anchor>a4297c2f400ba53cf6866e6d45bc81b70a8f7b8dd704fec55906379821c2814f46</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_IPv6_ICMP</name>
      <anchorfile>_i_p_protocol_id__m_8h.html</anchorfile>
      <anchor>a4297c2f400ba53cf6866e6d45bc81b70a3f40fb193e9edf4e297fcd7952acb024</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_NONE</name>
      <anchorfile>_i_p_protocol_id__m_8h.html</anchorfile>
      <anchor>a4297c2f400ba53cf6866e6d45bc81b70aed1bda39a89cc94a3fb029ddf804cadf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_IPv6_MOBILITY</name>
      <anchorfile>_i_p_protocol_id__m_8h.html</anchorfile>
      <anchor>a4297c2f400ba53cf6866e6d45bc81b70a71b7e2c3def773021c5ce45f22fac3d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_OSPF</name>
      <anchorfile>_i_p_protocol_id__m_8h.html</anchorfile>
      <anchor>a4297c2f400ba53cf6866e6d45bc81b70a286260df5de676497bee26c4c6ea7f1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_SCTP</name>
      <anchorfile>_i_p_protocol_id__m_8h.html</anchorfile>
      <anchor>a4297c2f400ba53cf6866e6d45bc81b70a63ccdc98cf3bb44e690db1cbfaf22d86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_MANET</name>
      <anchorfile>_i_p_protocol_id__m_8h.html</anchorfile>
      <anchor>a4297c2f400ba53cf6866e6d45bc81b70a01febd56f34b809fb9b82027db361e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_IPv6EXT_HOP</name>
      <anchorfile>_i_p_protocol_id__m_8h.html</anchorfile>
      <anchor>a4297c2f400ba53cf6866e6d45bc81b70a52a443a3781487254a145558900bca3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_IPv6EXT_DEST</name>
      <anchorfile>_i_p_protocol_id__m_8h.html</anchorfile>
      <anchor>a4297c2f400ba53cf6866e6d45bc81b70a2e614fae4d695fa2c09ddeba3ef48a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_IPv6EXT_ROUTING</name>
      <anchorfile>_i_p_protocol_id__m_8h.html</anchorfile>
      <anchor>a4297c2f400ba53cf6866e6d45bc81b70a8a9f3ca312b763fe90e7df36e640f524</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_IPv6EXT_FRAGMENT</name>
      <anchorfile>_i_p_protocol_id__m_8h.html</anchorfile>
      <anchor>a4297c2f400ba53cf6866e6d45bc81b70a44b6d5555c33179fd295dd7bcfb63eaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_IPv6EXT_AUTH</name>
      <anchorfile>_i_p_protocol_id__m_8h.html</anchorfile>
      <anchor>a4297c2f400ba53cf6866e6d45bc81b70a5e8b6d37efa3790e1d449d61f23b461b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_IPv6EXT_ESP</name>
      <anchorfile>_i_p_protocol_id__m_8h.html</anchorfile>
      <anchor>a4297c2f400ba53cf6866e6d45bc81b70a8baed7b3ed1be70aee10dee7e1e77d95</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPRoute.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv4/</path>
    <filename>_i_p_route_8cc</filename>
    <includes id="_i_p_route_8h" name="IPRoute.h" local="yes" imported="no">IPRoute.h</includes>
    <includes id="_interface_entry_8h" name="InterfaceEntry.h" local="yes" imported="no">InterfaceEntry.h</includes>
  </compound>
  <compound kind="file">
    <name>IPRoute.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv4/</path>
    <filename>_i_p_route_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <class kind="class">IPRoute</class>
  </compound>
  <compound kind="file">
    <name>IPSerializer.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/headerserializers/</path>
    <filename>_i_p_serializer_8cc</filename>
    <includes id="defs_8h" name="defs.h" local="yes" imported="no">headers/defs.h</includes>
    <includes id="bsdint_8h" name="bsdint.h" local="yes" imported="no">headers/bsdint.h</includes>
    <includes id="in_8h" name="in.h" local="yes" imported="no">headers/in.h</includes>
    <includes id="in__systm_8h" name="in_systm.h" local="yes" imported="no">headers/in_systm.h</includes>
    <includes id="ip_8h" name="ip.h" local="yes" imported="no">headers/ip.h</includes>
    <includes id="_i_p_serializer_8h" name="IPSerializer.h" local="yes" imported="no">IPSerializer.h</includes>
    <includes id="_i_c_m_p_serializer_8h" name="ICMPSerializer.h" local="yes" imported="no">ICMPSerializer.h</includes>
    <includes id="_u_d_p_serializer_8h" name="UDPSerializer.h" local="yes" imported="no">UDPSerializer.h</includes>
    <includes id="_s_c_t_p_serializer_8h" name="SCTPSerializer.h" local="yes" imported="no">SCTPSerializer.h</includes>
    <includes id="_t_c_p_serializer_8h" name="TCPSerializer.h" local="yes" imported="no">TCPSerializer.h</includes>
    <class kind="struct">INETFw::in_addr</class>
    <class kind="struct">INETFw::ip</class>
    <class kind="struct">INETFw::ip_timestamp</class>
    <class kind="union">INETFw::ip_timestamp::ipt_timestamp</class>
    <class kind="struct">INETFw::ip_timestamp::ipt_timestamp::ipt_ta</class>
    <namespace>INETFw</namespace>
    <member kind="define">
      <type>#define</type>
      <name>IP_PROT_SCTP</name>
      <anchorfile>_i_p_serializer_8cc.html</anchorfile>
      <anchor>a6ef95db1429c11d64f48e6f984044589</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPSerializer.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/headerserializers/</path>
    <filename>_i_p_serializer_8h</filename>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
    <class kind="class">IPSerializer</class>
  </compound>
  <compound kind="file">
    <name>IPTrafGen.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/generic/</path>
    <filename>_i_p_traf_gen_8cc</filename>
    <includes id="_i_p_traf_gen_8h" name="IPTrafGen.h" local="yes" imported="no">IPTrafGen.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_pv6_control_info_8h" name="IPv6ControlInfo.h" local="yes" imported="no">IPv6ControlInfo.h</includes>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_i_p_traf_gen_8cc.html</anchorfile>
      <anchor>a8411149e8fce99dfb0dc3828b9e068df</anchor>
      <arglist>(IPTrafSink)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_i_p_traf_gen_8cc.html</anchorfile>
      <anchor>a3c0f1a90ef90f686462e0c44667aa8b3</anchor>
      <arglist>(IPTrafGen)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPTrafGen.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/generic/</path>
    <filename>_i_p_traf_gen_8h</filename>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
    <class kind="class">IPTrafSink</class>
    <class kind="class">IPTrafGen</class>
  </compound>
  <compound kind="file">
    <name>IPv4InterfaceData.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv4/</path>
    <filename>_i_pv4_interface_data_8cc</filename>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
  </compound>
  <compound kind="file">
    <name>IPv4InterfaceData.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv4/</path>
    <filename>_i_pv4_interface_data_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_interface_entry_8h" name="InterfaceEntry.h" local="yes" imported="no">InterfaceEntry.h</includes>
    <class kind="class">IPv4InterfaceData</class>
  </compound>
  <compound kind="file">
    <name>IPv6.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv6/</path>
    <filename>_i_pv6_8cc</filename>
    <includes id="_i_pv6_8h" name="IPv6.h" local="yes" imported="no">IPv6.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_routing_table6_access_8h" name="RoutingTable6Access.h" local="yes" imported="no">RoutingTable6Access.h</includes>
    <includes id="_i_c_m_pv6_access_8h" name="ICMPv6Access.h" local="yes" imported="no">ICMPv6Access.h</includes>
    <includes id="_i_pv6_neighbour_discovery_access_8h" name="IPv6NeighbourDiscoveryAccess.h" local="yes" imported="no">IPv6NeighbourDiscoveryAccess.h</includes>
    <includes id="_i_pv6_control_info_8h" name="IPv6ControlInfo.h" local="yes" imported="no">IPv6ControlInfo.h</includes>
    <includes id="_i_pv6_n_d_message__m_8h" name="IPv6NDMessage_m.h" local="yes" imported="no">IPv6NDMessage_m.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <includes id="_i_c_m_pv6_message__m_8h" name="ICMPv6Message_m.h" local="yes" imported="no">ICMPv6Message_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>FRAGMENT_TIMEOUT</name>
      <anchorfile>_i_pv6_8cc.html</anchorfile>
      <anchor>ab4569bcb85a0e86ed668ead8d8c836f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_i_pv6_8cc.html</anchorfile>
      <anchor>a434d50cce0221763c1939a41d862e9f0</anchor>
      <arglist>(IPv6)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPv6.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv6/</path>
    <filename>_i_pv6_8h</filename>
    <includes id="_queue_base_8h" name="QueueBase.h" local="yes" imported="no">QueueBase.h</includes>
    <includes id="_routing_table6_8h" name="RoutingTable6.h" local="yes" imported="no">RoutingTable6.h</includes>
    <includes id="_i_c_m_pv6_8h" name="ICMPv6.h" local="yes" imported="no">ICMPv6.h</includes>
    <includes id="_i_pv6_neighbour_discovery_8h" name="IPv6NeighbourDiscovery.h" local="yes" imported="no">IPv6NeighbourDiscovery.h</includes>
    <includes id="_i_pv6_datagram_8h" name="IPv6Datagram.h" local="yes" imported="no">IPv6Datagram.h</includes>
    <includes id="_i_pv6_frag_buf_8h" name="IPv6FragBuf.h" local="yes" imported="no">IPv6FragBuf.h</includes>
    <includes id="_protocol_map_8h" name="ProtocolMap.h" local="yes" imported="no">ProtocolMap.h</includes>
    <class kind="class">IPv6</class>
  </compound>
  <compound kind="file">
    <name>IPv6Address.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/contract/</path>
    <filename>_i_pv6_address_8cc</filename>
    <includes id="_i_pv6_address_8h" name="IPv6Address.h" local="yes" imported="no">IPv6Address.h</includes>
    <includes id="_interface_token_8h" name="InterfaceToken.h" local="yes" imported="no">InterfaceToken.h</includes>
    <member kind="variable">
      <type>const uint32</type>
      <name>LINK_LOCAL_PREFIX</name>
      <anchorfile>_i_pv6_address_8cc.html</anchorfile>
      <anchor>ab9e8317d7c73a1e4e4b498e950366565</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32</type>
      <name>SITE_LOCAL_PREFIX</name>
      <anchorfile>_i_pv6_address_8cc.html</anchorfile>
      <anchor>a9b1c877783c7f52ffe09e1deaf22d50d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32</type>
      <name>MULTICAST_PREFIX</name>
      <anchorfile>_i_pv6_address_8cc.html</anchorfile>
      <anchor>a2e97eea4874ef7547f00f8063b77ff9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32</type>
      <name>LINK_LOCAL_MASK</name>
      <anchorfile>_i_pv6_address_8cc.html</anchorfile>
      <anchor>aad29318188aa722e5c58283d1c2ad14c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32</type>
      <name>SITE_LOCAL_MASK</name>
      <anchorfile>_i_pv6_address_8cc.html</anchorfile>
      <anchor>afd008cb85ef7a1885c94e7bf6c2d6f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32</type>
      <name>MULTICAST_MASK</name>
      <anchorfile>_i_pv6_address_8cc.html</anchorfile>
      <anchor>a3529bd4fe754fd51cdd382f16d9e6757</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPv6Address.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/contract/</path>
    <filename>_i_pv6_address_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">IPv6Address</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_i_pv6_address_8h.html</anchorfile>
      <anchor>afc8dbb2adc384a5845511fc2fe0eb923</anchor>
      <arglist>(std::ostream &amp;os, const IPv6Address &amp;ip)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_pv6_address_8h.html</anchorfile>
      <anchor>ae1652ec62d313f21c94d35191e05c584</anchor>
      <arglist>(cCommBuffer *buf, const IPv6Address &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_pv6_address_8h.html</anchorfile>
      <anchor>a4bde9956876e46ac405ebdeeb0fabd6d</anchor>
      <arglist>(cCommBuffer *buf, IPv6Address &amp;addr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPv6ControlInfo.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/contract/</path>
    <filename>_i_pv6_control_info_8cc</filename>
    <includes id="_i_pv6_control_info_8h" name="IPv6ControlInfo.h" local="yes" imported="no">IPv6ControlInfo.h</includes>
    <includes id="_i_pv6_datagram_8h" name="IPv6Datagram.h" local="yes" imported="no">IPv6Datagram.h</includes>
  </compound>
  <compound kind="file">
    <name>IPv6ControlInfo.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/contract/</path>
    <filename>_i_pv6_control_info_8h</filename>
    <includes id="_i_pv6_control_info__m_8h" name="IPv6ControlInfo_m.h" local="yes" imported="no">IPv6ControlInfo_m.h</includes>
    <class kind="class">IPv6ControlInfo</class>
  </compound>
  <compound kind="file">
    <name>IPv6ControlInfo_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/contract/</path>
    <filename>_i_pv6_control_info__m_8h</filename>
    <includes id="_i_pv6_address_8h" name="IPv6Address.h" local="yes" imported="no">IPv6Address.h</includes>
    <includes id="_i_p_protocol_id__m_8h" name="IPProtocolId_m.h" local="yes" imported="no">IPProtocolId_m.h</includes>
    <class kind="class">IPv6ControlInfo_Base</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_i_pv6_control_info__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPv6Datagram.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv6/</path>
    <filename>_i_pv6_datagram_8cc</filename>
    <includes id="_i_pv6_datagram_8h" name="IPv6Datagram.h" local="yes" imported="no">IPv6Datagram.h</includes>
    <includes id="_i_pv6_extension_headers__m_8h" name="IPv6ExtensionHeaders_m.h" local="yes" imported="no">IPv6ExtensionHeaders_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>_i_pv6_datagram_8cc.html</anchorfile>
      <anchor>ab491f4945cc6a24cec12c9b1b602edde</anchor>
      <arglist>(IPv6Datagram)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_i_pv6_datagram_8cc.html</anchorfile>
      <anchor>af90382adaa75750d25211f146bf2b2f0</anchor>
      <arglist>(std::ostream &amp;os, IPv6ExtensionHeaderPtr eh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>_i_pv6_datagram_8cc.html</anchorfile>
      <anchor>a08164ba1483f257effb52a4e39a118ab</anchor>
      <arglist>(IPv6ExtensionHeader)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPv6Datagram.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv6/</path>
    <filename>_i_pv6_datagram_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_pv6_datagram__m_8h" name="IPv6Datagram_m.h" local="yes" imported="no">IPv6Datagram_m.h</includes>
    <class kind="class">IPv6Datagram</class>
    <class kind="class">IPv6ExtensionHeader</class>
  </compound>
  <compound kind="file">
    <name>IPv6Datagram_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv6/</path>
    <filename>_i_pv6_datagram__m_8h</filename>
    <includes id="_i_pv6_address_8h" name="IPv6Address.h" local="yes" imported="no">IPv6Address.h</includes>
    <includes id="_i_p_protocol_id__m_8h" name="IPProtocolId_m.h" local="yes" imported="no">IPProtocolId_m.h</includes>
    <class kind="class">IPv6Datagram_Base</class>
    <class kind="class">IPv6ExtensionHeader_Base</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_i_pv6_datagram__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IPv6ExtensionHeader *</type>
      <name>IPv6ExtensionHeaderPtr</name>
      <anchorfile>_i_pv6_datagram__m_8h.html</anchorfile>
      <anchor>afe4a3c2f7e35f5cd4a9a009e6513515d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_i_pv6_datagram__m_8h.html</anchorfile>
      <anchor>af90382adaa75750d25211f146bf2b2f0</anchor>
      <arglist>(std::ostream &amp;os, IPv6ExtensionHeaderPtr eh)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPv6ErrorHandling.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv6/</path>
    <filename>_i_pv6_error_handling_8cc</filename>
    <includes id="_i_pv6_error_handling_8h" name="IPv6ErrorHandling.h" local="yes" imported="no">IPv6ErrorHandling.h</includes>
    <includes id="_i_pv6_control_info_8h" name="IPv6ControlInfo.h" local="yes" imported="no">IPv6ControlInfo.h</includes>
    <includes id="_i_pv6_datagram_8h" name="IPv6Datagram.h" local="yes" imported="no">IPv6Datagram.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_i_pv6_error_handling_8cc.html</anchorfile>
      <anchor>a50fda90ff48e28652d79e04016edc546</anchor>
      <arglist>(IPv6ErrorHandling)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPv6ErrorHandling.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv6/</path>
    <filename>_i_pv6_error_handling_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_pv6_control_info_8h" name="IPv6ControlInfo.h" local="yes" imported="no">IPv6ControlInfo.h</includes>
    <includes id="_i_c_m_pv6_message__m_8h" name="ICMPv6Message_m.h" local="yes" imported="no">ICMPv6Message_m.h</includes>
    <class kind="class">IPv6ErrorHandling</class>
  </compound>
  <compound kind="file">
    <name>IPv6ExtensionHeaders_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv6/</path>
    <filename>_i_pv6_extension_headers__m_8h</filename>
    <includes id="_i_pv6_address_8h" name="IPv6Address.h" local="yes" imported="no">IPv6Address.h</includes>
    <includes id="_i_pv6_datagram_8h" name="IPv6Datagram.h" local="yes" imported="no">IPv6Datagram.h</includes>
    <class kind="class">IPv6HopByHopOptionsHeader</class>
    <class kind="class">IPv6RoutingHeader</class>
    <class kind="class">IPv6FragmentHeader</class>
    <class kind="class">IPv6DestinationOptionsHeader</class>
    <class kind="class">IPv6AuthenticationHeader</class>
    <class kind="class">IPv6EncapsulatingSecurityPayloadHeader</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_i_pv6_extension_headers__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_pv6_extension_headers__m_8h.html</anchorfile>
      <anchor>a23eeb59f987878afe5bd9eccb65180c0</anchor>
      <arglist>(cCommBuffer *b, IPv6HopByHopOptionsHeader &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_pv6_extension_headers__m_8h.html</anchorfile>
      <anchor>a6f31304177d0ff011981d0872737c723</anchor>
      <arglist>(cCommBuffer *b, IPv6HopByHopOptionsHeader &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_pv6_extension_headers__m_8h.html</anchorfile>
      <anchor>a11d81cd9ff337ea1cb9c7936f2a5e10c</anchor>
      <arglist>(cCommBuffer *b, IPv6RoutingHeader &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_pv6_extension_headers__m_8h.html</anchorfile>
      <anchor>a2b435486e078347cfc4cf3697d0dc3d7</anchor>
      <arglist>(cCommBuffer *b, IPv6RoutingHeader &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_pv6_extension_headers__m_8h.html</anchorfile>
      <anchor>ae58fff7bb347178ea437c142254d1351</anchor>
      <arglist>(cCommBuffer *b, IPv6FragmentHeader &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_pv6_extension_headers__m_8h.html</anchorfile>
      <anchor>af9d577101cdf068201b68a5dd6992ce9</anchor>
      <arglist>(cCommBuffer *b, IPv6FragmentHeader &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_pv6_extension_headers__m_8h.html</anchorfile>
      <anchor>ab723235d94da401377f073bd61fda0bf</anchor>
      <arglist>(cCommBuffer *b, IPv6DestinationOptionsHeader &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_pv6_extension_headers__m_8h.html</anchorfile>
      <anchor>a5d8923d0dc38ce46776d0301ed592b4d</anchor>
      <arglist>(cCommBuffer *b, IPv6DestinationOptionsHeader &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_pv6_extension_headers__m_8h.html</anchorfile>
      <anchor>a19ba456f5f21e3cd7612f781bdb32c0d</anchor>
      <arglist>(cCommBuffer *b, IPv6AuthenticationHeader &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_pv6_extension_headers__m_8h.html</anchorfile>
      <anchor>aef9d53b42cc21eb298210e4364fae3e9</anchor>
      <arglist>(cCommBuffer *b, IPv6AuthenticationHeader &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_pv6_extension_headers__m_8h.html</anchorfile>
      <anchor>a023b56db5811f219691008ccababaa16</anchor>
      <arglist>(cCommBuffer *b, IPv6EncapsulatingSecurityPayloadHeader &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_pv6_extension_headers__m_8h.html</anchorfile>
      <anchor>af30c085835a08eed05293f2f29227f41</anchor>
      <arglist>(cCommBuffer *b, IPv6EncapsulatingSecurityPayloadHeader &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPv6FragBuf.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv6/</path>
    <filename>_i_pv6_frag_buf_8cc</filename>
    <includes id="_i_pv6_frag_buf_8h" name="IPv6FragBuf.h" local="yes" imported="no">IPv6FragBuf.h</includes>
    <includes id="_i_c_m_pv6_8h" name="ICMPv6.h" local="yes" imported="no">ICMPv6.h</includes>
    <includes id="_i_c_m_pv6_message__m_8h" name="ICMPv6Message_m.h" local="yes" imported="no">ICMPv6Message_m.h</includes>
    <includes id="_i_pv6_datagram_8h" name="IPv6Datagram.h" local="yes" imported="no">IPv6Datagram.h</includes>
    <includes id="_i_pv6_extension_headers__m_8h" name="IPv6ExtensionHeaders_m.h" local="yes" imported="no">IPv6ExtensionHeaders_m.h</includes>
  </compound>
  <compound kind="file">
    <name>IPv6FragBuf.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv6/</path>
    <filename>_i_pv6_frag_buf_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_reassembly_buffer_8h" name="ReassemblyBuffer.h" local="yes" imported="no">ReassemblyBuffer.h</includes>
    <includes id="_i_pv6_address_8h" name="IPv6Address.h" local="yes" imported="no">IPv6Address.h</includes>
    <class kind="class">IPv6FragBuf</class>
    <class kind="struct">IPv6FragBuf::Key</class>
    <class kind="struct">IPv6FragBuf::DatagramBuffer</class>
  </compound>
  <compound kind="file">
    <name>IPv6InterfaceData.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv6/</path>
    <filename>_i_pv6_interface_data_8cc</filename>
    <includes id="_i_pv6_interface_data_8h" name="IPv6InterfaceData.h" local="yes" imported="no">IPv6InterfaceData.h</includes>
  </compound>
  <compound kind="file">
    <name>IPv6InterfaceData.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv6/</path>
    <filename>_i_pv6_interface_data_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_pv6_address_8h" name="IPv6Address.h" local="yes" imported="no">IPv6Address.h</includes>
    <includes id="_interface_entry_8h" name="InterfaceEntry.h" local="yes" imported="no">InterfaceEntry.h</includes>
    <class kind="class">IPv6InterfaceData</class>
    <class kind="struct">IPv6InterfaceData::AdvPrefix</class>
    <class kind="struct">IPv6InterfaceData::RouterConstants</class>
    <class kind="struct">IPv6InterfaceData::HostConstants</class>
    <class kind="struct">IPv6InterfaceData::NodeConstants</class>
    <class kind="struct">IPv6InterfaceData::AddressData</class>
    <class kind="struct">IPv6InterfaceData::NodeVariables</class>
    <class kind="struct">IPv6InterfaceData::HostVariables</class>
    <class kind="struct">IPv6InterfaceData::RouterVariables</class>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_DEFAULT_DUPADDRDETECTTRANSMITS</name>
      <anchorfile>_i_pv6_interface_data_8h.html</anchorfile>
      <anchor>a68e9b8fd6f7db926569d5ae6cf7045b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_MIN_MTU</name>
      <anchorfile>_i_pv6_interface_data_8h.html</anchorfile>
      <anchor>a14ff38894757dc97b9c64ca9c089c006</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_DEFAULT_ADVCURHOPLIMIT</name>
      <anchorfile>_i_pv6_interface_data_8h.html</anchorfile>
      <anchor>a3d17b32c3dc7ea066415b8a2947a6cbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_DEFAULT_MAX_RTR_ADV_INT</name>
      <anchorfile>_i_pv6_interface_data_8h.html</anchorfile>
      <anchor>ab0dc4fce8d005af0c000e749be451639</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_DEFAULT_ADV_REACHABLE_TIME</name>
      <anchorfile>_i_pv6_interface_data_8h.html</anchorfile>
      <anchor>abc13a684f5ce0034ffc9707f7714d1c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_DEFAULT_ADV_RETRANS_TIMER</name>
      <anchorfile>_i_pv6_interface_data_8h.html</anchorfile>
      <anchor>ac18aea2b3794b1e70d8152775a1d88c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6__INET_DEFAULT_ROUTER_HOPLIMIT</name>
      <anchorfile>_i_pv6_interface_data_8h.html</anchorfile>
      <anchor>aa4c808861c81ba1e48a967aa580615b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_MAX_INITIAL_RTR_ADVERT_INTERVAL</name>
      <anchorfile>_i_pv6_interface_data_8h.html</anchorfile>
      <anchor>a3aa0f6e98f8ee92f1677e3734f999bf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_MAX_INITIAL_RTR_ADVERTISEMENTS</name>
      <anchorfile>_i_pv6_interface_data_8h.html</anchorfile>
      <anchor>ac81e9bcca44739fe4401442d46c7a8ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_MAX_FINAL_RTR_ADVERTISEMENTS</name>
      <anchorfile>_i_pv6_interface_data_8h.html</anchorfile>
      <anchor>a6b72b09d45d407fae43c4ba687cff9b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_MIN_DELAY_BETWEEN_RAS</name>
      <anchorfile>_i_pv6_interface_data_8h.html</anchorfile>
      <anchor>ad5622f690c1328f1dab111d07fc60763</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_MAX_RA_DELAY_TIME</name>
      <anchorfile>_i_pv6_interface_data_8h.html</anchorfile>
      <anchor>a1ef41c2163c435aa8675b260b4cbbc46</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_MAX_RTR_SOLICITATION_DELAY</name>
      <anchorfile>_i_pv6_interface_data_8h.html</anchorfile>
      <anchor>a062efe990ca0b6b9de4742526b251a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_RTR_SOLICITATION_INTERVAL</name>
      <anchorfile>_i_pv6_interface_data_8h.html</anchorfile>
      <anchor>a4d6eb92741d4a3932b0c6903ea916f09</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_MAX_RTR_SOLICITATIONS</name>
      <anchorfile>_i_pv6_interface_data_8h.html</anchorfile>
      <anchor>af0de16d7397a225a753446215233ce74</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_MAX_MULTICAST_SOLICIT</name>
      <anchorfile>_i_pv6_interface_data_8h.html</anchorfile>
      <anchor>a1a09932ee3e0ab7b9e3f6bb28713b2f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_MAX_UNICAST_SOLICIT</name>
      <anchorfile>_i_pv6_interface_data_8h.html</anchorfile>
      <anchor>a58521ccb137aa10614db399789f8508e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_MAX_ANYCAST_DELAY_TIME</name>
      <anchorfile>_i_pv6_interface_data_8h.html</anchorfile>
      <anchor>a6b340a9b34698182a1fdcfd6f1dcfd54</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_MAX_NEIGHBOUR_ADVERTISEMENT</name>
      <anchorfile>_i_pv6_interface_data_8h.html</anchorfile>
      <anchor>a7d303a19ba1ea7ca35269a7573ea71b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_REACHABLE_TIME</name>
      <anchorfile>_i_pv6_interface_data_8h.html</anchorfile>
      <anchor>a6aca71eec80592baed66e3edb30d6d81</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_RETRANS_TIMER</name>
      <anchorfile>_i_pv6_interface_data_8h.html</anchorfile>
      <anchor>a7e56c6070ae991a97788c4b46b8da13b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_DELAY_FIRST_PROBE_TIME</name>
      <anchorfile>_i_pv6_interface_data_8h.html</anchorfile>
      <anchor>a01471f8ccfd64645f521de7f66ddc7c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_MIN_RANDOM_FACTOR</name>
      <anchorfile>_i_pv6_interface_data_8h.html</anchorfile>
      <anchor>a0223a417ed6e70dbbc43887dda51634f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_MAX_RANDOM_FACTOR</name>
      <anchorfile>_i_pv6_interface_data_8h.html</anchorfile>
      <anchor>a2030623243907093acbe9d18b607cf8d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPv6NDMessage_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/icmpv6/</path>
    <filename>_i_pv6_n_d_message__m_8h</filename>
    <includes id="_i_c_m_pv6_message__m_8h" name="ICMPv6Message_m.h" local="yes" imported="no">ICMPv6Message_m.h</includes>
    <includes id="_i_pv6_address_8h" name="IPv6Address.h" local="yes" imported="no">IPv6Address.h</includes>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <class kind="class">IPv6NDPrefixInformation</class>
    <class kind="class">IPv6NDMessage</class>
    <class kind="class">IPv6RouterSolicitation</class>
    <class kind="class">IPv6RouterAdvertisement</class>
    <class kind="class">IPv6NeighbourSolicitation</class>
    <class kind="class">IPv6NeighbourAdvertisement</class>
    <class kind="class">IPv6Redirect</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_i_pv6_n_d_message__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_pv6_n_d_message__m_8h.html</anchorfile>
      <anchor>a802a1342208c550c2f72db351b7c4a1c</anchor>
      <arglist>(cCommBuffer *b, IPv6NDPrefixInformation &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_pv6_n_d_message__m_8h.html</anchorfile>
      <anchor>a4e211e0243848653756d6fb9a7d6a710</anchor>
      <arglist>(cCommBuffer *b, IPv6NDPrefixInformation &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_pv6_n_d_message__m_8h.html</anchorfile>
      <anchor>a8b2cc109daf40b95db7f672d336b0b6f</anchor>
      <arglist>(cCommBuffer *b, IPv6NDMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_pv6_n_d_message__m_8h.html</anchorfile>
      <anchor>a742b9c26b65c0edc1eb70eb2ca906d4e</anchor>
      <arglist>(cCommBuffer *b, IPv6NDMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_pv6_n_d_message__m_8h.html</anchorfile>
      <anchor>aefab77521460bdf9c401f9f294da414f</anchor>
      <arglist>(cCommBuffer *b, IPv6RouterSolicitation &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_pv6_n_d_message__m_8h.html</anchorfile>
      <anchor>a884eb9921e86ea21bcbaab99876fcc10</anchor>
      <arglist>(cCommBuffer *b, IPv6RouterSolicitation &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_pv6_n_d_message__m_8h.html</anchorfile>
      <anchor>a76e6886723cac8d2a6bdccdeb48f63c5</anchor>
      <arglist>(cCommBuffer *b, IPv6RouterAdvertisement &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_pv6_n_d_message__m_8h.html</anchorfile>
      <anchor>abb306ece77e0ac3d059f3a26730e5188</anchor>
      <arglist>(cCommBuffer *b, IPv6RouterAdvertisement &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_pv6_n_d_message__m_8h.html</anchorfile>
      <anchor>a9e0b1b17bb3b6ba0c70ac866ad58d4d5</anchor>
      <arglist>(cCommBuffer *b, IPv6NeighbourSolicitation &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_pv6_n_d_message__m_8h.html</anchorfile>
      <anchor>af7f2ba18f722fe2eadeba3bf84119637</anchor>
      <arglist>(cCommBuffer *b, IPv6NeighbourSolicitation &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_pv6_n_d_message__m_8h.html</anchorfile>
      <anchor>a7cd1c57397510606dee47acc9b71a58f</anchor>
      <arglist>(cCommBuffer *b, IPv6NeighbourAdvertisement &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_pv6_n_d_message__m_8h.html</anchorfile>
      <anchor>a203ad72f533931ef2c706b7cf4dcbc2b</anchor>
      <arglist>(cCommBuffer *b, IPv6NeighbourAdvertisement &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_pv6_n_d_message__m_8h.html</anchorfile>
      <anchor>ac8be577eb1b7b3d0727cc8677fc4e0b6</anchor>
      <arglist>(cCommBuffer *b, IPv6Redirect &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_pv6_n_d_message__m_8h.html</anchorfile>
      <anchor>ae0738df966d5006c48cac85a310adf3d</anchor>
      <arglist>(cCommBuffer *b, IPv6Redirect &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPv6NeighbourCache.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/icmpv6/</path>
    <filename>_i_pv6_neighbour_cache_8cc</filename>
    <includes id="_i_pv6_neighbour_cache_8h" name="IPv6NeighbourCache.h" local="yes" imported="no">IPv6NeighbourCache.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_i_pv6_neighbour_cache_8cc.html</anchorfile>
      <anchor>a75e8bbfe79c7164741a27b1afc1588e2</anchor>
      <arglist>(std::ostream &amp;os, const IPv6NeighbourCache::Key &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_i_pv6_neighbour_cache_8cc.html</anchorfile>
      <anchor>a58ad1ea97d75a618d6e2fcc8a803c599</anchor>
      <arglist>(std::ostream &amp;os, const IPv6NeighbourCache::Neighbour &amp;e)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPv6NeighbourCache.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/icmpv6/</path>
    <filename>_i_pv6_neighbour_cache_8h</filename>
    <includes id="_i_pv6_address_8h" name="IPv6Address.h" local="yes" imported="no">IPv6Address.h</includes>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <class kind="class">IPv6NeighbourCache</class>
    <class kind="struct">IPv6NeighbourCache::Key</class>
    <class kind="struct">IPv6NeighbourCache::Neighbour</class>
  </compound>
  <compound kind="file">
    <name>IPv6NeighbourDiscovery.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/icmpv6/</path>
    <filename>_i_pv6_neighbour_discovery_8cc</filename>
    <includes id="_i_pv6_neighbour_discovery_8h" name="IPv6NeighbourDiscovery.h" local="yes" imported="no">IPv6NeighbourDiscovery.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MK_ASSIGN_LINKLOCAL_ADDRESS</name>
      <anchorfile>_i_pv6_neighbour_discovery_8cc.html</anchorfile>
      <anchor>aed4b9313083f229d6a498c6c337f931e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MK_SEND_PERIODIC_RTRADV</name>
      <anchorfile>_i_pv6_neighbour_discovery_8cc.html</anchorfile>
      <anchor>a810fd09c143fca097e7f2569c9f9b89c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MK_SEND_SOL_RTRADV</name>
      <anchorfile>_i_pv6_neighbour_discovery_8cc.html</anchorfile>
      <anchor>ab76c2fe672ed307b0a91f9efa35a7548</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MK_INITIATE_RTRDIS</name>
      <anchorfile>_i_pv6_neighbour_discovery_8cc.html</anchorfile>
      <anchor>aadba1232289c7af8c42ae503b367f409</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MK_DAD_TIMEOUT</name>
      <anchorfile>_i_pv6_neighbour_discovery_8cc.html</anchorfile>
      <anchor>a81f972006a357c3ddda2dfcfd7469015</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MK_RD_TIMEOUT</name>
      <anchorfile>_i_pv6_neighbour_discovery_8cc.html</anchorfile>
      <anchor>a9f894036bf61bbc51aa7a8560db5a30e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MK_NUD_TIMEOUT</name>
      <anchorfile>_i_pv6_neighbour_discovery_8cc.html</anchorfile>
      <anchor>a817ccecd04135b6f9307b110598e476e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MK_AR_TIMEOUT</name>
      <anchorfile>_i_pv6_neighbour_discovery_8cc.html</anchorfile>
      <anchor>a3599ccb8ab8108c0d27c47561d6f93e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_i_pv6_neighbour_discovery_8cc.html</anchorfile>
      <anchor>a0280c09efdabb45e87efdc5453a5e7f2</anchor>
      <arglist>(IPv6NeighbourDiscovery)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPv6NeighbourDiscovery.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/icmpv6/</path>
    <filename>_i_pv6_neighbour_discovery_8h</filename>
    <includes id="_i_pv6_address_8h" name="IPv6Address.h" local="yes" imported="no">IPv6Address.h</includes>
    <includes id="_i_pv6_datagram_8h" name="IPv6Datagram.h" local="yes" imported="no">IPv6Datagram.h</includes>
    <includes id="_i_pv6_n_d_message__m_8h" name="IPv6NDMessage_m.h" local="yes" imported="no">IPv6NDMessage_m.h</includes>
    <includes id="_i_pv6_control_info_8h" name="IPv6ControlInfo.h" local="yes" imported="no">IPv6ControlInfo.h</includes>
    <includes id="_i_pv6_interface_data_8h" name="IPv6InterfaceData.h" local="yes" imported="no">IPv6InterfaceData.h</includes>
    <includes id="_interface_entry_8h" name="InterfaceEntry.h" local="yes" imported="no">InterfaceEntry.h</includes>
    <includes id="_i_interface_table_8h" name="IInterfaceTable.h" local="yes" imported="no">IInterfaceTable.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_routing_table6_8h" name="RoutingTable6.h" local="yes" imported="no">RoutingTable6.h</includes>
    <includes id="_routing_table6_access_8h" name="RoutingTable6Access.h" local="yes" imported="no">RoutingTable6Access.h</includes>
    <includes id="_i_pv6_neighbour_cache_8h" name="IPv6NeighbourCache.h" local="yes" imported="no">IPv6NeighbourCache.h</includes>
    <includes id="_i_c_m_pv6_8h" name="ICMPv6.h" local="yes" imported="no">ICMPv6.h</includes>
    <includes id="_i_c_m_pv6_access_8h" name="ICMPv6Access.h" local="yes" imported="no">ICMPv6Access.h</includes>
    <class kind="class">IPv6NeighbourDiscovery</class>
    <class kind="struct">IPv6NeighbourDiscovery::DADEntry</class>
    <class kind="struct">IPv6NeighbourDiscovery::RDEntry</class>
    <class kind="struct">IPv6NeighbourDiscovery::AdvIfEntry</class>
  </compound>
  <compound kind="file">
    <name>IPv6NeighbourDiscoveryAccess.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/icmpv6/</path>
    <filename>_i_pv6_neighbour_discovery_access_8h</filename>
    <includes id="_module_access_8h" name="ModuleAccess.h" local="yes" imported="no">ModuleAccess.h</includes>
    <includes id="_i_pv6_neighbour_discovery_8h" name="IPv6NeighbourDiscovery.h" local="yes" imported="no">IPv6NeighbourDiscovery.h</includes>
    <class kind="class">IPv6NeighbourDiscoveryAccess</class>
  </compound>
  <compound kind="file">
    <name>IPvXAddress.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/contract/</path>
    <filename>_i_pv_x_address_8cc</filename>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
  </compound>
  <compound kind="file">
    <name>IPvXAddress.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/contract/</path>
    <filename>_i_pv_x_address_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_i_pv6_address_8h" name="IPv6Address.h" local="yes" imported="no">IPv6Address.h</includes>
    <class kind="class">IPvXAddress</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_i_pv_x_address_8h.html</anchorfile>
      <anchor>a6fd41f2dbae625f64a7ef601f26d9bf7</anchor>
      <arglist>(std::ostream &amp;os, const IPvXAddress &amp;ip)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_i_pv_x_address_8h.html</anchorfile>
      <anchor>a2898acd65666a6e38fe7a28eef204c37</anchor>
      <arglist>(cCommBuffer *buf, const IPvXAddress &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_i_pv_x_address_8h.html</anchorfile>
      <anchor>a3cd4a20d1a3cbec22de0ebe9fadc9569</anchor>
      <arglist>(cCommBuffer *buf, IPvXAddress &amp;addr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IQoSClassifier.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/queue/</path>
    <filename>_i_qo_s_classifier_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">IQoSClassifier</class>
  </compound>
  <compound kind="file">
    <name>IRadioModel.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/radio/</path>
    <filename>_i_radio_model_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">AirFrame_m.h</includes>
    <includes id="_snr_list_8h" name="SnrList.h" local="yes" imported="no">SnrList.h</includes>
    <class kind="class">IRadioModel</class>
  </compound>
  <compound kind="file">
    <name>IReceptionModel.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/radio/</path>
    <filename>_i_reception_model_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">IReceptionModel</class>
  </compound>
  <compound kind="file">
    <name>IRoutingTable.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv4/</path>
    <filename>_i_routing_table_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_i_p_route_8h" name="IPRoute.h" local="yes" imported="no">IPRoute.h</includes>
    <class kind="struct">MulticastRoute</class>
    <class kind="class">IRoutingTable</class>
    <member kind="typedef">
      <type>std::vector&lt; MulticastRoute &gt;</type>
      <name>MulticastRoutes</name>
      <anchorfile>_i_routing_table_8h.html</anchorfile>
      <anchor>a799f7871a09579309555eed682ecf0cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IRSVPClassifier.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/rsvp_te/</path>
    <filename>_i_r_s_v_p_classifier_8h</filename>
    <includes id="_int_serv_8h" name="IntServ.h" local="yes" imported="no">IntServ.h</includes>
    <includes id="_i_classifier_8h" name="IClassifier.h" local="yes" imported="no">IClassifier.h</includes>
    <class kind="class">IRSVPClassifier</class>
  </compound>
  <compound kind="file">
    <name>IScriptable.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_i_scriptable_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">IScriptable</class>
  </compound>
  <compound kind="file">
    <name>Join.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_join_8cc</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">Join</class>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_join_8cc.html</anchorfile>
      <anchor>a348d99a62f6a247672543b850b63f66e</anchor>
      <arglist>(Join)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LDP.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ldp/</path>
    <filename>_l_d_p_8cc</filename>
    <includes id="_const_type_8h" name="ConstType.h" local="yes" imported="no">ConstType.h</includes>
    <includes id="_l_d_p_8h" name="LDP.h" local="yes" imported="no">LDP.h</includes>
    <includes id="_l_i_b_table_8h" name="LIBTable.h" local="yes" imported="no">LIBTable.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
    <includes id="_routing_table_access_8h" name="RoutingTableAccess.h" local="yes" imported="no">RoutingTableAccess.h</includes>
    <includes id="_l_i_b_table_access_8h" name="LIBTableAccess.h" local="yes" imported="no">LIBTableAccess.h</includes>
    <includes id="_t_e_d_access_8h" name="TEDAccess.h" local="yes" imported="no">TEDAccess.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <includes id="_u_d_p_packet_8h" name="UDPPacket.h" local="yes" imported="no">UDPPacket.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_l_d_p_8cc.html</anchorfile>
      <anchor>a047b39dbff3aa17385a274b00feeddb9</anchor>
      <arglist>(LDP)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_l_d_p_8cc.html</anchorfile>
      <anchor>ab86a09c61fe77a635b7ab9ad92b978c8</anchor>
      <arglist>(std::ostream &amp;os, const LDP::fec_bind_t &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fecPrefixCompare</name>
      <anchorfile>_l_d_p_8cc.html</anchorfile>
      <anchor>a1e6892349ebc14dde68f926f1b8d87cd</anchor>
      <arglist>(const LDP::fec_t &amp;a, const LDP::fec_t &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_l_d_p_8cc.html</anchorfile>
      <anchor>acab2d77eecec636a7fdc2260a20908e3</anchor>
      <arglist>(std::ostream &amp;os, const LDP::fec_t &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_l_d_p_8cc.html</anchorfile>
      <anchor>ace3331ce7dcda555f18001ed0cc1359f</anchor>
      <arglist>(std::ostream &amp;os, const LDP::pending_req_t &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_l_d_p_8cc.html</anchorfile>
      <anchor>a829e171daaf17b651bb2929c6daca734</anchor>
      <arglist>(std::ostream &amp;os, const LDP::peer_info &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>_l_d_p_8cc.html</anchorfile>
      <anchor>aec4fce57ab67052a78eec3f7b66f2dc5</anchor>
      <arglist>(const FEC_TLV &amp;a, const FEC_TLV &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>_l_d_p_8cc.html</anchorfile>
      <anchor>a453bead0b02b301046f21ce92c007d6e</anchor>
      <arglist>(const FEC_TLV &amp;a, const FEC_TLV &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_l_d_p_8cc.html</anchorfile>
      <anchor>a846c4a9fc90261231b33d0a7a2affb1f</anchor>
      <arglist>(std::ostream &amp;os, const FEC_TLV &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LDP.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ldp/</path>
    <filename>_l_d_p_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_l_d_p_packet__m_8h" name="LDPPacket_m.h" local="yes" imported="no">LDPPacket_m.h</includes>
    <includes id="_u_d_p_socket_8h" name="UDPSocket.h" local="yes" imported="no">UDPSocket.h</includes>
    <includes id="_t_c_p_socket_8h" name="TCPSocket.h" local="yes" imported="no">TCPSocket.h</includes>
    <includes id="_t_c_p_socket_map_8h" name="TCPSocketMap.h" local="yes" imported="no">TCPSocketMap.h</includes>
    <includes id="_i_classifier_8h" name="IClassifier.h" local="yes" imported="no">IClassifier.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <class kind="class">LDP</class>
    <class kind="struct">LDP::fec_t</class>
    <class kind="struct">LDP::fec_bind_t</class>
    <class kind="struct">LDP::pending_req_t</class>
    <class kind="struct">LDP::peer_info</class>
    <member kind="define">
      <type>#define</type>
      <name>LDP_PORT</name>
      <anchorfile>_l_d_p_8h.html</anchorfile>
      <anchor>a10b9b0d50dcb805c5a1db8aa8c02ca3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LDP_TRAFFIC</name>
      <anchorfile>_l_d_p_8h.html</anchorfile>
      <anchor>a28c1eff3e81ec1d998a8678f0799b2a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LDP_HELLO_TRAFFIC</name>
      <anchorfile>_l_d_p_8h.html</anchorfile>
      <anchor>ac61edad3b726cd30ff860a571266ff50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LDP_USER_TRAFFIC</name>
      <anchorfile>_l_d_p_8h.html</anchorfile>
      <anchor>a819e3794dd985814c77459acdb71042f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LDPPacket_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ldp/</path>
    <filename>_l_d_p_packet__m_8h</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <class kind="struct">FEC_TLV</class>
    <class kind="class">LDPPacket</class>
    <class kind="class">LDPLabelMapping</class>
    <class kind="class">LDPLabelRequest</class>
    <class kind="class">LDPHello</class>
    <class kind="class">LDPNotify</class>
    <class kind="class">LDPIni</class>
    <class kind="class">LDPAddress</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LDP_BASEHEADER_BYTES</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>aefe864381cabd18bf8ea28730546ce36</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LDP_HEADER_BYTES</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>ae5cdb34a890024cf1fb6cc148a76adfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>LDP_MESSAGE_TYPES</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>a0427916c08194b31d2adf5da83f635b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOTIFICATION</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>a0427916c08194b31d2adf5da83f635b3ac471f802051d229d2e12947bbf886f96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HELLO</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>a0427916c08194b31d2adf5da83f635b3a572e2128aeb8cc392386eb1610a1fada</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INITIALIZATION</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>a0427916c08194b31d2adf5da83f635b3a3f68f09b467e0062fc47370c7e961578</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEEP_ALIVE</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>a0427916c08194b31d2adf5da83f635b3aee186e683cde450b8cba8313951b20a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADDRESS</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>a0427916c08194b31d2adf5da83f635b3a4fabbaac7b5e57d7b8b019a0f79ce492</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADDRESS_WITHDRAW</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>a0427916c08194b31d2adf5da83f635b3a0dee6cb4ef910becd493a70e655b8768</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LABEL_MAPPING</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>a0427916c08194b31d2adf5da83f635b3a21684054f4791ac4ad3ecd4cffd4c8f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LABEL_REQUEST</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>a0427916c08194b31d2adf5da83f635b3a13f9e4988522509bb13178c320a7f5c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LABEL_WITHDRAW</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>a0427916c08194b31d2adf5da83f635b3a7fd292325bd8d0d4a4d466f1e969c494</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LABEL_RELEASE</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>a0427916c08194b31d2adf5da83f635b3ad4cdfab707c90f09c9bd6481e3c2406d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>a0427916c08194b31d2adf5da83f635b3a6ce26a62afab55d7606ad4e92428b30c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>LDP_STATUS_TYPES</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>ad97f39f1c02ee4465a8cd420fc590d0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_ROUTE</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>ad97f39f1c02ee4465a8cd420fc590d0aa7f3989f2a6e77f5c6df85ff6210c6b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>a104e7c95842e33f07aaa81cd5a2ad291</anchor>
      <arglist>(cCommBuffer *b, FEC_TLV &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>a7b35a5d20201b56a13f62c3cf402b75a</anchor>
      <arglist>(cCommBuffer *b, FEC_TLV &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>ab6fb2e26fbb56ed1704d7787b3d69e06</anchor>
      <arglist>(cCommBuffer *b, LDPPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>a647bb10be7dd0cb8b94bfce45eb78827</anchor>
      <arglist>(cCommBuffer *b, LDPPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>a961fe1e12e9ec8c477ad1d149adee1e9</anchor>
      <arglist>(cCommBuffer *b, LDPLabelMapping &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>a433b0cf0e48d39b441f611c98c05f7f7</anchor>
      <arglist>(cCommBuffer *b, LDPLabelMapping &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>a3840716318e62238acec868d5b135d0e</anchor>
      <arglist>(cCommBuffer *b, LDPLabelRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>a574c6350e690ba4b62cf4ba2b10ca798</anchor>
      <arglist>(cCommBuffer *b, LDPLabelRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>ab94657681810591435f4256860b65370</anchor>
      <arglist>(cCommBuffer *b, LDPHello &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>a69972453a7461ca57ca0421b1c2216e4</anchor>
      <arglist>(cCommBuffer *b, LDPHello &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>aa293dee69b7e06478b9e23213c435a00</anchor>
      <arglist>(cCommBuffer *b, LDPNotify &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>a8b897604aadd449d99669c63041252fd</anchor>
      <arglist>(cCommBuffer *b, LDPNotify &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>a4b7fba70d2fde49ea570abdb3859d255</anchor>
      <arglist>(cCommBuffer *b, LDPIni &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>aa62caee8a80b70e46fc1bf34268e9ccd</anchor>
      <arglist>(cCommBuffer *b, LDPIni &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>ad9889ef679b6ff14508a4b1aa7f2f628</anchor>
      <arglist>(cCommBuffer *b, LDPAddress &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_l_d_p_packet__m_8h.html</anchorfile>
      <anchor>a733e5f262909346c89692b9f4b8941a4</anchor>
      <arglist>(cCommBuffer *b, LDPAddress &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LIBTable.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/mpls/</path>
    <filename>_l_i_b_table_8cc</filename>
    <includes id="_l_i_b_table_8h" name="LIBTable.h" local="yes" imported="no">LIBTable.h</includes>
    <includes id="_x_m_l_utils_8h" name="XMLUtils.h" local="yes" imported="no">XMLUtils.h</includes>
    <includes id="_routing_table_access_8h" name="RoutingTableAccess.h" local="yes" imported="no">RoutingTableAccess.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_l_i_b_table_8cc.html</anchorfile>
      <anchor>a0d38797ac22847899bb328834582e454</anchor>
      <arglist>(LIBTable)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_l_i_b_table_8cc.html</anchorfile>
      <anchor>a4fbbfaec5002b3b522b7396397cb1410</anchor>
      <arglist>(std::ostream &amp;os, const LabelOpVector &amp;label)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_l_i_b_table_8cc.html</anchorfile>
      <anchor>abb87f76430a05af8b93a06bbf967096f</anchor>
      <arglist>(std::ostream &amp;os, const LIBTable::LIBEntry &amp;lib)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LIBTable.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/mpls/</path>
    <filename>_l_i_b_table_8h</filename>
    <includes id="_const_type_8h" name="ConstType.h" local="yes" imported="no">ConstType.h</includes>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
    <class kind="struct">LabelOp</class>
    <class kind="class">LIBTable</class>
    <class kind="struct">LIBTable::LIBEntry</class>
    <member kind="define">
      <type>#define</type>
      <name>PUSH_OPER</name>
      <anchorfile>_l_i_b_table_8h.html</anchorfile>
      <anchor>a65b91ade86c62b52fbee5d49482c7e0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWAP_OPER</name>
      <anchorfile>_l_i_b_table_8h.html</anchorfile>
      <anchor>a987e9fc2a7ff421450ac8779ccbd336f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POP_OPER</name>
      <anchorfile>_l_i_b_table_8h.html</anchorfile>
      <anchor>ab10ea02f37621d1407e5fec0b9206ce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; LabelOp &gt;</type>
      <name>LabelOpVector</name>
      <anchorfile>_l_i_b_table_8h.html</anchorfile>
      <anchor>a40d505abe4d03bca1c9776ebb1a874e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_l_i_b_table_8h.html</anchorfile>
      <anchor>abb87f76430a05af8b93a06bbf967096f</anchor>
      <arglist>(std::ostream &amp;os, const LIBTable::LIBEntry &amp;lib)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_l_i_b_table_8h.html</anchorfile>
      <anchor>a4fbbfaec5002b3b522b7396397cb1410</anchor>
      <arglist>(std::ostream &amp;os, const LabelOpVector &amp;label)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LIBTableAccess.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/mpls/</path>
    <filename>_l_i_b_table_access_8h</filename>
    <includes id="_module_access_8h" name="ModuleAccess.h" local="yes" imported="no">ModuleAccess.h</includes>
    <includes id="_l_i_b_table_8h" name="LIBTable.h" local="yes" imported="no">LIBTable.h</includes>
    <class kind="class">LIBTableAccess</class>
  </compound>
  <compound kind="file">
    <name>LinearMobility.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/mobility/</path>
    <filename>_linear_mobility_8cc</filename>
    <includes id="_linear_mobility_8h" name="LinearMobility.h" local="yes" imported="no">LinearMobility.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_linear_mobility_8cc.html</anchorfile>
      <anchor>a0bd29e954d28daa836d9e27c34626b1a</anchor>
      <arglist>(LinearMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LinearMobility.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/mobility/</path>
    <filename>_linear_mobility_8h</filename>
    <includes id="_basic_mobility_8h" name="BasicMobility.h" local="yes" imported="no">BasicMobility.h</includes>
    <class kind="class">LinearMobility</class>
  </compound>
  <compound kind="file">
    <name>LineSegmentsMobilityBase.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/mobility/</path>
    <filename>_line_segments_mobility_base_8cc</filename>
    <includes id="_line_segments_mobility_base_8h" name="LineSegmentsMobilityBase.h" local="yes" imported="no">LineSegmentsMobilityBase.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
  </compound>
  <compound kind="file">
    <name>LineSegmentsMobilityBase.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/mobility/</path>
    <filename>_line_segments_mobility_base_8h</filename>
    <includes id="_basic_mobility_8h" name="BasicMobility.h" local="yes" imported="no">BasicMobility.h</includes>
    <class kind="class">LineSegmentsMobilityBase</class>
  </compound>
  <compound kind="file">
    <name>LinkStateAcknowledgementHandler.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/messagehandler/</path>
    <filename>_link_state_acknowledgement_handler_8cc</filename>
    <includes id="_link_state_acknowledgement_handler_8h" name="LinkStateAcknowledgementHandler.h" local="yes" imported="no">LinkStateAcknowledgementHandler.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>LinkStateAcknowledgementHandler.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/messagehandler/</path>
    <filename>_link_state_acknowledgement_handler_8h</filename>
    <includes id="_i_message_handler_8h" name="IMessageHandler.h" local="yes" imported="no">IMessageHandler.h</includes>
    <class kind="class">OSPF::LinkStateAcknowledgementHandler</class>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>LinkStatePacket_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ted/</path>
    <filename>_link_state_packet__m_8h</filename>
    <includes id="_t_e_d__m_8h" name="TED_m.h" local="yes" imported="no">TED_m.h</includes>
    <class kind="class">LinkStateMsg</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_link_state_packet__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_link_state_packet__m_8h.html</anchorfile>
      <anchor>a8beecbdf5e2f43dc228c362c79215d7c</anchor>
      <arglist>(cCommBuffer *b, LinkStateMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_link_state_packet__m_8h.html</anchorfile>
      <anchor>ad77c3ab349061848096756d2741e962a</anchor>
      <arglist>(cCommBuffer *b, LinkStateMsg &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LinkStateRequestHandler.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/messagehandler/</path>
    <filename>_link_state_request_handler_8cc</filename>
    <includes id="_link_state_request_handler_8h" name="LinkStateRequestHandler.h" local="yes" imported="no">LinkStateRequestHandler.h</includes>
    <includes id="_o_s_p_f_neighbor_8h" name="OSPFNeighbor.h" local="yes" imported="no">OSPFNeighbor.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>LinkStateRequestHandler.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/messagehandler/</path>
    <filename>_link_state_request_handler_8h</filename>
    <includes id="_i_message_handler_8h" name="IMessageHandler.h" local="yes" imported="no">IMessageHandler.h</includes>
    <class kind="class">OSPF::LinkStateRequestHandler</class>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>LinkStateRouting.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ted/</path>
    <filename>_link_state_routing_8cc</filename>
    <includes id="_link_state_routing_8h" name="LinkStateRouting.h" local="yes" imported="no">LinkStateRouting.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <includes id="_routing_table_access_8h" name="RoutingTableAccess.h" local="yes" imported="no">RoutingTableAccess.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <includes id="_t_e_d_8h" name="TED.h" local="yes" imported="no">TED.h</includes>
    <includes id="_t_e_d_access_8h" name="TEDAccess.h" local="yes" imported="no">TEDAccess.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_link_state_routing_8cc.html</anchorfile>
      <anchor>aec56ba27c34728165d65c2108d99b263</anchor>
      <arglist>(LinkStateRouting)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LinkStateRouting.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ted/</path>
    <filename>_link_state_routing_8h</filename>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <includes id="_link_state_packet__m_8h" name="LinkStatePacket_m.h" local="yes" imported="no">LinkStatePacket_m.h</includes>
    <includes id="_int_serv_8h" name="IntServ.h" local="yes" imported="no">IntServ.h</includes>
    <class kind="class">LinkStateRouting</class>
    <member kind="define">
      <type>#define</type>
      <name>TED_TRAFFIC</name>
      <anchorfile>_link_state_routing_8h.html</anchorfile>
      <anchor>a98a84a9e67f96e70fba99f2b8a1c120a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LinkStateUpdateHandler.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/messagehandler/</path>
    <filename>_link_state_update_handler_8cc</filename>
    <includes id="_link_state_update_handler_8h" name="LinkStateUpdateHandler.h" local="yes" imported="no">LinkStateUpdateHandler.h</includes>
    <includes id="_o_s_p_fcommon_8h" name="OSPFcommon.h" local="yes" imported="no">OSPFcommon.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_neighbor_8h" name="OSPFNeighbor.h" local="yes" imported="no">OSPFNeighbor.h</includes>
    <class kind="class">LSAProcessingMarker</class>
  </compound>
  <compound kind="file">
    <name>LinkStateUpdateHandler.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/messagehandler/</path>
    <filename>_link_state_update_handler_8h</filename>
    <includes id="_i_message_handler_8h" name="IMessageHandler.h" local="yes" imported="no">IMessageHandler.h</includes>
    <includes id="_o_s_p_fcommon_8h" name="OSPFcommon.h" local="yes" imported="no">OSPFcommon.h</includes>
    <class kind="class">OSPF::LinkStateUpdateHandler</class>
    <class kind="struct">OSPF::LinkStateUpdateHandler::AcknowledgementFlags</class>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>LSA.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/router/</path>
    <filename>_l_s_a_8h</filename>
    <includes id="_o_s_p_f_packet__m_8h" name="OSPFPacket_m.h" local="yes" imported="no">OSPFPacket_m.h</includes>
    <includes id="_o_s_p_fcommon_8h" name="OSPFcommon.h" local="yes" imported="no">OSPFcommon.h</includes>
    <class kind="struct">OSPF::NextHop</class>
    <class kind="class">OSPF::RoutingInfo</class>
    <class kind="class">OSPF::LSATrackingInfo</class>
    <class kind="class">OSPF::RouterLSA</class>
    <class kind="class">OSPF::NetworkLSA</class>
    <class kind="class">OSPF::SummaryLSA</class>
    <class kind="class">OSPF::ASExternalLSA</class>
    <namespace>OSPF</namespace>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>_l_s_a_8h.html</anchorfile>
      <anchor>af5197092e66fe113405b42c74a4f4cb6</anchor>
      <arglist>(const OSPFLSAHeader &amp;leftLSA, const OSPFLSAHeader &amp;rightLSA)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>_l_s_a_8h.html</anchorfile>
      <anchor>a82cd98536c189265d8f588ef72d93f7c</anchor>
      <arglist>(const OSPFLSAHeader &amp;leftLSA, const OSPFLSAHeader &amp;rightLSA)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>_l_s_a_8h.html</anchorfile>
      <anchor>a44abec2b0949bf0f34c3e9e2ed80f6dd</anchor>
      <arglist>(const OSPFOptions &amp;leftOptions, const OSPFOptions &amp;rightOptions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>_l_s_a_8h.html</anchorfile>
      <anchor>a5fecc7b74773ae79cdf272243506fa98</anchor>
      <arglist>(const OSPFOptions &amp;leftOptions, const OSPFOptions &amp;rightOptions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>_l_s_a_8h.html</anchorfile>
      <anchor>a47b0106995ad304a4b44d98b7039790f</anchor>
      <arglist>(const OSPF::NextHop &amp;leftHop, const OSPF::NextHop &amp;rightHop)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>_l_s_a_8h.html</anchorfile>
      <anchor>a6c00540d33e1e66db478f90e8d332698</anchor>
      <arglist>(const OSPF::NextHop &amp;leftHop, const OSPF::NextHop &amp;rightHop)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>CalculateLSASize</name>
      <anchorfile>_l_s_a_8h.html</anchorfile>
      <anchor>ad62b97c7d9425ef443cdf7766a31c6b8</anchor>
      <arglist>(const OSPFRouterLSA *routerLSA)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>CalculateLSASize</name>
      <anchorfile>_l_s_a_8h.html</anchorfile>
      <anchor>ab410b2694141a256a74d9e4a1f1fd90f</anchor>
      <arglist>(const OSPFNetworkLSA *networkLSA)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>CalculateLSASize</name>
      <anchorfile>_l_s_a_8h.html</anchorfile>
      <anchor>ad65bef78d66d2961e5849a72dfbc2e3e</anchor>
      <arglist>(const OSPFSummaryLSA *summaryLSA)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>CalculateLSASize</name>
      <anchorfile>_l_s_a_8h.html</anchorfile>
      <anchor>a68f6c7b674bc04f6c6c93be0d6440f09</anchor>
      <arglist>(const OSPFASExternalLSA *asExternalLSA)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintLSAHeader</name>
      <anchorfile>_l_s_a_8h.html</anchorfile>
      <anchor>a44d2835f9421021b7eee669af9c4cb98</anchor>
      <arglist>(const OSPFLSAHeader &amp;lsaHeader, std::ostream &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_l_s_a_8h.html</anchorfile>
      <anchor>a64deb2407c19596487a4193af4082231</anchor>
      <arglist>(std::ostream &amp;ostr, OSPFLSA &amp;lsa)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Mac80211.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mf80211/macLayer/</path>
    <filename>_mac80211_8cc</filename>
    <includes id="_mac80211_8h" name="Mac80211.h" local="yes" imported="no">Mac80211.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <includes id="_radio_state_8h" name="RadioState.h" local="yes" imported="no">RadioState.h</includes>
    <includes id="_i_interface_table_8h" name="IInterfaceTable.h" local="yes" imported="no">IInterfaceTable.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CASE</name>
      <anchorfile>_mac80211_8cc.html</anchorfile>
      <anchor>a60cc06bef97da802b8522d258ac4fe89</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CASE</name>
      <anchorfile>_mac80211_8cc.html</anchorfile>
      <anchor>a60cc06bef97da802b8522d258ac4fe89</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CASE</name>
      <anchorfile>_mac80211_8cc.html</anchorfile>
      <anchor>a60cc06bef97da802b8522d258ac4fe89</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_mac80211_8cc.html</anchorfile>
      <anchor>a4c21c955d89f1bc4e66a7a3e7b7ee189</anchor>
      <arglist>(Mac80211)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Mac80211.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mf80211/macLayer/</path>
    <filename>_mac80211_8h</filename>
    <includes id="_wireless_mac_base_8h" name="WirelessMacBase.h" local="yes" imported="no">WirelessMacBase.h</includes>
    <includes id="_mac80211_pkt__m_8h" name="Mac80211Pkt_m.h" local="yes" imported="no">Mac80211Pkt_m.h</includes>
    <includes id="_consts80211_8h" name="Consts80211.h" local="yes" imported="no">Consts80211.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <includes id="_radio_state_8h" name="RadioState.h" local="yes" imported="no">RadioState.h</includes>
    <class kind="class">Mac80211</class>
  </compound>
  <compound kind="file">
    <name>Mac80211Pkt_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mf80211/macLayer/</path>
    <filename>_mac80211_pkt__m_8h</filename>
    <includes id="_mac_pkt__m_8h" name="MacPkt_m.h" local="yes" imported="no">MacPkt_m.h</includes>
    <class kind="class">Mac80211Pkt</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_mac80211_pkt__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_mac80211_pkt__m_8h.html</anchorfile>
      <anchor>a3636b139d0b4cc3ebd195a2f1f43a065</anchor>
      <arglist>(cCommBuffer *b, Mac80211Pkt &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_mac80211_pkt__m_8h.html</anchorfile>
      <anchor>afd4838fe235bac3190a45d54f5efd986</anchor>
      <arglist>(cCommBuffer *b, Mac80211Pkt &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MACAddress.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/contract/</path>
    <filename>_m_a_c_address_8cc</filename>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <includes id="_interface_token_8h" name="InterfaceToken.h" local="yes" imported="no">InterfaceToken.h</includes>
  </compound>
  <compound kind="file">
    <name>MACAddress.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/contract/</path>
    <filename>_m_a_c_address_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">MACAddress</class>
    <member kind="define">
      <type>#define</type>
      <name>MAC_ADDRESS_BYTES</name>
      <anchorfile>_m_a_c_address_8h.html</anchorfile>
      <anchor>a2c5a4d212bbdcc4a4e979c8cd2b68462</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_m_a_c_address_8h.html</anchorfile>
      <anchor>a64ed626d29a2cdf6ff0bb8f0b77ead6f</anchor>
      <arglist>(std::ostream &amp;os, const MACAddress &amp;mac)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MacPkt_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mf80211/macLayer/</path>
    <filename>_mac_pkt__m_8h</filename>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <class kind="class">MacPkt</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_mac_pkt__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_mac_pkt__m_8h.html</anchorfile>
      <anchor>a6e80fe061f237f06d3061c1dff3636c7</anchor>
      <arglist>(cCommBuffer *b, MacPkt &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_mac_pkt__m_8h.html</anchorfile>
      <anchor>a6956d0946b0b1b7f8a570be8edd08551</anchor>
      <arglist>(cCommBuffer *b, MacPkt &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MACRelayUnitBase.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/etherswitch/</path>
    <filename>_m_a_c_relay_unit_base_8cc</filename>
    <includes id="_m_a_c_relay_unit_base_8h" name="MACRelayUnitBase.h" local="yes" imported="no">MACRelayUnitBase.h</includes>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <includes id="_ether_frame__m_8h" name="EtherFrame_m.h" local="yes" imported="no">EtherFrame_m.h</includes>
    <includes id="_ethernet_8h" name="Ethernet.h" local="yes" imported="no">Ethernet.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MAX_LINE</name>
      <anchorfile>_m_a_c_relay_unit_base_8cc.html</anchorfile>
      <anchor>a842ed03f27719bc87666bfd1f75415b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MACRelayUnitBase.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/etherswitch/</path>
    <filename>_m_a_c_relay_unit_base_8h</filename>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <class kind="class">MACRelayUnitBase</class>
    <class kind="struct">MACRelayUnitBase::AddressEntry</class>
    <class kind="struct">MACRelayUnitBase::MAC_compare</class>
  </compound>
  <compound kind="file">
    <name>MACRelayUnitNP.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/etherswitch/</path>
    <filename>_m_a_c_relay_unit_n_p_8cc</filename>
    <includes id="_m_a_c_relay_unit_n_p_8h" name="MACRelayUnitNP.h" local="yes" imported="no">MACRelayUnitNP.h</includes>
    <includes id="_ether_frame__m_8h" name="EtherFrame_m.h" local="yes" imported="no">EtherFrame_m.h</includes>
    <includes id="_ethernet_8h" name="Ethernet.h" local="yes" imported="no">Ethernet.h</includes>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_m_a_c_relay_unit_n_p_8cc.html</anchorfile>
      <anchor>a0c1c6dcdeb1a520e0c32c11ffebeddeb</anchor>
      <arglist>(MACRelayUnitNP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MACRelayUnitNP.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/etherswitch/</path>
    <filename>_m_a_c_relay_unit_n_p_8h</filename>
    <includes id="_m_a_c_relay_unit_base_8h" name="MACRelayUnitBase.h" local="yes" imported="no">MACRelayUnitBase.h</includes>
    <class kind="class">MACRelayUnitNP</class>
  </compound>
  <compound kind="file">
    <name>MACRelayUnitPP.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/etherswitch/</path>
    <filename>_m_a_c_relay_unit_p_p_8cc</filename>
    <includes id="_m_a_c_relay_unit_p_p_8h" name="MACRelayUnitPP.h" local="yes" imported="no">MACRelayUnitPP.h</includes>
    <includes id="_ether_frame__m_8h" name="EtherFrame_m.h" local="yes" imported="no">EtherFrame_m.h</includes>
    <includes id="_ethernet_8h" name="Ethernet.h" local="yes" imported="no">Ethernet.h</includes>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_m_a_c_relay_unit_p_p_8cc.html</anchorfile>
      <anchor>a8b36d667f01f92a1ec3829e017217c4d</anchor>
      <arglist>(MACRelayUnitPP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MACRelayUnitPP.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/etherswitch/</path>
    <filename>_m_a_c_relay_unit_p_p_8h</filename>
    <includes id="_m_a_c_relay_unit_base_8h" name="MACRelayUnitBase.h" local="yes" imported="no">MACRelayUnitBase.h</includes>
    <class kind="class">MACRelayUnitPP</class>
    <class kind="struct">MACRelayUnitPP::PortBuffer</class>
  </compound>
  <compound kind="file">
    <name>MassMobility.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/mobility/</path>
    <filename>_mass_mobility_8cc</filename>
    <includes id="_mass_mobility_8h" name="MassMobility.h" local="yes" imported="no">MassMobility.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MK_UPDATE_POS</name>
      <anchorfile>_mass_mobility_8cc.html</anchorfile>
      <anchor>ae3818a83e4f797be649d52cc556f871d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MK_CHANGE_DIR</name>
      <anchorfile>_mass_mobility_8cc.html</anchorfile>
      <anchor>a25bd75495b2452ac2fe53af753f090fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_mass_mobility_8cc.html</anchorfile>
      <anchor>a4955a0b4c86280fffeceb8a5bbc0c746</anchor>
      <arglist>(MassMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MassMobility.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/mobility/</path>
    <filename>_mass_mobility_8h</filename>
    <includes id="_basic_mobility_8h" name="BasicMobility.h" local="yes" imported="no">BasicMobility.h</includes>
    <class kind="class">MassMobility</class>
  </compound>
  <compound kind="file">
    <name>MessageHandler.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/messagehandler/</path>
    <filename>_message_handler_8cc</filename>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>MessageHandler.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/messagehandler/</path>
    <filename>_message_handler_8h</filename>
    <includes id="_i_message_handler_8h" name="IMessageHandler.h" local="yes" imported="no">IMessageHandler.h</includes>
    <includes id="_hello_handler_8h" name="HelloHandler.h" local="yes" imported="no">HelloHandler.h</includes>
    <includes id="_database_description_handler_8h" name="DatabaseDescriptionHandler.h" local="yes" imported="no">DatabaseDescriptionHandler.h</includes>
    <includes id="_link_state_request_handler_8h" name="LinkStateRequestHandler.h" local="yes" imported="no">LinkStateRequestHandler.h</includes>
    <includes id="_link_state_update_handler_8h" name="LinkStateUpdateHandler.h" local="yes" imported="no">LinkStateUpdateHandler.h</includes>
    <includes id="_link_state_acknowledgement_handler_8h" name="LinkStateAcknowledgementHandler.h" local="yes" imported="no">LinkStateAcknowledgementHandler.h</includes>
    <includes id="_o_s_p_f_timer__m_8h" name="OSPFTimer_m.h" local="yes" imported="no">OSPFTimer_m.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <class kind="class">OSPF::MessageHandler</class>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>Modulation.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/radio/</path>
    <filename>_modulation_8cc</filename>
    <includes id="_modulation_8h" name="Modulation.h" local="yes" imported="no">Modulation.h</includes>
  </compound>
  <compound kind="file">
    <name>Modulation.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/radio/</path>
    <filename>_modulation_8h</filename>
    <includes id="_i_modulation_8h" name="IModulation.h" local="yes" imported="no">IModulation.h</includes>
    <class kind="class">NullModulation</class>
    <class kind="class">BPSKModulation</class>
    <class kind="class">QAM16Modulation</class>
    <class kind="class">QAM256Modulation</class>
  </compound>
  <compound kind="file">
    <name>ModuleAccess.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_module_access_8cc</filename>
    <includes id="_module_access_8h" name="ModuleAccess.h" local="yes" imported="no">ModuleAccess.h</includes>
    <member kind="function">
      <type>bool</type>
      <name>isNode</name>
      <anchorfile>_module_access_8cc.html</anchorfile>
      <anchor>a309600f685cd3016446538bf5d2ce077</anchor>
      <arglist>(cModule *mod)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>findModuleWherever</name>
      <anchorfile>_module_access_8cc.html</anchorfile>
      <anchor>a1acd07224acd83418500c6607f5ab952</anchor>
      <arglist>(const char *name, cModule *from)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>findModuleWhereverInNode</name>
      <anchorfile>_module_access_8cc.html</anchorfile>
      <anchor>a637753c69f461388c683b5ef8c4becf9</anchor>
      <arglist>(const char *name, cModule *from)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>findModuleSomewhereUp</name>
      <anchorfile>_module_access_8cc.html</anchorfile>
      <anchor>a59ac1b91d8937524b41563fd5ec15efb</anchor>
      <arglist>(const char *name, cModule *from)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ModuleAccess.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_module_access_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">ModuleAccess</class>
    <member kind="function">
      <type>INET_API cModule *</type>
      <name>findModuleWherever</name>
      <anchorfile>_module_access_8h.html</anchorfile>
      <anchor>a69c999516d7b8825404b7e82e77c6da7</anchor>
      <arglist>(const char *name, cModule *from)</arglist>
    </member>
    <member kind="function">
      <type>INET_API cModule *</type>
      <name>findModuleWhereverInNode</name>
      <anchorfile>_module_access_8h.html</anchorfile>
      <anchor>ac9e794e9611d94363cbaf5ee957c09d9</anchor>
      <arglist>(const char *name, cModule *from)</arglist>
    </member>
    <member kind="function">
      <type>INET_API cModule *</type>
      <name>findModuleSomewhereUp</name>
      <anchorfile>_module_access_8h.html</anchorfile>
      <anchor>a711818311f50357e09a85bc33e675b85</anchor>
      <arglist>(const char *name, cModule *from)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MPLS.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/mpls/</path>
    <filename>_m_p_l_s_8cc</filename>
    <includes id="_m_p_l_s_8h" name="MPLS.h" local="yes" imported="no">MPLS.h</includes>
    <includes id="_utils_8h" name="Utils.h" local="yes" imported="no">Utils.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_routing_table_access_8h" name="RoutingTableAccess.h" local="yes" imported="no">RoutingTableAccess.h</includes>
    <includes id="_l_i_b_table_access_8h" name="LIBTableAccess.h" local="yes" imported="no">LIBTableAccess.h</includes>
    <includes id="_i_classifier_8h" name="IClassifier.h" local="yes" imported="no">IClassifier.h</includes>
    <includes id="_l_d_p_8h" name="LDP.h" local="yes" imported="no">LDP.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_TRAFFIC</name>
      <anchorfile>_m_p_l_s_8cc.html</anchorfile>
      <anchor>a821db40abb2b5921bb8c20a7256b89a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_m_p_l_s_8cc.html</anchorfile>
      <anchor>aed3381c057c008ccf8aa3fdedf51d5f3</anchor>
      <arglist>(MPLS)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MPLS.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/mpls/</path>
    <filename>_m_p_l_s_8h</filename>
    <includes id="_m_p_l_s_packet_8h" name="MPLSPacket.h" local="yes" imported="no">MPLSPacket.h</includes>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
    <includes id="_const_type_8h" name="ConstType.h" local="yes" imported="no">ConstType.h</includes>
    <includes id="_l_i_b_table_8h" name="LIBTable.h" local="yes" imported="no">LIBTable.h</includes>
    <includes id="_i_interface_table_8h" name="IInterfaceTable.h" local="yes" imported="no">IInterfaceTable.h</includes>
    <includes id="_i_classifier_8h" name="IClassifier.h" local="yes" imported="no">IClassifier.h</includes>
    <class kind="class">MPLS</class>
  </compound>
  <compound kind="file">
    <name>MPLSPacket.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/mpls/</path>
    <filename>_m_p_l_s_packet_8cc</filename>
    <includes id="_m_p_l_s_packet_8h" name="MPLSPacket.h" local="yes" imported="no">MPLSPacket.h</includes>
  </compound>
  <compound kind="file">
    <name>MPLSPacket.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/mpls/</path>
    <filename>_m_p_l_s_packet_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">MPLSPacket</class>
  </compound>
  <compound kind="file">
    <name>NAMTrace.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/world/</path>
    <filename>_n_a_m_trace_8cc</filename>
    <includes id="_n_a_m_trace_8h" name="NAMTrace.h" local="yes" imported="no">NAMTrace.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_n_a_m_trace_8cc.html</anchorfile>
      <anchor>a96fa4e2e6c4753ef5537419621b6021d</anchor>
      <arglist>(NAMTrace)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NAMTrace.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/world/</path>
    <filename>_n_a_m_trace_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">NAMTrace</class>
  </compound>
  <compound kind="file">
    <name>NAMTraceWriter.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/</path>
    <filename>_n_a_m_trace_writer_8cc</filename>
    <includes id="_n_a_m_trace_8h" name="NAMTrace.h" local="yes" imported="no">NAMTrace.h</includes>
    <includes id="_n_a_m_trace_writer_8h" name="NAMTraceWriter.h" local="yes" imported="no">NAMTraceWriter.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <includes id="_tx_notif_details_8h" name="TxNotifDetails.h" local="yes" imported="no">TxNotifDetails.h</includes>
    <includes id="_i_interface_table_8h" name="IInterfaceTable.h" local="yes" imported="no">IInterfaceTable.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_n_a_m_trace_writer_8cc.html</anchorfile>
      <anchor>a3cc799b794a08518101ee5060c1f4e53</anchor>
      <arglist>(NAMTraceWriter)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NAMTraceWriter.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/</path>
    <filename>_n_a_m_trace_writer_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_notifiable_8h" name="INotifiable.h" local="yes" imported="no">INotifiable.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <class kind="class">NAMTraceWriter</class>
  </compound>
  <compound kind="file">
    <name>NetworkConfigurator.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/autorouting/</path>
    <filename>_network_configurator_8cc</filename>
    <includes id="_i_routing_table_8h" name="IRoutingTable.h" local="yes" imported="no">IRoutingTable.h</includes>
    <includes id="_i_interface_table_8h" name="IInterfaceTable.h" local="yes" imported="no">IInterfaceTable.h</includes>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <includes id="_network_configurator_8h" name="NetworkConfigurator.h" local="yes" imported="no">NetworkConfigurator.h</includes>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_network_configurator_8cc.html</anchorfile>
      <anchor>a9f1a5388cb10a0eea088c34438416767</anchor>
      <arglist>(NetworkConfigurator)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NetworkConfigurator.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/autorouting/</path>
    <filename>_network_configurator_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <class kind="class">NetworkConfigurator</class>
    <class kind="struct">NetworkConfigurator::NodeInfo</class>
  </compound>
  <compound kind="file">
    <name>NetworkInfo.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/extras/</path>
    <filename>_network_info_8cc</filename>
    <includes id="_network_info_8h" name="NetworkInfo.h" local="yes" imported="no">NetworkInfo.h</includes>
    <includes id="_i_routing_table_8h" name="IRoutingTable.h" local="yes" imported="no">IRoutingTable.h</includes>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <includes id="_interface_entry_8h" name="InterfaceEntry.h" local="yes" imported="no">InterfaceEntry.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_network_info_8cc.html</anchorfile>
      <anchor>a9228827abf71a52707b2affba45f48ad</anchor>
      <arglist>(NetworkInfo)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NetworkInfo.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/extras/</path>
    <filename>_network_info_8h</filename>
    <includes id="_i_scriptable_8h" name="IScriptable.h" local="yes" imported="no">IScriptable.h</includes>
    <class kind="class">NetworkInfo</class>
  </compound>
  <compound kind="file">
    <name>NetworkLSA.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/router/</path>
    <filename>_network_l_s_a_8cc</filename>
    <includes id="_l_s_a_8h" name="LSA.h" local="yes" imported="no">LSA.h</includes>
  </compound>
  <compound kind="file">
    <name>NotificationBoard.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_notification_board_8cc</filename>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_notification_board_8cc.html</anchorfile>
      <anchor>ac86c0eabbfe1fa5f572dd3e91ce3787f</anchor>
      <arglist>(NotificationBoard)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_notification_board_8cc.html</anchorfile>
      <anchor>acda4b33db79001bae23756d83a0f0607</anchor>
      <arglist>(std::ostream &amp;os, const NotificationBoard::NotifiableVector &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NotificationBoard.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_notification_board_8h</filename>
    <includes id="_module_access_8h" name="ModuleAccess.h" local="yes" imported="no">ModuleAccess.h</includes>
    <includes id="_i_notifiable_8h" name="INotifiable.h" local="yes" imported="no">INotifiable.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <class kind="class">NotificationBoard</class>
    <class kind="class">NotificationBoardAccess</class>
  </compound>
  <compound kind="file">
    <name>NotifierConsts.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_notifier_consts_8cc</filename>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <member kind="function">
      <type>const char *</type>
      <name>notificationCategoryName</name>
      <anchorfile>_notifier_consts_8cc.html</anchorfile>
      <anchor>a6808a262fcec2a310a9e7ed7d75c029f</anchor>
      <arglist>(int category)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printNotificationBanner</name>
      <anchorfile>_notifier_consts_8cc.html</anchorfile>
      <anchor>a68fd4b933fae636048bb9ee52fd922e5</anchor>
      <arglist>(int category, const cPolymorphic *details)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NotifierConsts.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_notifier_consts_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <member kind="enumvalue">
      <name>NF_SUBSCRIBERLIST_CHANGED</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba77cc5f821ad6531a4a0545490a9f24bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_HOSTPOSITION_UPDATED</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba1fe7bf361b8f93dc3a927e710bfa54c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_NODE_FAILURE</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55bae0063c4a74bab199079a3ff291a0bb42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_NODE_RECOVERY</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba95a9f1f7e23636c5b3ccf1ba8cdf011a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_RADIOSTATE_CHANGED</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baa6e69ccdaad903262ac00b89b6208a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_RADIO_CHANNEL_CHANGED</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baf3cbaad9c60e34c5cd7ca3da116fa468</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_PP_TX_BEGIN</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba3fc715010607b5a5d604735808bcd508</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_PP_TX_END</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba56008b8da6a282b976bc88936bf4af10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_PP_RX_END</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55bac5728eed9d45bec1189b26d79aeff5b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_TX_ACKED</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba0cb3f353a458da1cd1175490cb3c84ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_L2_Q_DROP</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba53fa4604bf2e03acd9598b0db09e8e11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_MAC_BECAME_IDLE</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55bab4693e8a734f7d2e40aebf6b601d3fbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_L2_BEACON_LOST</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba6913bf066e69a7aa27d379c72986162f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_L2_ASSOCIATED</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba863048a1ec905c5b2197d7ed7f63134b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_INTERFACE_CREATED</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baea2d4297f1e519520524d4bd8ff865b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_INTERFACE_DELETED</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba4f8e57f4754cbf2e6ba92a7079b483e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_INTERFACE_STATE_CHANGED</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba5ed0701efe7413c8f98fd0ba7fa9947d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_INTERFACE_CONFIG_CHANGED</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba3a1d2cac1cec476f84c60030a70ef902</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_INTERFACE_IPv4CONFIG_CHANGED</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba320671db29f38850c262680b6400b8bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_INTERFACE_IPv6CONFIG_CHANGED</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba7ce81127c07e25b007f9ec96f3643d52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_TED_CHANGED</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba8434e8b760269c6f9680f8fdb45b8a2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_IPv4_ROUTE_ADDED</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba38a4632902da5c126d1b1bc992799303</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_IPv4_ROUTE_DELETED</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba250243f132a5001e082e2c58b25eb0f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_IPv6_ROUTE_ADDED</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baa58d74dc8cd5ab0b63267030da712cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_IPv6_ROUTE_DELETED</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba6c8f0e68e262e322d82609fae7425c5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_IPv6_HANDOVER_OCCURRED</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55bab28e9eca0087f18518f71f5fd91e3487</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_OVERLAY_TRANSPORTADDRESS_CHANGED</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55badffdf6241f78214ab8d4193cbe607feb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_OVERLAY_NODE_GRACEFUL_LEAVE</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba36a01f86d18ac7a43e83a82c43d017c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_OVERLAY_NODE_LEAVE</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba4847bec1f5c063505cb92a0e50296f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>notificationCategoryName</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a6808a262fcec2a310a9e7ed7d75c029f</anchor>
      <arglist>(int category)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printNotificationBanner</name>
      <anchorfile>_notifier_consts_8h.html</anchorfile>
      <anchor>a68fd4b933fae636048bb9ee52fd922e5</anchor>
      <arglist>(int category, const cPolymorphic *details)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NullMobility.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/mobility/</path>
    <filename>_null_mobility_8cc</filename>
    <includes id="_null_mobility_8h" name="NullMobility.h" local="yes" imported="no">NullMobility.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>coreEV</name>
      <anchorfile>_null_mobility_8cc.html</anchorfile>
      <anchor>a27f667d27591f62ecf86a99a79ea8f42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_null_mobility_8cc.html</anchorfile>
      <anchor>a5d3420c90bc9045ebb8dd0466875b14d</anchor>
      <arglist>(NullMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NullMobility.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/mobility/</path>
    <filename>_null_mobility_8h</filename>
    <includes id="_basic_mobility_8h" name="BasicMobility.h" local="yes" imported="no">BasicMobility.h</includes>
    <class kind="class">NullMobility</class>
  </compound>
  <compound kind="file">
    <name>opp_utils.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/</path>
    <filename>opp__utils_8cc</filename>
    <includes id="opp__utils_8h" name="opp_utils.h" local="yes" imported="no">opp_utils.h</includes>
    <namespace>OPP_Global</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>ltostr</name>
      <anchorfile>namespace_o_p_p___global.html</anchorfile>
      <anchor>a64ba6d3fb361bb5591c36db6dc01f9d8</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>dtostr</name>
      <anchorfile>namespace_o_p_p___global.html</anchorfile>
      <anchor>a5545cd41f8cfd68ece1adc16fa40db91</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>atod</name>
      <anchorfile>namespace_o_p_p___global.html</anchorfile>
      <anchor>a7adfc7b335166f5c41477f2181f495c3</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>atoul</name>
      <anchorfile>namespace_o_p_p___global.html</anchorfile>
      <anchor>a7a945483736b99900d3da3c648c33f5e</anchor>
      <arglist>(const char *s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>opp_utils.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/</path>
    <filename>opp__utils_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <namespace>OPP_Global</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>ltostr</name>
      <anchorfile>namespace_o_p_p___global.html</anchorfile>
      <anchor>a64ba6d3fb361bb5591c36db6dc01f9d8</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>dtostr</name>
      <anchorfile>namespace_o_p_p___global.html</anchorfile>
      <anchor>a5545cd41f8cfd68ece1adc16fa40db91</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>atod</name>
      <anchorfile>namespace_o_p_p___global.html</anchorfile>
      <anchor>a7adfc7b335166f5c41477f2181f495c3</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>atoul</name>
      <anchorfile>namespace_o_p_p___global.html</anchorfile>
      <anchor>a7a945483736b99900d3da3c648c33f5e</anchor>
      <arglist>(const char *s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OSPFArea.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/router/</path>
    <filename>_o_s_p_f_area_8cc</filename>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFArea.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/router/</path>
    <filename>_o_s_p_f_area_8h</filename>
    <includes id="_o_s_p_fcommon_8h" name="OSPFcommon.h" local="yes" imported="no">OSPFcommon.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_l_s_a_8h" name="LSA.h" local="yes" imported="no">LSA.h</includes>
    <includes id="_o_s_p_f_routing_table_entry_8h" name="OSPFRoutingTableEntry.h" local="yes" imported="no">OSPFRoutingTableEntry.h</includes>
    <class kind="class">OSPF::Area</class>
    <namespace>OSPF</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_o_s_p_f_area_8h.html</anchorfile>
      <anchor>a9ca4ebd0346b0876b6c16bac647c9961</anchor>
      <arglist>(std::ostream &amp;ostr, OSPF::Area &amp;area)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OSPFcommon.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/router/</path>
    <filename>_o_s_p_fcommon_8h</filename>
    <class kind="struct">OSPF::AuthenticationKeyType</class>
    <class kind="struct">OSPF::IPv4Address</class>
    <class kind="class">OSPF::IPv4Address_Less</class>
    <class kind="struct">OSPF::IPv4AddressRange</class>
    <class kind="class">OSPF::IPv4AddressRange_Less</class>
    <class kind="struct">OSPF::HostRouteParameters</class>
    <class kind="struct">OSPF::LSAKeyType</class>
    <class kind="class">OSPF::LSAKeyType_Less</class>
    <class kind="struct">OSPF::DesignatedRouterID</class>
    <namespace>OSPF</namespace>
    <member kind="define">
      <type>#define</type>
      <name>LS_REFRESH_TIME</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>ab08ddbd72ec04be1ff6959a492fc3795</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_LS_INTERVAL</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>ae357493907873a92a8977f68088f35e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_LS_ARRIVAL</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>abb6f097624398b6ea06b773ef7808e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_AGE</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>a22c87c874ff5382c5d082b860110e363</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CHECK_AGE</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>a1dae649919191832d818cf9bba6be0e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_AGE_DIFF</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>af887400b0d563a9bc5b4e9345bba8879</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LS_INFINITY</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>adae502e9fc4510696255aa68d1413fb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFAULT_DESTINATION_ADDRESS</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>a07be0459f63aa94b18fcc0039005779f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFAULT_DESTINATION_MASK</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>aae09eb77691b97cc54d7a6a0126cdee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INITIAL_SEQUENCE_NUMBER</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>ad441394da087bc61e24a5b99455c5589</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_SEQUENCE_NUMBER</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>a35f49b34e56993fe20d3a21d144c16d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VIRTUAL_LINK_TTL</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>a1d4e674fb39c33571b1b8b8f28f02b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPV4_HEADER_LENGTH</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>a8bdcf4ab14fb83327455dab814a215ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPV4_DATAGRAM_LENGTH</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>a18347bf2e66afb72fec8e790c2c21107</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OSPF_HEADER_LENGTH</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>a29da58cf15534d57f74adcd17bbae811</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OSPF_LSA_HEADER_LENGTH</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>addec1389ab60c9ffd1fb82b2af2a013e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OSPF_DD_HEADER_LENGTH</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>aba6e827bae5829da00cb3a2d53c3102a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OSPF_REQUEST_LENGTH</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>afb9d07f42ccf0d5572f5ac92a73baae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OSPF_ROUTERLSA_HEADER_LENGTH</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>a671d94f589156a5e36aa9a605e4de2a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OSPF_LINK_HEADER_LENGTH</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>a3da55b328071f524da93701178860732</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OSPF_TOS_LENGTH</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>a3c024852944f890aaed1f2a6e2fe5fc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OSPF_NETWORKLSA_MASK_LENGTH</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>a17a658144b93c96a1534a408ceae4650</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OSPF_NETWORKLSA_ADDRESS_LENGTH</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>a7d912a2d5df5fa8835d2681a94971401</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OSPF_SUMMARYLSA_HEADER_LENGTH</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>a1cf3a5729799225a342d6003d42968b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OSPF_ASEXTERNALLSA_HEADER_LENGTH</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>a3bfd52c6e5450a2d6470c454d13ce652</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OSPF_ASEXTERNALLSA_TOS_INFO_LENGTH</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>afc6c43974744735f549c9a67f59f517a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>Metric</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>a4a99812a2d079df0f7208f2740cdb0ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>RouterID</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>ad64f22839cca7ec05fee5b7596411197</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>AreaID</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>a8d10c460f2da4aae5dd61d2a082dfc56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>LinkStateID</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>a8ac3195d08bc351276d08e1c28e0d2dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>AuthenticationType</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>a2e0cad18e6b80ee3a427a65a0b395aaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NullType</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>a2e0cad18e6b80ee3a427a65a0b395aafaa912eb1946419ebf910b2b8322788ca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SimplePasswordType</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>a2e0cad18e6b80ee3a427a65a0b395aafa13c53535f35435755bfb2dcf2d709076</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CrytographicType</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>a2e0cad18e6b80ee3a427a65a0b395aafa2f33878554866e1aa7ef58a8df3d320e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>a0a5d4565e1086e9a4c10774b3cbe981e</anchor>
      <arglist>(OSPF::IPv4Address leftAddress, OSPF::IPv4Address rightAddress)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>acc0ab784997d1f2a80835c088012b21e</anchor>
      <arglist>(OSPF::IPv4Address leftAddress, OSPF::IPv4Address rightAddress)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>ab9a068b080471b1ffd6cd29c1a3dc4a4</anchor>
      <arglist>(OSPF::IPv4Address leftAddress, OSPF::IPv4Address rightAddress)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>a2671b1bf54d9e127f344c47465479cfa</anchor>
      <arglist>(OSPF::IPv4Address leftAddress, OSPF::IPv4Address rightAddress)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>a467e6957eee0034f9baa0af496e70d8c</anchor>
      <arglist>(OSPF::IPv4Address leftAddress, OSPF::IPv4Address rightAddress)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>abeeb3ea0931a81bf25100ff3ba026e2d</anchor>
      <arglist>(OSPF::IPv4Address leftAddress, OSPF::IPv4Address rightAddress)</arglist>
    </member>
    <member kind="function">
      <type>OSPF::IPv4Address</type>
      <name>operator&amp;</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>a6eec74df77a2c814602fc7f2c1dc9a9e</anchor>
      <arglist>(OSPF::IPv4Address address, OSPF::IPv4Address mask)</arglist>
    </member>
    <member kind="function">
      <type>OSPF::IPv4Address</type>
      <name>operator|</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>a1f29f9f64b7bb432528bc6894d43e01f</anchor>
      <arglist>(OSPF::IPv4Address address, OSPF::IPv4Address match)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>a48c8f6c5d138cffc1d853d07ad4facd7</anchor>
      <arglist>(OSPF::IPv4AddressRange leftAddressRange, OSPF::IPv4AddressRange rightAddressRange)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>ad4dc6dc82d56c0bbd5a70faae47347b7</anchor>
      <arglist>(OSPF::IPv4AddressRange leftAddressRange, OSPF::IPv4AddressRange rightAddressRange)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>a2753c47ce66e82cdadc2971fcc7b4550</anchor>
      <arglist>(OSPF::DesignatedRouterID leftID, OSPF::DesignatedRouterID rightID)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>ae324c551afd75c9ab8c55ff571947b9f</anchor>
      <arglist>(OSPF::DesignatedRouterID leftID, OSPF::DesignatedRouterID rightID)</arglist>
    </member>
    <member kind="function">
      <type>OSPF::IPv4Address</type>
      <name>IPv4AddressFromAddressString</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>add192341579a523d6fa090e1f434630e</anchor>
      <arglist>(const char *charForm)</arglist>
    </member>
    <member kind="function">
      <type>OSPF::IPv4Address</type>
      <name>IPv4AddressFromULong</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>a5206656cf4131a17505ee9db0a60ddb6</anchor>
      <arglist>(unsigned long longForm)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>ULongFromIPv4Address</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>a4da9e68bb3ffcba090d1b07a5f812ce3</anchor>
      <arglist>(OSPF::IPv4Address byteForm)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>ULongFromAddressString</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>a4f2f8ba751b645157dacc7b6a57f4157</anchor>
      <arglist>(const char *charForm)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>AddressStringFromIPv4Address</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>afd44d2921b349e08aaad2c02678116dc</anchor>
      <arglist>(char *buffer, int bufferLength, OSPF::IPv4Address byteForm)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>AddressStringFromULong</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>ab7c5bad44da217d3e0c37b75dfb08f98</anchor>
      <arglist>(char *buffer, int bufferLength, unsigned long longForm)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>HexCharToByte</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>a78e67828de38551675e5ca853768d07f</anchor>
      <arglist>(char hex)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>HexPairToByte</name>
      <anchorfile>_o_s_p_fcommon_8h.html</anchorfile>
      <anchor>a889a6de7cccb5c78d5bf654ce2351f9f</anchor>
      <arglist>(char upperHex, char lowerHex)</arglist>
    </member>
    <member kind="variable">
      <type>const RouterID</type>
      <name>NullRouterID</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>aa0223d58cbf9a99558b9460b23186730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AreaID</type>
      <name>BackboneAreaID</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>adb591659bd229b640cdc32ebaef95222</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LinkStateID</type>
      <name>NullLinkStateID</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>a5fa445758d16c9a7146fb9f59c3647ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IPv4Address</type>
      <name>NullIPv4Address</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>a8948acb62332232ba35305c0a0babc8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IPv4Address</type>
      <name>AllSPFRouters</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>afdf11c20cc9287464a9a673199e01004</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IPv4Address</type>
      <name>AllDRouters</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>a3f675193744b50804fea173a3f6f6bdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IPv4AddressRange</type>
      <name>NullIPv4AddressRange</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>ad8bce8fb1420d6747aba9a122e7300ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DesignatedRouterID</type>
      <name>NullDesignatedRouterID</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>a1025f956e059380bda5d71fc1e3324f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OSPFInterface.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/interface/</path>
    <filename>_o_s_p_f_interface_8cc</filename>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_o_s_p_f_interface_state_down_8h" name="OSPFInterfaceStateDown.h" local="yes" imported="no">OSPFInterfaceStateDown.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFInterface.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/interface/</path>
    <filename>_o_s_p_f_interface_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_o_s_p_fcommon_8h" name="OSPFcommon.h" local="yes" imported="no">OSPFcommon.h</includes>
    <includes id="_o_s_p_f_timer__m_8h" name="OSPFTimer_m.h" local="yes" imported="no">OSPFTimer_m.h</includes>
    <includes id="_o_s_p_f_neighbor_8h" name="OSPFNeighbor.h" local="yes" imported="no">OSPFNeighbor.h</includes>
    <class kind="class">OSPF::Interface</class>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceState.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/interface/</path>
    <filename>_o_s_p_f_interface_state_8cc</filename>
    <includes id="_o_s_p_f_interface_state_8h" name="OSPFInterfaceState.h" local="yes" imported="no">OSPFInterfaceState.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
    <includes id="_o_s_p_f_interface_state_designated_router_8h" name="OSPFInterfaceStateDesignatedRouter.h" local="yes" imported="no">OSPFInterfaceStateDesignatedRouter.h</includes>
    <includes id="_o_s_p_f_interface_state_not_designated_router_8h" name="OSPFInterfaceStateNotDesignatedRouter.h" local="yes" imported="no">OSPFInterfaceStateNotDesignatedRouter.h</includes>
    <includes id="_o_s_p_f_interface_state_backup_8h" name="OSPFInterfaceStateBackup.h" local="yes" imported="no">OSPFInterfaceStateBackup.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceState.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/interface/</path>
    <filename>_o_s_p_f_interface_state_8h</filename>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <class kind="class">OSPF::InterfaceState</class>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceStateBackup.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/interface/</path>
    <filename>_o_s_p_f_interface_state_backup_8cc</filename>
    <includes id="_o_s_p_f_interface_state_backup_8h" name="OSPFInterfaceStateBackup.h" local="yes" imported="no">OSPFInterfaceStateBackup.h</includes>
    <includes id="_o_s_p_f_interface_state_down_8h" name="OSPFInterfaceStateDown.h" local="yes" imported="no">OSPFInterfaceStateDown.h</includes>
    <includes id="_o_s_p_f_interface_state_loopback_8h" name="OSPFInterfaceStateLoopback.h" local="yes" imported="no">OSPFInterfaceStateLoopback.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceStateBackup.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/interface/</path>
    <filename>_o_s_p_f_interface_state_backup_8h</filename>
    <includes id="_o_s_p_f_interface_state_8h" name="OSPFInterfaceState.h" local="yes" imported="no">OSPFInterfaceState.h</includes>
    <class kind="class">OSPF::InterfaceStateBackup</class>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceStateDesignatedRouter.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/interface/</path>
    <filename>_o_s_p_f_interface_state_designated_router_8cc</filename>
    <includes id="_o_s_p_f_interface_state_designated_router_8h" name="OSPFInterfaceStateDesignatedRouter.h" local="yes" imported="no">OSPFInterfaceStateDesignatedRouter.h</includes>
    <includes id="_o_s_p_f_interface_state_down_8h" name="OSPFInterfaceStateDown.h" local="yes" imported="no">OSPFInterfaceStateDown.h</includes>
    <includes id="_o_s_p_f_interface_state_loopback_8h" name="OSPFInterfaceStateLoopback.h" local="yes" imported="no">OSPFInterfaceStateLoopback.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceStateDesignatedRouter.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/interface/</path>
    <filename>_o_s_p_f_interface_state_designated_router_8h</filename>
    <includes id="_o_s_p_f_interface_state_8h" name="OSPFInterfaceState.h" local="yes" imported="no">OSPFInterfaceState.h</includes>
    <class kind="class">OSPF::InterfaceStateDesignatedRouter</class>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceStateDown.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/interface/</path>
    <filename>_o_s_p_f_interface_state_down_8cc</filename>
    <includes id="_o_s_p_f_interface_state_down_8h" name="OSPFInterfaceStateDown.h" local="yes" imported="no">OSPFInterfaceStateDown.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
    <includes id="_o_s_p_f_interface_state_point_to_point_8h" name="OSPFInterfaceStatePointToPoint.h" local="yes" imported="no">OSPFInterfaceStatePointToPoint.h</includes>
    <includes id="_o_s_p_f_interface_state_not_designated_router_8h" name="OSPFInterfaceStateNotDesignatedRouter.h" local="yes" imported="no">OSPFInterfaceStateNotDesignatedRouter.h</includes>
    <includes id="_o_s_p_f_interface_state_waiting_8h" name="OSPFInterfaceStateWaiting.h" local="yes" imported="no">OSPFInterfaceStateWaiting.h</includes>
    <includes id="_o_s_p_f_interface_state_loopback_8h" name="OSPFInterfaceStateLoopback.h" local="yes" imported="no">OSPFInterfaceStateLoopback.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceStateDown.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/interface/</path>
    <filename>_o_s_p_f_interface_state_down_8h</filename>
    <includes id="_o_s_p_f_interface_state_8h" name="OSPFInterfaceState.h" local="yes" imported="no">OSPFInterfaceState.h</includes>
    <class kind="class">OSPF::InterfaceStateDown</class>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceStateLoopback.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/interface/</path>
    <filename>_o_s_p_f_interface_state_loopback_8cc</filename>
    <includes id="_o_s_p_f_interface_state_loopback_8h" name="OSPFInterfaceStateLoopback.h" local="yes" imported="no">OSPFInterfaceStateLoopback.h</includes>
    <includes id="_o_s_p_f_interface_state_down_8h" name="OSPFInterfaceStateDown.h" local="yes" imported="no">OSPFInterfaceStateDown.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceStateLoopback.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/interface/</path>
    <filename>_o_s_p_f_interface_state_loopback_8h</filename>
    <includes id="_o_s_p_f_interface_state_8h" name="OSPFInterfaceState.h" local="yes" imported="no">OSPFInterfaceState.h</includes>
    <class kind="class">OSPF::InterfaceStateLoopback</class>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceStateNotDesignatedRouter.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/interface/</path>
    <filename>_o_s_p_f_interface_state_not_designated_router_8cc</filename>
    <includes id="_o_s_p_f_interface_state_not_designated_router_8h" name="OSPFInterfaceStateNotDesignatedRouter.h" local="yes" imported="no">OSPFInterfaceStateNotDesignatedRouter.h</includes>
    <includes id="_o_s_p_f_interface_state_down_8h" name="OSPFInterfaceStateDown.h" local="yes" imported="no">OSPFInterfaceStateDown.h</includes>
    <includes id="_o_s_p_f_interface_state_loopback_8h" name="OSPFInterfaceStateLoopback.h" local="yes" imported="no">OSPFInterfaceStateLoopback.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceStateNotDesignatedRouter.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/interface/</path>
    <filename>_o_s_p_f_interface_state_not_designated_router_8h</filename>
    <includes id="_o_s_p_f_interface_state_8h" name="OSPFInterfaceState.h" local="yes" imported="no">OSPFInterfaceState.h</includes>
    <class kind="class">OSPF::InterfaceStateNotDesignatedRouter</class>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceStatePointToPoint.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/interface/</path>
    <filename>_o_s_p_f_interface_state_point_to_point_8cc</filename>
    <includes id="_o_s_p_f_interface_state_point_to_point_8h" name="OSPFInterfaceStatePointToPoint.h" local="yes" imported="no">OSPFInterfaceStatePointToPoint.h</includes>
    <includes id="_o_s_p_f_interface_state_down_8h" name="OSPFInterfaceStateDown.h" local="yes" imported="no">OSPFInterfaceStateDown.h</includes>
    <includes id="_o_s_p_f_interface_state_loopback_8h" name="OSPFInterfaceStateLoopback.h" local="yes" imported="no">OSPFInterfaceStateLoopback.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceStatePointToPoint.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/interface/</path>
    <filename>_o_s_p_f_interface_state_point_to_point_8h</filename>
    <includes id="_o_s_p_f_interface_state_8h" name="OSPFInterfaceState.h" local="yes" imported="no">OSPFInterfaceState.h</includes>
    <class kind="class">OSPF::InterfaceStatePointToPoint</class>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceStateWaiting.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/interface/</path>
    <filename>_o_s_p_f_interface_state_waiting_8cc</filename>
    <includes id="_o_s_p_f_interface_state_waiting_8h" name="OSPFInterfaceStateWaiting.h" local="yes" imported="no">OSPFInterfaceStateWaiting.h</includes>
    <includes id="_o_s_p_f_interface_state_down_8h" name="OSPFInterfaceStateDown.h" local="yes" imported="no">OSPFInterfaceStateDown.h</includes>
    <includes id="_o_s_p_f_interface_state_loopback_8h" name="OSPFInterfaceStateLoopback.h" local="yes" imported="no">OSPFInterfaceStateLoopback.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceStateWaiting.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/interface/</path>
    <filename>_o_s_p_f_interface_state_waiting_8h</filename>
    <includes id="_o_s_p_f_interface_state_8h" name="OSPFInterfaceState.h" local="yes" imported="no">OSPFInterfaceState.h</includes>
    <class kind="class">OSPF::InterfaceStateWaiting</class>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFNeighbor.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/neighbor/</path>
    <filename>_o_s_p_f_neighbor_8cc</filename>
    <includes id="_o_s_p_f_neighbor_8h" name="OSPFNeighbor.h" local="yes" imported="no">OSPFNeighbor.h</includes>
    <includes id="_o_s_p_f_neighbor_state_8h" name="OSPFNeighborState.h" local="yes" imported="no">OSPFNeighborState.h</includes>
    <includes id="_o_s_p_f_neighbor_state_down_8h" name="OSPFNeighborStateDown.h" local="yes" imported="no">OSPFNeighborStateDown.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFNeighbor.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/neighbor/</path>
    <filename>_o_s_p_f_neighbor_8h</filename>
    <includes id="_o_s_p_f_packet__m_8h" name="OSPFPacket_m.h" local="yes" imported="no">OSPFPacket_m.h</includes>
    <includes id="_o_s_p_f_timer__m_8h" name="OSPFTimer_m.h" local="yes" imported="no">OSPFTimer_m.h</includes>
    <includes id="_o_s_p_fcommon_8h" name="OSPFcommon.h" local="yes" imported="no">OSPFcommon.h</includes>
    <includes id="_l_s_a_8h" name="LSA.h" local="yes" imported="no">LSA.h</includes>
    <class kind="class">OSPF::Neighbor</class>
    <class kind="struct">OSPF::Neighbor::DDPacketID</class>
    <class kind="struct">OSPF::Neighbor::TransmittedLSA</class>
    <namespace>OSPF</namespace>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>_o_s_p_f_neighbor_8h.html</anchorfile>
      <anchor>ae341898583a4a565db8c60bf3f7109c1</anchor>
      <arglist>(OSPF::Neighbor::DDPacketID leftID, OSPF::Neighbor::DDPacketID rightID)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>_o_s_p_f_neighbor_8h.html</anchorfile>
      <anchor>a3e18afb7db94ad39f19f90560819a091</anchor>
      <arglist>(OSPF::Neighbor::DDPacketID leftID, OSPF::Neighbor::DDPacketID rightID)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborState.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_8cc</filename>
    <includes id="_o_s_p_f_neighbor_state_8h" name="OSPFNeighborState.h" local="yes" imported="no">OSPFNeighborState.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborState.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_8h</filename>
    <includes id="_o_s_p_f_neighbor_8h" name="OSPFNeighbor.h" local="yes" imported="no">OSPFNeighbor.h</includes>
    <class kind="class">OSPF::NeighborState</class>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateAttempt.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_attempt_8cc</filename>
    <includes id="_o_s_p_f_neighbor_state_attempt_8h" name="OSPFNeighborStateAttempt.h" local="yes" imported="no">OSPFNeighborStateAttempt.h</includes>
    <includes id="_o_s_p_f_neighbor_state_down_8h" name="OSPFNeighborStateDown.h" local="yes" imported="no">OSPFNeighborStateDown.h</includes>
    <includes id="_o_s_p_f_neighbor_state_init_8h" name="OSPFNeighborStateInit.h" local="yes" imported="no">OSPFNeighborStateInit.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateAttempt.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_attempt_8h</filename>
    <includes id="_o_s_p_f_neighbor_state_8h" name="OSPFNeighborState.h" local="yes" imported="no">OSPFNeighborState.h</includes>
    <class kind="class">OSPF::NeighborStateAttempt</class>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateDown.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_down_8cc</filename>
    <includes id="_o_s_p_f_neighbor_state_down_8h" name="OSPFNeighborStateDown.h" local="yes" imported="no">OSPFNeighborStateDown.h</includes>
    <includes id="_o_s_p_f_neighbor_state_attempt_8h" name="OSPFNeighborStateAttempt.h" local="yes" imported="no">OSPFNeighborStateAttempt.h</includes>
    <includes id="_o_s_p_f_neighbor_state_init_8h" name="OSPFNeighborStateInit.h" local="yes" imported="no">OSPFNeighborStateInit.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateDown.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_down_8h</filename>
    <includes id="_o_s_p_f_neighbor_state_8h" name="OSPFNeighborState.h" local="yes" imported="no">OSPFNeighborState.h</includes>
    <class kind="class">OSPF::NeighborStateDown</class>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateExchange.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_exchange_8cc</filename>
    <includes id="_o_s_p_f_neighbor_state_exchange_8h" name="OSPFNeighborStateExchange.h" local="yes" imported="no">OSPFNeighborStateExchange.h</includes>
    <includes id="_o_s_p_f_neighbor_state_down_8h" name="OSPFNeighborStateDown.h" local="yes" imported="no">OSPFNeighborStateDown.h</includes>
    <includes id="_o_s_p_f_neighbor_state_init_8h" name="OSPFNeighborStateInit.h" local="yes" imported="no">OSPFNeighborStateInit.h</includes>
    <includes id="_o_s_p_f_neighbor_state_two_way_8h" name="OSPFNeighborStateTwoWay.h" local="yes" imported="no">OSPFNeighborStateTwoWay.h</includes>
    <includes id="_o_s_p_f_neighbor_state_exchange_start_8h" name="OSPFNeighborStateExchangeStart.h" local="yes" imported="no">OSPFNeighborStateExchangeStart.h</includes>
    <includes id="_o_s_p_f_neighbor_state_full_8h" name="OSPFNeighborStateFull.h" local="yes" imported="no">OSPFNeighborStateFull.h</includes>
    <includes id="_o_s_p_f_neighbor_state_loading_8h" name="OSPFNeighborStateLoading.h" local="yes" imported="no">OSPFNeighborStateLoading.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateExchange.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_exchange_8h</filename>
    <includes id="_o_s_p_f_neighbor_state_8h" name="OSPFNeighborState.h" local="yes" imported="no">OSPFNeighborState.h</includes>
    <class kind="class">OSPF::NeighborStateExchange</class>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateExchangeStart.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_exchange_start_8cc</filename>
    <includes id="_o_s_p_f_neighbor_state_exchange_start_8h" name="OSPFNeighborStateExchangeStart.h" local="yes" imported="no">OSPFNeighborStateExchangeStart.h</includes>
    <includes id="_o_s_p_f_neighbor_state_down_8h" name="OSPFNeighborStateDown.h" local="yes" imported="no">OSPFNeighborStateDown.h</includes>
    <includes id="_o_s_p_f_neighbor_state_init_8h" name="OSPFNeighborStateInit.h" local="yes" imported="no">OSPFNeighborStateInit.h</includes>
    <includes id="_o_s_p_f_neighbor_state_two_way_8h" name="OSPFNeighborStateTwoWay.h" local="yes" imported="no">OSPFNeighborStateTwoWay.h</includes>
    <includes id="_o_s_p_f_neighbor_state_exchange_8h" name="OSPFNeighborStateExchange.h" local="yes" imported="no">OSPFNeighborStateExchange.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateExchangeStart.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_exchange_start_8h</filename>
    <includes id="_o_s_p_f_neighbor_state_8h" name="OSPFNeighborState.h" local="yes" imported="no">OSPFNeighborState.h</includes>
    <class kind="class">OSPF::NeighborStateExchangeStart</class>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateFull.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_full_8cc</filename>
    <includes id="_o_s_p_f_neighbor_state_full_8h" name="OSPFNeighborStateFull.h" local="yes" imported="no">OSPFNeighborStateFull.h</includes>
    <includes id="_o_s_p_f_neighbor_state_down_8h" name="OSPFNeighborStateDown.h" local="yes" imported="no">OSPFNeighborStateDown.h</includes>
    <includes id="_o_s_p_f_neighbor_state_init_8h" name="OSPFNeighborStateInit.h" local="yes" imported="no">OSPFNeighborStateInit.h</includes>
    <includes id="_o_s_p_f_neighbor_state_two_way_8h" name="OSPFNeighborStateTwoWay.h" local="yes" imported="no">OSPFNeighborStateTwoWay.h</includes>
    <includes id="_o_s_p_f_neighbor_state_exchange_start_8h" name="OSPFNeighborStateExchangeStart.h" local="yes" imported="no">OSPFNeighborStateExchangeStart.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateFull.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_full_8h</filename>
    <includes id="_o_s_p_f_neighbor_state_8h" name="OSPFNeighborState.h" local="yes" imported="no">OSPFNeighborState.h</includes>
    <class kind="class">OSPF::NeighborStateFull</class>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateInit.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_init_8cc</filename>
    <includes id="_o_s_p_f_neighbor_state_init_8h" name="OSPFNeighborStateInit.h" local="yes" imported="no">OSPFNeighborStateInit.h</includes>
    <includes id="_o_s_p_f_neighbor_state_down_8h" name="OSPFNeighborStateDown.h" local="yes" imported="no">OSPFNeighborStateDown.h</includes>
    <includes id="_o_s_p_f_neighbor_state_exchange_start_8h" name="OSPFNeighborStateExchangeStart.h" local="yes" imported="no">OSPFNeighborStateExchangeStart.h</includes>
    <includes id="_o_s_p_f_neighbor_state_two_way_8h" name="OSPFNeighborStateTwoWay.h" local="yes" imported="no">OSPFNeighborStateTwoWay.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateInit.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_init_8h</filename>
    <includes id="_o_s_p_f_neighbor_state_8h" name="OSPFNeighborState.h" local="yes" imported="no">OSPFNeighborState.h</includes>
    <class kind="class">OSPF::NeighborStateInit</class>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateLoading.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_loading_8cc</filename>
    <includes id="_o_s_p_f_neighbor_state_loading_8h" name="OSPFNeighborStateLoading.h" local="yes" imported="no">OSPFNeighborStateLoading.h</includes>
    <includes id="_o_s_p_f_neighbor_state_down_8h" name="OSPFNeighborStateDown.h" local="yes" imported="no">OSPFNeighborStateDown.h</includes>
    <includes id="_o_s_p_f_neighbor_state_init_8h" name="OSPFNeighborStateInit.h" local="yes" imported="no">OSPFNeighborStateInit.h</includes>
    <includes id="_o_s_p_f_neighbor_state_full_8h" name="OSPFNeighborStateFull.h" local="yes" imported="no">OSPFNeighborStateFull.h</includes>
    <includes id="_o_s_p_f_neighbor_state_two_way_8h" name="OSPFNeighborStateTwoWay.h" local="yes" imported="no">OSPFNeighborStateTwoWay.h</includes>
    <includes id="_o_s_p_f_neighbor_state_exchange_start_8h" name="OSPFNeighborStateExchangeStart.h" local="yes" imported="no">OSPFNeighborStateExchangeStart.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateLoading.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_loading_8h</filename>
    <includes id="_o_s_p_f_neighbor_state_8h" name="OSPFNeighborState.h" local="yes" imported="no">OSPFNeighborState.h</includes>
    <class kind="class">OSPF::NeighborStateLoading</class>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateTwoWay.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_two_way_8cc</filename>
    <includes id="_o_s_p_f_neighbor_state_two_way_8h" name="OSPFNeighborStateTwoWay.h" local="yes" imported="no">OSPFNeighborStateTwoWay.h</includes>
    <includes id="_o_s_p_f_neighbor_state_down_8h" name="OSPFNeighborStateDown.h" local="yes" imported="no">OSPFNeighborStateDown.h</includes>
    <includes id="_o_s_p_f_neighbor_state_init_8h" name="OSPFNeighborStateInit.h" local="yes" imported="no">OSPFNeighborStateInit.h</includes>
    <includes id="_o_s_p_f_neighbor_state_exchange_start_8h" name="OSPFNeighborStateExchangeStart.h" local="yes" imported="no">OSPFNeighborStateExchangeStart.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateTwoWay.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_two_way_8h</filename>
    <includes id="_o_s_p_f_neighbor_state_8h" name="OSPFNeighborState.h" local="yes" imported="no">OSPFNeighborState.h</includes>
    <class kind="class">OSPF::NeighborStateTwoWay</class>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFPacket_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/</path>
    <filename>_o_s_p_f_packet__m_8h</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <class kind="struct">OSPFOptions</class>
    <class kind="class">OSPFPacket</class>
    <class kind="class">OSPFHelloPacket</class>
    <class kind="class">OSPFLSAHeader</class>
    <class kind="class">OSPFLSA</class>
    <class kind="struct">TOSData</class>
    <class kind="class">Link</class>
    <class kind="class">OSPFRouterLSA</class>
    <class kind="class">OSPFNetworkLSA</class>
    <class kind="class">OSPFSummaryLSA</class>
    <class kind="struct">ExternalTOSInfo</class>
    <class kind="class">OSPFASExternalLSAContents</class>
    <class kind="class">OSPFASExternalLSA</class>
    <class kind="struct">OSPFDDOptions</class>
    <class kind="class">OSPFDatabaseDescriptionPacket</class>
    <class kind="struct">LSARequest</class>
    <class kind="class">OSPFLinkStateRequestPacket</class>
    <class kind="class">OSPFLinkStateUpdatePacket</class>
    <class kind="class">OSPFLinkStateAcknowledgementPacket</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>OSPFPacketType</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>ad5f914914dbd3735397f61053e4ff3cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HelloPacket</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>ad5f914914dbd3735397f61053e4ff3cca97b3f1abd0dfe17355c22e112e5a2674</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DatabaseDescriptionPacket</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>ad5f914914dbd3735397f61053e4ff3cca34614ca53a299110c78ca307fcea6337</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LinkStateRequestPacket</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>ad5f914914dbd3735397f61053e4ff3cca114049a7ec8e15ec118894860a4b3ab3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LinkStateUpdatePacket</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>ad5f914914dbd3735397f61053e4ff3cca075a9331436d1c9bb03d82857c0921a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LinkStateAcknowledgementPacket</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>ad5f914914dbd3735397f61053e4ff3cca3f9f236adc60a2c841577d429c0cf7b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>LSAType</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a13a450dbb578c4bd7714af8581c4f89b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RouterLSAType</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a13a450dbb578c4bd7714af8581c4f89baf0d156f2d439c02650ae0bb67f9385d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NetworkLSAType</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a13a450dbb578c4bd7714af8581c4f89ba872178b0c61ee0bd5c16db015e98b396</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SummaryLSA_NetworksType</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a13a450dbb578c4bd7714af8581c4f89ba2c45e949f7ba6ed95c10beb07aa3f4a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SummaryLSA_ASBoundaryRoutersType</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a13a450dbb578c4bd7714af8581c4f89ba44e2dd86881d83d6655cc876460308cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASExternalLSAType</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a13a450dbb578c4bd7714af8581c4f89ba4c38291b3c8571803e6cd756f84d0c85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>LinkType</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a1e09bc05c5df6349a74bd3b9db638a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PointToPointLink</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a1e09bc05c5df6349a74bd3b9db638a96a6b868c6e3ac26a72f8db4670918ea51f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TransitLink</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a1e09bc05c5df6349a74bd3b9db638a96ae1bed38cda8bc532537641ad2e2340ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StubLink</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a1e09bc05c5df6349a74bd3b9db638a96a3c9aad1b311a5492de5db41d10a72735</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VirtualLink</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a1e09bc05c5df6349a74bd3b9db638a96ad3623491d357b57c8f5c3e8f37e8cb9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a0c812154f2d7d96bc502289828627009</anchor>
      <arglist>(cCommBuffer *b, OSPFOptions &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a47ac52140c7f1f434fa9092cf21f4eba</anchor>
      <arglist>(cCommBuffer *b, OSPFOptions &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a26eeb946b6ea99df44ce622a41ce7040</anchor>
      <arglist>(cCommBuffer *b, OSPFPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a5d6f4a68b8374cbfe9f01aca908488a3</anchor>
      <arglist>(cCommBuffer *b, OSPFPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>ac92772415d6b250962e0cd58c2d40b62</anchor>
      <arglist>(cCommBuffer *b, OSPFHelloPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>aeaeb8ec30593c66c0d96adb9706b220e</anchor>
      <arglist>(cCommBuffer *b, OSPFHelloPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>afcad917f833aa9aeb1a289e14a77b46f</anchor>
      <arglist>(cCommBuffer *b, OSPFLSAHeader &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a3aed0085d9b33ce4b8cd976c801d1424</anchor>
      <arglist>(cCommBuffer *b, OSPFLSAHeader &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>afd424bc482ba99c626b00f87279eed17</anchor>
      <arglist>(cCommBuffer *b, OSPFLSA &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a58a862e8fe38a24bd77eb259fb694780</anchor>
      <arglist>(cCommBuffer *b, OSPFLSA &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>aab38ee32872d742a6a9e900058a95486</anchor>
      <arglist>(cCommBuffer *b, TOSData &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a9f95c538152eda6c1844bf093e71a8bd</anchor>
      <arglist>(cCommBuffer *b, TOSData &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a3402fd44fb3fd5d1de55358e68f51ce8</anchor>
      <arglist>(cCommBuffer *b, Link &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>aaa4d432efb4d1c50ef42c133e5d8ffa1</anchor>
      <arglist>(cCommBuffer *b, Link &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a4c5576b830794b5abad38a7578174e48</anchor>
      <arglist>(cCommBuffer *b, OSPFRouterLSA &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a2f5c19cad840453110e655daef7ae825</anchor>
      <arglist>(cCommBuffer *b, OSPFRouterLSA &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a1bb5217cf8a51341833ac31567bc8606</anchor>
      <arglist>(cCommBuffer *b, OSPFNetworkLSA &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a121d8f91a58d7e6f168612f296ed90e6</anchor>
      <arglist>(cCommBuffer *b, OSPFNetworkLSA &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a34dfd31f3fc5321031201f4e65dd3a90</anchor>
      <arglist>(cCommBuffer *b, OSPFSummaryLSA &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>abcd56f992af36ffce5233953c70b7424</anchor>
      <arglist>(cCommBuffer *b, OSPFSummaryLSA &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>ac26a168b41bd798b669f6fbb131c85e5</anchor>
      <arglist>(cCommBuffer *b, ExternalTOSInfo &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a0399ae708317ddda812568482f832bbe</anchor>
      <arglist>(cCommBuffer *b, ExternalTOSInfo &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>ae3700eff308132ade3a746248db3948d</anchor>
      <arglist>(cCommBuffer *b, OSPFASExternalLSAContents &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>ae2768cb6ebb1711abfd563a2e53f8f68</anchor>
      <arglist>(cCommBuffer *b, OSPFASExternalLSAContents &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a558b2a162434c08d8c80844b577a9177</anchor>
      <arglist>(cCommBuffer *b, OSPFASExternalLSA &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>ad345b2c83cef174534dbb08623a9b1ff</anchor>
      <arglist>(cCommBuffer *b, OSPFASExternalLSA &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>abfb3f57983a7be4ebd8601d7d9d0b7e0</anchor>
      <arglist>(cCommBuffer *b, OSPFDDOptions &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a16dec44cf5d11eb23f4a03a87731b494</anchor>
      <arglist>(cCommBuffer *b, OSPFDDOptions &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a4ff427be62cbf88ccafc47ca8472de35</anchor>
      <arglist>(cCommBuffer *b, OSPFDatabaseDescriptionPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a4e42958fff6ab5d1279139c78e8bbcf9</anchor>
      <arglist>(cCommBuffer *b, OSPFDatabaseDescriptionPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>abc4d911e6c038d7f530ef36a38fdc03e</anchor>
      <arglist>(cCommBuffer *b, LSARequest &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a728b491bcef19baffa1fcc5d1440d478</anchor>
      <arglist>(cCommBuffer *b, LSARequest &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a671a014631aab68f6cf22fc894a3c7c1</anchor>
      <arglist>(cCommBuffer *b, OSPFLinkStateRequestPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>ae7ab855c4fb352c0d06f4923a1e6d446</anchor>
      <arglist>(cCommBuffer *b, OSPFLinkStateRequestPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>aba5a55e4db65b8b6cc9b3984ae80821e</anchor>
      <arglist>(cCommBuffer *b, OSPFLinkStateUpdatePacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>aedd1b8d8008c519ef078c6ba641c7d48</anchor>
      <arglist>(cCommBuffer *b, OSPFLinkStateUpdatePacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a25f1cfabaec3088305443383c68fa510</anchor>
      <arglist>(cCommBuffer *b, OSPFLinkStateAcknowledgementPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_o_s_p_f_packet__m_8h.html</anchorfile>
      <anchor>a80e829009f6cb44742b79551458afa54</anchor>
      <arglist>(cCommBuffer *b, OSPFLinkStateAcknowledgementPacket &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OSPFRouter.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/router/</path>
    <filename>_o_s_p_f_router_8cc</filename>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
    <includes id="_routing_table_access_8h" name="RoutingTableAccess.h" local="yes" imported="no">RoutingTableAccess.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFRouter.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/router/</path>
    <filename>_o_s_p_f_router_8h</filename>
    <includes id="_o_s_p_fcommon_8h" name="OSPFcommon.h" local="yes" imported="no">OSPFcommon.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_l_s_a_8h" name="LSA.h" local="yes" imported="no">LSA.h</includes>
    <includes id="_o_s_p_f_routing_table_entry_8h" name="OSPFRoutingTableEntry.h" local="yes" imported="no">OSPFRoutingTableEntry.h</includes>
    <class kind="class">OSPF::Router</class>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFRouting.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/</path>
    <filename>_o_s_p_f_routing_8cc</filename>
    <includes id="_o_s_p_f_routing_8h" name="OSPFRouting.h" local="yes" imported="no">OSPFRouting.h</includes>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_o_s_p_fcommon_8h" name="OSPFcommon.h" local="yes" imported="no">OSPFcommon.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
    <includes id="_routing_table_access_8h" name="RoutingTableAccess.h" local="yes" imported="no">RoutingTableAccess.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_o_s_p_f_routing_8cc.html</anchorfile>
      <anchor>adcf89e6acd74d7eef8ee2d627d7f7175</anchor>
      <arglist>(OSPFRouting)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OSPFRouting.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/</path>
    <filename>_o_s_p_f_routing_8h</filename>
    <includes id="_i_routing_table_8h" name="IRoutingTable.h" local="yes" imported="no">IRoutingTable.h</includes>
    <includes id="_i_interface_table_8h" name="IInterfaceTable.h" local="yes" imported="no">IInterfaceTable.h</includes>
    <includes id="_o_s_p_f_packet__m_8h" name="OSPFPacket_m.h" local="yes" imported="no">OSPFPacket_m.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
    <class kind="class">OSPFRouting</class>
  </compound>
  <compound kind="file">
    <name>OSPFRoutingTableEntry.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/router/</path>
    <filename>_o_s_p_f_routing_table_entry_8h</filename>
    <includes id="_i_routing_table_8h" name="IRoutingTable.h" local="yes" imported="no">IRoutingTable.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_o_s_p_fcommon_8h" name="OSPFcommon.h" local="yes" imported="no">OSPFcommon.h</includes>
    <class kind="class">OSPF::RoutingTableEntry</class>
    <namespace>OSPF</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_o_s_p_f_routing_table_entry_8h.html</anchorfile>
      <anchor>a1586c0aab0dd2659477628e44f1bdf8e</anchor>
      <arglist>(std::ostream &amp;out, const OSPF::RoutingTableEntry &amp;entry)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OSPFTimer_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/</path>
    <filename>_o_s_p_f_timer__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">OSPFTimer</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_o_s_p_f_timer__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>OSPFTimerType</name>
      <anchorfile>_o_s_p_f_timer__m_8h.html</anchorfile>
      <anchor>a849e21fd541ff90a1e41cbe36d769f01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InterfaceHelloTimer</name>
      <anchorfile>_o_s_p_f_timer__m_8h.html</anchorfile>
      <anchor>a849e21fd541ff90a1e41cbe36d769f01ae04537efd5224ea50c066c595d8733b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InterfaceWaitTimer</name>
      <anchorfile>_o_s_p_f_timer__m_8h.html</anchorfile>
      <anchor>a849e21fd541ff90a1e41cbe36d769f01a331e575a92c02a9b51419e5217f32fc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InterfaceAcknowledgementTimer</name>
      <anchorfile>_o_s_p_f_timer__m_8h.html</anchorfile>
      <anchor>a849e21fd541ff90a1e41cbe36d769f01a82cd4bee72f6840893a6a639c535d643</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NeighborInactivityTimer</name>
      <anchorfile>_o_s_p_f_timer__m_8h.html</anchorfile>
      <anchor>a849e21fd541ff90a1e41cbe36d769f01a2609f68f40a3ddbbf326f31ca7d39dcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NeighborPollTimer</name>
      <anchorfile>_o_s_p_f_timer__m_8h.html</anchorfile>
      <anchor>a849e21fd541ff90a1e41cbe36d769f01a3427f41ca06806e58063d7dba6b580e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NeighborDDRetransmissionTimer</name>
      <anchorfile>_o_s_p_f_timer__m_8h.html</anchorfile>
      <anchor>a849e21fd541ff90a1e41cbe36d769f01a201f568c2483644139021ecea00bad15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NeighborUpdateRetransmissionTimer</name>
      <anchorfile>_o_s_p_f_timer__m_8h.html</anchorfile>
      <anchor>a849e21fd541ff90a1e41cbe36d769f01af632b7581f6b177f96f8055f96f3b3b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NeighborRequestRetransmissionTimer</name>
      <anchorfile>_o_s_p_f_timer__m_8h.html</anchorfile>
      <anchor>a849e21fd541ff90a1e41cbe36d769f01aaef14fcd0d96e5292386b34a75a5d34d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DatabaseAgeTimer</name>
      <anchorfile>_o_s_p_f_timer__m_8h.html</anchorfile>
      <anchor>a849e21fd541ff90a1e41cbe36d769f01a304985d32f0ebdae21d88b5e9ea4904a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_o_s_p_f_timer__m_8h.html</anchorfile>
      <anchor>a17ce72a6481d6d5d065d333089a929e7</anchor>
      <arglist>(cCommBuffer *b, OSPFTimer &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_o_s_p_f_timer__m_8h.html</anchorfile>
      <anchor>ad016a878c65bb0a107792d1e06375c4a</anchor>
      <arglist>(cCommBuffer *b, OSPFTimer &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PassiveQueueBase.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_passive_queue_base_8cc</filename>
    <includes id="_passive_queue_base_8h" name="PassiveQueueBase.h" local="yes" imported="no">PassiveQueueBase.h</includes>
  </compound>
  <compound kind="file">
    <name>PassiveQueueBase.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_passive_queue_base_8h</filename>
    <includes id="_i_passive_queue_8h" name="IPassiveQueue.h" local="yes" imported="no">IPassiveQueue.h</includes>
    <class kind="class">PassiveQueueBase</class>
  </compound>
  <compound kind="file">
    <name>PathLossReceptionModel.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/radio/</path>
    <filename>_path_loss_reception_model_8cc</filename>
    <includes id="_path_loss_reception_model_8h" name="PathLossReceptionModel.h" local="yes" imported="no">PathLossReceptionModel.h</includes>
    <includes id="_channel_control_8h" name="ChannelControl.h" local="yes" imported="no">ChannelControl.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>_path_loss_reception_model_8cc.html</anchorfile>
      <anchor>acc7499ae94a8e7ebde587b9fc1b60004</anchor>
      <arglist>(PathLossReceptionModel)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PathLossReceptionModel.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/radio/</path>
    <filename>_path_loss_reception_model_8h</filename>
    <includes id="_i_reception_model_8h" name="IReceptionModel.h" local="yes" imported="no">IReceptionModel.h</includes>
    <class kind="class">PathLossReceptionModel</class>
  </compound>
  <compound kind="file">
    <name>PhyControlInfo_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/contract/</path>
    <filename>_phy_control_info__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">PhyControlInfo</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_phy_control_info__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>PhyCommandCode</name>
      <anchorfile>_phy_control_info__m_8h.html</anchorfile>
      <anchor>a827a8f9f0f91bb52136f8f155337862f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PHY_C_CONFIGURERADIO</name>
      <anchorfile>_phy_control_info__m_8h.html</anchorfile>
      <anchor>a827a8f9f0f91bb52136f8f155337862fa5eb8d08b5c380e0589a4622fa0ca5ee9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_phy_control_info__m_8h.html</anchorfile>
      <anchor>ad6ef6ea44d0bfe1ccc4c0814a42381e8</anchor>
      <arglist>(cCommBuffer *b, PhyControlInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_phy_control_info__m_8h.html</anchorfile>
      <anchor>a5df08d423e44bb4cd4e38091a41a6a83</anchor>
      <arglist>(cCommBuffer *b, PhyControlInfo &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PingApp.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/pingapp/</path>
    <filename>_ping_app_8cc</filename>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <includes id="_ping_app_8h" name="PingApp.h" local="yes" imported="no">PingApp.h</includes>
    <includes id="_ping_payload__m_8h" name="PingPayload_m.h" local="yes" imported="no">PingPayload_m.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_pv6_control_info_8h" name="IPv6ControlInfo.h" local="yes" imported="no">IPv6ControlInfo.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_ping_app_8cc.html</anchorfile>
      <anchor>aeb2d9515ee9474c3a890b952d511b1be</anchor>
      <arglist>(PingApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PingApp.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/pingapp/</path>
    <filename>_ping_app_8h</filename>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
    <class kind="class">PingApp</class>
  </compound>
  <compound kind="file">
    <name>PingPayload_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/pingapp/</path>
    <filename>_ping_payload__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">PingPayload</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_ping_payload__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_ping_payload__m_8h.html</anchorfile>
      <anchor>ac9deb4772e61daca28718094537d600a</anchor>
      <arglist>(cCommBuffer *b, PingPayload &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_ping_payload__m_8h.html</anchorfile>
      <anchor>a0eca9e5c993991161e84537778c9d5fa</anchor>
      <arglist>(cCommBuffer *b, PingPayload &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PPP.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ppp/</path>
    <filename>_p_p_p_8cc</filename>
    <includes id="_i_interface_table_8h" name="IInterfaceTable.h" local="yes" imported="no">IInterfaceTable.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_p_p_p_8h" name="PPP.h" local="yes" imported="no">PPP.h</includes>
    <includes id="_i_passive_queue_8h" name="IPassiveQueue.h" local="yes" imported="no">IPassiveQueue.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_p_p_p_8cc.html</anchorfile>
      <anchor>a3b9d3b00ebc16629b005c08e07aeb1b7</anchor>
      <arglist>(PPP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PPP.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ppp/</path>
    <filename>_p_p_p_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_p_p_p_frame__m_8h" name="PPPFrame_m.h" local="yes" imported="no">PPPFrame_m.h</includes>
    <includes id="_tx_notif_details_8h" name="TxNotifDetails.h" local="yes" imported="no">TxNotifDetails.h</includes>
    <includes id="_i_notifiable_8h" name="INotifiable.h" local="yes" imported="no">INotifiable.h</includes>
    <class kind="class">PPP</class>
  </compound>
  <compound kind="file">
    <name>PPPFrame_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ppp/</path>
    <filename>_p_p_p_frame__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">PPPFrame</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_p_p_p_frame__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_p_p_p_frame__m_8h.html</anchorfile>
      <anchor>a3b34e4eca38683e65dc656d568b3075f</anchor>
      <arglist>(cCommBuffer *b, PPPFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_p_p_p_frame__m_8h.html</anchorfile>
      <anchor>ac1f065f889efd5152ac52e86ee95216e</anchor>
      <arglist>(cCommBuffer *b, PPPFrame &amp;obj)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PPP_OVERHEAD_BYTES</name>
      <anchorfile>_p_p_p_frame__m_8h.html</anchorfile>
      <anchor>aa28739c90e4201622973fe2fa9d244f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ProtocolMap.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_protocol_map_8cc</filename>
    <includes id="_protocol_map_8h" name="ProtocolMap.h" local="yes" imported="no">ProtocolMap.h</includes>
  </compound>
  <compound kind="file">
    <name>ProtocolMap.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_protocol_map_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">ProtocolMapping</class>
    <class kind="struct">ProtocolMapping::Entry</class>
  </compound>
  <compound kind="file">
    <name>QueueBase.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_queue_base_8cc</filename>
    <includes id="_queue_base_8h" name="QueueBase.h" local="yes" imported="no">QueueBase.h</includes>
  </compound>
  <compound kind="file">
    <name>QueueBase.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_queue_base_8h</filename>
    <includes id="_abstract_queue_8h" name="AbstractQueue.h" local="yes" imported="no">AbstractQueue.h</includes>
    <class kind="class">QueueBase</class>
  </compound>
  <compound kind="file">
    <name>QueueWithQoS.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_queue_with_qo_s_8cc</filename>
    <includes id="_queue_with_qo_s_8h" name="QueueWithQoS.h" local="yes" imported="no">QueueWithQoS.h</includes>
  </compound>
  <compound kind="file">
    <name>QueueWithQoS.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_queue_with_qo_s_8h</filename>
    <includes id="_abstract_queue_8h" name="AbstractQueue.h" local="yes" imported="no">AbstractQueue.h</includes>
    <includes id="_enqueue_hook_8h" name="EnqueueHook.h" local="yes" imported="no">EnqueueHook.h</includes>
    <class kind="class">QueueWithQoS</class>
  </compound>
  <compound kind="file">
    <name>RadioState.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/contract/</path>
    <filename>_radio_state_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">RadioState</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_radio_state_8h.html</anchorfile>
      <anchor>a4b39bb096cae742005fa09bb73c20d1c</anchor>
      <arglist>(std::ostream &amp;os, const RadioState &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandomWPMobility.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/mobility/</path>
    <filename>_random_w_p_mobility_8cc</filename>
    <includes id="_random_w_p_mobility_8h" name="RandomWPMobility.h" local="yes" imported="no">RandomWPMobility.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_random_w_p_mobility_8cc.html</anchorfile>
      <anchor>adc0371719172cec85c20e18462fb034f</anchor>
      <arglist>(RandomWPMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandomWPMobility.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/mobility/</path>
    <filename>_random_w_p_mobility_8h</filename>
    <includes id="_line_segments_mobility_base_8h" name="LineSegmentsMobilityBase.h" local="yes" imported="no">LineSegmentsMobilityBase.h</includes>
    <class kind="class">RandomWPMobility</class>
  </compound>
  <compound kind="file">
    <name>ReassemblyBuffer.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_reassembly_buffer_8cc</filename>
    <includes id="_reassembly_buffer_8h" name="ReassemblyBuffer.h" local="yes" imported="no">ReassemblyBuffer.h</includes>
  </compound>
  <compound kind="file">
    <name>ReassemblyBuffer.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_reassembly_buffer_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">ReassemblyBuffer</class>
    <class kind="struct">ReassemblyBuffer::Region</class>
  </compound>
  <compound kind="file">
    <name>RectangleMobility.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/mobility/</path>
    <filename>_rectangle_mobility_8cc</filename>
    <includes id="_rectangle_mobility_8h" name="RectangleMobility.h" local="yes" imported="no">RectangleMobility.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_rectangle_mobility_8cc.html</anchorfile>
      <anchor>ab1c6f90604524480bbe574b9cfd22398</anchor>
      <arglist>(RectangleMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RectangleMobility.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/mobility/</path>
    <filename>_rectangle_mobility_8h</filename>
    <includes id="_basic_mobility_8h" name="BasicMobility.h" local="yes" imported="no">BasicMobility.h</includes>
    <class kind="class">RectangleMobility</class>
  </compound>
  <compound kind="file">
    <name>REDQueue.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/queue/</path>
    <filename>_r_e_d_queue_8cc</filename>
    <includes id="_r_e_d_queue_8h" name="REDQueue.h" local="yes" imported="no">REDQueue.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_r_e_d_queue_8cc.html</anchorfile>
      <anchor>ad52892d99d07833b83b5793e2c7bcfaa</anchor>
      <arglist>(REDQueue)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>REDQueue.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/queue/</path>
    <filename>_r_e_d_queue_8h</filename>
    <includes id="_passive_queue_base_8h" name="PassiveQueueBase.h" local="yes" imported="no">PassiveQueueBase.h</includes>
    <class kind="class">REDQueue</class>
  </compound>
  <compound kind="file">
    <name>reports.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>reports_8cc</filename>
    <includes id="reports_8h" name="reports.h" local="yes" imported="no">reports.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>reports_8cc.html</anchorfile>
      <anchor>a77b3b7347dc5c3f58037159363fc4f3d</anchor>
      <arglist>(SenderReport)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>reports_8cc.html</anchorfile>
      <anchor>aad28b4806834989079e9a29dc443f518</anchor>
      <arglist>(ReceptionReport)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>reports.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>reports_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <class kind="class">SenderReport</class>
    <class kind="class">ReceptionReport</class>
  </compound>
  <compound kind="file">
    <name>RouterLSA.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/router/</path>
    <filename>_router_l_s_a_8cc</filename>
    <includes id="_l_s_a_8h" name="LSA.h" local="yes" imported="no">LSA.h</includes>
  </compound>
  <compound kind="file">
    <name>RoutingTable.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv4/</path>
    <filename>_routing_table_8cc</filename>
    <includes id="_routing_table_8h" name="RoutingTable.h" local="yes" imported="no">RoutingTable.h</includes>
    <includes id="_routing_table_parser_8h" name="RoutingTableParser.h" local="yes" imported="no">RoutingTableParser.h</includes>
    <includes id="_i_p_route_8h" name="IPRoute.h" local="yes" imported="no">IPRoute.h</includes>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
    <includes id="_i_interface_table_8h" name="IInterfaceTable.h" local="yes" imported="no">IInterfaceTable.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_routing_table_8cc.html</anchorfile>
      <anchor>a1a14e6fbef80c9a44e36a569249ab4df</anchor>
      <arglist>(RoutingTable)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_routing_table_8cc.html</anchorfile>
      <anchor>ae44c34fdecab7d0779098724b35d3360</anchor>
      <arglist>(std::ostream &amp;os, const IPRoute &amp;e)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RoutingTable.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv4/</path>
    <filename>_routing_table_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_i_interface_table_8h" name="IInterfaceTable.h" local="yes" imported="no">IInterfaceTable.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <includes id="_i_routing_table_8h" name="IRoutingTable.h" local="yes" imported="no">IRoutingTable.h</includes>
    <class kind="class">RoutingTable</class>
  </compound>
  <compound kind="file">
    <name>RoutingTable6.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv6/</path>
    <filename>_routing_table6_8cc</filename>
    <includes id="opp__utils_8h" name="opp_utils.h" local="yes" imported="no">opp_utils.h</includes>
    <includes id="_routing_table6_8h" name="RoutingTable6.h" local="yes" imported="no">RoutingTable6.h</includes>
    <includes id="_i_pv6_interface_data_8h" name="IPv6InterfaceData.h" local="yes" imported="no">IPv6InterfaceData.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_routing_table6_8cc.html</anchorfile>
      <anchor>a0ef4e535a83b07f787992e5b53486e7b</anchor>
      <arglist>(RoutingTable6)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_routing_table6_8cc.html</anchorfile>
      <anchor>ac45083662be8d428bbe3fe2c36f1fbbc</anchor>
      <arglist>(std::ostream &amp;os, const IPv6Route &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_routing_table6_8cc.html</anchorfile>
      <anchor>ac0fb7b220a6624ff764b56176d7cdf0b</anchor>
      <arglist>(std::ostream &amp;os, const RoutingTable6::DestCacheEntry &amp;e)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RoutingTable6.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv6/</path>
    <filename>_routing_table6_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_pv6_address_8h" name="IPv6Address.h" local="yes" imported="no">IPv6Address.h</includes>
    <includes id="_i_interface_table_8h" name="IInterfaceTable.h" local="yes" imported="no">IInterfaceTable.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <class kind="class">IPv6Route</class>
    <class kind="class">RoutingTable6</class>
    <class kind="struct">RoutingTable6::DestCacheEntry</class>
  </compound>
  <compound kind="file">
    <name>RoutingTable6Access.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv6/</path>
    <filename>_routing_table6_access_8h</filename>
    <includes id="_module_access_8h" name="ModuleAccess.h" local="yes" imported="no">ModuleAccess.h</includes>
    <includes id="_routing_table6_8h" name="RoutingTable6.h" local="yes" imported="no">RoutingTable6.h</includes>
    <class kind="class">RoutingTable6Access</class>
  </compound>
  <compound kind="file">
    <name>RoutingTableAccess.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv4/</path>
    <filename>_routing_table_access_8h</filename>
    <includes id="_module_access_8h" name="ModuleAccess.h" local="yes" imported="no">ModuleAccess.h</includes>
    <includes id="_i_routing_table_8h" name="IRoutingTable.h" local="yes" imported="no">IRoutingTable.h</includes>
    <class kind="class">RoutingTableAccess</class>
  </compound>
  <compound kind="file">
    <name>RoutingTableParser.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv4/</path>
    <filename>_routing_table_parser_8cc</filename>
    <includes id="_routing_table_parser_8h" name="RoutingTableParser.h" local="yes" imported="no">RoutingTableParser.h</includes>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
    <member kind="variable">
      <type>const int</type>
      <name>MAX_FILESIZE</name>
      <anchorfile>_routing_table_parser_8cc.html</anchorfile>
      <anchor>abd4f060c8c54335ad11d6d552c7dbe93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>MAX_ENTRY_STRING_SIZE</name>
      <anchorfile>_routing_table_parser_8cc.html</anchorfile>
      <anchor>ae114222c8797981a036fce19311ec051</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>IFCONFIG_START_TOKEN</name>
      <anchorfile>_routing_table_parser_8cc.html</anchorfile>
      <anchor>a2aeda9df114e40844d6fa4516890e9d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>IFCONFIG_END_TOKEN</name>
      <anchorfile>_routing_table_parser_8cc.html</anchorfile>
      <anchor>a16e246eff0901a59194222877ce8cee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>ROUTE_START_TOKEN</name>
      <anchorfile>_routing_table_parser_8cc.html</anchorfile>
      <anchor>a814974f3a698759b0ce04a073258ed41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>ROUTE_END_TOKEN</name>
      <anchorfile>_routing_table_parser_8cc.html</anchorfile>
      <anchor>ad45bb0b7cc9d785a03e89e8611dff35c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RoutingTableParser.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv4/</path>
    <filename>_routing_table_parser_8h</filename>
    <includes id="_routing_table_8h" name="RoutingTable.h" local="yes" imported="no">RoutingTable.h</includes>
    <class kind="class">RoutingTableParser</class>
  </compound>
  <compound kind="file">
    <name>RSVP.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/rsvp_te/</path>
    <filename>_r_s_v_p_8cc</filename>
    <includes id="_r_s_v_p_8h" name="RSVP.h" local="yes" imported="no">RSVP.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <includes id="common_8h" name="common.h" local="yes" imported="no">common.h</includes>
    <includes id="_utils_8h" name="Utils.h" local="yes" imported="no">Utils.h</includes>
    <includes id="_x_m_l_utils_8h" name="XMLUtils.h" local="yes" imported="no">XMLUtils.h</includes>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
    <includes id="_t_e_d_access_8h" name="TEDAccess.h" local="yes" imported="no">TEDAccess.h</includes>
    <includes id="_routing_table_access_8h" name="RoutingTableAccess.h" local="yes" imported="no">RoutingTableAccess.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_l_i_b_table_access_8h" name="LIBTableAccess.h" local="yes" imported="no">LIBTableAccess.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>PSB_REFRESH_INTERVAL</name>
      <anchorfile>_r_s_v_p_8cc.html</anchorfile>
      <anchor>ac11c8def891747729c9d70aa24c51dd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RSB_REFRESH_INTERVAL</name>
      <anchorfile>_r_s_v_p_8cc.html</anchorfile>
      <anchor>a456bf6eeba2ebcdda8a28d900ae59ddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PSB_TIMEOUT_INTERVAL</name>
      <anchorfile>_r_s_v_p_8cc.html</anchorfile>
      <anchor>a7efb4d5a346397fc90771fe2f8a78418</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RSB_TIMEOUT_INTERVAL</name>
      <anchorfile>_r_s_v_p_8cc.html</anchorfile>
      <anchor>a5740607a8ddf9dc4102c41cc52e17c04</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PATH_ERR_UNFEASIBLE</name>
      <anchorfile>_r_s_v_p_8cc.html</anchorfile>
      <anchor>aa99604209fc07fe495c4601f85ba8fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PATH_ERR_PREEMPTED</name>
      <anchorfile>_r_s_v_p_8cc.html</anchorfile>
      <anchor>ade6fa078d09732210f77de2f6be3aba2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PATH_ERR_NEXTHOP_FAILED</name>
      <anchorfile>_r_s_v_p_8cc.html</anchorfile>
      <anchor>ac45d25ecca4b9be780471dde70968a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_r_s_v_p_8cc.html</anchorfile>
      <anchor>a137003c7e8745b8348f3021501a79799</anchor>
      <arglist>(RSVP)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>_r_s_v_p_8cc.html</anchorfile>
      <anchor>ae832534890f63b2562bdbb8165ab629d</anchor>
      <arglist>(const SessionObj_t &amp;a, const SessionObj_t &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>_r_s_v_p_8cc.html</anchorfile>
      <anchor>af3237c1a99e7780aa621cbcee8ac058a</anchor>
      <arglist>(const SessionObj_t &amp;a, const SessionObj_t &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>_r_s_v_p_8cc.html</anchorfile>
      <anchor>a27a968cfbae9f558141163dc3548d730</anchor>
      <arglist>(const FilterSpecObj_t &amp;a, const FilterSpecObj_t &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>_r_s_v_p_8cc.html</anchorfile>
      <anchor>ae74b3a3e5664e5d6c90338ba868ece13</anchor>
      <arglist>(const FilterSpecObj_t &amp;a, const FilterSpecObj_t &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>_r_s_v_p_8cc.html</anchorfile>
      <anchor>a5ee71175a02f775fd74b62489faffe1f</anchor>
      <arglist>(const SenderTemplateObj_t &amp;a, const SenderTemplateObj_t &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>_r_s_v_p_8cc.html</anchorfile>
      <anchor>a46060af39ffbc2a2bc77e76b003100b8</anchor>
      <arglist>(const SenderTemplateObj_t &amp;a, const SenderTemplateObj_t &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_r_s_v_p_8cc.html</anchorfile>
      <anchor>a29a186c42afceab9e72a48cb6450292a</anchor>
      <arglist>(std::ostream &amp;os, const FlowSpecObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_r_s_v_p_8cc.html</anchorfile>
      <anchor>a165aa9a334039049fef54ae2baff8d0b</anchor>
      <arglist>(std::ostream &amp;os, const SessionObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_r_s_v_p_8cc.html</anchorfile>
      <anchor>a3e3ed10190b6039096aececb2d241eff</anchor>
      <arglist>(std::ostream &amp;os, const SenderTemplateObj_t &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RSVP.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/rsvp_te/</path>
    <filename>_r_s_v_p_8h</filename>
    <includes id="_i_scriptable_8h" name="IScriptable.h" local="yes" imported="no">IScriptable.h</includes>
    <includes id="_int_serv_8h" name="IntServ.h" local="yes" imported="no">IntServ.h</includes>
    <includes id="_r_s_v_p_path_msg_8h" name="RSVPPathMsg.h" local="yes" imported="no">RSVPPathMsg.h</includes>
    <includes id="_r_s_v_p_resv_msg_8h" name="RSVPResvMsg.h" local="yes" imported="no">RSVPResvMsg.h</includes>
    <includes id="_r_s_v_p_hello_msg_8h" name="RSVPHelloMsg.h" local="yes" imported="no">RSVPHelloMsg.h</includes>
    <includes id="_signalling_msg__m_8h" name="SignallingMsg_m.h" local="yes" imported="no">SignallingMsg_m.h</includes>
    <includes id="_i_r_s_v_p_classifier_8h" name="IRSVPClassifier.h" local="yes" imported="no">IRSVPClassifier.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <class kind="class">RSVP</class>
    <class kind="struct">RSVP::traffic_path_t</class>
    <class kind="struct">RSVP::traffic_session_t</class>
    <class kind="struct">RSVP::PathStateBlock_t</class>
    <class kind="struct">RSVP::ResvStateBlock_t</class>
    <class kind="struct">RSVP::HelloState_t</class>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>_r_s_v_p_8h.html</anchorfile>
      <anchor>ae832534890f63b2562bdbb8165ab629d</anchor>
      <arglist>(const SessionObj_t &amp;a, const SessionObj_t &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>_r_s_v_p_8h.html</anchorfile>
      <anchor>af3237c1a99e7780aa621cbcee8ac058a</anchor>
      <arglist>(const SessionObj_t &amp;a, const SessionObj_t &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>_r_s_v_p_8h.html</anchorfile>
      <anchor>a27a968cfbae9f558141163dc3548d730</anchor>
      <arglist>(const FilterSpecObj_t &amp;a, const FilterSpecObj_t &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>_r_s_v_p_8h.html</anchorfile>
      <anchor>ae74b3a3e5664e5d6c90338ba868ece13</anchor>
      <arglist>(const FilterSpecObj_t &amp;a, const FilterSpecObj_t &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>_r_s_v_p_8h.html</anchorfile>
      <anchor>a5ee71175a02f775fd74b62489faffe1f</anchor>
      <arglist>(const SenderTemplateObj_t &amp;a, const SenderTemplateObj_t &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>_r_s_v_p_8h.html</anchorfile>
      <anchor>a46060af39ffbc2a2bc77e76b003100b8</anchor>
      <arglist>(const SenderTemplateObj_t &amp;a, const SenderTemplateObj_t &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_r_s_v_p_8h.html</anchorfile>
      <anchor>a165aa9a334039049fef54ae2baff8d0b</anchor>
      <arglist>(std::ostream &amp;os, const SessionObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_r_s_v_p_8h.html</anchorfile>
      <anchor>a3e3ed10190b6039096aececb2d241eff</anchor>
      <arglist>(std::ostream &amp;os, const SenderTemplateObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_r_s_v_p_8h.html</anchorfile>
      <anchor>a29a186c42afceab9e72a48cb6450292a</anchor>
      <arglist>(std::ostream &amp;os, const FlowSpecObj_t &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RSVPAccess.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/rsvp_te/</path>
    <filename>_r_s_v_p_access_8h</filename>
    <includes id="_module_access_8h" name="ModuleAccess.h" local="yes" imported="no">ModuleAccess.h</includes>
    <includes id="_r_s_v_p_8h" name="RSVP.h" local="yes" imported="no">RSVP.h</includes>
    <class kind="class">RSVPAccess</class>
  </compound>
  <compound kind="file">
    <name>RSVPHello_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/rsvp_te/</path>
    <filename>_r_s_v_p_hello__m_8h</filename>
    <includes id="_r_s_v_p_packet_8h" name="RSVPPacket.h" local="yes" imported="no">RSVPPacket.h</includes>
    <class kind="class">RSVPHelloMsg_Base</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_r_s_v_p_hello__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RSVPHelloMsg.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/rsvp_te/</path>
    <filename>_r_s_v_p_hello_msg_8h</filename>
    <includes id="_r_s_v_p_hello__m_8h" name="RSVPHello_m.h" local="yes" imported="no">RSVPHello_m.h</includes>
    <class kind="class">RSVPHelloMsg</class>
  </compound>
  <compound kind="file">
    <name>RSVPPacket.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/rsvp_te/</path>
    <filename>_r_s_v_p_packet_8h</filename>
    <includes id="_r_s_v_p_packet__m_8h" name="RSVPPacket_m.h" local="yes" imported="no">RSVPPacket_m.h</includes>
    <class kind="class">RSVPPacket</class>
    <member kind="define">
      <type>#define</type>
      <name>RSVP_TRAFFIC</name>
      <anchorfile>_r_s_v_p_packet_8h.html</anchorfile>
      <anchor>a332ea993b9048da86ef057aa6b307bce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RSVPPacket_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/rsvp_te/</path>
    <filename>_r_s_v_p_packet__m_8h</filename>
    <includes id="_int_serv__m_8h" name="IntServ_m.h" local="yes" imported="no">IntServ_m.h</includes>
    <class kind="class">RSVPMessage</class>
    <class kind="class">RSVPPacket_Base</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_r_s_v_p_packet__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PATH_MESSAGE</name>
      <anchorfile>_r_s_v_p_packet__m_8h.html</anchorfile>
      <anchor>ad4817cd7538c73ea00307a01acf9f087</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESV_MESSAGE</name>
      <anchorfile>_r_s_v_p_packet__m_8h.html</anchorfile>
      <anchor>a1c00595f44a5598ae9e8911bce3a804e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PTEAR_MESSAGE</name>
      <anchorfile>_r_s_v_p_packet__m_8h.html</anchorfile>
      <anchor>a76d754a2cd45f71337ab4982f05df5a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTEAR_MESSAGE</name>
      <anchorfile>_r_s_v_p_packet__m_8h.html</anchorfile>
      <anchor>aa20bedb89ba297fd522020ce2a7a31fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PERROR_MESSAGE</name>
      <anchorfile>_r_s_v_p_packet__m_8h.html</anchorfile>
      <anchor>ae9d472ade59b844e552f9ea0ee0815c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RERROR_MESSAGE</name>
      <anchorfile>_r_s_v_p_packet__m_8h.html</anchorfile>
      <anchor>a3cbc7c4ef9dcc9ab931925a3ce868d1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HELLO_MESSAGE</name>
      <anchorfile>_r_s_v_p_packet__m_8h.html</anchorfile>
      <anchor>aa4a46d331cb27bae41c1d1f5a37ce6e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_r_s_v_p_packet__m_8h.html</anchorfile>
      <anchor>a609d5cbb6fe3c7a6fd7e534bb2240799</anchor>
      <arglist>(cCommBuffer *b, RSVPMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_r_s_v_p_packet__m_8h.html</anchorfile>
      <anchor>a983d0a8928de68f7a492a17172830975</anchor>
      <arglist>(cCommBuffer *b, RSVPMessage &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RSVPPathMsg.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/rsvp_te/</path>
    <filename>_r_s_v_p_path_msg_8h</filename>
    <includes id="_r_s_v_p_path_msg__m_8h" name="RSVPPathMsg_m.h" local="yes" imported="no">RSVPPathMsg_m.h</includes>
    <class kind="class">RSVPPathMsg</class>
    <class kind="class">RSVPPathTear</class>
    <class kind="class">RSVPPathError</class>
  </compound>
  <compound kind="file">
    <name>RSVPPathMsg_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/rsvp_te/</path>
    <filename>_r_s_v_p_path_msg__m_8h</filename>
    <includes id="_int_serv_8h" name="IntServ.h" local="yes" imported="no">IntServ.h</includes>
    <includes id="_r_s_v_p_packet_8h" name="RSVPPacket.h" local="yes" imported="no">RSVPPacket.h</includes>
    <class kind="class">RSVPPathMsg_Base</class>
    <class kind="class">RSVPPathTear_Base</class>
    <class kind="class">RSVPPathError_Base</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_r_s_v_p_path_msg__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RSVPResvMsg.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/rsvp_te/</path>
    <filename>_r_s_v_p_resv_msg_8h</filename>
    <includes id="_r_s_v_p_resv_msg__m_8h" name="RSVPResvMsg_m.h" local="yes" imported="no">RSVPResvMsg_m.h</includes>
    <class kind="class">RSVPResvMsg</class>
    <class kind="class">RSVPResvTear</class>
    <class kind="class">RSVPResvError</class>
  </compound>
  <compound kind="file">
    <name>RSVPResvMsg_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/rsvp_te/</path>
    <filename>_r_s_v_p_resv_msg__m_8h</filename>
    <includes id="_int_serv_8h" name="IntServ.h" local="yes" imported="no">IntServ.h</includes>
    <includes id="_r_s_v_p_packet_8h" name="RSVPPacket.h" local="yes" imported="no">RSVPPacket.h</includes>
    <class kind="class">RSVPResvMsg_Base</class>
    <class kind="class">RSVPResvTear_Base</class>
    <class kind="class">RSVPResvError_Base</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_r_s_v_p_resv_msg__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTCP.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>_r_t_c_p_8cc</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_u_d_p_socket_8h" name="UDPSocket.h" local="yes" imported="no">UDPSocket.h</includes>
    <includes id="_u_d_p_control_info__m_8h" name="UDPControlInfo_m.h" local="yes" imported="no">UDPControlInfo_m.h</includes>
    <includes id="_r_t_c_p_8h" name="RTCP.h" local="yes" imported="no">RTCP.h</includes>
    <includes id="_r_t_p_inner_packet_8h" name="RTPInnerPacket.h" local="yes" imported="no">RTPInnerPacket.h</includes>
    <includes id="_r_t_p_participant_info_8h" name="RTPParticipantInfo.h" local="yes" imported="no">RTPParticipantInfo.h</includes>
    <includes id="_r_t_p_sender_info_8h" name="RTPSenderInfo.h" local="yes" imported="no">RTPSenderInfo.h</includes>
    <includes id="_r_t_p_receiver_info_8h" name="RTPReceiverInfo.h" local="yes" imported="no">RTPReceiverInfo.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_r_t_c_p_8cc.html</anchorfile>
      <anchor>a6e465bbe43dae4cf74f61ca13336b3e6</anchor>
      <arglist>(RTCP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTCP.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>_r_t_c_p_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_r_t_p_inner_packet_8h" name="RTPInnerPacket.h" local="yes" imported="no">RTPInnerPacket.h</includes>
    <includes id="_r_t_p_participant_info_8h" name="RTPParticipantInfo.h" local="yes" imported="no">RTPParticipantInfo.h</includes>
    <includes id="_r_t_p_sender_info_8h" name="RTPSenderInfo.h" local="yes" imported="no">RTPSenderInfo.h</includes>
    <includes id="_r_t_p_receiver_info_8h" name="RTPReceiverInfo.h" local="yes" imported="no">RTPReceiverInfo.h</includes>
    <class kind="class">RTCP</class>
  </compound>
  <compound kind="file">
    <name>RTCPPacket.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>_r_t_c_p_packet_8cc</filename>
    <includes id="_r_t_c_p_packet_8h" name="RTCPPacket.h" local="yes" imported="no">RTCPPacket.h</includes>
    <includes id="reports_8h" name="reports.h" local="yes" imported="no">reports.h</includes>
    <includes id="sdes_8h" name="sdes.h" local="yes" imported="no">sdes.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>_r_t_c_p_packet_8cc.html</anchorfile>
      <anchor>a0dd546692e300d001e0ce68d3a36095e</anchor>
      <arglist>(RTCPPacket)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>_r_t_c_p_packet_8cc.html</anchorfile>
      <anchor>a82c3be2fe015d9dafef66205365a90bd</anchor>
      <arglist>(RTCPReceiverReportPacket)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>_r_t_c_p_packet_8cc.html</anchorfile>
      <anchor>aa17dd1af03b7d3366d3e8a1a389e8806</anchor>
      <arglist>(RTCPSenderReportPacket)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>_r_t_c_p_packet_8cc.html</anchorfile>
      <anchor>a14d1c88dde6cb08a8866242ac85387e0</anchor>
      <arglist>(RTCPSDESPacket)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>_r_t_c_p_packet_8cc.html</anchorfile>
      <anchor>af474104dd2e9017b27ae2411948db199</anchor>
      <arglist>(RTCPByePacket)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>_r_t_c_p_packet_8cc.html</anchorfile>
      <anchor>ae663f7fdd0ca4697560496e998723640</anchor>
      <arglist>(RTCPCompoundPacket)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTCPPacket.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>_r_t_c_p_packet_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="reports_8h" name="reports.h" local="yes" imported="no">reports.h</includes>
    <includes id="sdes_8h" name="sdes.h" local="yes" imported="no">sdes.h</includes>
    <class kind="class">RTCPPacket</class>
    <class kind="class">RTCPReceiverReportPacket</class>
    <class kind="class">RTCPSenderReportPacket</class>
    <class kind="class">RTCPSDESPacket</class>
    <class kind="class">RTCPByePacket</class>
    <class kind="class">RTCPCompoundPacket</class>
  </compound>
  <compound kind="file">
    <name>RTP.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>_r_t_p_8cc</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_u_d_p_socket_8h" name="UDPSocket.h" local="yes" imported="no">UDPSocket.h</includes>
    <includes id="_u_d_p_control_info__m_8h" name="UDPControlInfo_m.h" local="yes" imported="no">UDPControlInfo_m.h</includes>
    <includes id="_r_t_p_8h" name="RTP.h" local="yes" imported="no">RTP.h</includes>
    <includes id="_r_t_p_interface_packet_8h" name="RTPInterfacePacket.h" local="yes" imported="no">RTPInterfacePacket.h</includes>
    <includes id="_r_t_p_inner_packet_8h" name="RTPInnerPacket.h" local="yes" imported="no">RTPInnerPacket.h</includes>
    <includes id="_r_t_p_profile_8h" name="RTPProfile.h" local="yes" imported="no">RTPProfile.h</includes>
    <includes id="_r_t_p_sender_control_message__m_8h" name="RTPSenderControlMessage_m.h" local="yes" imported="no">RTPSenderControlMessage_m.h</includes>
    <includes id="_r_t_p_sender_status_message__m_8h" name="RTPSenderStatusMessage_m.h" local="yes" imported="no">RTPSenderStatusMessage_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_r_t_p_8cc.html</anchorfile>
      <anchor>a6e537d8321d04c39220dee1f10d3a373</anchor>
      <arglist>(RTP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTP.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>_r_t_p_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
    <includes id="_r_t_p_interface_packet_8h" name="RTPInterfacePacket.h" local="yes" imported="no">RTPInterfacePacket.h</includes>
    <includes id="_r_t_p_inner_packet_8h" name="RTPInnerPacket.h" local="yes" imported="no">RTPInnerPacket.h</includes>
    <class kind="class">RTP</class>
  </compound>
  <compound kind="file">
    <name>RTPApplication.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/rtpapp/</path>
    <filename>_r_t_p_application_8cc</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_r_t_p_application_8h" name="RTPApplication.h" local="yes" imported="no">RTPApplication.h</includes>
    <includes id="_r_t_p_interface_packet_8h" name="RTPInterfacePacket.h" local="yes" imported="no">RTPInterfacePacket.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_r_t_p_application_8cc.html</anchorfile>
      <anchor>ab4f3159d346a98884c0074a18d97a705</anchor>
      <arglist>(RTPApplication) void RTPApplication</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPApplication.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/rtpapp/</path>
    <filename>_r_t_p_application_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">RTPApplication</class>
  </compound>
  <compound kind="file">
    <name>RTPAVProfile.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/profiles/avprofile/</path>
    <filename>_r_t_p_a_v_profile_8cc</filename>
    <includes id="_r_t_p_a_v_profile_8h" name="RTPAVProfile.h" local="yes" imported="no">RTPAVProfile.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_r_t_p_a_v_profile_8cc.html</anchorfile>
      <anchor>ab0bafb979293a6eef98bf66e6295ab09</anchor>
      <arglist>(RTPAVProfile)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPAVProfile.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/profiles/avprofile/</path>
    <filename>_r_t_p_a_v_profile_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_r_t_p_profile_8h" name="RTPProfile.h" local="yes" imported="no">RTPProfile.h</includes>
    <class kind="class">RTPAVProfile</class>
  </compound>
  <compound kind="file">
    <name>RTPAVProfilePayload32Receiver.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/profiles/avprofile/</path>
    <filename>_r_t_p_a_v_profile_payload32_receiver_8cc</filename>
    <includes id="_r_t_p_payload_receiver_8h" name="RTPPayloadReceiver.h" local="yes" imported="no">RTPPayloadReceiver.h</includes>
    <includes id="_r_t_p_a_v_profile_payload32_receiver_8h" name="RTPAVProfilePayload32Receiver.h" local="yes" imported="no">RTPAVProfilePayload32Receiver.h</includes>
    <includes id="_r_t_p_packet_8h" name="RTPPacket.h" local="yes" imported="no">RTPPacket.h</includes>
    <includes id="_r_t_p_mpeg_packet__m_8h" name="RTPMpegPacket_m.h" local="yes" imported="no">RTPMpegPacket_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_r_t_p_a_v_profile_payload32_receiver_8cc.html</anchorfile>
      <anchor>a0ed951ffbc6cccf0f69558577ad3122d</anchor>
      <arglist>(RTPAVProfilePayload32Receiver)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareRTPPacketsBySequenceNumber</name>
      <anchorfile>_r_t_p_a_v_profile_payload32_receiver_8cc.html</anchorfile>
      <anchor>aee1a69cb7f78ce075411a6a7100f0230</anchor>
      <arglist>(cObject *packet1, cObject *packet2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPAVProfilePayload32Receiver.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/profiles/avprofile/</path>
    <filename>_r_t_p_a_v_profile_payload32_receiver_8h</filename>
    <includes id="_r_t_p_payload_receiver_8h" name="RTPPayloadReceiver.h" local="yes" imported="no">RTPPayloadReceiver.h</includes>
    <class kind="class">RTPAVProfilePayload32Receiver</class>
  </compound>
  <compound kind="file">
    <name>RTPAVProfilePayload32Sender.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/profiles/avprofile/</path>
    <filename>_r_t_p_a_v_profile_payload32_sender_8cc</filename>
    <includes id="_r_t_p_packet_8h" name="RTPPacket.h" local="yes" imported="no">RTPPacket.h</includes>
    <includes id="_r_t_p_inner_packet_8h" name="RTPInnerPacket.h" local="yes" imported="no">RTPInnerPacket.h</includes>
    <includes id="_r_t_p_a_v_profile_payload32_sender_8h" name="RTPAVProfilePayload32Sender.h" local="yes" imported="no">RTPAVProfilePayload32Sender.h</includes>
    <includes id="_r_t_p_mpeg_packet__m_8h" name="RTPMpegPacket_m.h" local="yes" imported="no">RTPMpegPacket_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_r_t_p_a_v_profile_payload32_sender_8cc.html</anchorfile>
      <anchor>acfb7218c57e8a3bef23bb581baef389f</anchor>
      <arglist>(RTPAVProfilePayload32Sender)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPAVProfilePayload32Sender.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/profiles/avprofile/</path>
    <filename>_r_t_p_a_v_profile_payload32_sender_8h</filename>
    <includes id="_r_t_p_payload_sender_8h" name="RTPPayloadSender.h" local="yes" imported="no">RTPPayloadSender.h</includes>
    <class kind="class">RTPAVProfilePayload32Sender</class>
  </compound>
  <compound kind="file">
    <name>RTPInnerPacket.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>_r_t_p_inner_packet_8cc</filename>
    <includes id="_r_t_p_inner_packet_8h" name="RTPInnerPacket.h" local="yes" imported="no">RTPInnerPacket.h</includes>
    <includes id="_r_t_p_packet_8h" name="RTPPacket.h" local="yes" imported="no">RTPPacket.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>_r_t_p_inner_packet_8cc.html</anchorfile>
      <anchor>a9bc64680eada57dc2012b2e501171db0</anchor>
      <arglist>(RTPInnerPacket)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPInnerPacket.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>_r_t_p_inner_packet_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_r_t_p_packet_8h" name="RTPPacket.h" local="yes" imported="no">RTPPacket.h</includes>
    <includes id="_r_t_p_sender_control_message__m_8h" name="RTPSenderControlMessage_m.h" local="yes" imported="no">RTPSenderControlMessage_m.h</includes>
    <includes id="_r_t_p_sender_status_message__m_8h" name="RTPSenderStatusMessage_m.h" local="yes" imported="no">RTPSenderStatusMessage_m.h</includes>
    <class kind="class">RTPInnerPacket</class>
  </compound>
  <compound kind="file">
    <name>RTPInterfacePacket.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>_r_t_p_interface_packet_8cc</filename>
    <includes id="_r_t_p_interface_packet_8h" name="RTPInterfacePacket.h" local="yes" imported="no">RTPInterfacePacket.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>_r_t_p_interface_packet_8cc.html</anchorfile>
      <anchor>a0e93d776992b070b67bb88f1f6164ee8</anchor>
      <arglist>(RTPInterfacePacket)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPInterfacePacket.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>_r_t_p_interface_packet_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_r_t_p_sender_control_message__m_8h" name="RTPSenderControlMessage_m.h" local="yes" imported="no">RTPSenderControlMessage_m.h</includes>
    <includes id="_r_t_p_sender_status_message__m_8h" name="RTPSenderStatusMessage_m.h" local="yes" imported="no">RTPSenderStatusMessage_m.h</includes>
    <class kind="class">RTPInterfacePacket</class>
  </compound>
  <compound kind="file">
    <name>RTPMpegPacket_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/profiles/avprofile/</path>
    <filename>_r_t_p_mpeg_packet__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">RTPMpegPacket</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_r_t_p_mpeg_packet__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_r_t_p_mpeg_packet__m_8h.html</anchorfile>
      <anchor>a6b5663f2d40dcb832a860a2424eb772f</anchor>
      <arglist>(cCommBuffer *b, RTPMpegPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_r_t_p_mpeg_packet__m_8h.html</anchorfile>
      <anchor>a6a6e94752f186ea34ea371446516310b</anchor>
      <arglist>(cCommBuffer *b, RTPMpegPacket &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPPacket.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>_r_t_p_packet_8cc</filename>
    <includes id="_r_t_p_packet_8h" name="RTPPacket.h" local="yes" imported="no">RTPPacket.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>_r_t_p_packet_8cc.html</anchorfile>
      <anchor>a8300319635b50362d4af3af95da03caa</anchor>
      <arglist>(RTPPacket)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPPacket.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>_r_t_p_packet_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">RTPPacket</class>
  </compound>
  <compound kind="file">
    <name>RTPParticipantInfo.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>_r_t_p_participant_info_8cc</filename>
    <includes id="_r_t_p_participant_info_8h" name="RTPParticipantInfo.h" local="yes" imported="no">RTPParticipantInfo.h</includes>
    <includes id="reports_8h" name="reports.h" local="yes" imported="no">reports.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>_r_t_p_participant_info_8cc.html</anchorfile>
      <anchor>a3d0336789d8e720adec958e47e9f3b93</anchor>
      <arglist>(RTPParticipantInfo)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPParticipantInfo.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>_r_t_p_participant_info_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_r_t_p_packet_8h" name="RTPPacket.h" local="yes" imported="no">RTPPacket.h</includes>
    <includes id="_r_t_c_p_packet_8h" name="RTCPPacket.h" local="yes" imported="no">RTCPPacket.h</includes>
    <includes id="reports_8h" name="reports.h" local="yes" imported="no">reports.h</includes>
    <includes id="sdes_8h" name="sdes.h" local="yes" imported="no">sdes.h</includes>
    <class kind="class">RTPParticipantInfo</class>
  </compound>
  <compound kind="file">
    <name>RTPPayloadReceiver.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>_r_t_p_payload_receiver_8cc</filename>
    <includes id="_r_t_p_payload_receiver_8h" name="RTPPayloadReceiver.h" local="yes" imported="no">RTPPayloadReceiver.h</includes>
    <includes id="_r_t_p_packet_8h" name="RTPPacket.h" local="yes" imported="no">RTPPacket.h</includes>
    <includes id="_r_t_p_inner_packet_8h" name="RTPInnerPacket.h" local="yes" imported="no">RTPInnerPacket.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_r_t_p_payload_receiver_8cc.html</anchorfile>
      <anchor>a5549a8574c45ea2a8386b2f946fb15c4</anchor>
      <arglist>(RTPPayloadReceiver)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPPayloadReceiver.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>_r_t_p_payload_receiver_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_r_t_p_packet_8h" name="RTPPacket.h" local="yes" imported="no">RTPPacket.h</includes>
    <class kind="class">RTPPayloadReceiver</class>
  </compound>
  <compound kind="file">
    <name>RTPPayloadSender.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>_r_t_p_payload_sender_8cc</filename>
    <includes id="_r_t_p_payload_sender_8h" name="RTPPayloadSender.h" local="yes" imported="no">RTPPayloadSender.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_r_t_p_payload_sender_8cc.html</anchorfile>
      <anchor>ae5e62646d0590cde234649f241d37cef</anchor>
      <arglist>(RTPPayloadSender)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPPayloadSender.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>_r_t_p_payload_sender_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_r_t_p_inner_packet_8h" name="RTPInnerPacket.h" local="yes" imported="no">RTPInnerPacket.h</includes>
    <class kind="class">RTPPayloadSender</class>
  </compound>
  <compound kind="file">
    <name>RTPProfile.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>_r_t_p_profile_8cc</filename>
    <includes id="_r_t_p_profile_8h" name="RTPProfile.h" local="yes" imported="no">RTPProfile.h</includes>
    <includes id="_r_t_p_inner_packet_8h" name="RTPInnerPacket.h" local="yes" imported="no">RTPInnerPacket.h</includes>
    <includes id="_r_t_p_payload_sender_8h" name="RTPPayloadSender.h" local="yes" imported="no">RTPPayloadSender.h</includes>
    <includes id="_r_t_p_payload_receiver_8h" name="RTPPayloadReceiver.h" local="yes" imported="no">RTPPayloadReceiver.h</includes>
    <includes id="_r_t_p_participant_info_8h" name="RTPParticipantInfo.h" local="yes" imported="no">RTPParticipantInfo.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_r_t_p_profile_8cc.html</anchorfile>
      <anchor>a2ef28137d0a22bbadb1028475ce4d01a</anchor>
      <arglist>(RTPProfile)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPProfile.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>_r_t_p_profile_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_r_t_p_inner_packet_8h" name="RTPInnerPacket.h" local="yes" imported="no">RTPInnerPacket.h</includes>
    <class kind="class">RTPProfile</class>
    <class kind="class">RTPProfile::SSRCGate</class>
  </compound>
  <compound kind="file">
    <name>RTPReceiverInfo.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>_r_t_p_receiver_info_8cc</filename>
    <includes id="_r_t_p_receiver_info_8h" name="RTPReceiverInfo.h" local="yes" imported="no">RTPReceiverInfo.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>_r_t_p_receiver_info_8cc.html</anchorfile>
      <anchor>a2eb869ee10e2fa71fc65fb2c096274c9</anchor>
      <arglist>(RTPReceiverInfo)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPReceiverInfo.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>_r_t_p_receiver_info_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_r_t_p_participant_info_8h" name="RTPParticipantInfo.h" local="yes" imported="no">RTPParticipantInfo.h</includes>
    <class kind="class">RTPReceiverInfo</class>
  </compound>
  <compound kind="file">
    <name>RTPSenderControlMessage_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>_r_t_p_sender_control_message__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">RTPSenderControlMessage</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_r_t_p_sender_control_message__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_r_t_p_sender_control_message__m_8h.html</anchorfile>
      <anchor>a2f11a2d66004b9d12a1bb9473c0ce258</anchor>
      <arglist>(cCommBuffer *b, RTPSenderControlMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_r_t_p_sender_control_message__m_8h.html</anchorfile>
      <anchor>ae281227dddbb38d4696bf26ef4174d09</anchor>
      <arglist>(cCommBuffer *b, RTPSenderControlMessage &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPSenderInfo.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>_r_t_p_sender_info_8cc</filename>
    <includes id="_r_t_p_sender_info_8h" name="RTPSenderInfo.h" local="yes" imported="no">RTPSenderInfo.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>_r_t_p_sender_info_8cc.html</anchorfile>
      <anchor>a7ce3dfd0bd7e7fd48d706fe4354d2038</anchor>
      <arglist>(RTPSenderInfo)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPSenderInfo.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>_r_t_p_sender_info_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_r_t_p_participant_info_8h" name="RTPParticipantInfo.h" local="yes" imported="no">RTPParticipantInfo.h</includes>
    <includes id="reports_8h" name="reports.h" local="yes" imported="no">reports.h</includes>
    <class kind="class">RTPSenderInfo</class>
  </compound>
  <compound kind="file">
    <name>RTPSenderStatusMessage_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>_r_t_p_sender_status_message__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">RTPSenderStatusMessage</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_r_t_p_sender_status_message__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_r_t_p_sender_status_message__m_8h.html</anchorfile>
      <anchor>ab589412ea134322eff7d80365b326cb7</anchor>
      <arglist>(cCommBuffer *b, RTPSenderStatusMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_r_t_p_sender_status_message__m_8h.html</anchorfile>
      <anchor>a7b1dae1760bc997225ff205195cf8ed9</anchor>
      <arglist>(cCommBuffer *b, RTPSenderStatusMessage &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ScenarioManager.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/world/</path>
    <filename>_scenario_manager_8cc</filename>
    <includes id="_scenario_manager_8h" name="ScenarioManager.h" local="yes" imported="no">ScenarioManager.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_scenario_manager_8cc.html</anchorfile>
      <anchor>ac384a6e70a6be1c69a8e44e207054ce8</anchor>
      <arglist>(ScenarioManager)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ScenarioManager.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/world/</path>
    <filename>_scenario_manager_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_scriptable_8h" name="IScriptable.h" local="yes" imported="no">IScriptable.h</includes>
    <class kind="class">ScenarioManager</class>
  </compound>
  <compound kind="file">
    <name>SCTP.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/sctp/</path>
    <filename>_s_c_t_p_8cc</filename>
    <includes id="_s_c_t_p_8h" name="SCTP.h" local="yes" imported="no">SCTP.h</includes>
    <includes id="_s_c_t_p_association_8h" name="SCTPAssociation.h" local="yes" imported="no">SCTPAssociation.h</includes>
    <includes id="_s_c_t_p_command__m_8h" name="SCTPCommand_m.h" local="yes" imported="no">SCTPCommand_m.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_pv6_control_info_8h" name="IPv6ControlInfo.h" local="yes" imported="no">IPv6ControlInfo.h</includes>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_s_c_t_p_8cc.html</anchorfile>
      <anchor>abd576ce99b8bd22704bff36ddaa1d4b3</anchor>
      <arglist>(SCTP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sctp.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/headerserializers/headers/</path>
    <filename>sctp_8h</filename>
    <class kind="struct">common_header</class>
    <class kind="struct">chunk</class>
    <class kind="struct">data_chunk</class>
    <class kind="struct">init_chunk</class>
    <class kind="struct">init_ack_chunk</class>
    <class kind="struct">sack_chunk</class>
    <class kind="struct">heartbeat_chunk</class>
    <class kind="struct">heartbeat_ack_chunk</class>
    <class kind="struct">abort_chunk</class>
    <class kind="struct">shutdown_chunk</class>
    <class kind="struct">shutdown_ack_chunk</class>
    <class kind="struct">shutdown_complete_chunk</class>
    <class kind="struct">cookie_echo_chunk</class>
    <class kind="struct">cookie_ack_chunk</class>
    <class kind="struct">error_chunk</class>
    <class kind="struct">init_ipv4_address_parameter</class>
    <class kind="struct">init_ipv6_address_parameter</class>
    <class kind="struct">init_cookie_parameter</class>
    <class kind="struct">cookie_parameter</class>
    <class kind="struct">tlv</class>
    <class kind="struct">supported_address_types_parameter</class>
    <class kind="struct">heartbeat_info</class>
    <class kind="struct">error_cause</class>
    <class kind="struct">sack_gap</class>
    <class kind="struct">sack_duptsn</class>
    <class kind="struct">data_vector</class>
    <member kind="define">
      <type>#define</type>
      <name>UNORDERED_BIT</name>
      <anchorfile>sctp_8h.html</anchorfile>
      <anchor>a5d2f622082102fd699ac9d0bee5d58eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BEGIN_BIT</name>
      <anchorfile>sctp_8h.html</anchorfile>
      <anchor>a138a317c166a9972907b7d1543a56398</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>END_BIT</name>
      <anchorfile>sctp_8h.html</anchorfile>
      <anchor>a49f85dedca778ecc4208f7c9cf5f9ca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_BIT</name>
      <anchorfile>sctp_8h.html</anchorfile>
      <anchor>ace344d543daa81e5cbfbba5fabb29d27</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>C_FLAG</name>
      <anchorfile>sctp_8h.html</anchorfile>
      <anchor>aa29c80f7f7f901ec7a2c57887f56585d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_FLAG</name>
      <anchorfile>sctp_8h.html</anchorfile>
      <anchor>a247a414d3f8ce01913edcebbba38fa6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>B_FLAG</name>
      <anchorfile>sctp_8h.html</anchorfile>
      <anchor>aab56b26929e1200ce22390f2b99752bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_FLAG</name>
      <anchorfile>sctp_8h.html</anchorfile>
      <anchor>ab70c2ad45335f9d96e5af8569eab14d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CRC32C</name>
      <anchorfile>sctp_8h.html</anchorfile>
      <anchor>ad3af2094050495f1c8c0857d9fd97813</anchor>
      <arglist>(c, d)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INIT_PARAM_IPV4</name>
      <anchorfile>sctp_8h.html</anchorfile>
      <anchor>a42777cc0d8e665b540eb6edc1ee831dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INIT_PARAM_IPV6</name>
      <anchorfile>sctp_8h.html</anchorfile>
      <anchor>a5e8308210ed9cdacf7346535647bbb00</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INIT_PARAM_COOKIE</name>
      <anchorfile>sctp_8h.html</anchorfile>
      <anchor>a34127e7f145642fb19969a905c0511dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INIT_SUPPORTED_ADDRESS</name>
      <anchorfile>sctp_8h.html</anchorfile>
      <anchor>a19e00fdb6119cefd4b310c27a117739f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HBI_INFO</name>
      <anchorfile>sctp_8h.html</anchorfile>
      <anchor>a35a07f4d1137779b208b608ac62f7561</anchor>
      <arglist>(hbi)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HBI_ADDR</name>
      <anchorfile>sctp_8h.html</anchorfile>
      <anchor>aed9342dc5ddcea1e525b7b449fab35a3</anchor>
      <arglist>(hbi)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HBI_TIME</name>
      <anchorfile>sctp_8h.html</anchorfile>
      <anchor>a350cf5878ce2f8cb42cca735e0f99c1d</anchor>
      <arglist>(hbi)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNORDERED_BIT</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a5d2f622082102fd699ac9d0bee5d58eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BEGIN_BIT</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a138a317c166a9972907b7d1543a56398</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>END_BIT</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a49f85dedca778ecc4208f7c9cf5f9ca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_BIT</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>ace344d543daa81e5cbfbba5fabb29d27</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>C_FLAG</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>aa29c80f7f7f901ec7a2c57887f56585d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_FLAG</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a247a414d3f8ce01913edcebbba38fa6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>B_FLAG</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>aab56b26929e1200ce22390f2b99752bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_FLAG</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>ab70c2ad45335f9d96e5af8569eab14d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CRC32C</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>ad3af2094050495f1c8c0857d9fd97813</anchor>
      <arglist>(c, d)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INIT_PARAM_IPV4</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a42777cc0d8e665b540eb6edc1ee831dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INIT_PARAM_IPV6</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a5e8308210ed9cdacf7346535647bbb00</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INIT_PARAM_COOKIE</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a34127e7f145642fb19969a905c0511dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INIT_SUPPORTED_ADDRESS</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a19e00fdb6119cefd4b310c27a117739f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HBI_INFO</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a35a07f4d1137779b208b608ac62f7561</anchor>
      <arglist>(hbi)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HBI_ADDR</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>aed9342dc5ddcea1e525b7b449fab35a3</anchor>
      <arglist>(hbi)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HBI_TIME</name>
      <anchorfile>_s_c_t_p_serializer_8cc.html</anchorfile>
      <anchor>a350cf5878ce2f8cb42cca735e0f99c1d</anchor>
      <arglist>(hbi)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SCTP.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/sctp/</path>
    <filename>_s_c_t_p_8h</filename>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
    <includes id="_u_d_p_socket_8h" name="UDPSocket.h" local="yes" imported="no">UDPSocket.h</includes>
    <class kind="class">SCTP</class>
    <class kind="struct">SCTP::AppConnKey</class>
    <class kind="struct">SCTP::SockPair</class>
    <class kind="struct">SCTP::VTagPair</class>
    <class kind="struct">SCTP::AssocStat</class>
    <member kind="define">
      <type>#define</type>
      <name>sctpEV3</name>
      <anchorfile>_s_c_t_p_8h.html</anchorfile>
      <anchor>ae124292366093a18d977ca18bd0c19f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SCTPAlg.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/sctp/</path>
    <filename>_s_c_t_p_alg_8cc</filename>
    <includes id="_s_c_t_p_alg_8h" name="SCTPAlg.h" local="yes" imported="no">SCTPAlg.h</includes>
    <includes id="_s_c_t_p_8h" name="SCTP.h" local="yes" imported="no">SCTP.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>_s_c_t_p_alg_8cc.html</anchorfile>
      <anchor>ad1c5bb41ffc8f86a0fb9b94d61fc5b52</anchor>
      <arglist>(SCTPAlg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SCTPAlg.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/sctp/</path>
    <filename>_s_c_t_p_alg_8h</filename>
    <includes id="_s_c_t_p_algorithm_8h" name="SCTPAlgorithm.h" local="yes" imported="no">SCTPAlgorithm.h</includes>
    <class kind="class">SCTPAlgStateVariables</class>
    <class kind="class">SCTPAlg</class>
  </compound>
  <compound kind="file">
    <name>SCTPAlgorithm.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/sctp/</path>
    <filename>_s_c_t_p_algorithm_8h</filename>
    <includes id="_s_c_t_p_association_8h" name="SCTPAssociation.h" local="yes" imported="no">SCTPAssociation.h</includes>
    <includes id="_s_c_t_p_queue_8h" name="SCTPQueue.h" local="yes" imported="no">SCTPQueue.h</includes>
    <class kind="class">SCTPAlgorithm</class>
  </compound>
  <compound kind="file">
    <name>SCTPAssociation.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/sctp/</path>
    <filename>_s_c_t_p_association_8h</filename>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_s_c_t_p_8h" name="SCTP.h" local="yes" imported="no">SCTP.h</includes>
    <includes id="_routing_table_8h" name="RoutingTable.h" local="yes" imported="no">RoutingTable.h</includes>
    <includes id="_routing_table_access_8h" name="RoutingTableAccess.h" local="yes" imported="no">RoutingTableAccess.h</includes>
    <includes id="_interface_table_8h" name="InterfaceTable.h" local="yes" imported="no">InterfaceTable.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_s_c_t_p_queue_8h" name="SCTPQueue.h" local="yes" imported="no">SCTPQueue.h</includes>
    <includes id="_s_c_t_p_send_stream_8h" name="SCTPSendStream.h" local="yes" imported="no">SCTPSendStream.h</includes>
    <includes id="_s_c_t_p_receive_stream_8h" name="SCTPReceiveStream.h" local="yes" imported="no">SCTPReceiveStream.h</includes>
    <includes id="_s_c_t_p_message_8h" name="SCTPMessage.h" local="yes" imported="no">SCTPMessage.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="common_8h" name="common.h" local="yes" imported="no">common.h</includes>
    <class kind="class">SCTPPathVariables</class>
    <class kind="class">SCTPDataVariables</class>
    <class kind="class">SCTPStateVariables</class>
    <class kind="class">SCTPAssociation</class>
    <class kind="struct">SCTPAssociation::counter</class>
    <class kind="struct">SCTPAssociation::calcBytesToSend</class>
    <class kind="struct">SCTPAssociation::congestionControlFunctions</class>
    <class kind="struct">SCTPAssociation::streamSchedulingFunctions</class>
    <member kind="define">
      <type>#define</type>
      <name>SCTP_COMMON_HEADER</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a5cd94d6b80cfc4869b11f345c9de4d93</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCTP_INIT_CHUNK_LENGTH</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a685f1682f68294dbb12e7953e02748a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCTP_DATA_CHUNK_LENGTH</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>aad0be78d1352b9d9fa6a695ed18c9d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCTP_SACK_CHUNK_LENGTH</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>ad4c0ed05112e2eae28cc210916cd3fdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCTP_HEARTBEAT_CHUNK_LENGTH</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>adf7452edbaf15112920d12e92d14dfd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCTP_ABORT_CHUNK_LENGTH</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a2383950ff71160db077c713351a3baff</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCTP_COOKIE_ACK_LENGTH</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>aee9e5129c64e3a5dfbda76dd06c62a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCTP_FORWARD_TSN_CHUNK_LENGTH</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a01761d50f4708bd6046f920f4760ce25</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCTP_SHUTDOWN_CHUNK_LENGTH</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a096ad48a9dc5dcbd73658c5cadbf3636</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCTP_SHUTDOWN_ACK_LENGTH</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>ad1963dfab19884e93c14d1527c1e0535</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCTP_ERROR_CHUNK_LENGTH</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>aabfb8449670ea3f037420cabb853b8fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_HEADER_LENGTH</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a294612afcb62d33531f390a08f0c3209</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCTP_DEFAULT_ARWND</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a95dcb2aedbaa89336f449b678b2e1fb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCTP_DEFAULT_INBOUND_STREAMS</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a34c7c7c047d941065871d33ce7f97bc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCTP_DEFAULT_OUTBOUND_STREAMS</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>af09cc91ff86473911040f475082ff0de</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VALID_COOKIE_LIFE_TIME</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>adf5c142147e7957e2937bdf7454cc9b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCTP_COOKIE_LENGTH</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a3aeb03eaba88c9681ecb920f24c689d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HB_INTERVAL</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a7a7650e106bfeeba73c2c572138644df</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PATH_MAX_RETRANS</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>aa6f5df5823e404f2ed03ef4d28f64bbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCTP_TIMEOUT_INIT_REXMIT</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>ad0253f70ce80e86b5da3240da37f4334</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCTP_TIMEOUT_INIT_REXMIT_MAX</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a899e0c5a9422a556e99f7ad0aea9ab8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SACK_DELAY</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a5f8211f50dea40fa08f410e3631eb1fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTO_BETA</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a661ab206915575cc0769722ba181238e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTO_ALPHA</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a4cb261bf436c8ff178311737e38e371f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTO_INITIAL</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a2f118b1c53f11a3ba6a13f8df1aa5aca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_DEFAULT</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a010572beea3ba6d6033c38ec40248e2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFAULT_MAX_SENDQUEUE</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a1628dbd84b10d683afcba091c8f54779</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFAULT_MAX_RECVQUEUE</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a366af39e5075b50554c8db59b05bdc86</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_ASSOCS</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a6a9a4ba63e3955e0d9db42f4d496ad72</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCTP_MAX_PAYLOAD</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a55f8de1f79ada28da1e5818ae8e6201f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_GAP_COUNT</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a6334da21c08d8d9b4c63879c8cce9633</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_GAP_REPORTS</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a13d6f6f121bd819bbe8b521e3be15331</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ADD_PADDING</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a34c6101299ca6658c48834e679883867</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>ad72dbcf6d0153db1b8d8a58001feed83</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SHUTDOWN_GUARD_TIMEOUT</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a45e10ab1204a49d216a4c2f4a8826848</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; IPvXAddress &gt;</type>
      <name>AddressVector</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a83ecc618606af11f87a228a6ab74049b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SctpState</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a2b3e573af74940c5a6c008b1cd0e3be8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_S_CLOSED</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a2b3e573af74940c5a6c008b1cd0e3be8a7fefd7c6e51ba43b6c9d834b372da21e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_S_COOKIE_WAIT</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a2b3e573af74940c5a6c008b1cd0e3be8af21d78f3ce1dc469572320cb1e192cc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_S_COOKIE_ECHOED</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a2b3e573af74940c5a6c008b1cd0e3be8a71d88e86b49412eed493b7307f064944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_S_ESTABLISHED</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a2b3e573af74940c5a6c008b1cd0e3be8ae173fa0c2b8fc03ea459ade55b5d669a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_S_SHUTDOWN_PENDING</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a2b3e573af74940c5a6c008b1cd0e3be8a606ae3dac26b5e28d7f5060705e273c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_S_SHUTDOWN_SENT</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a2b3e573af74940c5a6c008b1cd0e3be8a0ec4d7400f71ce88a8bbce0e66c97f55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_S_SHUTDOWN_RECEIVED</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a2b3e573af74940c5a6c008b1cd0e3be8aa6449dfb17a17605bdd3aea435d53159</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_S_SHUTDOWN_ACK_SENT</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a2b3e573af74940c5a6c008b1cd0e3be8afed5af0cf4b3fce20325548b0b75961f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SCTPEventCode</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_ASSOCIATE</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7ddab1a4ad21616e72e2d7c4bef4b392d674</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_OPEN_PASSIVE</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7dda9f1fd7fc777cc9fcb87a49cd64412c70</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_ABORT</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7ddaf572b3caeca60173cd35ff6438fc30f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_SHUTDOWN</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7dda2c57d6cd31d0e760c9562ab7d2d24532</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_CLOSE</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7ddaf772922ac461dd670204bcd480536cec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_SEND</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7dda8ec7f7bcc1dae63ce49ba1c29227bebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_RCV_INIT</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7ddab8aa9b5c31869bf157aa993cea077747</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_RCV_ABORT</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7ddaa70358352df351a6de85965ba69a2323</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_RCV_VALID_COOKIE_ECHO</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7ddab8c4ae7bdc1d15fd08dbe454cdbf0fcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_RCV_INIT_ACK</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7ddabad36afdf7219f94be14abb8fe080640</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_RCV_COOKIE_ACK</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7dda2f2d1da65ad0c265e5733999458898fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_RCV_SHUTDOWN</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7dda7712aa29c30d8415b4a4f8bcf27036dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_RCV_SHUTDOWN_ACK</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7dda1ba625b5ddb58a87dc16748b4eef0282</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_RCV_SHUTDOWN_COMPLETE</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7dda57e8e0f4353663385300b7746ec16d6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_NO_MORE_OUTSTANDING</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7dda861e58ca6562ffbfe4884eec2e704431</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_TIMEOUT_INIT_TIMER</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7dda1397882140b1aae3cf3cb56ff2c6c9ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_TIMEOUT_SHUTDOWN_TIMER</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7dda9e719b2a4959d6ef63faee85c6470e31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_TIMEOUT_RTX_TIMER</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7dda189e654159bcd1d6e97d07e2c2eca5d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_TIMEOUT_HEARTBEAT_TIMER</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7ddaff2b88a373201fe023541b0e00a48749</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_IGNORE</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7ddab4914b4201fb0cd1643109f690a59782</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_RECEIVE</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7dda914409a350944272bbd72083b6b5281b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_DUP_RECEIVED</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7dda365f70144611ac4229ac712c9fde06f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_PRIMARY</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7dda1ab4fe49257ab6212a8dd336e4d07991</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_DELIVERED</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7dda6ad094e0a90c2dc8a41628f621d27ca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_QUEUE_MSGS_LIMIT</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7dda982447e78039f557e892297768866518</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_QUEUE_BYTES_LIMIT</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7dda3d83eea39de6b7b191caae724ae5146e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_SEND_QUEUE_LIMIT</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7ddae6a97ad6b2694fe05e9f87cd3386a178</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_SEND_SHUTDOWN_ACK</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7dda65d6eeb62214f93d929739b4f81cd01c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_E_STOP_SENDING</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a78805c92dea64dcc0102898a18b6a7dda309375f495c30e879128bda85711a6b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SCTPChunkTypes</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a8886377ab3f4b4ef217558f2b83b7b12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a8886377ab3f4b4ef217558f2b83b7b12a9d7d6f31868d66330397c967c4afd2d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INIT</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a8886377ab3f4b4ef217558f2b83b7b12a0cb1b2c6a7db1f1084886c98909a3f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INIT_ACK</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a8886377ab3f4b4ef217558f2b83b7b12abb473557985d30fdf16d2525388e3a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SACK</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a8886377ab3f4b4ef217558f2b83b7b12a689bf9c7470080fd0180eb7f5c293bd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HEARTBEAT</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a8886377ab3f4b4ef217558f2b83b7b12a0f286b0bbc1ee4f20be5136a55cf8923</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HEARTBEAT_ACK</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a8886377ab3f4b4ef217558f2b83b7b12a5621dd83f6f32ee90c0d505867c67b71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ABORT</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a8886377ab3f4b4ef217558f2b83b7b12a781ad2788df9e25c59a70894c7832096</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SHUTDOWN</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a8886377ab3f4b4ef217558f2b83b7b12a7690b021f467450541d8d89123429d40</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SHUTDOWN_ACK</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a8886377ab3f4b4ef217558f2b83b7b12a7f11b152058ba8f4656266d735a50c4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ERRORTYPE</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a8886377ab3f4b4ef217558f2b83b7b12a511842f389362e9f11f52a88556455f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COOKIE_ECHO</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a8886377ab3f4b4ef217558f2b83b7b12ac6c3901afa866152be0e645c2c38f471</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COOKIE_ACK</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a8886377ab3f4b4ef217558f2b83b7b12a8cb5544ff09ee0b2ae1f1171de9597bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SHUTDOWN_COMPLETE</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a8886377ab3f4b4ef217558f2b83b7b12a1ac9ae29771c5095efe16ce822d561d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SCTPFlags</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a6f5cc3c80258127f32f9afd435791f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMPLETE_MESG_UNORDERED</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a6f5cc3c80258127f32f9afd435791f1fa624a2bc1f97816d9d48c796f8ddab573</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMPLETE_MESG_ORDERED</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a6f5cc3c80258127f32f9afd435791f1fa58b47731ff085e85a7462873e1284441</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SCTPParameterTypes</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a8d59686e974f326f12076166b80dcad1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNRECOGNIZED_PARAMETER</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a8d59686e974f326f12076166b80dcad1a84eff3c1951655fd6a05c80649382f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUPPORTED_ADDRESS_TYPES</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a8d59686e974f326f12076166b80dcad1af17cc3bab233e3bca306ffc579984acc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SCTPCCModules</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>ad9a9cbc92cb49e36c2bd8f1de35aa477</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RFC4960</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>ad9a9cbc92cb49e36c2bd8f1de35aa477aa38b2d1ce0f55ed0b36414423acf41b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SCTPStreamSchedulers</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a75eb0a6ff44280b6261fbc9a3b0cee9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROUND_ROBIN</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>a75eb0a6ff44280b6261fbc9a3b0cee9ca9e805af736d9be20caf33f5ec0dc1d47</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>min</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>ad61931b1ae6b8e5bb714e2e6744f4470</anchor>
      <arglist>(const double a, const double b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>max</name>
      <anchorfile>_s_c_t_p_association_8h.html</anchorfile>
      <anchor>afdb84bd44c7cbd3fc9cbe1e3bf07d948</anchor>
      <arglist>(const double a, const double b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SCTPAssociationBase.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/sctp/</path>
    <filename>_s_c_t_p_association_base_8cc</filename>
    <includes id="_s_c_t_p_8h" name="SCTP.h" local="yes" imported="no">SCTP.h</includes>
    <includes id="_s_c_t_p_association_8h" name="SCTPAssociation.h" local="yes" imported="no">SCTPAssociation.h</includes>
    <includes id="_s_c_t_p_command__m_8h" name="SCTPCommand_m.h" local="yes" imported="no">SCTPCommand_m.h</includes>
    <includes id="_i_p_control_info__m_8h" name="IPControlInfo_m.h" local="yes" imported="no">IPControlInfo_m.h</includes>
    <includes id="_s_c_t_p_queue_8h" name="SCTPQueue.h" local="yes" imported="no">SCTPQueue.h</includes>
    <includes id="_s_c_t_p_algorithm_8h" name="SCTPAlgorithm.h" local="yes" imported="no">SCTPAlgorithm.h</includes>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
  </compound>
  <compound kind="file">
    <name>SCTPAssociationEventProc.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/sctp/</path>
    <filename>_s_c_t_p_association_event_proc_8cc</filename>
    <includes id="_s_c_t_p_8h" name="SCTP.h" local="yes" imported="no">SCTP.h</includes>
    <includes id="_s_c_t_p_association_8h" name="SCTPAssociation.h" local="yes" imported="no">SCTPAssociation.h</includes>
    <includes id="_s_c_t_p_command__m_8h" name="SCTPCommand_m.h" local="yes" imported="no">SCTPCommand_m.h</includes>
    <includes id="_i_p_control_info__m_8h" name="IPControlInfo_m.h" local="yes" imported="no">IPControlInfo_m.h</includes>
    <includes id="_s_c_t_p_algorithm_8h" name="SCTPAlgorithm.h" local="yes" imported="no">SCTPAlgorithm.h</includes>
  </compound>
  <compound kind="file">
    <name>SCTPAssociationRcvMessage.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/sctp/</path>
    <filename>_s_c_t_p_association_rcv_message_8cc</filename>
    <includes id="_s_c_t_p_8h" name="SCTP.h" local="yes" imported="no">SCTP.h</includes>
    <includes id="_s_c_t_p_association_8h" name="SCTPAssociation.h" local="yes" imported="no">SCTPAssociation.h</includes>
    <includes id="_s_c_t_p_command__m_8h" name="SCTPCommand_m.h" local="yes" imported="no">SCTPCommand_m.h</includes>
    <includes id="_s_c_t_p_message__m_8h" name="SCTPMessage_m.h" local="yes" imported="no">SCTPMessage_m.h</includes>
    <includes id="_s_c_t_p_queue_8h" name="SCTPQueue.h" local="yes" imported="no">SCTPQueue.h</includes>
    <includes id="_s_c_t_p_algorithm_8h" name="SCTPAlgorithm.h" local="yes" imported="no">SCTPAlgorithm.h</includes>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
    <includes id="_i_pv6_interface_data_8h" name="IPv6InterfaceData.h" local="yes" imported="no">IPv6InterfaceData.h</includes>
    <includes id="_i_p_control_info__m_8h" name="IPControlInfo_m.h" local="yes" imported="no">IPControlInfo_m.h</includes>
  </compound>
  <compound kind="file">
    <name>SCTPAssociationSendAll.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/sctp/</path>
    <filename>_s_c_t_p_association_send_all_8cc</filename>
    <includes id="_s_c_t_p_association_8h" name="SCTPAssociation.h" local="yes" imported="no">SCTPAssociation.h</includes>
    <includes id="_s_c_t_p_algorithm_8h" name="SCTPAlgorithm.h" local="yes" imported="no">SCTPAlgorithm.h</includes>
    <includes id="_s_c_t_p_command__m_8h" name="SCTPCommand_m.h" local="yes" imported="no">SCTPCommand_m.h</includes>
  </compound>
  <compound kind="file">
    <name>SCTPAssociationUtil.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/sctp/</path>
    <filename>_s_c_t_p_association_util_8cc</filename>
    <includes id="_s_c_t_p_8h" name="SCTP.h" local="yes" imported="no">SCTP.h</includes>
    <includes id="_s_c_t_p_association_8h" name="SCTPAssociation.h" local="yes" imported="no">SCTPAssociation.h</includes>
    <includes id="_s_c_t_p_command__m_8h" name="SCTPCommand_m.h" local="yes" imported="no">SCTPCommand_m.h</includes>
    <includes id="_i_pv6_control_info_8h" name="IPv6ControlInfo.h" local="yes" imported="no">IPv6ControlInfo.h</includes>
    <includes id="_s_c_t_p_queue_8h" name="SCTPQueue.h" local="yes" imported="no">SCTPQueue.h</includes>
    <includes id="_s_c_t_p_algorithm_8h" name="SCTPAlgorithm.h" local="yes" imported="no">SCTPAlgorithm.h</includes>
    <includes id="_routing_table_8h" name="RoutingTable.h" local="yes" imported="no">RoutingTable.h</includes>
    <includes id="_routing_table_access_8h" name="RoutingTableAccess.h" local="yes" imported="no">RoutingTableAccess.h</includes>
    <includes id="_interface_table_8h" name="InterfaceTable.h" local="yes" imported="no">InterfaceTable.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
    <includes id="_i_pv6_interface_data_8h" name="IPv6InterfaceData.h" local="yes" imported="no">IPv6InterfaceData.h</includes>
    <includes id="_i_pv6_address_8h" name="IPv6Address.h" local="yes" imported="no">IPv6Address.h</includes>
    <includes id="_u_d_p_control_info__m_8h" name="UDPControlInfo_m.h" local="yes" imported="no">UDPControlInfo_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CASE</name>
      <anchorfile>_s_c_t_p_association_util_8cc.html</anchorfile>
      <anchor>a60cc06bef97da802b8522d258ac4fe89</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CASE</name>
      <anchorfile>_s_c_t_p_association_util_8cc.html</anchorfile>
      <anchor>a60cc06bef97da802b8522d258ac4fe89</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CASE</name>
      <anchorfile>_s_c_t_p_association_util_8cc.html</anchorfile>
      <anchor>a60cc06bef97da802b8522d258ac4fe89</anchor>
      <arglist>(x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SCTPCCFunctions.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/sctp/</path>
    <filename>_s_c_t_p_c_c_functions_8cc</filename>
    <includes id="_s_c_t_p_association_8h" name="SCTPAssociation.h" local="yes" imported="no">SCTPAssociation.h</includes>
  </compound>
  <compound kind="file">
    <name>SCTPClient.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/sctpapp/</path>
    <filename>_s_c_t_p_client_8cc</filename>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <includes id="_s_c_t_p_association_8h" name="SCTPAssociation.h" local="yes" imported="no">SCTPAssociation.h</includes>
    <includes id="_s_c_t_p_client_8h" name="SCTPClient.h" local="yes" imported="no">SCTPClient.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGKIND_CONNECT</name>
      <anchorfile>_s_c_t_p_client_8cc.html</anchorfile>
      <anchor>a1d141ebad9d3bb3992eddbc0f9f3dc56</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSGKIND_SEND</name>
      <anchorfile>_s_c_t_p_client_8cc.html</anchorfile>
      <anchor>a1ce396aa5841b902813c437e441f5ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSGKIND_ABORT</name>
      <anchorfile>_s_c_t_p_client_8cc.html</anchorfile>
      <anchor>aae6b851296367a2673786fd0d03d86c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSGKIND_PRIMARY</name>
      <anchorfile>_s_c_t_p_client_8cc.html</anchorfile>
      <anchor>abb9b6cb11e36c9e4e0734f773d1f0738</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSGKIND_STOP</name>
      <anchorfile>_s_c_t_p_client_8cc.html</anchorfile>
      <anchor>a95018ba2b2b66493944b637cf2f57ec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_s_c_t_p_client_8cc.html</anchorfile>
      <anchor>a79475f2dc3314df1c72d5a7cd07bedc9</anchor>
      <arglist>(SCTPClient)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SCTPClient.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/sctpapp/</path>
    <filename>_s_c_t_p_client_8h</filename>
    <includes id="_s_c_t_p_socket_8h" name="SCTPSocket.h" local="yes" imported="no">SCTPSocket.h</includes>
    <includes id="_s_c_t_p_association_8h" name="SCTPAssociation.h" local="yes" imported="no">SCTPAssociation.h</includes>
    <class kind="class">SCTPClient</class>
    <class kind="struct">SCTPClient::pathStatus</class>
  </compound>
  <compound kind="file">
    <name>SCTPCommand.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/contract/</path>
    <filename>_s_c_t_p_command_8h</filename>
    <member kind="enumeration">
      <name>SctpCommandCode</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a5ec9c6f1ed5e1ef36d79227bcb81463e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_C_ASSOCIATE</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a5ec9c6f1ed5e1ef36d79227bcb81463ea408002f9592dcab6ceb60f683bee7e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_C_OPEN_PASSIVE</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a5ec9c6f1ed5e1ef36d79227bcb81463ea4660ef9a2685b60b3aa2388461c43deb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_C_SEND</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a5ec9c6f1ed5e1ef36d79227bcb81463eacb34da0d2a8bc9071c353d5e92ab0d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_C_CLOSE</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a5ec9c6f1ed5e1ef36d79227bcb81463ea36c1bad836563c7468a9877491b1db5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_C_ABORT</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a5ec9c6f1ed5e1ef36d79227bcb81463ea7d45ef3a5ccaa811a5edd77a342bc3b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_C_STATUS</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a5ec9c6f1ed5e1ef36d79227bcb81463eae6535b42c094a1812adfc19d4b59d69b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_C_RECEIVE</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a5ec9c6f1ed5e1ef36d79227bcb81463ea2ba582af18939c296a16e1b083e74397</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_C_SEND_ORDERED</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a5ec9c6f1ed5e1ef36d79227bcb81463ea6b3b36984ab51a0714609ca913bbb54f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_C_SEND_UNORDERED</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a5ec9c6f1ed5e1ef36d79227bcb81463ea7c99f40fe26cf98c3275ca9c38bd98a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_C_PRIMARY</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a5ec9c6f1ed5e1ef36d79227bcb81463ea642be41f281aef49b9cb8402278be2f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_C_QUEUE_BYTES_LIMIT</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a5ec9c6f1ed5e1ef36d79227bcb81463eac6ae02fe564dd3a68214528a0b25eeb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_C_QUEUE_MSGS_LIMIT</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a5ec9c6f1ed5e1ef36d79227bcb81463ea4fe02c6f134855267e6f95cf92fadee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_C_SHUTDOWN</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a5ec9c6f1ed5e1ef36d79227bcb81463ea349e117c148f5b223ecef4d8334b7077</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_C_NO_OUTSTANDING</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a5ec9c6f1ed5e1ef36d79227bcb81463eaaf691bde7e4b92ce33b4579760761a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SctpStatusInd</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a066d6fbbc858ac42638c402e8ab1a5f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_I_DATA</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a066d6fbbc858ac42638c402e8ab1a5f3a1eb9f18f68a700c545427ba5231a9dc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_I_DATA_NOTIFICATION</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a066d6fbbc858ac42638c402e8ab1a5f3a723241390fabc3b46cb79e9f5541b01b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_I_ESTABLISHED</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a066d6fbbc858ac42638c402e8ab1a5f3a6b85de91f4bd3609fc7bcd7994101a3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_I_PEER_CLOSED</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a066d6fbbc858ac42638c402e8ab1a5f3adcb0d50416fbeb73876eba7d7b8ee930</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_I_CLOSED</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a066d6fbbc858ac42638c402e8ab1a5f3ace58e516838fe8c15ac9ce67f4f4409c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_I_CONNECTION_REFUSED</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a066d6fbbc858ac42638c402e8ab1a5f3a16f2119f34b440b981e5f1e6386ac018</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_I_CONNECTION_RESET</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a066d6fbbc858ac42638c402e8ab1a5f3aee8733c691e3dbeea6dc2f701bcf027b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_I_TIMED_OUT</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a066d6fbbc858ac42638c402e8ab1a5f3ab114530461e728f84d5db50dd5670620</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_I_STATUS</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a066d6fbbc858ac42638c402e8ab1a5f3abbf25758d570841736d12727b53ff2be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_I_ABORT</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a066d6fbbc858ac42638c402e8ab1a5f3a72ee49d265f6c75166038f085a52a1bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_I_CONN_LOST</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a066d6fbbc858ac42638c402e8ab1a5f3afc5424e52a8919715c5f0433afcdd3b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_I_SEND_MSG</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a066d6fbbc858ac42638c402e8ab1a5f3a781cc2063dc1656c84a04fde2991e2d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_I_SHUTDOWN_RECEIVED</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a066d6fbbc858ac42638c402e8ab1a5f3a21bb0580e0fb02c3a89d63062a14b88b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_I_SENDQUEUE_FULL</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a066d6fbbc858ac42638c402e8ab1a5f3a75904bee9e03f629a2657337857f4e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCTP_I_SENDQUEUE_ABATED</name>
      <anchorfile>_s_c_t_p_command_8h.html</anchorfile>
      <anchor>a066d6fbbc858ac42638c402e8ab1a5f3a4ed59ad366001ebd94844599c3ed76ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SCTPCommand_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/contract/</path>
    <filename>_s_c_t_p_command__m_8h</filename>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
    <includes id="_s_c_t_p_association_8h" name="SCTPAssociation.h" local="yes" imported="no">SCTPAssociation.h</includes>
    <includes id="_s_c_t_p_command_8h" name="SCTPCommand.h" local="yes" imported="no">SCTPCommand.h</includes>
    <class kind="class">SCTPCommand</class>
    <class kind="class">SCTPErrorInfo</class>
    <class kind="class">SCTPOpenCommand</class>
    <class kind="class">SCTPSendCommand</class>
    <class kind="class">SCTPConnectInfo</class>
    <class kind="class">SCTPStatusInfo</class>
    <class kind="class">SCTPPathInfo</class>
    <class kind="class">SCTPResetInfo</class>
    <class kind="class">SCTPInfo</class>
    <class kind="class">SCTPRcvCommand</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_s_c_t_p_command__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SCTPErrorCode</name>
      <anchorfile>_s_c_t_p_command__m_8h.html</anchorfile>
      <anchor>acc55595bfcd8ff8c009be53c99580af4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_s_c_t_p_command__m_8h.html</anchorfile>
      <anchor>af4bda09262854e369ae5624b68b65786</anchor>
      <arglist>(cCommBuffer *b, SCTPCommand &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_s_c_t_p_command__m_8h.html</anchorfile>
      <anchor>aea932446eef707c7beaac65b31fd1d08</anchor>
      <arglist>(cCommBuffer *b, SCTPCommand &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_s_c_t_p_command__m_8h.html</anchorfile>
      <anchor>a7d5a4aac8261450a2205cc01488deb88</anchor>
      <arglist>(cCommBuffer *b, SCTPErrorInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_s_c_t_p_command__m_8h.html</anchorfile>
      <anchor>aa370d5712eb8bd7580aa86d7391a1189</anchor>
      <arglist>(cCommBuffer *b, SCTPErrorInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_s_c_t_p_command__m_8h.html</anchorfile>
      <anchor>a1d41dfcc0082cb409ae0216ee19bdc5e</anchor>
      <arglist>(cCommBuffer *b, SCTPOpenCommand &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_s_c_t_p_command__m_8h.html</anchorfile>
      <anchor>a6d4ff751c0fc3584cfba7ae54475014c</anchor>
      <arglist>(cCommBuffer *b, SCTPOpenCommand &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_s_c_t_p_command__m_8h.html</anchorfile>
      <anchor>abc606c589de5c7e469fc992e6ffc8e9a</anchor>
      <arglist>(cCommBuffer *b, SCTPSendCommand &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_s_c_t_p_command__m_8h.html</anchorfile>
      <anchor>a19deef8300fe3f87c246a37d8b162d3d</anchor>
      <arglist>(cCommBuffer *b, SCTPSendCommand &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_s_c_t_p_command__m_8h.html</anchorfile>
      <anchor>a12401dcb38940262dce3f0fd9e4c5210</anchor>
      <arglist>(cCommBuffer *b, SCTPConnectInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_s_c_t_p_command__m_8h.html</anchorfile>
      <anchor>a310436246cbfd6edd8d00e329845ceeb</anchor>
      <arglist>(cCommBuffer *b, SCTPConnectInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_s_c_t_p_command__m_8h.html</anchorfile>
      <anchor>ab51461b4eb20784d5598be0741b45a26</anchor>
      <arglist>(cCommBuffer *b, SCTPStatusInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_s_c_t_p_command__m_8h.html</anchorfile>
      <anchor>ad0c8aa2c4f99b60c2351ab3c229571e7</anchor>
      <arglist>(cCommBuffer *b, SCTPStatusInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_s_c_t_p_command__m_8h.html</anchorfile>
      <anchor>a0d70c70572758a58004ea98068aa7233</anchor>
      <arglist>(cCommBuffer *b, SCTPPathInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_s_c_t_p_command__m_8h.html</anchorfile>
      <anchor>af19ea15ccf95f5ca6337b66c6e5ab229</anchor>
      <arglist>(cCommBuffer *b, SCTPPathInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_s_c_t_p_command__m_8h.html</anchorfile>
      <anchor>a7aa118ff6382181313eed5a7dbc4b282</anchor>
      <arglist>(cCommBuffer *b, SCTPResetInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_s_c_t_p_command__m_8h.html</anchorfile>
      <anchor>aaa822ad18eb67a754723f3f725003732</anchor>
      <arglist>(cCommBuffer *b, SCTPResetInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_s_c_t_p_command__m_8h.html</anchorfile>
      <anchor>af52ace4d429b5dbe65142a5dd6880803</anchor>
      <arglist>(cCommBuffer *b, SCTPInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_s_c_t_p_command__m_8h.html</anchorfile>
      <anchor>a381dc21e588b6937ba42490d13ad8133</anchor>
      <arglist>(cCommBuffer *b, SCTPInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_s_c_t_p_command__m_8h.html</anchorfile>
      <anchor>a86cadf2ee717f49c5a14a6d59d66e03f</anchor>
      <arglist>(cCommBuffer *b, SCTPRcvCommand &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_s_c_t_p_command__m_8h.html</anchorfile>
      <anchor>ad109e8665a3c94e52d770eaa53b3129a</anchor>
      <arglist>(cCommBuffer *b, SCTPRcvCommand &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SCTPMessage.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/sctp/</path>
    <filename>_s_c_t_p_message_8cc</filename>
    <includes id="_s_c_t_p_message_8h" name="SCTPMessage.h" local="yes" imported="no">SCTPMessage.h</includes>
    <includes id="_s_c_t_p_association_8h" name="SCTPAssociation.h" local="yes" imported="no">SCTPAssociation.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>_s_c_t_p_message_8cc.html</anchorfile>
      <anchor>acdb40d1623f9130f7daf6407f8df4654</anchor>
      <arglist>(SCTPMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>_s_c_t_p_message_8cc.html</anchorfile>
      <anchor>a428b844a33c55ab4cda13d392d87af0e</anchor>
      <arglist>(SCTPErrorChunk)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SCTPMessage.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/sctp/</path>
    <filename>_s_c_t_p_message_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_s_c_t_p_message__m_8h" name="SCTPMessage_m.h" local="yes" imported="no">SCTPMessage_m.h</includes>
    <class kind="class">SCTPMessage</class>
    <class kind="class">SCTPErrorChunk</class>
  </compound>
  <compound kind="file">
    <name>SCTPMessage_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/sctp/</path>
    <filename>_s_c_t_p_message__m_8h</filename>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
    <class kind="class">SCTPSimpleMessage</class>
    <class kind="class">SCTPMessage_Base</class>
    <class kind="class">SCTPChunk</class>
    <class kind="class">SCTPInitChunk</class>
    <class kind="class">SCTPInitAckChunk</class>
    <class kind="class">SCTPCookieEchoChunk</class>
    <class kind="class">SCTPCookie</class>
    <class kind="class">SCTPCookieAckChunk</class>
    <class kind="class">SCTPDataMsg</class>
    <class kind="class">SCTPDataChunk</class>
    <class kind="class">SCTPForwardTsnChunk</class>
    <class kind="class">SCTPSackChunk</class>
    <class kind="class">SCTPAbortChunk</class>
    <class kind="class">SCTPHeartbeatChunk</class>
    <class kind="class">SCTPHeartbeatAckChunk</class>
    <class kind="class">SCTPShutdownChunk</class>
    <class kind="class">SCTPShutdownAckChunk</class>
    <class kind="class">SCTPShutdownCompleteChunk</class>
    <class kind="class">SCTPErrorChunk_Base</class>
    <class kind="class">SCTPParameter</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cPacket *</type>
      <name>cPacketPtr</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>abde480fc79049b5fde6cb7cd195c363f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>a660627e338d4036e262f9f02593dbf9c</anchor>
      <arglist>(cCommBuffer *b, SCTPSimpleMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>aafe787ae2e8690d80e4938557a61de71</anchor>
      <arglist>(cCommBuffer *b, SCTPSimpleMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>a3ca4e25a0b4006354e30b7b9eff5243a</anchor>
      <arglist>(cCommBuffer *b, SCTPChunk &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>a5c1a43ce244f563388105a1654bb3ad2</anchor>
      <arglist>(cCommBuffer *b, SCTPChunk &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>adfb09573a8f0f00fc99f78eda809de9e</anchor>
      <arglist>(cCommBuffer *b, SCTPInitChunk &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>acaa031c7649eff874e1777dc27560e7f</anchor>
      <arglist>(cCommBuffer *b, SCTPInitChunk &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>a22975318306dbf08009542a727faa286</anchor>
      <arglist>(cCommBuffer *b, SCTPInitAckChunk &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>a7c997dfd9fb74dfac11fd50889374538</anchor>
      <arglist>(cCommBuffer *b, SCTPInitAckChunk &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>a1adf6df6baaf200810627fb91f5bcf6d</anchor>
      <arglist>(cCommBuffer *b, SCTPCookieEchoChunk &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>a2c70d0e8f72f8fc4c012a35734bcecf1</anchor>
      <arglist>(cCommBuffer *b, SCTPCookieEchoChunk &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>ae8859a97b7e1bad3733f79a37cae992a</anchor>
      <arglist>(cCommBuffer *b, SCTPCookie &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>a401eceb3a7d595fd91a992035672c304</anchor>
      <arglist>(cCommBuffer *b, SCTPCookie &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>a7764f23c21b471aaf19131ec7ae88781</anchor>
      <arglist>(cCommBuffer *b, SCTPCookieAckChunk &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>a4d2b0185509e07e5c07fabcf5f1eb372</anchor>
      <arglist>(cCommBuffer *b, SCTPCookieAckChunk &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>a30fc0c3f847cb8daf3b35a5745886fcf</anchor>
      <arglist>(cCommBuffer *b, SCTPDataMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>af72d5793edbbbf63a9cfa2a830f57c8a</anchor>
      <arglist>(cCommBuffer *b, SCTPDataMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>a4c7511f20acffac1cd854d9281ef4fc6</anchor>
      <arglist>(cCommBuffer *b, SCTPDataChunk &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>aa8cfe515191525ad14b3c4052809daef</anchor>
      <arglist>(cCommBuffer *b, SCTPDataChunk &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>add8cfc338178d6ee2c4574c468ccc318</anchor>
      <arglist>(cCommBuffer *b, SCTPForwardTsnChunk &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>af568ffaaf00a774b9091fd4de28d82af</anchor>
      <arglist>(cCommBuffer *b, SCTPForwardTsnChunk &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>ad06bcb0fa4ed3afe73e8485d1adde976</anchor>
      <arglist>(cCommBuffer *b, SCTPSackChunk &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>ad81310b1f2e8237c6596abc85c6c7889</anchor>
      <arglist>(cCommBuffer *b, SCTPSackChunk &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>aad6b02082916c774ca90920fe43da6d5</anchor>
      <arglist>(cCommBuffer *b, SCTPAbortChunk &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>a349fad4f0d9cb4f325a75a6cc2f0594d</anchor>
      <arglist>(cCommBuffer *b, SCTPAbortChunk &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>a7ee6bbf9fb40af6f81afdaafc497683e</anchor>
      <arglist>(cCommBuffer *b, SCTPHeartbeatChunk &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>a039f06f737c25378c195daa71e6d9863</anchor>
      <arglist>(cCommBuffer *b, SCTPHeartbeatChunk &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>a9a7bdb9a5706010e2892eb96c7d058f3</anchor>
      <arglist>(cCommBuffer *b, SCTPHeartbeatAckChunk &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>ae2fb34c2ece14bf2d88ab0823cc67ad7</anchor>
      <arglist>(cCommBuffer *b, SCTPHeartbeatAckChunk &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>ae8aaa2d82735ee40eda153f2bc4ce8b7</anchor>
      <arglist>(cCommBuffer *b, SCTPShutdownChunk &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>a0db8985b78ca0d192f842669116233cd</anchor>
      <arglist>(cCommBuffer *b, SCTPShutdownChunk &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>a75205c718c1c22a3c09018f8cb144052</anchor>
      <arglist>(cCommBuffer *b, SCTPShutdownAckChunk &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>a509780a8089fe36279b4cb4c4664c7b0</anchor>
      <arglist>(cCommBuffer *b, SCTPShutdownAckChunk &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>a04b685f7d4700db6fca47feeb80c7083</anchor>
      <arglist>(cCommBuffer *b, SCTPShutdownCompleteChunk &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>a5ca98faddb33e8a91761f52715c29926</anchor>
      <arglist>(cCommBuffer *b, SCTPShutdownCompleteChunk &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>aacc95ce26fd5d5cbd2b0869f03e97f22</anchor>
      <arglist>(cCommBuffer *b, SCTPParameter &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_s_c_t_p_message__m_8h.html</anchorfile>
      <anchor>a5230f24bf05c3245134f07a7afd95e89</anchor>
      <arglist>(cCommBuffer *b, SCTPParameter &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SCTPPeer.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/sctpapp/</path>
    <filename>_s_c_t_p_peer_8cc</filename>
    <includes id="_s_c_t_p_peer_8h" name="SCTPPeer.h" local="yes" imported="no">SCTPPeer.h</includes>
    <includes id="_s_c_t_p_socket_8h" name="SCTPSocket.h" local="yes" imported="no">SCTPSocket.h</includes>
    <includes id="_s_c_t_p_command__m_8h" name="SCTPCommand_m.h" local="yes" imported="no">SCTPCommand_m.h</includes>
    <includes id="_s_c_t_p_message__m_8h" name="SCTPMessage_m.h" local="yes" imported="no">SCTPMessage_m.h</includes>
    <includes id="_s_c_t_p_association_8h" name="SCTPAssociation.h" local="yes" imported="no">SCTPAssociation.h</includes>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGKIND_CONNECT</name>
      <anchorfile>_s_c_t_p_peer_8cc.html</anchorfile>
      <anchor>a1d141ebad9d3bb3992eddbc0f9f3dc56</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSGKIND_SEND</name>
      <anchorfile>_s_c_t_p_peer_8cc.html</anchorfile>
      <anchor>a1ce396aa5841b902813c437e441f5ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSGKIND_ABORT</name>
      <anchorfile>_s_c_t_p_peer_8cc.html</anchorfile>
      <anchor>aae6b851296367a2673786fd0d03d86c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSGKIND_PRIMARY</name>
      <anchorfile>_s_c_t_p_peer_8cc.html</anchorfile>
      <anchor>abb9b6cb11e36c9e4e0734f773d1f0738</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSGKIND_STOP</name>
      <anchorfile>_s_c_t_p_peer_8cc.html</anchorfile>
      <anchor>a95018ba2b2b66493944b637cf2f57ec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_s_c_t_p_peer_8cc.html</anchorfile>
      <anchor>ae615ae0b0ea8dcf5baed304aa5f34a12</anchor>
      <arglist>(SCTPPeer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SCTPPeer.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/sctpapp/</path>
    <filename>_s_c_t_p_peer_8h</filename>
    <includes id="_s_c_t_p_association_8h" name="SCTPAssociation.h" local="yes" imported="no">SCTPAssociation.h</includes>
    <includes id="_s_c_t_p_socket_8h" name="SCTPSocket.h" local="yes" imported="no">SCTPSocket.h</includes>
    <class kind="class">SCTPPeer</class>
    <class kind="struct">SCTPPeer::pathStatus</class>
  </compound>
  <compound kind="file">
    <name>SCTPQueue.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/sctp/</path>
    <filename>_s_c_t_p_queue_8cc</filename>
    <includes id="_s_c_t_p_queue_8h" name="SCTPQueue.h" local="yes" imported="no">SCTPQueue.h</includes>
    <includes id="_s_c_t_p_association_8h" name="SCTPAssociation.h" local="yes" imported="no">SCTPAssociation.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>_s_c_t_p_queue_8cc.html</anchorfile>
      <anchor>a288a4dea79f91a478a7e164367ac7754</anchor>
      <arglist>(SCTPQueue)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SCTPQueue.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/sctp/</path>
    <filename>_s_c_t_p_queue_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
    <includes id="_s_c_t_p_8h" name="SCTP.h" local="yes" imported="no">SCTP.h</includes>
    <class kind="class">SCTPQueue</class>
  </compound>
  <compound kind="file">
    <name>SCTPReceiveStream.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/sctp/</path>
    <filename>_s_c_t_p_receive_stream_8cc</filename>
    <includes id="_s_c_t_p_receive_stream_8h" name="SCTPReceiveStream.h" local="yes" imported="no">SCTPReceiveStream.h</includes>
    <includes id="_s_c_t_p_association_8h" name="SCTPAssociation.h" local="yes" imported="no">SCTPAssociation.h</includes>
  </compound>
  <compound kind="file">
    <name>SCTPReceiveStream.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/sctp/</path>
    <filename>_s_c_t_p_receive_stream_8h</filename>
    <includes id="_s_c_t_p_queue_8h" name="SCTPQueue.h" local="yes" imported="no">SCTPQueue.h</includes>
    <class kind="class">SCTPReceiveStream</class>
  </compound>
  <compound kind="file">
    <name>SCTPSendStream.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/sctp/</path>
    <filename>_s_c_t_p_send_stream_8cc</filename>
    <includes id="_s_c_t_p_send_stream_8h" name="SCTPSendStream.h" local="yes" imported="no">SCTPSendStream.h</includes>
  </compound>
  <compound kind="file">
    <name>SCTPSendStream.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/sctp/</path>
    <filename>_s_c_t_p_send_stream_8h</filename>
    <includes id="_s_c_t_p_association_8h" name="SCTPAssociation.h" local="yes" imported="no">SCTPAssociation.h</includes>
    <includes id="_s_c_t_p_queue_8h" name="SCTPQueue.h" local="yes" imported="no">SCTPQueue.h</includes>
    <class kind="class">SCTPSendStream</class>
  </compound>
  <compound kind="file">
    <name>SCTPSerializer.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/headerserializers/</path>
    <filename>_s_c_t_p_serializer_8cc</filename>
    <includes id="defs_8h" name="defs.h" local="yes" imported="no">headers/defs.h</includes>
    <includes id="bsdint_8h" name="bsdint.h" local="yes" imported="no">headers/bsdint.h</includes>
    <includes id="in_8h" name="in.h" local="yes" imported="no">headers/in.h</includes>
    <includes id="in__systm_8h" name="in_systm.h" local="yes" imported="no">headers/in_systm.h</includes>
    <includes id="ip_8h" name="ip.h" local="yes" imported="no">headers/ip.h</includes>
    <includes id="sctp_8h" name="sctp.h" local="yes" imported="no">headers/sctp.h</includes>
    <includes id="_s_c_t_p_serializer_8h" name="SCTPSerializer.h" local="yes" imported="no">SCTPSerializer.h</includes>
    <includes id="_s_c_t_p_association_8h" name="SCTPAssociation.h" local="yes" imported="no">SCTPAssociation.h</includes>
    <class kind="struct">INETFw::in_addr</class>
    <class kind="struct">INETFw::ip</class>
    <class kind="struct">INETFw::ip_timestamp</class>
    <class kind="union">INETFw::ip_timestamp::ipt_timestamp</class>
    <class kind="struct">INETFw::ip_timestamp::ipt_timestamp::ipt_ta</class>
    <class kind="struct">INETFw::common_header</class>
    <class kind="struct">INETFw::chunk</class>
    <class kind="struct">INETFw::data_chunk</class>
    <class kind="struct">INETFw::init_chunk</class>
    <class kind="struct">INETFw::init_ack_chunk</class>
    <class kind="struct">INETFw::sack_chunk</class>
    <class kind="struct">INETFw::heartbeat_chunk</class>
    <class kind="struct">INETFw::heartbeat_ack_chunk</class>
    <class kind="struct">INETFw::abort_chunk</class>
    <class kind="struct">INETFw::shutdown_chunk</class>
    <class kind="struct">INETFw::shutdown_ack_chunk</class>
    <class kind="struct">INETFw::shutdown_complete_chunk</class>
    <class kind="struct">INETFw::cookie_echo_chunk</class>
    <class kind="struct">INETFw::cookie_ack_chunk</class>
    <class kind="struct">INETFw::error_chunk</class>
    <class kind="struct">INETFw::init_ipv4_address_parameter</class>
    <class kind="struct">INETFw::init_ipv6_address_parameter</class>
    <class kind="struct">INETFw::init_cookie_parameter</class>
    <class kind="struct">INETFw::cookie_parameter</class>
    <class kind="struct">INETFw::tlv</class>
    <class kind="struct">INETFw::supported_address_types_parameter</class>
    <class kind="struct">INETFw::heartbeat_info</class>
    <class kind="struct">INETFw::error_cause</class>
    <class kind="struct">INETFw::sack_gap</class>
    <class kind="struct">INETFw::sack_duptsn</class>
    <class kind="struct">INETFw::data_vector</class>
    <namespace>INETFw</namespace>
  </compound>
  <compound kind="file">
    <name>SCTPSerializer.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/headerserializers/</path>
    <filename>_s_c_t_p_serializer_8h</filename>
    <includes id="_s_c_t_p_message_8h" name="SCTPMessage.h" local="yes" imported="no">SCTPMessage.h</includes>
    <class kind="class">SCTPSerializer</class>
  </compound>
  <compound kind="file">
    <name>SCTPServer.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/sctpapp/</path>
    <filename>_s_c_t_p_server_8cc</filename>
    <includes id="_s_c_t_p_server_8h" name="SCTPServer.h" local="yes" imported="no">SCTPServer.h</includes>
    <includes id="_s_c_t_p_socket_8h" name="SCTPSocket.h" local="yes" imported="no">SCTPSocket.h</includes>
    <includes id="_s_c_t_p_command__m_8h" name="SCTPCommand_m.h" local="yes" imported="no">SCTPCommand_m.h</includes>
    <includes id="_s_c_t_p_message__m_8h" name="SCTPMessage_m.h" local="yes" imported="no">SCTPMessage_m.h</includes>
    <includes id="_s_c_t_p_association_8h" name="SCTPAssociation.h" local="yes" imported="no">SCTPAssociation.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGKIND_CONNECT</name>
      <anchorfile>_s_c_t_p_server_8cc.html</anchorfile>
      <anchor>a1d141ebad9d3bb3992eddbc0f9f3dc56</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSGKIND_SEND</name>
      <anchorfile>_s_c_t_p_server_8cc.html</anchorfile>
      <anchor>a1ce396aa5841b902813c437e441f5ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSGKIND_</name>
      <anchorfile>_s_c_t_p_server_8cc.html</anchorfile>
      <anchor>a59cd98e62f5a8c07888ab8d8f9bdc094</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_s_c_t_p_server_8cc.html</anchorfile>
      <anchor>ab2d908e3a9e982bb12421936ece8a1ac</anchor>
      <arglist>(SCTPServer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SCTPServer.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/sctpapp/</path>
    <filename>_s_c_t_p_server_8h</filename>
    <includes id="_s_c_t_p_association_8h" name="SCTPAssociation.h" local="yes" imported="no">SCTPAssociation.h</includes>
    <includes id="_s_c_t_p_socket_8h" name="SCTPSocket.h" local="yes" imported="no">SCTPSocket.h</includes>
    <class kind="class">SCTPServer</class>
    <class kind="struct">SCTPServer::ServerAssocStat</class>
    <class kind="struct">SCTPServer::pathStatus</class>
  </compound>
  <compound kind="file">
    <name>SCTPSocket.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/contract/</path>
    <filename>_s_c_t_p_socket_8cc</filename>
    <includes id="_s_c_t_p_socket_8h" name="SCTPSocket.h" local="yes" imported="no">SCTPSocket.h</includes>
    <includes id="_s_c_t_p_8h" name="SCTP.h" local="yes" imported="no">SCTP.h</includes>
    <includes id="_s_c_t_p_association_8h" name="SCTPAssociation.h" local="yes" imported="no">SCTPAssociation.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CASE</name>
      <anchorfile>_s_c_t_p_socket_8cc.html</anchorfile>
      <anchor>a60cc06bef97da802b8522d258ac4fe89</anchor>
      <arglist>(x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SCTPSocket.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/contract/</path>
    <filename>_s_c_t_p_socket_8h</filename>
    <includes id="_s_c_t_p_command__m_8h" name="SCTPCommand_m.h" local="yes" imported="no">SCTPCommand_m.h</includes>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
    <includes id="_routing_table_8h" name="RoutingTable.h" local="yes" imported="no">RoutingTable.h</includes>
    <class kind="class">SCTPSocket</class>
    <class kind="class">SCTPSocket::CallbackInterface</class>
  </compound>
  <compound kind="file">
    <name>SCTPSSFunctions.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/sctp/</path>
    <filename>_s_c_t_p_s_s_functions_8cc</filename>
    <includes id="_s_c_t_p_association_8h" name="SCTPAssociation.h" local="yes" imported="no">SCTPAssociation.h</includes>
  </compound>
  <compound kind="file">
    <name>sdes.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>sdes_8cc</filename>
    <includes id="sdes_8h" name="sdes.h" local="yes" imported="no">sdes.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>sdes_8cc.html</anchorfile>
      <anchor>a77af49adc8c2bd4d94140a7df38a1678</anchor>
      <arglist>(SDESItem)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>sdes_8cc.html</anchorfile>
      <anchor>aaf95094f3e7d8d7fdb1ed78af73f5db7</anchor>
      <arglist>(SDESChunk)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sdes.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>sdes_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">SDESItem</class>
    <class kind="class">SDESChunk</class>
  </compound>
  <compound kind="file">
    <name>SignallingMsg_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/rsvp_te/</path>
    <filename>_signalling_msg__m_8h</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_int_serv_8h" name="IntServ.h" local="yes" imported="no">IntServ.h</includes>
    <class kind="class">SignallingMsg</class>
    <class kind="class">PsbTimerMsg</class>
    <class kind="class">PsbTimeoutMsg</class>
    <class kind="class">RsbRefreshTimerMsg</class>
    <class kind="class">RsbCommitTimerMsg</class>
    <class kind="class">RsbTimeoutMsg</class>
    <class kind="class">HelloTimerMsg</class>
    <class kind="class">HelloTimeoutMsg</class>
    <class kind="class">PathNotifyMsg</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSG_PSB_TIMER</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>a4a7edaad4b85440b83cd2340afc09f30</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSG_PSB_TIMEOUT</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>ad2a5b0932c74033ca0907b2312717308</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSG_RSB_REFRESH_TIMER</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>af10e4c3853227458fb72fbe27ecaf4d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSG_RSB_COMMIT_TIMER</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>afd8ec586052c2e0d2ed4c1d8005adca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSG_RSB_TIMEOUT</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>a85521f435543cafd95fd3a480cc69d4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSG_HELLO_TIMER</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>a9a301e6abf79d810bc59a6240985d599</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSG_HELLO_TIMEOUT</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>a7181ca8323feb1aa6d19ce9e254a8cf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSG_PATH_NOTIFY</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>a263a8216cd47d92316470864ecb1854a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PATH_CREATED</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>a91955e28b6308bfc03be64aad88b721b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PATH_UNFEASIBLE</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>af8046a7e229395d6607659b1c8cc4722</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PATH_FAILED</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>ae3f14304337d8936dc07bb951fd7061d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PATH_PREEMPTED</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>aa73f9e507d3ad07d6a127a6a6802ec2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PATH_RETRY</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>a1a8eebfa348f4e4c0d1103c924f967ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>a3776fa9cd8af10ae3d28a1ef2b180c29</anchor>
      <arglist>(cCommBuffer *b, SignallingMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>a0c8a1c9db5e88aa3bb8191542ddb79f2</anchor>
      <arglist>(cCommBuffer *b, SignallingMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>ae59dbd4ba316c4ea3bc0dbb666169231</anchor>
      <arglist>(cCommBuffer *b, PsbTimerMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>ab5e809117250e3368ae34059c04e4333</anchor>
      <arglist>(cCommBuffer *b, PsbTimerMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>a7b3d463e22b670a4bf5a3d43dd6056ba</anchor>
      <arglist>(cCommBuffer *b, PsbTimeoutMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>af41b77239639e46aadfbbc43ff451701</anchor>
      <arglist>(cCommBuffer *b, PsbTimeoutMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>ab7133fcf4aec76f26014c414336651a4</anchor>
      <arglist>(cCommBuffer *b, RsbRefreshTimerMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>ab2ac8380dd1acee2a30482404a95546a</anchor>
      <arglist>(cCommBuffer *b, RsbRefreshTimerMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>ab5c82b83db755203f200d85bde8304f1</anchor>
      <arglist>(cCommBuffer *b, RsbCommitTimerMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>a75188861718112b99cd050da5b079d9c</anchor>
      <arglist>(cCommBuffer *b, RsbCommitTimerMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>aadf8d03c4edbd8631382faae09d99981</anchor>
      <arglist>(cCommBuffer *b, RsbTimeoutMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>a1a1cf13311ef57204c21b8a564506d59</anchor>
      <arglist>(cCommBuffer *b, RsbTimeoutMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>afa74fcd9d1720ace22b5fda93f82318f</anchor>
      <arglist>(cCommBuffer *b, HelloTimerMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>ad57265d14c6659a1152ddc06fc036109</anchor>
      <arglist>(cCommBuffer *b, HelloTimerMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>af1c1d869ef70cb6d1cbae978f4163201</anchor>
      <arglist>(cCommBuffer *b, HelloTimeoutMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>a71da1519c5ca741fe6400d2c713ea57a</anchor>
      <arglist>(cCommBuffer *b, HelloTimeoutMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>a24559fbaeeb5120631d39446dce20e45</anchor>
      <arglist>(cCommBuffer *b, PathNotifyMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_signalling_msg__m_8h.html</anchorfile>
      <anchor>a5f28519452173233d8cb71d7da740aec</anchor>
      <arglist>(cCommBuffer *b, PathNotifyMsg &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleClassifier.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/rsvp_te/</path>
    <filename>_simple_classifier_8cc</filename>
    <includes id="_simple_classifier_8h" name="SimpleClassifier.h" local="yes" imported="no">SimpleClassifier.h</includes>
    <includes id="_x_m_l_utils_8h" name="XMLUtils.h" local="yes" imported="no">XMLUtils.h</includes>
    <includes id="_routing_table_access_8h" name="RoutingTableAccess.h" local="yes" imported="no">RoutingTableAccess.h</includes>
    <includes id="_l_i_b_table_access_8h" name="LIBTableAccess.h" local="yes" imported="no">LIBTableAccess.h</includes>
    <includes id="_r_s_v_p_access_8h" name="RSVPAccess.h" local="yes" imported="no">RSVPAccess.h</includes>
    <includes id="_l_i_b_table_8h" name="LIBTable.h" local="yes" imported="no">LIBTable.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_simple_classifier_8cc.html</anchorfile>
      <anchor>ae124172fc2422feaa437ac0309b9359e</anchor>
      <arglist>(SimpleClassifier)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_simple_classifier_8cc.html</anchorfile>
      <anchor>ac7398c95483689721958a3e1f59819ed</anchor>
      <arglist>(std::ostream &amp;os, const SimpleClassifier::FECEntry &amp;fec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleClassifier.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/rsvp_te/</path>
    <filename>_simple_classifier_8h</filename>
    <includes id="_const_type_8h" name="ConstType.h" local="yes" imported="no">ConstType.h</includes>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
    <includes id="_i_scriptable_8h" name="IScriptable.h" local="yes" imported="no">IScriptable.h</includes>
    <includes id="_i_r_s_v_p_classifier_8h" name="IRSVPClassifier.h" local="yes" imported="no">IRSVPClassifier.h</includes>
    <includes id="_l_i_b_table_8h" name="LIBTable.h" local="yes" imported="no">LIBTable.h</includes>
    <includes id="_int_serv_8h" name="IntServ.h" local="yes" imported="no">IntServ.h</includes>
    <class kind="class">SimpleClassifier</class>
    <class kind="struct">SimpleClassifier::FECEntry</class>
  </compound>
  <compound kind="file">
    <name>Sink.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_sink_8cc</filename>
    <includes id="_sink_8h" name="Sink.h" local="yes" imported="no">Sink.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_sink_8cc.html</anchorfile>
      <anchor>ad1b3b148e4235cc4b507c987540224f2</anchor>
      <arglist>(Sink)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sink.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>_sink_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">Sink</class>
  </compound>
  <compound kind="file">
    <name>SnrControlInfo_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mfcore/</path>
    <filename>_snr_control_info__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_snr_list_8h" name="SnrList.h" local="yes" imported="no">SnrList.h</includes>
    <class kind="class">SnrControlInfo</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_snr_control_info__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_snr_control_info__m_8h.html</anchorfile>
      <anchor>a560f5d93edccb5e45c84ef1d9633095a</anchor>
      <arglist>(cCommBuffer *b, SnrControlInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_snr_control_info__m_8h.html</anchorfile>
      <anchor>ac53edf2ed57bcc7da761f8655c227735</anchor>
      <arglist>(cCommBuffer *b, SnrControlInfo &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SnrDecider.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mf80211/phyLayer/decider/</path>
    <filename>_snr_decider_8cc</filename>
    <includes id="_snr_decider_8h" name="SnrDecider.h" local="yes" imported="no">SnrDecider.h</includes>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">AirFrame_m.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_snr_decider_8cc.html</anchorfile>
      <anchor>afc306f61a25df98b01e7df93367a80e8</anchor>
      <arglist>(SnrDecider)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SnrDecider.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mf80211/phyLayer/decider/</path>
    <filename>_snr_decider_8h</filename>
    <includes id="_basic_decider_8h" name="BasicDecider.h" local="no" imported="no">BasicDecider.h</includes>
    <class kind="class">SnrDecider</class>
  </compound>
  <compound kind="file">
    <name>SnrEval.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mf80211/phyLayer/snrEval/</path>
    <filename>_snr_eval_8cc</filename>
    <includes id="_snr_eval_8h" name="SnrEval.h" local="yes" imported="no">SnrEval.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_snr_eval_8cc.html</anchorfile>
      <anchor>a6d7aeb767c3edbe8b503416e55b54bfd</anchor>
      <arglist>(SnrEval)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SnrEval.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mf80211/phyLayer/snrEval/</path>
    <filename>_snr_eval_8h</filename>
    <includes id="_basic_snr_eval_8h" name="BasicSnrEval.h" local="yes" imported="no">BasicSnrEval.h</includes>
    <includes id="_radio_state_8h" name="RadioState.h" local="yes" imported="no">RadioState.h</includes>
    <includes id="_phy_control_info__m_8h" name="PhyControlInfo_m.h" local="yes" imported="no">PhyControlInfo_m.h</includes>
    <class kind="class">SnrEval</class>
    <class kind="struct">SnrEval::SnrStruct</class>
  </compound>
  <compound kind="file">
    <name>SnrEval80211.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mf80211/phyLayer/snrEval/</path>
    <filename>_snr_eval80211_8cc</filename>
    <includes id="_snr_eval80211_8h" name="SnrEval80211.h" local="yes" imported="no">SnrEval80211.h</includes>
    <includes id="_consts80211_8h" name="Consts80211.h" local="yes" imported="no">Consts80211.h</includes>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">AirFrame_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_snr_eval80211_8cc.html</anchorfile>
      <anchor>abe91382bd607411211f8ff3b8f02f759</anchor>
      <arglist>(SnrEval80211)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SnrEval80211.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mf80211/phyLayer/snrEval/</path>
    <filename>_snr_eval80211_8h</filename>
    <includes id="_snr_eval_8h" name="SnrEval.h" local="yes" imported="no">SnrEval.h</includes>
    <class kind="class">SnrEval80211</class>
  </compound>
  <compound kind="file">
    <name>SnrList.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mfcore/</path>
    <filename>_snr_list_8h</filename>
    <class kind="struct">SnrListEntry</class>
    <member kind="typedef">
      <type>std::list&lt; SnrListEntry &gt;</type>
      <name>SnrList</name>
      <anchorfile>_snr_list_8h.html</anchorfile>
      <anchor>a241b5e7c9575e932988a55f7a5012a61</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SummaryLSA.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/router/</path>
    <filename>_summary_l_s_a_8cc</filename>
    <includes id="_l_s_a_8h" name="LSA.h" local="yes" imported="no">LSA.h</includes>
  </compound>
  <compound kind="file">
    <name>TCP.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/</path>
    <filename>_t_c_p_8cc</filename>
    <includes id="_t_c_p_8h" name="TCP.h" local="yes" imported="no">TCP.h</includes>
    <includes id="_t_c_p_connection_8h" name="TCPConnection.h" local="yes" imported="no">TCPConnection.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <includes id="_t_c_p_command__m_8h" name="TCPCommand_m.h" local="yes" imported="no">TCPCommand_m.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_pv6_control_info_8h" name="IPv6ControlInfo.h" local="yes" imported="no">IPv6ControlInfo.h</includes>
    <includes id="_i_c_m_p_message__m_8h" name="ICMPMessage_m.h" local="yes" imported="no">ICMPMessage_m.h</includes>
    <includes id="_i_c_m_pv6_message__m_8h" name="ICMPv6Message_m.h" local="yes" imported="no">ICMPv6Message_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>EPHEMERAL_PORTRANGE_START</name>
      <anchorfile>_t_c_p_8cc.html</anchorfile>
      <anchor>ae0f9dd1223cbb93271a6c1d5789b5be5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPHEMERAL_PORTRANGE_END</name>
      <anchorfile>_t_c_p_8cc.html</anchorfile>
      <anchor>a689da7c4b794eb247004b316117da9d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_t_c_p_8cc.html</anchorfile>
      <anchor>a38551dd4d07b7871978241b35dd0348d</anchor>
      <arglist>(TCP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>old/TCP.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/</path>
    <filename>old_2_t_c_p_8cc</filename>
    <includes id="_t_c_p__old_8h" name="TCP_old.h" local="yes" imported="no">TCP_old.h</includes>
    <includes id="_t_c_p_connection__old_8h" name="TCPConnection_old.h" local="yes" imported="no">TCPConnection_old.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <includes id="_t_c_p_command__m_8h" name="TCPCommand_m.h" local="yes" imported="no">TCPCommand_m.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_pv6_control_info_8h" name="IPv6ControlInfo.h" local="yes" imported="no">IPv6ControlInfo.h</includes>
    <includes id="_i_c_m_p_message__m_8h" name="ICMPMessage_m.h" local="yes" imported="no">ICMPMessage_m.h</includes>
    <includes id="_i_c_m_pv6_message__m_8h" name="ICMPv6Message_m.h" local="yes" imported="no">ICMPv6Message_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>EPHEMERAL_PORTRANGE_START</name>
      <anchorfile>old_2_t_c_p_8cc.html</anchorfile>
      <anchor>ae0f9dd1223cbb93271a6c1d5789b5be5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPHEMERAL_PORTRANGE_END</name>
      <anchorfile>old_2_t_c_p_8cc.html</anchorfile>
      <anchor>a689da7c4b794eb247004b316117da9d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>old_2_t_c_p_8cc.html</anchorfile>
      <anchor>a38551dd4d07b7871978241b35dd0348d</anchor>
      <arglist>(TCP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tcp.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/headerserializers/headers/</path>
    <filename>tcp_8h</filename>
    <includes id="defs_8h" name="defs.h" local="yes" imported="no">headers/defs.h</includes>
    <class kind="struct">tcphdr</class>
    <member kind="define">
      <type>#define</type>
      <name>TH_FIN</name>
      <anchorfile>tcp_8h.html</anchorfile>
      <anchor>a1cec9b372679734fcd8394d779442ddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TH_SYN</name>
      <anchorfile>tcp_8h.html</anchorfile>
      <anchor>a91006117f7ae427b957773ab0e80bfa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TH_RST</name>
      <anchorfile>tcp_8h.html</anchorfile>
      <anchor>a7f2ce15991898c8d3397045087c4381f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TH_PUSH</name>
      <anchorfile>tcp_8h.html</anchorfile>
      <anchor>a45b9964096064c9a0c84fbddd2c80d38</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TH_ACK</name>
      <anchorfile>tcp_8h.html</anchorfile>
      <anchor>a362dae974cf06bab2b79b70f0cde524f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TH_URG</name>
      <anchorfile>tcp_8h.html</anchorfile>
      <anchor>a7b18ca973f14696013696a00c5235f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TH_FLAGS</name>
      <anchorfile>tcp_8h.html</anchorfile>
      <anchor>a618dec9145afa92eb20e74a97625f754</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCP.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/</path>
    <filename>_t_c_p_8h</filename>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
    <class kind="class">TCP</class>
    <class kind="struct">TCP::AppConnKey</class>
    <class kind="struct">TCP::SockPair</class>
    <member kind="define">
      <type>#define</type>
      <name>tcpEV</name>
      <anchorfile>_t_c_p_8h.html</anchorfile>
      <anchor>a601325e92d65fe658c80eab711e12304</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>tcpEV2</name>
      <anchorfile>_t_c_p_8h.html</anchorfile>
      <anchor>a5eb334f5e4b6d6bb414d16141aca18af</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>testingEV</name>
      <anchorfile>_t_c_p_8h.html</anchorfile>
      <anchor>a85ddacbb6727d1260826a130068eef15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCP_NSC.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_nsc/</path>
    <filename>_t_c_p___n_s_c_8cc</filename>
  </compound>
  <compound kind="file">
    <name>TCP_NSC.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_nsc/</path>
    <filename>_t_c_p___n_s_c_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
    <includes id="_t_c_p___n_s_c___connection_8h" name="TCP_NSC_Connection.h" local="yes" imported="no">TCP_NSC_Connection.h</includes>
    <class kind="class">TCP_NSC</class>
  </compound>
  <compound kind="file">
    <name>TCP_NSC_Connection.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_nsc/</path>
    <filename>_t_c_p___n_s_c___connection_8cc</filename>
  </compound>
  <compound kind="file">
    <name>TCP_NSC_Connection.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_nsc/</path>
    <filename>_t_c_p___n_s_c___connection_8h</filename>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
    <class kind="class">TCP_NSC_Connection</class>
    <class kind="class">TCP_NSC_Connection::SockAddr</class>
    <class kind="class">TCP_NSC_Connection::SockPair</class>
  </compound>
  <compound kind="file">
    <name>TCP_NSC_Queues.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_nsc/queues/</path>
    <filename>_t_c_p___n_s_c___queues_8h</filename>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <class kind="class">TCP_NSC_SendQueue</class>
    <class kind="class">TCP_NSC_ReceiveQueue</class>
  </compound>
  <compound kind="file">
    <name>TCP_NSC_VirtualDataQueues.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_nsc/queues/</path>
    <filename>_t_c_p___n_s_c___virtual_data_queues_8cc</filename>
  </compound>
  <compound kind="file">
    <name>TCP_NSC_VirtualDataQueues.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_nsc/queues/</path>
    <filename>_t_c_p___n_s_c___virtual_data_queues_8h</filename>
    <includes id="_t_c_p___n_s_c___queues_8h" name="TCP_NSC_Queues.h" local="yes" imported="no">TCP_NSC_Queues.h</includes>
    <includes id="_t_c_p_connection_8h" name="TCPConnection.h" local="yes" imported="no">TCPConnection.h</includes>
    <class kind="class">TCP_NSC_VirtualDataSendQueue</class>
    <class kind="class">TCP_NSC_VirtualDataReceiveQueue</class>
  </compound>
  <compound kind="file">
    <name>TCP_old.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/</path>
    <filename>_t_c_p__old_8h</filename>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
    <class kind="class">tcp_old::TCP</class>
    <class kind="struct">tcp_old::TCP::AppConnKey</class>
    <class kind="struct">tcp_old::TCP::SockPair</class>
    <namespace>tcp_old</namespace>
    <member kind="define">
      <type>#define</type>
      <name>tcpEV</name>
      <anchorfile>_t_c_p__old_8h.html</anchorfile>
      <anchor>a601325e92d65fe658c80eab711e12304</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>tcpEV2</name>
      <anchorfile>_t_c_p__old_8h.html</anchorfile>
      <anchor>a5eb334f5e4b6d6bb414d16141aca18af</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>testingEV</name>
      <anchorfile>_t_c_p__old_8h.html</anchorfile>
      <anchor>a85ddacbb6727d1260826a130068eef15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPAlgorithm.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/</path>
    <filename>_t_c_p_algorithm_8h</filename>
    <includes id="_t_c_p_connection_8h" name="TCPConnection.h" local="yes" imported="no">TCPConnection.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <class kind="class">TCPAlgorithm</class>
  </compound>
  <compound kind="file">
    <name>TCPAlgorithm_old.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/</path>
    <filename>_t_c_p_algorithm__old_8h</filename>
    <includes id="_t_c_p_connection__old_8h" name="TCPConnection_old.h" local="yes" imported="no">TCPConnection_old.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <class kind="class">tcp_old::TCPAlgorithm</class>
    <namespace>tcp_old</namespace>
  </compound>
  <compound kind="file">
    <name>flavours/TCPBaseAlg.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/flavours/</path>
    <filename>flavours_2_t_c_p_base_alg_8cc</filename>
    <includes id="_t_c_p_base_alg_8h" name="TCPBaseAlg.h" local="yes" imported="no">TCPBaseAlg.h</includes>
    <includes id="_t_c_p_8h" name="TCP.h" local="yes" imported="no">TCP.h</includes>
    <includes id="_t_c_p_s_a_c_k_rexmit_queue_8h" name="TCPSACKRexmitQueue.h" local="yes" imported="no">TCPSACKRexmitQueue.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>DELAYED_ACK_TIMEOUT</name>
      <anchorfile>flavours_2_t_c_p_base_alg_8cc.html</anchorfile>
      <anchor>a54b7d4e007b4463accfe09a7238ccecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_REXMIT_COUNT</name>
      <anchorfile>flavours_2_t_c_p_base_alg_8cc.html</anchorfile>
      <anchor>ae1c90ad29f7385e9c624af5f695227d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_REXMIT_TIMEOUT</name>
      <anchorfile>flavours_2_t_c_p_base_alg_8cc.html</anchorfile>
      <anchor>aaa64073abed4e79e958d3f8f048f6762</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_REXMIT_TIMEOUT</name>
      <anchorfile>flavours_2_t_c_p_base_alg_8cc.html</anchorfile>
      <anchor>a0770bb727a65bd2bd84b4581d95ca364</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_PERSIST_TIMEOUT</name>
      <anchorfile>flavours_2_t_c_p_base_alg_8cc.html</anchorfile>
      <anchor>a71179b5d2b5f89f72c3f808d3af2d3e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_PERSIST_TIMEOUT</name>
      <anchorfile>flavours_2_t_c_p_base_alg_8cc.html</anchorfile>
      <anchor>ad6333c802406519cad9a94d67e1efd6e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>old/flavours/TCPBaseAlg.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/flavours/</path>
    <filename>old_2flavours_2_t_c_p_base_alg_8cc</filename>
    <includes id="_t_c_p_base_alg__old_8h" name="TCPBaseAlg_old.h" local="yes" imported="no">TCPBaseAlg_old.h</includes>
    <includes id="_t_c_p__old_8h" name="TCP_old.h" local="yes" imported="no">TCP_old.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>DELAYED_ACK_TIMEOUT</name>
      <anchorfile>old_2flavours_2_t_c_p_base_alg_8cc.html</anchorfile>
      <anchor>a54b7d4e007b4463accfe09a7238ccecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_REXMIT_COUNT</name>
      <anchorfile>old_2flavours_2_t_c_p_base_alg_8cc.html</anchorfile>
      <anchor>ae1c90ad29f7385e9c624af5f695227d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_REXMIT_TIMEOUT</name>
      <anchorfile>old_2flavours_2_t_c_p_base_alg_8cc.html</anchorfile>
      <anchor>aaa64073abed4e79e958d3f8f048f6762</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_REXMIT_TIMEOUT</name>
      <anchorfile>old_2flavours_2_t_c_p_base_alg_8cc.html</anchorfile>
      <anchor>a0770bb727a65bd2bd84b4581d95ca364</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPBaseAlg.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/flavours/</path>
    <filename>_t_c_p_base_alg_8h</filename>
    <includes id="_t_c_p_algorithm_8h" name="TCPAlgorithm.h" local="yes" imported="no">TCPAlgorithm.h</includes>
    <class kind="class">TCPBaseAlgStateVariables</class>
    <class kind="class">TCPBaseAlg</class>
  </compound>
  <compound kind="file">
    <name>TCPBaseAlg_old.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/flavours/</path>
    <filename>_t_c_p_base_alg__old_8h</filename>
    <includes id="_t_c_p_algorithm__old_8h" name="TCPAlgorithm_old.h" local="yes" imported="no">TCPAlgorithm_old.h</includes>
    <class kind="class">tcp_old::TCPBaseAlgStateVariables</class>
    <class kind="class">tcp_old::TCPBaseAlg</class>
    <namespace>tcp_old</namespace>
  </compound>
  <compound kind="file">
    <name>TCPBasicClientApp.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/tcpapp/</path>
    <filename>_t_c_p_basic_client_app_8cc</filename>
    <includes id="_t_c_p_basic_client_app_8h" name="TCPBasicClientApp.h" local="yes" imported="no">TCPBasicClientApp.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGKIND_CONNECT</name>
      <anchorfile>_t_c_p_basic_client_app_8cc.html</anchorfile>
      <anchor>a1d141ebad9d3bb3992eddbc0f9f3dc56</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSGKIND_SEND</name>
      <anchorfile>_t_c_p_basic_client_app_8cc.html</anchorfile>
      <anchor>a1ce396aa5841b902813c437e441f5ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_t_c_p_basic_client_app_8cc.html</anchorfile>
      <anchor>acf0f3a8c5f64f0a119e3f65c61c5d397</anchor>
      <arglist>(TCPBasicClientApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPBasicClientApp.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/tcpapp/</path>
    <filename>_t_c_p_basic_client_app_8h</filename>
    <includes id="_t_c_p_generic_cli_app_base_8h" name="TCPGenericCliAppBase.h" local="yes" imported="no">TCPGenericCliAppBase.h</includes>
    <class kind="class">TCPBasicClientApp</class>
  </compound>
  <compound kind="file">
    <name>TCPCommand_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/contract/</path>
    <filename>_t_c_p_command__m_8h</filename>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
    <class kind="class">TCPCommand</class>
    <class kind="class">TCPErrorInfo</class>
    <class kind="class">TCPOpenCommand</class>
    <class kind="class">TCPSendCommand</class>
    <class kind="class">TCPConnectInfo</class>
    <class kind="class">TCPStatusInfo</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TcpCommandCode</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>a3a8aac9b74215a1768eeaa375c3cc7d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_C_OPEN_ACTIVE</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>a3a8aac9b74215a1768eeaa375c3cc7d6a9cf8b93f6f9a392ec92dc8c0735d0099</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_C_OPEN_PASSIVE</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>a3a8aac9b74215a1768eeaa375c3cc7d6a973f05e12deb1f283795b6eedc476cb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_C_SEND</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>a3a8aac9b74215a1768eeaa375c3cc7d6a5551d7ad54c2f8afd61355444ec620a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_C_CLOSE</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>a3a8aac9b74215a1768eeaa375c3cc7d6aa18cb807579ad3b72293d3023883ba0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_C_ABORT</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>a3a8aac9b74215a1768eeaa375c3cc7d6a50eccd3eb23bdd7758a5e67a5e36c533</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_C_STATUS</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>a3a8aac9b74215a1768eeaa375c3cc7d6a77c74858a4d11f1ac6bcfc26e20a44e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TcpStatusInd</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>a68611fc79dbc74e8744d74b746cd956b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_I_DATA</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>a68611fc79dbc74e8744d74b746cd956ba78bce3d41e158816c5212ed2fc959b06</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_I_URGENT_DATA</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>a68611fc79dbc74e8744d74b746cd956ba9b994384633a16021eef2cbb604d6ac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_I_ESTABLISHED</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>a68611fc79dbc74e8744d74b746cd956ba778d635f284e560631e2b6ce594e3323</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_I_PEER_CLOSED</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>a68611fc79dbc74e8744d74b746cd956ba98ff9f82c08b1d7ae58049835c47368a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_I_CLOSED</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>a68611fc79dbc74e8744d74b746cd956ba994690e6a29c6e7c3eedc8fbb29d7a8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_I_CONNECTION_REFUSED</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>a68611fc79dbc74e8744d74b746cd956ba21824d5a95e3b86c41f35775bb5f23ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_I_CONNECTION_RESET</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>a68611fc79dbc74e8744d74b746cd956ba4e8f4551a34a27e607201754b36fdbe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_I_TIMED_OUT</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>a68611fc79dbc74e8744d74b746cd956ba06629e44a0aef5201b4cd424596127bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_I_STATUS</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>a68611fc79dbc74e8744d74b746cd956babe4b456d5340a1c5d9ed0b0384409159</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TCPErrorCode</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>a909439013d65d6ecf1b49d58da7f57b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>ae140ad01be209f12dc6ebb285fbe4138</anchor>
      <arglist>(cCommBuffer *b, TCPCommand &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>a783658f0df44ed129b0f0020064acf71</anchor>
      <arglist>(cCommBuffer *b, TCPCommand &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>a8a253deff6607b865f5578e93ef2f22d</anchor>
      <arglist>(cCommBuffer *b, TCPErrorInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>a316876e0ce8742400153f92c4f2080a4</anchor>
      <arglist>(cCommBuffer *b, TCPErrorInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>a0b189cd0389245f3ac050fd35559752f</anchor>
      <arglist>(cCommBuffer *b, TCPOpenCommand &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>a07c084b601c73aca709ba50ce3c403dc</anchor>
      <arglist>(cCommBuffer *b, TCPOpenCommand &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>a26a7c87c70131cb71f44b796018ddde6</anchor>
      <arglist>(cCommBuffer *b, TCPSendCommand &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>a4ec98123ed5ac14b28f4f5a3c4bcd4e8</anchor>
      <arglist>(cCommBuffer *b, TCPSendCommand &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>afd98d8a8e327db4a0f07703b6f91a80c</anchor>
      <arglist>(cCommBuffer *b, TCPConnectInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>af7f42a61ff6ecb26d756b0e371336f87</anchor>
      <arglist>(cCommBuffer *b, TCPConnectInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>a93d2b861ae2ab23914029484a2accca8</anchor>
      <arglist>(cCommBuffer *b, TCPStatusInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_t_c_p_command__m_8h.html</anchorfile>
      <anchor>a758decb957498d6c5450a7793e4c11c5</anchor>
      <arglist>(cCommBuffer *b, TCPStatusInfo &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPConnection.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/</path>
    <filename>_t_c_p_connection_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
    <includes id="_t_c_p_8h" name="TCP.h" local="yes" imported="no">TCP.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <class kind="class">TCPStateVariables</class>
    <class kind="class">TCPConnection</class>
    <member kind="define">
      <type>#define</type>
      <name>MAX_SYN_REXMIT_COUNT</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>acd69c7cf1d3622b1d7aa706d7f9b97f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_SACK_BLOCKS</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a07b8719be91287fc05f5e527852bc1ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUPTHRESH</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a6d22725191167fb4feaacff2c1291afd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TCP_MAX_WIN</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a45fb301bd71c5637907f72760c563002</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TCP_TIMEOUT_CONN_ESTAB</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a512458671be6d68703cc89178b0b35f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TCP_TIMEOUT_FIN_WAIT_2</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>afe5e0b87871b7c8b8fb99d509453d837</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TCP_TIMEOUT_2MSL</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a25bdc88481176d96d87d31d71f32579b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TCP_TIMEOUT_SYN_REXMIT</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a89ce38305130a5021e21134602a88f79</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TCP_TIMEOUT_SYN_REXMIT_MAX</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a0b48410b2bd35dbc6509568bfb1842aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TcpState</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a4310b47e70de394d33f7cf601e35bfec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_INIT</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a4310b47e70de394d33f7cf601e35bfeca857f320749c4757dceed359145658eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_CLOSED</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a4310b47e70de394d33f7cf601e35bfecab99a253ee625d2133ac5db0e7deb7429</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_LISTEN</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a4310b47e70de394d33f7cf601e35bfeca7f359883afd2bba5873121486706ccab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_SYN_SENT</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a4310b47e70de394d33f7cf601e35bfeca70c06b27000be54aee473572dd755890</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_SYN_RCVD</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a4310b47e70de394d33f7cf601e35bfeca6d12bc57c1710f3d93ee80e392e1361f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_ESTABLISHED</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a4310b47e70de394d33f7cf601e35bfecaa8c5be2b3d7977abc27dfc396001f467</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_CLOSE_WAIT</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a4310b47e70de394d33f7cf601e35bfeca077a72ba910cb22c3a4139dd0a4c3107</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_LAST_ACK</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a4310b47e70de394d33f7cf601e35bfecab44fe111730bbb0c24e5bc652659fff7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_FIN_WAIT_1</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a4310b47e70de394d33f7cf601e35bfeca2cf3a0cecd0eeeed17966b0c4f208964</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_FIN_WAIT_2</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a4310b47e70de394d33f7cf601e35bfecaba28bfede161fc6d56ec1d30a363e463</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_CLOSING</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a4310b47e70de394d33f7cf601e35bfecac43577621e6bf197109353b11babacd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_TIME_WAIT</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a4310b47e70de394d33f7cf601e35bfecae102ae04107468f65ed2c9d80bc50997</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TCPEventCode</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a9187fb8d597fec5e53124ffe46c7e85e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_IGNORE</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a9187fb8d597fec5e53124ffe46c7e85ea543beef056b1f7e1f0b341f615393f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_OPEN_ACTIVE</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a9187fb8d597fec5e53124ffe46c7e85ea17e50afaeaa3dbb408d5cdeb89e72e73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_OPEN_PASSIVE</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a9187fb8d597fec5e53124ffe46c7e85eaea16a1754a7e2cd75ffd5e58be566a3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_SEND</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a9187fb8d597fec5e53124ffe46c7e85eaeea7c15df02e9826f07358dcee5980f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_CLOSE</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a9187fb8d597fec5e53124ffe46c7e85eaf537925659bfd1160ec2e37e0293c9cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_ABORT</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a9187fb8d597fec5e53124ffe46c7e85ea2cc18190ce98d4997975fa624a8e147d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_STATUS</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a9187fb8d597fec5e53124ffe46c7e85eae44e44115e1cee7dfc8432ea3b393064</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_DATA</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a9187fb8d597fec5e53124ffe46c7e85ea304f695bbcba57cc5d6bb6ccbca5cfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_ACK</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a9187fb8d597fec5e53124ffe46c7e85ea5458371b7cd8cddaa5342ab47915844a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_SYN</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a9187fb8d597fec5e53124ffe46c7e85ea541f61a44292b46f1adaf374e22126a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_SYN_ACK</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a9187fb8d597fec5e53124ffe46c7e85ea8458ff8c0f604c80aa5aa6ee49f850c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_FIN</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a9187fb8d597fec5e53124ffe46c7e85ead4c5a9bfbaf2accb23697809655f2e32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_FIN_ACK</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a9187fb8d597fec5e53124ffe46c7e85ea9b1f9ceb96465850b379c784bb4d66c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_RST</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a9187fb8d597fec5e53124ffe46c7e85eaf96013e6e28c73e47277bb885fcf7aa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_UNEXP_SYN</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a9187fb8d597fec5e53124ffe46c7e85eac411ade35040a1a93a97487da933a6ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_TIMEOUT_2MSL</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a9187fb8d597fec5e53124ffe46c7e85ea46d274b511ccd4b9d9a7eeb8122821c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_TIMEOUT_CONN_ESTAB</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a9187fb8d597fec5e53124ffe46c7e85eadf23ff2e2826987c01e8085ec6a9d869</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_TIMEOUT_FIN_WAIT_2</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a9187fb8d597fec5e53124ffe46c7e85ea364bbb0c5f1f19bf23455be6bef115f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seqLess</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>aa2e84a0093c6f222b12a4b443c7278eb</anchor>
      <arglist>(uint32 a, uint32 b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seqLE</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a55ef269e8ae44948c1d1f1cbe14bc92b</anchor>
      <arglist>(uint32 a, uint32 b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seqGreater</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>a459ac205bbda777389c12b7353227fbe</anchor>
      <arglist>(uint32 a, uint32 b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seqGE</name>
      <anchorfile>_t_c_p_connection_8h.html</anchorfile>
      <anchor>af4745b9cf95eb5b78d8ae6c3c8429cfc</anchor>
      <arglist>(uint32 a, uint32 b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPConnection_old.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/</path>
    <filename>_t_c_p_connection__old_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
    <includes id="_t_c_p__old_8h" name="TCP_old.h" local="yes" imported="no">TCP_old.h</includes>
    <class kind="class">tcp_old::TCPStateVariables</class>
    <class kind="class">tcp_old::TCPConnection</class>
    <namespace>tcp_old</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MAX_SYN_REXMIT_COUNT</name>
      <anchorfile>_t_c_p_connection__old_8h.html</anchorfile>
      <anchor>acd69c7cf1d3622b1d7aa706d7f9b97f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TCP_MAX_WIN</name>
      <anchorfile>_t_c_p_connection__old_8h.html</anchorfile>
      <anchor>a45fb301bd71c5637907f72760c563002</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TCP_TIMEOUT_CONN_ESTAB</name>
      <anchorfile>_t_c_p_connection__old_8h.html</anchorfile>
      <anchor>a512458671be6d68703cc89178b0b35f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TCP_TIMEOUT_FIN_WAIT_2</name>
      <anchorfile>_t_c_p_connection__old_8h.html</anchorfile>
      <anchor>afe5e0b87871b7c8b8fb99d509453d837</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TCP_TIMEOUT_2MSL</name>
      <anchorfile>_t_c_p_connection__old_8h.html</anchorfile>
      <anchor>a25bdc88481176d96d87d31d71f32579b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TCP_TIMEOUT_SYN_REXMIT</name>
      <anchorfile>_t_c_p_connection__old_8h.html</anchorfile>
      <anchor>a89ce38305130a5021e21134602a88f79</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TCP_TIMEOUT_SYN_REXMIT_MAX</name>
      <anchorfile>_t_c_p_connection__old_8h.html</anchorfile>
      <anchor>a0b48410b2bd35dbc6509568bfb1842aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TcpState</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>acdbb7986967662f90bca9b6ef46f3aca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_INIT</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>acdbb7986967662f90bca9b6ef46f3acaa8b6438b06a8e3cd7537e09f9fb2f0d03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_CLOSED</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>acdbb7986967662f90bca9b6ef46f3acaaae392e6982b73d95ab4e48e3a27ce552</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_LISTEN</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>acdbb7986967662f90bca9b6ef46f3acaa8a809324e3edea6ff6800a639d7bcea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_SYN_SENT</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>acdbb7986967662f90bca9b6ef46f3acaafde4b4cc43d59d14ba2cbf0bc3adb525</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_SYN_RCVD</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>acdbb7986967662f90bca9b6ef46f3acaaf96abc23364b3cdd51216d5cc9a4f3fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_ESTABLISHED</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>acdbb7986967662f90bca9b6ef46f3acaa3b4387f45a765235dfda0bf3111ba1c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_CLOSE_WAIT</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>acdbb7986967662f90bca9b6ef46f3acaa3395b6fd6b4cf5d6165b37929d44eaa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_LAST_ACK</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>acdbb7986967662f90bca9b6ef46f3acaaac5147b505ddf6bb15d84853242bcfdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_FIN_WAIT_1</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>acdbb7986967662f90bca9b6ef46f3acaa1366e9fbbf862cd3fdfa3ea08e641cb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_FIN_WAIT_2</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>acdbb7986967662f90bca9b6ef46f3acaaea07c6aa092a0b2e9141385fb4734797</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_CLOSING</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>acdbb7986967662f90bca9b6ef46f3acaacdbad950a89de6fc964c3257d45e07a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_TIME_WAIT</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>acdbb7986967662f90bca9b6ef46f3acaa8a4fa6fa69c727999ad6b8fe056a6fd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TCPEventCode</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_IGNORE</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32acd405552b4f4c9973d5d5b7e8aae88f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_OPEN_ACTIVE</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a6179df5a4a1f3314be52f5789f5f0bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_OPEN_PASSIVE</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a11dd6ccbd9b9bbb145b64fb99981b530</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_SEND</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32af5e9f1961ac4c76e49f568d8fd304063</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_CLOSE</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a2c5c582787e0b87a4a913e34c4d20d1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_ABORT</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a1fd07d5de8615b02fe30cc7159af37af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_STATUS</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32adea9b33ab4047345817fb7d8066a8ae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_DATA</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a1e5b9fcdbbaae24327c007914ad57a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_ACK</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a823e4834ff13aaff8408c38ac1b0f350</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_SYN</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a6769520e2e41d511462d3608d18326ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_SYN_ACK</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a3239eea5ba6edf6850289914cfac51c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_FIN</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a59323c4bb3247640d61362e7f6ba824e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_FIN_ACK</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a2f4afa3cc8122b708143ae335b542179</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_RST</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a050c79add513afca8554e29b61fd5389</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_UNEXP_SYN</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a55dbf4b3147f64f1baeac365b019dea6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_TIMEOUT_2MSL</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a358c0a11572a1131e318543e4b64764a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_TIMEOUT_CONN_ESTAB</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a6ba25d81f0bcad8dbc3f1f59ce2f08ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_TIMEOUT_FIN_WAIT_2</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a3d31d30a7eca2a0655da0b2c16df9500</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seqLess</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>a17c7a0744a549bb90de7d1bc6b8b72ad</anchor>
      <arglist>(uint32 a, uint32 b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seqLE</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>a2a4d76c437a6e0eb1e1440c02153e5db</anchor>
      <arglist>(uint32 a, uint32 b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seqGreater</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>a91800c1929091c104e787a01f5955a9f</anchor>
      <arglist>(uint32 a, uint32 b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seqGE</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>a0012c6f2a0631480574729efd85a05c9</anchor>
      <arglist>(uint32 a, uint32 b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPConnectionBase.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/</path>
    <filename>_t_c_p_connection_base_8cc</filename>
    <includes id="_t_c_p_8h" name="TCP.h" local="yes" imported="no">TCP.h</includes>
    <includes id="_t_c_p_connection_8h" name="TCPConnection.h" local="yes" imported="no">TCPConnection.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <includes id="_t_c_p_command__m_8h" name="TCPCommand_m.h" local="yes" imported="no">TCPCommand_m.h</includes>
    <includes id="_t_c_p_send_queue_8h" name="TCPSendQueue.h" local="yes" imported="no">TCPSendQueue.h</includes>
    <includes id="_t_c_p_receive_queue_8h" name="TCPReceiveQueue.h" local="yes" imported="no">TCPReceiveQueue.h</includes>
    <includes id="_t_c_p_algorithm_8h" name="TCPAlgorithm.h" local="yes" imported="no">TCPAlgorithm.h</includes>
    <includes id="_t_c_p_s_a_c_k_rexmit_queue_8h" name="TCPSACKRexmitQueue.h" local="yes" imported="no">TCPSACKRexmitQueue.h</includes>
  </compound>
  <compound kind="file">
    <name>old/TCPConnectionBase.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/</path>
    <filename>old_2_t_c_p_connection_base_8cc</filename>
    <includes id="_t_c_p__old_8h" name="TCP_old.h" local="yes" imported="no">TCP_old.h</includes>
    <includes id="_t_c_p_connection__old_8h" name="TCPConnection_old.h" local="yes" imported="no">TCPConnection_old.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <includes id="_t_c_p_command__m_8h" name="TCPCommand_m.h" local="yes" imported="no">TCPCommand_m.h</includes>
    <includes id="_t_c_p_send_queue__old_8h" name="TCPSendQueue_old.h" local="yes" imported="no">TCPSendQueue_old.h</includes>
    <includes id="_t_c_p_receive_queue__old_8h" name="TCPReceiveQueue_old.h" local="yes" imported="no">TCPReceiveQueue_old.h</includes>
    <includes id="_t_c_p_algorithm__old_8h" name="TCPAlgorithm_old.h" local="yes" imported="no">TCPAlgorithm_old.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPConnectionEventProc.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/</path>
    <filename>_t_c_p_connection_event_proc_8cc</filename>
    <includes id="_t_c_p_8h" name="TCP.h" local="yes" imported="no">TCP.h</includes>
    <includes id="_t_c_p_connection_8h" name="TCPConnection.h" local="yes" imported="no">TCPConnection.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <includes id="_t_c_p_command__m_8h" name="TCPCommand_m.h" local="yes" imported="no">TCPCommand_m.h</includes>
    <includes id="_t_c_p_send_queue_8h" name="TCPSendQueue.h" local="yes" imported="no">TCPSendQueue.h</includes>
    <includes id="_t_c_p_receive_queue_8h" name="TCPReceiveQueue.h" local="yes" imported="no">TCPReceiveQueue.h</includes>
    <includes id="_t_c_p_algorithm_8h" name="TCPAlgorithm.h" local="yes" imported="no">TCPAlgorithm.h</includes>
  </compound>
  <compound kind="file">
    <name>old/TCPConnectionEventProc.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/</path>
    <filename>old_2_t_c_p_connection_event_proc_8cc</filename>
    <includes id="_t_c_p__old_8h" name="TCP_old.h" local="yes" imported="no">TCP_old.h</includes>
    <includes id="_t_c_p_connection__old_8h" name="TCPConnection_old.h" local="yes" imported="no">TCPConnection_old.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <includes id="_t_c_p_command__m_8h" name="TCPCommand_m.h" local="yes" imported="no">TCPCommand_m.h</includes>
    <includes id="_t_c_p_send_queue__old_8h" name="TCPSendQueue_old.h" local="yes" imported="no">TCPSendQueue_old.h</includes>
    <includes id="_t_c_p_receive_queue__old_8h" name="TCPReceiveQueue_old.h" local="yes" imported="no">TCPReceiveQueue_old.h</includes>
    <includes id="_t_c_p_algorithm__old_8h" name="TCPAlgorithm_old.h" local="yes" imported="no">TCPAlgorithm_old.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPConnectionRcvSegment.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/</path>
    <filename>_t_c_p_connection_rcv_segment_8cc</filename>
    <includes id="_t_c_p_8h" name="TCP.h" local="yes" imported="no">TCP.h</includes>
    <includes id="_t_c_p_connection_8h" name="TCPConnection.h" local="yes" imported="no">TCPConnection.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <includes id="_t_c_p_command__m_8h" name="TCPCommand_m.h" local="yes" imported="no">TCPCommand_m.h</includes>
    <includes id="_t_c_p_send_queue_8h" name="TCPSendQueue.h" local="yes" imported="no">TCPSendQueue.h</includes>
    <includes id="_t_c_p_s_a_c_k_rexmit_queue_8h" name="TCPSACKRexmitQueue.h" local="yes" imported="no">TCPSACKRexmitQueue.h</includes>
    <includes id="_t_c_p_receive_queue_8h" name="TCPReceiveQueue.h" local="yes" imported="no">TCPReceiveQueue.h</includes>
    <includes id="_t_c_p_algorithm_8h" name="TCPAlgorithm.h" local="yes" imported="no">TCPAlgorithm.h</includes>
  </compound>
  <compound kind="file">
    <name>old/TCPConnectionRcvSegment.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/</path>
    <filename>old_2_t_c_p_connection_rcv_segment_8cc</filename>
    <includes id="_t_c_p__old_8h" name="TCP_old.h" local="yes" imported="no">TCP_old.h</includes>
    <includes id="_t_c_p_connection__old_8h" name="TCPConnection_old.h" local="yes" imported="no">TCPConnection_old.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <includes id="_t_c_p_command__m_8h" name="TCPCommand_m.h" local="yes" imported="no">TCPCommand_m.h</includes>
    <includes id="_t_c_p_send_queue__old_8h" name="TCPSendQueue_old.h" local="yes" imported="no">TCPSendQueue_old.h</includes>
    <includes id="_t_c_p_receive_queue__old_8h" name="TCPReceiveQueue_old.h" local="yes" imported="no">TCPReceiveQueue_old.h</includes>
    <includes id="_t_c_p_algorithm__old_8h" name="TCPAlgorithm_old.h" local="yes" imported="no">TCPAlgorithm_old.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPConnectionUtil.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/</path>
    <filename>_t_c_p_connection_util_8cc</filename>
    <includes id="_t_c_p_8h" name="TCP.h" local="yes" imported="no">TCP.h</includes>
    <includes id="_t_c_p_connection_8h" name="TCPConnection.h" local="yes" imported="no">TCPConnection.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <includes id="_t_c_p_command__m_8h" name="TCPCommand_m.h" local="yes" imported="no">TCPCommand_m.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_pv6_control_info_8h" name="IPv6ControlInfo.h" local="yes" imported="no">IPv6ControlInfo.h</includes>
    <includes id="_t_c_p_send_queue_8h" name="TCPSendQueue.h" local="yes" imported="no">TCPSendQueue.h</includes>
    <includes id="_t_c_p_s_a_c_k_rexmit_queue_8h" name="TCPSACKRexmitQueue.h" local="yes" imported="no">TCPSACKRexmitQueue.h</includes>
    <includes id="_t_c_p_receive_queue_8h" name="TCPReceiveQueue.h" local="yes" imported="no">TCPReceiveQueue.h</includes>
    <includes id="_t_c_p_algorithm_8h" name="TCPAlgorithm.h" local="yes" imported="no">TCPAlgorithm.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CASE</name>
      <anchorfile>_t_c_p_connection_util_8cc.html</anchorfile>
      <anchor>a60cc06bef97da802b8522d258ac4fe89</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CASE</name>
      <anchorfile>_t_c_p_connection_util_8cc.html</anchorfile>
      <anchor>a60cc06bef97da802b8522d258ac4fe89</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CASE</name>
      <anchorfile>_t_c_p_connection_util_8cc.html</anchorfile>
      <anchor>a60cc06bef97da802b8522d258ac4fe89</anchor>
      <arglist>(x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>old/TCPConnectionUtil.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/</path>
    <filename>old_2_t_c_p_connection_util_8cc</filename>
    <includes id="_t_c_p__old_8h" name="TCP_old.h" local="yes" imported="no">TCP_old.h</includes>
    <includes id="_t_c_p_connection__old_8h" name="TCPConnection_old.h" local="yes" imported="no">TCPConnection_old.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <includes id="_t_c_p_command__m_8h" name="TCPCommand_m.h" local="yes" imported="no">TCPCommand_m.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_pv6_control_info_8h" name="IPv6ControlInfo.h" local="yes" imported="no">IPv6ControlInfo.h</includes>
    <includes id="_t_c_p_send_queue__old_8h" name="TCPSendQueue_old.h" local="yes" imported="no">TCPSendQueue_old.h</includes>
    <includes id="_t_c_p_receive_queue__old_8h" name="TCPReceiveQueue_old.h" local="yes" imported="no">TCPReceiveQueue_old.h</includes>
    <includes id="_t_c_p_algorithm__old_8h" name="TCPAlgorithm_old.h" local="yes" imported="no">TCPAlgorithm_old.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CASE</name>
      <anchorfile>old_2_t_c_p_connection_util_8cc.html</anchorfile>
      <anchor>a60cc06bef97da802b8522d258ac4fe89</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CASE</name>
      <anchorfile>old_2_t_c_p_connection_util_8cc.html</anchorfile>
      <anchor>a60cc06bef97da802b8522d258ac4fe89</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CASE</name>
      <anchorfile>old_2_t_c_p_connection_util_8cc.html</anchorfile>
      <anchor>a60cc06bef97da802b8522d258ac4fe89</anchor>
      <arglist>(x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPDoc.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/</path>
    <filename>_t_c_p_doc_8h</filename>
  </compound>
  <compound kind="file">
    <name>TCPDoc_old.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/</path>
    <filename>_t_c_p_doc__old_8h</filename>
  </compound>
  <compound kind="file">
    <name>TCPDump.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/</path>
    <filename>_t_c_p_dump_8cc</filename>
    <includes id="_t_c_p_dump_8h" name="TCPDump.h" local="yes" imported="no">TCPDump.h</includes>
    <includes id="_i_p_control_info__m_8h" name="IPControlInfo_m.h" local="yes" imported="no">IPControlInfo_m.h</includes>
    <includes id="_s_c_t_p_message_8h" name="SCTPMessage.h" local="yes" imported="no">SCTPMessage.h</includes>
    <includes id="_s_c_t_p_association_8h" name="SCTPAssociation.h" local="yes" imported="no">SCTPAssociation.h</includes>
    <includes id="_i_p_serializer_8h" name="IPSerializer.h" local="yes" imported="no">IPSerializer.h</includes>
    <includes id="_i_c_m_p_message_8h" name="ICMPMessage.h" local="yes" imported="no">ICMPMessage.h</includes>
    <includes id="_u_d_p_packet__m_8h" name="UDPPacket_m.h" local="yes" imported="no">UDPPacket_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MAXBUFLENGTH</name>
      <anchorfile>_t_c_p_dump_8cc.html</anchorfile>
      <anchor>af54882f751368189fddf445f6f2bd44f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_t_c_p_dump_8cc.html</anchorfile>
      <anchor>ac324a15f27b0ab9355e4e7697c8d6b3b</anchor>
      <arglist>(TCPDump)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPDump.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/</path>
    <filename>_t_c_p_dump_8h</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
    <includes id="_s_c_t_p_message_8h" name="SCTPMessage.h" local="yes" imported="no">SCTPMessage.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <includes id="_i_pv6_datagram__m_8h" name="IPv6Datagram_m.h" local="yes" imported="no">IPv6Datagram_m.h</includes>
    <class kind="struct">pcap_hdr</class>
    <class kind="struct">pcaprec_hdr</class>
    <class kind="struct">hdr_ethernet_t</class>
    <class kind="class">TCPDumper</class>
    <class kind="class">TCPDump</class>
    <member kind="define">
      <type>#define</type>
      <name>PCAP_MAGIC</name>
      <anchorfile>_t_c_p_dump_8h.html</anchorfile>
      <anchor>a36af2678484f810a739596f617f9d8fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RBUFFER_SIZE</name>
      <anchorfile>_t_c_p_dump_8h.html</anchorfile>
      <anchor>a4668e81a1ed62f082533889edeb96e23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPEchoApp.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/tcpapp/</path>
    <filename>_t_c_p_echo_app_8cc</filename>
    <includes id="_t_c_p_echo_app_8h" name="TCPEchoApp.h" local="yes" imported="no">TCPEchoApp.h</includes>
    <includes id="_t_c_p_socket_8h" name="TCPSocket.h" local="yes" imported="no">TCPSocket.h</includes>
    <includes id="_t_c_p_command__m_8h" name="TCPCommand_m.h" local="yes" imported="no">TCPCommand_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_t_c_p_echo_app_8cc.html</anchorfile>
      <anchor>ae846984f45b4512eac93c228bb72cdd5</anchor>
      <arglist>(TCPEchoApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPEchoApp.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/tcpapp/</path>
    <filename>_t_c_p_echo_app_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">TCPEchoApp</class>
  </compound>
  <compound kind="file">
    <name>TCPGenericCliAppBase.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/tcpapp/</path>
    <filename>_t_c_p_generic_cli_app_base_8cc</filename>
    <includes id="_t_c_p_generic_cli_app_base_8h" name="TCPGenericCliAppBase.h" local="yes" imported="no">TCPGenericCliAppBase.h</includes>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <includes id="_generic_app_msg__m_8h" name="GenericAppMsg_m.h" local="yes" imported="no">GenericAppMsg_m.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPGenericCliAppBase.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/tcpapp/</path>
    <filename>_t_c_p_generic_cli_app_base_8h</filename>
    <includes id="_t_c_p_socket_8h" name="TCPSocket.h" local="yes" imported="no">TCPSocket.h</includes>
    <class kind="class">TCPGenericCliAppBase</class>
  </compound>
  <compound kind="file">
    <name>TCPGenericSrvApp.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/tcpapp/</path>
    <filename>_t_c_p_generic_srv_app_8cc</filename>
    <includes id="_t_c_p_generic_srv_app_8h" name="TCPGenericSrvApp.h" local="yes" imported="no">TCPGenericSrvApp.h</includes>
    <includes id="_t_c_p_socket_8h" name="TCPSocket.h" local="yes" imported="no">TCPSocket.h</includes>
    <includes id="_t_c_p_command__m_8h" name="TCPCommand_m.h" local="yes" imported="no">TCPCommand_m.h</includes>
    <includes id="_generic_app_msg__m_8h" name="GenericAppMsg_m.h" local="yes" imported="no">GenericAppMsg_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_t_c_p_generic_srv_app_8cc.html</anchorfile>
      <anchor>a02a8e806e6917ece2e8f38791cf8c78a</anchor>
      <arglist>(TCPGenericSrvApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPGenericSrvApp.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/tcpapp/</path>
    <filename>_t_c_p_generic_srv_app_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">TCPGenericSrvApp</class>
  </compound>
  <compound kind="file">
    <name>TCPGenericSrvThread.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/tcpapp/</path>
    <filename>_t_c_p_generic_srv_thread_8cc</filename>
    <includes id="_t_c_p_generic_srv_thread_8h" name="TCPGenericSrvThread.h" local="yes" imported="no">TCPGenericSrvThread.h</includes>
    <includes id="_generic_app_msg__m_8h" name="GenericAppMsg_m.h" local="yes" imported="no">GenericAppMsg_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>_t_c_p_generic_srv_thread_8cc.html</anchorfile>
      <anchor>acc42dff4e443c9f87c83b615d14c4fa1</anchor>
      <arglist>(TCPGenericSrvThread)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPGenericSrvThread.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/tcpapp/</path>
    <filename>_t_c_p_generic_srv_thread_8h</filename>
    <includes id="_t_c_p_srv_host_app_8h" name="TCPSrvHostApp.h" local="yes" imported="no">TCPSrvHostApp.h</includes>
    <class kind="class">TCPGenericSrvThread</class>
  </compound>
  <compound kind="file">
    <name>TCPIPchecksum.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/headerserializers/</path>
    <filename>_t_c_p_i_pchecksum_8cc</filename>
    <includes id="_t_c_p_i_pchecksum_8h" name="TCPIPchecksum.h" local="yes" imported="no">TCPIPchecksum.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPIPchecksum.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/headerserializers/</path>
    <filename>_t_c_p_i_pchecksum_8h</filename>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <includes id="_t_c_p_segment__m_8h" name="TCPSegment_m.h" local="yes" imported="no">TCPSegment_m.h</includes>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
    <includes id="defs_8h" name="defs.h" local="yes" imported="no">headers/defs.h</includes>
    <includes id="tcp_8h" name="tcp.h" local="yes" imported="no">headers/tcp.h</includes>
    <class kind="class">TCPIPchecksum</class>
  </compound>
  <compound kind="file">
    <name>queues/TCPMsgBasedRcvQueue.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/queues/</path>
    <filename>queues_2_t_c_p_msg_based_rcv_queue_8cc</filename>
    <includes id="_t_c_p_msg_based_rcv_queue_8h" name="TCPMsgBasedRcvQueue.h" local="yes" imported="no">TCPMsgBasedRcvQueue.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>queues_2_t_c_p_msg_based_rcv_queue_8cc.html</anchorfile>
      <anchor>aed3467fbb28d6be76d7242d19d766f80</anchor>
      <arglist>(TCPMsgBasedRcvQueue)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>old/queues/TCPMsgBasedRcvQueue.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/queues/</path>
    <filename>old_2queues_2_t_c_p_msg_based_rcv_queue_8cc</filename>
    <includes id="_t_c_p_msg_based_rcv_queue__old_8h" name="TCPMsgBasedRcvQueue_old.h" local="yes" imported="no">TCPMsgBasedRcvQueue_old.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>old_2queues_2_t_c_p_msg_based_rcv_queue_8cc.html</anchorfile>
      <anchor>aed3467fbb28d6be76d7242d19d766f80</anchor>
      <arglist>(TCPMsgBasedRcvQueue)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPMsgBasedRcvQueue.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/queues/</path>
    <filename>_t_c_p_msg_based_rcv_queue_8h</filename>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <includes id="_t_c_p_virtual_data_rcv_queue_8h" name="TCPVirtualDataRcvQueue.h" local="yes" imported="no">TCPVirtualDataRcvQueue.h</includes>
    <class kind="class">TCPMsgBasedRcvQueue</class>
  </compound>
  <compound kind="file">
    <name>TCPMsgBasedRcvQueue_old.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/queues/</path>
    <filename>_t_c_p_msg_based_rcv_queue__old_8h</filename>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <includes id="_t_c_p_virtual_data_rcv_queue__old_8h" name="TCPVirtualDataRcvQueue_old.h" local="yes" imported="no">TCPVirtualDataRcvQueue_old.h</includes>
    <class kind="class">tcp_old::TCPMsgBasedRcvQueue</class>
    <namespace>tcp_old</namespace>
  </compound>
  <compound kind="file">
    <name>queues/TCPMsgBasedSendQueue.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/queues/</path>
    <filename>queues_2_t_c_p_msg_based_send_queue_8cc</filename>
    <includes id="_t_c_p_msg_based_send_queue_8h" name="TCPMsgBasedSendQueue.h" local="yes" imported="no">TCPMsgBasedSendQueue.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>queues_2_t_c_p_msg_based_send_queue_8cc.html</anchorfile>
      <anchor>abf4069dd2a5fcb8902caef0c10e01d97</anchor>
      <arglist>(TCPMsgBasedSendQueue)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>old/queues/TCPMsgBasedSendQueue.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/queues/</path>
    <filename>old_2queues_2_t_c_p_msg_based_send_queue_8cc</filename>
    <includes id="_t_c_p_msg_based_send_queue__old_8h" name="TCPMsgBasedSendQueue_old.h" local="yes" imported="no">TCPMsgBasedSendQueue_old.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>old_2queues_2_t_c_p_msg_based_send_queue_8cc.html</anchorfile>
      <anchor>abf4069dd2a5fcb8902caef0c10e01d97</anchor>
      <arglist>(TCPMsgBasedSendQueue)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPMsgBasedSendQueue.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/queues/</path>
    <filename>_t_c_p_msg_based_send_queue_8h</filename>
    <includes id="_t_c_p_send_queue_8h" name="TCPSendQueue.h" local="yes" imported="no">TCPSendQueue.h</includes>
    <class kind="class">TCPMsgBasedSendQueue</class>
    <class kind="struct">TCPMsgBasedSendQueue::Payload</class>
  </compound>
  <compound kind="file">
    <name>TCPMsgBasedSendQueue_old.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/queues/</path>
    <filename>_t_c_p_msg_based_send_queue__old_8h</filename>
    <includes id="_t_c_p_send_queue__old_8h" name="TCPSendQueue_old.h" local="yes" imported="no">TCPSendQueue_old.h</includes>
    <class kind="class">tcp_old::TCPMsgBasedSendQueue</class>
    <class kind="struct">tcp_old::TCPMsgBasedSendQueue::Payload</class>
    <namespace>tcp_old</namespace>
  </compound>
  <compound kind="file">
    <name>TCPNewReno.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/flavours/</path>
    <filename>_t_c_p_new_reno_8cc</filename>
    <includes id="_t_c_p_new_reno_8h" name="TCPNewReno.h" local="yes" imported="no">TCPNewReno.h</includes>
    <includes id="_t_c_p_8h" name="TCP.h" local="yes" imported="no">TCP.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>_t_c_p_new_reno_8cc.html</anchorfile>
      <anchor>a8ca79382b99a3a31eb9966dc40cc6c30</anchor>
      <arglist>(TCPNewReno)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPNewReno.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/flavours/</path>
    <filename>_t_c_p_new_reno_8h</filename>
    <includes id="_t_c_p_tahoe_reno_family_8h" name="TCPTahoeRenoFamily.h" local="yes" imported="no">TCPTahoeRenoFamily.h</includes>
    <class kind="class">TCPNewReno</class>
    <member kind="typedef">
      <type>TCPTahoeRenoFamilyStateVariables</type>
      <name>TCPNewRenoStateVariables</name>
      <anchorfile>_t_c_p_new_reno_8h.html</anchorfile>
      <anchor>a425f4bd2c589a835de167786c64c48e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>flavours/TCPNoCongestionControl.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/flavours/</path>
    <filename>flavours_2_t_c_p_no_congestion_control_8cc</filename>
    <includes id="_t_c_p_no_congestion_control_8h" name="TCPNoCongestionControl.h" local="yes" imported="no">TCPNoCongestionControl.h</includes>
    <includes id="_t_c_p_8h" name="TCP.h" local="yes" imported="no">TCP.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>flavours_2_t_c_p_no_congestion_control_8cc.html</anchorfile>
      <anchor>a072cb47355b5ba85fae9222644c414d3</anchor>
      <arglist>(TCPNoCongestionControl)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>old/flavours/TCPNoCongestionControl.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/flavours/</path>
    <filename>old_2flavours_2_t_c_p_no_congestion_control_8cc</filename>
    <includes id="_t_c_p_no_congestion_control__old_8h" name="TCPNoCongestionControl_old.h" local="yes" imported="no">TCPNoCongestionControl_old.h</includes>
    <includes id="_t_c_p__old_8h" name="TCP_old.h" local="yes" imported="no">TCP_old.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>old_2flavours_2_t_c_p_no_congestion_control_8cc.html</anchorfile>
      <anchor>a072cb47355b5ba85fae9222644c414d3</anchor>
      <arglist>(TCPNoCongestionControl)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPNoCongestionControl.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/flavours/</path>
    <filename>_t_c_p_no_congestion_control_8h</filename>
    <includes id="_t_c_p_base_alg_8h" name="TCPBaseAlg.h" local="yes" imported="no">TCPBaseAlg.h</includes>
    <class kind="class">TCPNoCongestionControl</class>
    <member kind="typedef">
      <type>TCPBaseAlgStateVariables</type>
      <name>TCPNoCongestionControlStateVariables</name>
      <anchorfile>_t_c_p_no_congestion_control_8h.html</anchorfile>
      <anchor>ae03319f8cc5ad114a18acb5eba6b3c74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPNoCongestionControl_old.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/flavours/</path>
    <filename>_t_c_p_no_congestion_control__old_8h</filename>
    <includes id="_t_c_p_base_alg__old_8h" name="TCPBaseAlg_old.h" local="yes" imported="no">TCPBaseAlg_old.h</includes>
    <class kind="class">tcp_old::TCPNoCongestionControl</class>
    <namespace>tcp_old</namespace>
    <member kind="typedef">
      <type>TCPBaseAlgStateVariables</type>
      <name>TCPNoCongestionControlStateVariables</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>ae9d7a9544a1ac76a875480f353111fa7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPReceiveQueue.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/</path>
    <filename>_t_c_p_receive_queue_8h</filename>
    <includes id="_t_c_p_connection_8h" name="TCPConnection.h" local="yes" imported="no">TCPConnection.h</includes>
    <class kind="class">TCPReceiveQueue</class>
  </compound>
  <compound kind="file">
    <name>TCPReceiveQueue_old.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/</path>
    <filename>_t_c_p_receive_queue__old_8h</filename>
    <includes id="_t_c_p_connection__old_8h" name="TCPConnection_old.h" local="yes" imported="no">TCPConnection_old.h</includes>
    <class kind="class">tcp_old::TCPReceiveQueue</class>
    <namespace>tcp_old</namespace>
  </compound>
  <compound kind="file">
    <name>flavours/TCPReno.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/flavours/</path>
    <filename>flavours_2_t_c_p_reno_8cc</filename>
    <includes id="_t_c_p_reno_8h" name="TCPReno.h" local="yes" imported="no">TCPReno.h</includes>
    <includes id="_t_c_p_8h" name="TCP.h" local="yes" imported="no">TCP.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>flavours_2_t_c_p_reno_8cc.html</anchorfile>
      <anchor>a8dec2b6190c9567865d606e338270d23</anchor>
      <arglist>(TCPReno)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>old/flavours/TCPReno.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/flavours/</path>
    <filename>old_2flavours_2_t_c_p_reno_8cc</filename>
    <includes id="_t_c_p_reno__old_8h" name="TCPReno_old.h" local="yes" imported="no">TCPReno_old.h</includes>
    <includes id="_t_c_p__old_8h" name="TCP_old.h" local="yes" imported="no">TCP_old.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>old_2flavours_2_t_c_p_reno_8cc.html</anchorfile>
      <anchor>a8dec2b6190c9567865d606e338270d23</anchor>
      <arglist>(TCPReno)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPReno.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/flavours/</path>
    <filename>_t_c_p_reno_8h</filename>
    <includes id="_t_c_p_tahoe_reno_family_8h" name="TCPTahoeRenoFamily.h" local="yes" imported="no">TCPTahoeRenoFamily.h</includes>
    <class kind="class">TCPReno</class>
    <member kind="typedef">
      <type>TCPTahoeRenoFamilyStateVariables</type>
      <name>TCPRenoStateVariables</name>
      <anchorfile>_t_c_p_reno_8h.html</anchorfile>
      <anchor>ab67082bf10f9625fd4cd24b9ae56546d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPReno_old.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/flavours/</path>
    <filename>_t_c_p_reno__old_8h</filename>
    <includes id="_t_c_p_tahoe_reno_family__old_8h" name="TCPTahoeRenoFamily_old.h" local="yes" imported="no">TCPTahoeRenoFamily_old.h</includes>
    <class kind="class">tcp_old::TCPReno</class>
    <namespace>tcp_old</namespace>
    <member kind="typedef">
      <type>TCPTahoeRenoFamilyStateVariables</type>
      <name>TCPRenoStateVariables</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>a5d6a0bed379f5b6bd3425398d0360613</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPSACKRexmitQueue.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/</path>
    <filename>_t_c_p_s_a_c_k_rexmit_queue_8cc</filename>
    <includes id="_t_c_p_s_a_c_k_rexmit_queue_8h" name="TCPSACKRexmitQueue.h" local="yes" imported="no">TCPSACKRexmitQueue.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPSACKRexmitQueue.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/</path>
    <filename>_t_c_p_s_a_c_k_rexmit_queue_8h</filename>
    <includes id="_t_c_p_connection_8h" name="TCPConnection.h" local="yes" imported="no">TCPConnection.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <class kind="class">TCPSACKRexmitQueue</class>
    <class kind="struct">TCPSACKRexmitQueue::Region</class>
  </compound>
  <compound kind="file">
    <name>TCPSegment.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/</path>
    <filename>_t_c_p_segment_8cc</filename>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>_t_c_p_segment_8cc.html</anchorfile>
      <anchor>aac8b9c097a1aecc4b1f47b5561a845cf</anchor>
      <arglist>(TCPSegment)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPSegment.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/</path>
    <filename>_t_c_p_segment_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_t_c_p_segment__m_8h" name="TCPSegment_m.h" local="yes" imported="no">TCPSegment_m.h</includes>
    <class kind="class">TCPSegment</class>
  </compound>
  <compound kind="file">
    <name>TCPSegment_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/</path>
    <filename>_t_c_p_segment__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="struct">TCPPayloadMessage</class>
    <class kind="class">Sack</class>
    <class kind="class">TCPOption</class>
    <class kind="class">TCPSegment_Base</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_t_c_p_segment__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TCP_HEADER_OCTETS</name>
      <anchorfile>_t_c_p_segment__m_8h.html</anchorfile>
      <anchor>a77315d68700647283fc64814a5862090</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cPacket *</type>
      <name>cPacketPtr</name>
      <anchorfile>_t_c_p_segment__m_8h.html</anchorfile>
      <anchor>abde480fc79049b5fde6cb7cd195c363f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TCPOptionNumbers</name>
      <anchorfile>_t_c_p_segment__m_8h.html</anchorfile>
      <anchor>aad5daaa0da17557e7745d86d2bf140a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCPOPTION_END_OF_OPTION_LIST</name>
      <anchorfile>_t_c_p_segment__m_8h.html</anchorfile>
      <anchor>aad5daaa0da17557e7745d86d2bf140a0a4ae49568e5542f0b26db05424e61bd37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCPOPTION_NO_OPERATION</name>
      <anchorfile>_t_c_p_segment__m_8h.html</anchorfile>
      <anchor>aad5daaa0da17557e7745d86d2bf140a0a3815105fc6965c050aceeac9863abbcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCPOPTION_MAXIMUM_SEGMENT_SIZE</name>
      <anchorfile>_t_c_p_segment__m_8h.html</anchorfile>
      <anchor>aad5daaa0da17557e7745d86d2bf140a0a2284ab19f96a9994ca8082801c427119</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCPOPTION_WINDOW_SCALE</name>
      <anchorfile>_t_c_p_segment__m_8h.html</anchorfile>
      <anchor>aad5daaa0da17557e7745d86d2bf140a0ae67f7b15040c1e70eb0f49c1341549f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCPOPTION_SACK_PERMITTED</name>
      <anchorfile>_t_c_p_segment__m_8h.html</anchorfile>
      <anchor>aad5daaa0da17557e7745d86d2bf140a0ab2a60921ef5e80121ed52f6603897d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCPOPTION_SACK</name>
      <anchorfile>_t_c_p_segment__m_8h.html</anchorfile>
      <anchor>aad5daaa0da17557e7745d86d2bf140a0a9c8c6796fa51976bab9885c5744fa49c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCPOPTION_TIMESTAMP</name>
      <anchorfile>_t_c_p_segment__m_8h.html</anchorfile>
      <anchor>aad5daaa0da17557e7745d86d2bf140a0aed28a019a3504777019e2ed29de987be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_t_c_p_segment__m_8h.html</anchorfile>
      <anchor>a42c3c0ba7f261fb29b56bfea978bb66a</anchor>
      <arglist>(std::ostream &amp;os, cPacketPtr msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_t_c_p_segment__m_8h.html</anchorfile>
      <anchor>aa53f05b87f0ba928308152539ae24150</anchor>
      <arglist>(cCommBuffer *b, cPacketPtr &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_t_c_p_segment__m_8h.html</anchorfile>
      <anchor>a62b00377b5d3f5a6b33a21683a49672a</anchor>
      <arglist>(cCommBuffer *b, cPacketPtr &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_t_c_p_segment__m_8h.html</anchorfile>
      <anchor>a9d7b8f77de3b7d4fa6902f2e3551fd03</anchor>
      <arglist>(cCommBuffer *b, TCPPayloadMessage &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_t_c_p_segment__m_8h.html</anchorfile>
      <anchor>a05f74fdf74fcc274b0ac5e6d197b2d17</anchor>
      <arglist>(cCommBuffer *b, TCPPayloadMessage &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_t_c_p_segment__m_8h.html</anchorfile>
      <anchor>a2c0b0fb9d36783ec5da1c781301d5d51</anchor>
      <arglist>(cCommBuffer *b, Sack &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_t_c_p_segment__m_8h.html</anchorfile>
      <anchor>ab2e1cccac8ff88b4e6a3d9ddebc0b84e</anchor>
      <arglist>(cCommBuffer *b, Sack &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_t_c_p_segment__m_8h.html</anchorfile>
      <anchor>aa97d4d51cbd01f3677a0dfda825de704</anchor>
      <arglist>(cCommBuffer *b, TCPOption &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_t_c_p_segment__m_8h.html</anchorfile>
      <anchor>aa7087a8d55bba3fb28d3f6cc084abe2c</anchor>
      <arglist>(cCommBuffer *b, TCPOption &amp;obj)</arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>TCP_MAX_HEADER_OCTETS</name>
      <anchorfile>_t_c_p_segment__m_8h.html</anchorfile>
      <anchor>aa7e1ca46d75d9c43837b18ac7d0f7a9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>MAX_SACK_ENTRIES</name>
      <anchorfile>_t_c_p_segment__m_8h.html</anchorfile>
      <anchor>a2fadb4d802e0a9be57f70fbe6f86b7ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPSendQueue.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/</path>
    <filename>_t_c_p_send_queue_8h</filename>
    <includes id="_t_c_p_connection_8h" name="TCPConnection.h" local="yes" imported="no">TCPConnection.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <class kind="class">TCPSendQueue</class>
  </compound>
  <compound kind="file">
    <name>TCPSendQueue_old.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/</path>
    <filename>_t_c_p_send_queue__old_8h</filename>
    <includes id="_t_c_p_connection__old_8h" name="TCPConnection_old.h" local="yes" imported="no">TCPConnection_old.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <class kind="class">tcp_old::TCPSendQueue</class>
    <namespace>tcp_old</namespace>
  </compound>
  <compound kind="file">
    <name>TCPSerializer.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/headerserializers/</path>
    <filename>_t_c_p_serializer_8cc</filename>
    <includes id="_t_c_p_serializer_8h" name="TCPSerializer.h" local="yes" imported="no">TCPSerializer.h</includes>
    <includes id="_i_p_protocol_id__m_8h" name="IPProtocolId_m.h" local="yes" imported="no">IPProtocolId_m.h</includes>
    <includes id="_t_c_p_i_pchecksum_8h" name="TCPIPchecksum.h" local="yes" imported="no">TCPIPchecksum.h</includes>
    <includes id="bsdint_8h" name="bsdint.h" local="yes" imported="no">headers/bsdint.h</includes>
    <includes id="in_8h" name="in.h" local="yes" imported="no">headers/in.h</includes>
    <includes id="in__systm_8h" name="in_systm.h" local="yes" imported="no">headers/in_systm.h</includes>
    <class kind="struct">INETFw::in_addr</class>
    <namespace>INETFw</namespace>
  </compound>
  <compound kind="file">
    <name>TCPSerializer.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/headerserializers/</path>
    <filename>_t_c_p_serializer_8h</filename>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <includes id="_t_c_p_segment__m_8h" name="TCPSegment_m.h" local="yes" imported="no">TCPSegment_m.h</includes>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
    <includes id="defs_8h" name="defs.h" local="yes" imported="no">headers/defs.h</includes>
    <includes id="tcp_8h" name="tcp.h" local="yes" imported="no">headers/tcp.h</includes>
    <class kind="class">TCPSerializer</class>
  </compound>
  <compound kind="file">
    <name>TCPSessionApp.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/tcpapp/</path>
    <filename>_t_c_p_session_app_8cc</filename>
    <includes id="_t_c_p_session_app_8h" name="TCPSessionApp.h" local="yes" imported="no">TCPSessionApp.h</includes>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_t_c_p_session_app_8cc.html</anchorfile>
      <anchor>a96fb43d7a47dc659fb802d4111850289</anchor>
      <arglist>(TCPSessionApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPSessionApp.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/tcpapp/</path>
    <filename>_t_c_p_session_app_8h</filename>
    <includes id="_t_c_p_socket_8h" name="TCPSocket.h" local="yes" imported="no">TCPSocket.h</includes>
    <class kind="class">TCPSessionApp</class>
    <class kind="struct">TCPSessionApp::Command</class>
  </compound>
  <compound kind="file">
    <name>TCPSinkApp.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/tcpapp/</path>
    <filename>_t_c_p_sink_app_8cc</filename>
    <includes id="_t_c_p_sink_app_8h" name="TCPSinkApp.h" local="yes" imported="no">TCPSinkApp.h</includes>
    <includes id="_t_c_p_socket_8h" name="TCPSocket.h" local="yes" imported="no">TCPSocket.h</includes>
    <includes id="_t_c_p_command__m_8h" name="TCPCommand_m.h" local="yes" imported="no">TCPCommand_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_t_c_p_sink_app_8cc.html</anchorfile>
      <anchor>ae75177c543b4d63f04af6fd2cb112c3c</anchor>
      <arglist>(TCPSinkApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPSinkApp.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/tcpapp/</path>
    <filename>_t_c_p_sink_app_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">TCPSinkApp</class>
  </compound>
  <compound kind="file">
    <name>TCPSocket.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/contract/</path>
    <filename>_t_c_p_socket_8cc</filename>
    <includes id="_t_c_p_socket_8h" name="TCPSocket.h" local="yes" imported="no">TCPSocket.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CASE</name>
      <anchorfile>_t_c_p_socket_8cc.html</anchorfile>
      <anchor>a60cc06bef97da802b8522d258ac4fe89</anchor>
      <arglist>(x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPSocket.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/contract/</path>
    <filename>_t_c_p_socket_8h</filename>
    <includes id="_t_c_p_command__m_8h" name="TCPCommand_m.h" local="yes" imported="no">TCPCommand_m.h</includes>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
    <class kind="class">TCPSocket</class>
    <class kind="class">TCPSocket::CallbackInterface</class>
  </compound>
  <compound kind="file">
    <name>TCPSocketMap.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/contract/</path>
    <filename>_t_c_p_socket_map_8cc</filename>
    <includes id="_t_c_p_socket_map_8h" name="TCPSocketMap.h" local="yes" imported="no">TCPSocketMap.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPSocketMap.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/contract/</path>
    <filename>_t_c_p_socket_map_8h</filename>
    <includes id="_t_c_p_socket_8h" name="TCPSocket.h" local="yes" imported="no">TCPSocket.h</includes>
    <class kind="class">TCPSocketMap</class>
  </compound>
  <compound kind="file">
    <name>TCPSpoof.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/tcpapp/</path>
    <filename>_t_c_p_spoof_8cc</filename>
    <includes id="_t_c_p_spoof_8h" name="TCPSpoof.h" local="yes" imported="no">TCPSpoof.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_pv6_control_info_8h" name="IPv6ControlInfo.h" local="yes" imported="no">IPv6ControlInfo.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_t_c_p_spoof_8cc.html</anchorfile>
      <anchor>a74a7bc870d6805b825fc5a81a7662a66</anchor>
      <arglist>(TCPSpoof)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPSpoof.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/tcpapp/</path>
    <filename>_t_c_p_spoof_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <class kind="class">TCPSpoof</class>
  </compound>
  <compound kind="file">
    <name>TCPSrvHostApp.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/tcpapp/</path>
    <filename>_t_c_p_srv_host_app_8cc</filename>
    <includes id="_t_c_p_srv_host_app_8h" name="TCPSrvHostApp.h" local="yes" imported="no">TCPSrvHostApp.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_t_c_p_srv_host_app_8cc.html</anchorfile>
      <anchor>aa76840adde11de3419380101a7c35740</anchor>
      <arglist>(TCPSrvHostApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPSrvHostApp.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/tcpapp/</path>
    <filename>_t_c_p_srv_host_app_8h</filename>
    <includes id="_t_c_p_socket_8h" name="TCPSocket.h" local="yes" imported="no">TCPSocket.h</includes>
    <includes id="_t_c_p_socket_map_8h" name="TCPSocketMap.h" local="yes" imported="no">TCPSocketMap.h</includes>
    <class kind="class">TCPSrvHostApp</class>
    <class kind="class">TCPServerThreadBase</class>
  </compound>
  <compound kind="file">
    <name>flavours/TCPTahoe.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/flavours/</path>
    <filename>flavours_2_t_c_p_tahoe_8cc</filename>
    <includes id="_t_c_p_tahoe_8h" name="TCPTahoe.h" local="yes" imported="no">TCPTahoe.h</includes>
    <includes id="_t_c_p_8h" name="TCP.h" local="yes" imported="no">TCP.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>flavours_2_t_c_p_tahoe_8cc.html</anchorfile>
      <anchor>aaf612f681c3f75ba76d100d4b261dfac</anchor>
      <arglist>(TCPTahoe)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>old/flavours/TCPTahoe.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/flavours/</path>
    <filename>old_2flavours_2_t_c_p_tahoe_8cc</filename>
    <includes id="_t_c_p_tahoe__old_8h" name="TCPTahoe_old.h" local="yes" imported="no">TCPTahoe_old.h</includes>
    <includes id="_t_c_p__old_8h" name="TCP_old.h" local="yes" imported="no">TCP_old.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>old_2flavours_2_t_c_p_tahoe_8cc.html</anchorfile>
      <anchor>aaf612f681c3f75ba76d100d4b261dfac</anchor>
      <arglist>(TCPTahoe)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPTahoe.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/flavours/</path>
    <filename>_t_c_p_tahoe_8h</filename>
    <includes id="_t_c_p_tahoe_reno_family_8h" name="TCPTahoeRenoFamily.h" local="yes" imported="no">TCPTahoeRenoFamily.h</includes>
    <class kind="class">TCPTahoe</class>
    <member kind="typedef">
      <type>TCPTahoeRenoFamilyStateVariables</type>
      <name>TCPTahoeStateVariables</name>
      <anchorfile>_t_c_p_tahoe_8h.html</anchorfile>
      <anchor>a0916331bf308a78a3339eb4ca28ae3f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPTahoe_old.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/flavours/</path>
    <filename>_t_c_p_tahoe__old_8h</filename>
    <includes id="_t_c_p_tahoe_reno_family__old_8h" name="TCPTahoeRenoFamily_old.h" local="yes" imported="no">TCPTahoeRenoFamily_old.h</includes>
    <class kind="class">tcp_old::TCPTahoe</class>
    <namespace>tcp_old</namespace>
    <member kind="typedef">
      <type>TCPTahoeRenoFamilyStateVariables</type>
      <name>TCPTahoeStateVariables</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>a19c210d0a81aa644ff81066b316c4205</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>flavours/TCPTahoeRenoFamily.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/flavours/</path>
    <filename>flavours_2_t_c_p_tahoe_reno_family_8cc</filename>
    <includes id="_t_c_p_tahoe_reno_family_8h" name="TCPTahoeRenoFamily.h" local="yes" imported="no">TCPTahoeRenoFamily.h</includes>
    <includes id="_t_c_p_8h" name="TCP.h" local="yes" imported="no">TCP.h</includes>
  </compound>
  <compound kind="file">
    <name>old/flavours/TCPTahoeRenoFamily.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/flavours/</path>
    <filename>old_2flavours_2_t_c_p_tahoe_reno_family_8cc</filename>
    <includes id="_t_c_p_tahoe_reno_family__old_8h" name="TCPTahoeRenoFamily_old.h" local="yes" imported="no">TCPTahoeRenoFamily_old.h</includes>
    <includes id="_t_c_p__old_8h" name="TCP_old.h" local="yes" imported="no">TCP_old.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPTahoeRenoFamily.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/flavours/</path>
    <filename>_t_c_p_tahoe_reno_family_8h</filename>
    <includes id="_t_c_p_base_alg_8h" name="TCPBaseAlg.h" local="yes" imported="no">TCPBaseAlg.h</includes>
    <class kind="class">TCPTahoeRenoFamilyStateVariables</class>
    <class kind="class">TCPTahoeRenoFamily</class>
  </compound>
  <compound kind="file">
    <name>TCPTahoeRenoFamily_old.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/flavours/</path>
    <filename>_t_c_p_tahoe_reno_family__old_8h</filename>
    <includes id="_t_c_p_base_alg__old_8h" name="TCPBaseAlg_old.h" local="yes" imported="no">TCPBaseAlg_old.h</includes>
    <class kind="class">tcp_old::TCPTahoeRenoFamilyStateVariables</class>
    <class kind="class">tcp_old::TCPTahoeRenoFamily</class>
    <namespace>tcp_old</namespace>
  </compound>
  <compound kind="file">
    <name>queues/TCPVirtualDataRcvQueue.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/queues/</path>
    <filename>queues_2_t_c_p_virtual_data_rcv_queue_8cc</filename>
    <includes id="_t_c_p_virtual_data_rcv_queue_8h" name="TCPVirtualDataRcvQueue.h" local="yes" imported="no">TCPVirtualDataRcvQueue.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>queues_2_t_c_p_virtual_data_rcv_queue_8cc.html</anchorfile>
      <anchor>ad8c89c385491a315607f85a0e479dbc5</anchor>
      <arglist>(TCPVirtualDataRcvQueue)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>old/queues/TCPVirtualDataRcvQueue.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/queues/</path>
    <filename>old_2queues_2_t_c_p_virtual_data_rcv_queue_8cc</filename>
    <includes id="_t_c_p_virtual_data_rcv_queue__old_8h" name="TCPVirtualDataRcvQueue_old.h" local="yes" imported="no">TCPVirtualDataRcvQueue_old.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>old_2queues_2_t_c_p_virtual_data_rcv_queue_8cc.html</anchorfile>
      <anchor>ad8c89c385491a315607f85a0e479dbc5</anchor>
      <arglist>(TCPVirtualDataRcvQueue)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPVirtualDataRcvQueue.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/queues/</path>
    <filename>_t_c_p_virtual_data_rcv_queue_8h</filename>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <includes id="_t_c_p_receive_queue_8h" name="TCPReceiveQueue.h" local="yes" imported="no">TCPReceiveQueue.h</includes>
    <class kind="class">TCPVirtualDataRcvQueue</class>
    <class kind="struct">TCPVirtualDataRcvQueue::Region</class>
  </compound>
  <compound kind="file">
    <name>TCPVirtualDataRcvQueue_old.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/queues/</path>
    <filename>_t_c_p_virtual_data_rcv_queue__old_8h</filename>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <includes id="_t_c_p_receive_queue__old_8h" name="TCPReceiveQueue_old.h" local="yes" imported="no">TCPReceiveQueue_old.h</includes>
    <class kind="class">tcp_old::TCPVirtualDataRcvQueue</class>
    <class kind="struct">tcp_old::TCPVirtualDataRcvQueue::Region</class>
    <namespace>tcp_old</namespace>
  </compound>
  <compound kind="file">
    <name>queues/TCPVirtualDataSendQueue.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/queues/</path>
    <filename>queues_2_t_c_p_virtual_data_send_queue_8cc</filename>
    <includes id="_t_c_p_virtual_data_send_queue_8h" name="TCPVirtualDataSendQueue.h" local="yes" imported="no">TCPVirtualDataSendQueue.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>queues_2_t_c_p_virtual_data_send_queue_8cc.html</anchorfile>
      <anchor>af3a15fd65b164469043d2c9c9ee03ef7</anchor>
      <arglist>(TCPVirtualDataSendQueue)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>old/queues/TCPVirtualDataSendQueue.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/queues/</path>
    <filename>old_2queues_2_t_c_p_virtual_data_send_queue_8cc</filename>
    <includes id="_t_c_p_virtual_data_send_queue__old_8h" name="TCPVirtualDataSendQueue_old.h" local="yes" imported="no">TCPVirtualDataSendQueue_old.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>old_2queues_2_t_c_p_virtual_data_send_queue_8cc.html</anchorfile>
      <anchor>af3a15fd65b164469043d2c9c9ee03ef7</anchor>
      <arglist>(TCPVirtualDataSendQueue)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPVirtualDataSendQueue.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/queues/</path>
    <filename>_t_c_p_virtual_data_send_queue_8h</filename>
    <includes id="_t_c_p_send_queue_8h" name="TCPSendQueue.h" local="yes" imported="no">TCPSendQueue.h</includes>
    <class kind="class">TCPVirtualDataSendQueue</class>
  </compound>
  <compound kind="file">
    <name>TCPVirtualDataSendQueue_old.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/queues/</path>
    <filename>_t_c_p_virtual_data_send_queue__old_8h</filename>
    <includes id="_t_c_p_send_queue__old_8h" name="TCPSendQueue_old.h" local="yes" imported="no">TCPSendQueue_old.h</includes>
    <class kind="class">tcp_old::TCPVirtualDataSendQueue</class>
    <namespace>tcp_old</namespace>
  </compound>
  <compound kind="file">
    <name>TED.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ted/</path>
    <filename>_t_e_d_8cc</filename>
    <includes id="_t_e_d_8h" name="TED.h" local="yes" imported="no">TED.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <includes id="_routing_table_access_8h" name="RoutingTableAccess.h" local="yes" imported="no">RoutingTableAccess.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>LS_INFINITY</name>
      <anchorfile>_t_e_d_8cc.html</anchorfile>
      <anchor>adae502e9fc4510696255aa68d1413fb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_t_e_d_8cc.html</anchorfile>
      <anchor>a5ac061208d696e4c8b6eacf5e86590a9</anchor>
      <arglist>(TED)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_t_e_d_8cc.html</anchorfile>
      <anchor>a5b1e2c21dd6dca87b5f4daa3415e10f2</anchor>
      <arglist>(std::ostream &amp;os, const TELinkStateInfo &amp;info)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TED.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ted/</path>
    <filename>_t_e_d_8h</filename>
    <includes id="_t_e_d__m_8h" name="TED_m.h" local="yes" imported="no">TED_m.h</includes>
    <includes id="_int_serv_8h" name="IntServ.h" local="yes" imported="no">IntServ.h</includes>
    <class kind="class">TED</class>
    <class kind="struct">TED::vertex_t</class>
    <class kind="struct">TED::edge_t</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_t_e_d_8h.html</anchorfile>
      <anchor>a5b1e2c21dd6dca87b5f4daa3415e10f2</anchor>
      <arglist>(std::ostream &amp;os, const TELinkStateInfo &amp;info)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TED_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ted/</path>
    <filename>_t_e_d__m_8h</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <class kind="struct">TELinkStateInfo</class>
    <class kind="class">TEDChangeInfo</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_t_e_d__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LINK_STATE_MESSAGE</name>
      <anchorfile>_t_e_d__m_8h.html</anchorfile>
      <anchor>a5ad7a9d85678e02c2249c20696732e8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; struct TELinkStateInfo &gt;</type>
      <name>TELinkStateInfoVector</name>
      <anchorfile>_t_e_d__m_8h.html</anchorfile>
      <anchor>aca232868cb5564bc19cd0d35c69a012b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_t_e_d__m_8h.html</anchorfile>
      <anchor>aba00d9eb50f2f25c809acebad1aeb3e7</anchor>
      <arglist>(cCommBuffer *b, TELinkStateInfo &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_t_e_d__m_8h.html</anchorfile>
      <anchor>ae94161d238ccc3601c11d7f59af0d231</anchor>
      <arglist>(cCommBuffer *b, TELinkStateInfo &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_t_e_d__m_8h.html</anchorfile>
      <anchor>a26cebdd73f5df86cb4cee7e44430642d</anchor>
      <arglist>(cCommBuffer *b, TEDChangeInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_t_e_d__m_8h.html</anchorfile>
      <anchor>a184c60a7a1fa563b83248a33f569ec1b</anchor>
      <arglist>(cCommBuffer *b, TEDChangeInfo &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TEDAccess.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ted/</path>
    <filename>_t_e_d_access_8h</filename>
    <includes id="_module_access_8h" name="ModuleAccess.h" local="yes" imported="no">ModuleAccess.h</includes>
    <includes id="_t_e_d_8h" name="TED.h" local="yes" imported="no">TED.h</includes>
    <class kind="class">TEDAccess</class>
  </compound>
  <compound kind="file">
    <name>TelnetApp.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/tcpapp/</path>
    <filename>_telnet_app_8cc</filename>
    <includes id="_telnet_app_8h" name="TelnetApp.h" local="yes" imported="no">TelnetApp.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGKIND_CONNECT</name>
      <anchorfile>_telnet_app_8cc.html</anchorfile>
      <anchor>a1d141ebad9d3bb3992eddbc0f9f3dc56</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSGKIND_SEND</name>
      <anchorfile>_telnet_app_8cc.html</anchorfile>
      <anchor>a1ce396aa5841b902813c437e441f5ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSGKIND_CLOSE</name>
      <anchorfile>_telnet_app_8cc.html</anchorfile>
      <anchor>a62e8b3f5f0a9b0c1a75856c2418c39d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_telnet_app_8cc.html</anchorfile>
      <anchor>a4dbc309ccb342cc2987af02d0c2a63fb</anchor>
      <arglist>(TelnetApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TelnetApp.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/tcpapp/</path>
    <filename>_telnet_app_8h</filename>
    <includes id="_t_c_p_generic_cli_app_base_8h" name="TCPGenericCliAppBase.h" local="yes" imported="no">TCPGenericCliAppBase.h</includes>
    <class kind="class">TelnetApp</class>
  </compound>
  <compound kind="file">
    <name>ThruputMeter.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ppp/</path>
    <filename>_thruput_meter_8cc</filename>
    <includes id="_thruput_meter_8h" name="ThruputMeter.h" local="yes" imported="no">ThruputMeter.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_thruput_meter_8cc.html</anchorfile>
      <anchor>ae536a19ddfe8c118f2e7368871c488e9</anchor>
      <arglist>(ThruputMeter)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ThruputMeter.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ppp/</path>
    <filename>_thruput_meter_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">ThruputMeter</class>
  </compound>
  <compound kind="file">
    <name>ThruputMeteringChannel.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/</path>
    <filename>_thruput_metering_channel_8cc</filename>
  </compound>
  <compound kind="file">
    <name>ThruputMeteringChannel.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/</path>
    <filename>_thruput_metering_channel_8h</filename>
  </compound>
  <compound kind="file">
    <name>TransmComplete_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mfcore/</path>
    <filename>_transm_complete__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">TransmComplete</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_transm_complete__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_transm_complete__m_8h.html</anchorfile>
      <anchor>a5f741c984f41f72aa57bc56109998548</anchor>
      <arglist>(cCommBuffer *b, TransmComplete &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_transm_complete__m_8h.html</anchorfile>
      <anchor>ad3389459729c11a5b2c942effeed1e43</anchor>
      <arglist>(cCommBuffer *b, TransmComplete &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TurtleMobility.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/mobility/</path>
    <filename>_turtle_mobility_8cc</filename>
    <includes id="_turtle_mobility_8h" name="TurtleMobility.h" local="yes" imported="no">TurtleMobility.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_turtle_mobility_8cc.html</anchorfile>
      <anchor>ad360245d9de9da3dd7ac886fe0d022f2</anchor>
      <arglist>(TurtleMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TurtleMobility.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/mobility/</path>
    <filename>_turtle_mobility_8h</filename>
    <includes id="_line_segments_mobility_base_8h" name="LineSegmentsMobilityBase.h" local="yes" imported="no">LineSegmentsMobilityBase.h</includes>
    <class kind="class">TurtleMobility</class>
  </compound>
  <compound kind="file">
    <name>TxNotifDetails.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/contract/</path>
    <filename>_tx_notif_details_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">TxNotifDetails</class>
  </compound>
  <compound kind="file">
    <name>UDP.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/udp/</path>
    <filename>_u_d_p_8cc</filename>
    <includes id="_u_d_p_packet_8h" name="UDPPacket.h" local="yes" imported="no">UDPPacket.h</includes>
    <includes id="_u_d_p_8h" name="UDP.h" local="yes" imported="no">UDP.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_pv6_control_info_8h" name="IPv6ControlInfo.h" local="yes" imported="no">IPv6ControlInfo.h</includes>
    <includes id="_i_c_m_p_access_8h" name="ICMPAccess.h" local="yes" imported="no">ICMPAccess.h</includes>
    <includes id="_i_c_m_pv6_access_8h" name="ICMPv6Access.h" local="yes" imported="no">ICMPv6Access.h</includes>
    <includes id="_i_c_m_p_message__m_8h" name="ICMPMessage_m.h" local="yes" imported="no">ICMPMessage_m.h</includes>
    <includes id="_i_c_m_pv6_message__m_8h" name="ICMPv6Message_m.h" local="yes" imported="no">ICMPv6Message_m.h</includes>
    <includes id="_i_p_datagram__m_8h" name="IPDatagram_m.h" local="yes" imported="no">IPDatagram_m.h</includes>
    <includes id="_i_pv6_datagram__m_8h" name="IPv6Datagram_m.h" local="yes" imported="no">IPv6Datagram_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>EPHEMERAL_PORTRANGE_START</name>
      <anchorfile>_u_d_p_8cc.html</anchorfile>
      <anchor>ae0f9dd1223cbb93271a6c1d5789b5be5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPHEMERAL_PORTRANGE_END</name>
      <anchorfile>_u_d_p_8cc.html</anchorfile>
      <anchor>a689da7c4b794eb247004b316117da9d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_u_d_p_8cc.html</anchorfile>
      <anchor>afd05beff0fc6ea1403cf662535e28e9c</anchor>
      <arglist>(UDP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>udp.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/headerserializers/headers/</path>
    <filename>udp_8h</filename>
    <class kind="struct">udphdr</class>
  </compound>
  <compound kind="file">
    <name>UDP.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/udp/</path>
    <filename>_u_d_p_8h</filename>
    <includes id="_u_d_p_control_info__m_8h" name="UDPControlInfo_m.h" local="yes" imported="no">UDPControlInfo_m.h</includes>
    <class kind="class">UDP</class>
    <class kind="struct">UDP::SockDesc</class>
    <member kind="variable">
      <type>const int</type>
      <name>UDP_HEADER_BYTES</name>
      <anchorfile>_u_d_p_8h.html</anchorfile>
      <anchor>aef334ff0aa0d9bd45ea8385f98a49805</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UDPAppBase.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/udpapp/</path>
    <filename>_u_d_p_app_base_8cc</filename>
    <includes id="_u_d_p_app_base_8h" name="UDPAppBase.h" local="yes" imported="no">UDPAppBase.h</includes>
    <includes id="_u_d_p_socket_8h" name="UDPSocket.h" local="yes" imported="no">UDPSocket.h</includes>
    <includes id="_u_d_p_control_info__m_8h" name="UDPControlInfo_m.h" local="yes" imported="no">UDPControlInfo_m.h</includes>
  </compound>
  <compound kind="file">
    <name>UDPAppBase.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/udpapp/</path>
    <filename>_u_d_p_app_base_8h</filename>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
    <class kind="class">UDPAppBase</class>
  </compound>
  <compound kind="file">
    <name>UDPBasicApp.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/udpapp/</path>
    <filename>_u_d_p_basic_app_8cc</filename>
    <includes id="_u_d_p_basic_app_8h" name="UDPBasicApp.h" local="yes" imported="no">UDPBasicApp.h</includes>
    <includes id="_u_d_p_control_info__m_8h" name="UDPControlInfo_m.h" local="yes" imported="no">UDPControlInfo_m.h</includes>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_u_d_p_basic_app_8cc.html</anchorfile>
      <anchor>a6eefc686c6d629435087140816b42750</anchor>
      <arglist>(UDPBasicApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UDPBasicApp.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/udpapp/</path>
    <filename>_u_d_p_basic_app_8h</filename>
    <includes id="_u_d_p_app_base_8h" name="UDPAppBase.h" local="yes" imported="no">UDPAppBase.h</includes>
    <class kind="class">UDPBasicApp</class>
  </compound>
  <compound kind="file">
    <name>UDPControlInfo_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/contract/</path>
    <filename>_u_d_p_control_info__m_8h</filename>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
    <class kind="class">UDPControlInfo</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_u_d_p_control_info__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UDPCommandCode</name>
      <anchorfile>_u_d_p_control_info__m_8h.html</anchorfile>
      <anchor>a33f565d232e66cb696ba21aa616c2a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDP_C_DATA</name>
      <anchorfile>_u_d_p_control_info__m_8h.html</anchorfile>
      <anchor>a33f565d232e66cb696ba21aa616c2a87a33e7476202418b695b319318e70c894e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDP_C_BIND</name>
      <anchorfile>_u_d_p_control_info__m_8h.html</anchorfile>
      <anchor>a33f565d232e66cb696ba21aa616c2a87aadaa32df8db2d6eaa9cf5779f6f7e8c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDP_C_CONNECT</name>
      <anchorfile>_u_d_p_control_info__m_8h.html</anchorfile>
      <anchor>a33f565d232e66cb696ba21aa616c2a87af6f0e0f8d0d70fe99c7869d59b055b24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDP_C_UNBIND</name>
      <anchorfile>_u_d_p_control_info__m_8h.html</anchorfile>
      <anchor>a33f565d232e66cb696ba21aa616c2a87ae9cd828ab4c679755e7fad0da1ee1413</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UDPStatusInd</name>
      <anchorfile>_u_d_p_control_info__m_8h.html</anchorfile>
      <anchor>a0cb49935325d643afaee9208fcb27733</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDP_I_DATA</name>
      <anchorfile>_u_d_p_control_info__m_8h.html</anchorfile>
      <anchor>a0cb49935325d643afaee9208fcb27733a53bfdb70d4246591854611edf4815f89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDP_I_ERROR</name>
      <anchorfile>_u_d_p_control_info__m_8h.html</anchorfile>
      <anchor>a0cb49935325d643afaee9208fcb27733a484b0da8b16fcb50610630a68c1bf8d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_u_d_p_control_info__m_8h.html</anchorfile>
      <anchor>ae4a3a01465bcec355002e657800bb995</anchor>
      <arglist>(cCommBuffer *b, UDPControlInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_u_d_p_control_info__m_8h.html</anchorfile>
      <anchor>a3aa7d66a8db9946d65022af1236ac84f</anchor>
      <arglist>(cCommBuffer *b, UDPControlInfo &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UDPEchoApp.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/udpapp/</path>
    <filename>_u_d_p_echo_app_8cc</filename>
    <includes id="_u_d_p_echo_app_8h" name="UDPEchoApp.h" local="yes" imported="no">UDPEchoApp.h</includes>
    <includes id="_u_d_p_echo_app_msg__m_8h" name="UDPEchoAppMsg_m.h" local="yes" imported="no">UDPEchoAppMsg_m.h</includes>
    <includes id="_u_d_p_control_info__m_8h" name="UDPControlInfo_m.h" local="yes" imported="no">UDPControlInfo_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_u_d_p_echo_app_8cc.html</anchorfile>
      <anchor>ae690c4349ac51788174c809d7cb742cb</anchor>
      <arglist>(UDPEchoApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UDPEchoApp.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/udpapp/</path>
    <filename>_u_d_p_echo_app_8h</filename>
    <includes id="_u_d_p_basic_app_8h" name="UDPBasicApp.h" local="yes" imported="no">UDPBasicApp.h</includes>
    <class kind="class">UDPEchoApp</class>
  </compound>
  <compound kind="file">
    <name>UDPEchoAppMsg_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/udpapp/</path>
    <filename>_u_d_p_echo_app_msg__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">UDPEchoAppMsg</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_u_d_p_echo_app_msg__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_u_d_p_echo_app_msg__m_8h.html</anchorfile>
      <anchor>a80bd9c7a4d00bdb6a77b19e47edf528f</anchor>
      <arglist>(cCommBuffer *b, UDPEchoAppMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_u_d_p_echo_app_msg__m_8h.html</anchorfile>
      <anchor>a8b614381199cf857253468d96f7b3d36</anchor>
      <arglist>(cCommBuffer *b, UDPEchoAppMsg &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UDPPacket.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/udp/</path>
    <filename>_u_d_p_packet_8h</filename>
    <includes id="_u_d_p_packet__m_8h" name="UDPPacket_m.h" local="yes" imported="no">UDPPacket_m.h</includes>
  </compound>
  <compound kind="file">
    <name>UDPPacket_m.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/udp/</path>
    <filename>_u_d_p_packet__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <class kind="class">UDPPacket</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_u_d_p_packet__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_u_d_p_packet__m_8h.html</anchorfile>
      <anchor>af2943e653393320faf22740d12600a8f</anchor>
      <arglist>(cCommBuffer *b, UDPPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_u_d_p_packet__m_8h.html</anchorfile>
      <anchor>a0e210e62c22df52ed30db275bc78dfb0</anchor>
      <arglist>(cCommBuffer *b, UDPPacket &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UDPSerializer.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/headerserializers/</path>
    <filename>_u_d_p_serializer_8cc</filename>
    <includes id="defs_8h" name="defs.h" local="yes" imported="no">headers/defs.h</includes>
    <includes id="bsdint_8h" name="bsdint.h" local="yes" imported="no">headers/bsdint.h</includes>
    <includes id="in_8h" name="in.h" local="yes" imported="no">headers/in.h</includes>
    <includes id="in__systm_8h" name="in_systm.h" local="yes" imported="no">headers/in_systm.h</includes>
    <includes id="udp_8h" name="udp.h" local="yes" imported="no">headers/udp.h</includes>
    <includes id="_u_d_p_serializer_8h" name="UDPSerializer.h" local="yes" imported="no">UDPSerializer.h</includes>
    <includes id="_t_c_p_i_pchecksum_8h" name="TCPIPchecksum.h" local="yes" imported="no">TCPIPchecksum.h</includes>
    <class kind="struct">INETFw::in_addr</class>
    <class kind="struct">INETFw::udphdr</class>
    <namespace>INETFw</namespace>
  </compound>
  <compound kind="file">
    <name>UDPSerializer.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/headerserializers/</path>
    <filename>_u_d_p_serializer_8h</filename>
    <includes id="_u_d_p_packet_8h" name="UDPPacket.h" local="yes" imported="no">UDPPacket.h</includes>
    <class kind="class">UDPSerializer</class>
  </compound>
  <compound kind="file">
    <name>UDPSink.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/udpapp/</path>
    <filename>_u_d_p_sink_8cc</filename>
    <includes id="_u_d_p_sink_8h" name="UDPSink.h" local="yes" imported="no">UDPSink.h</includes>
    <includes id="_u_d_p_control_info__m_8h" name="UDPControlInfo_m.h" local="yes" imported="no">UDPControlInfo_m.h</includes>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_u_d_p_sink_8cc.html</anchorfile>
      <anchor>ac149add7dd40078c3af85c33c6e3f551</anchor>
      <arglist>(UDPSink)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UDPSink.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/udpapp/</path>
    <filename>_u_d_p_sink_8h</filename>
    <includes id="_u_d_p_app_base_8h" name="UDPAppBase.h" local="yes" imported="no">UDPAppBase.h</includes>
    <class kind="class">UDPSink</class>
  </compound>
  <compound kind="file">
    <name>UDPSocket.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/contract/</path>
    <filename>_u_d_p_socket_8cc</filename>
    <includes id="_u_d_p_socket_8h" name="UDPSocket.h" local="yes" imported="no">UDPSocket.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CASE</name>
      <anchorfile>_u_d_p_socket_8cc.html</anchorfile>
      <anchor>a60cc06bef97da802b8522d258ac4fe89</anchor>
      <arglist>(x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UDPSocket.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/contract/</path>
    <filename>_u_d_p_socket_8h</filename>
    <includes id="_u_d_p_control_info__m_8h" name="UDPControlInfo_m.h" local="yes" imported="no">UDPControlInfo_m.h</includes>
    <class kind="class">UDPSocket</class>
    <class kind="class">UDPSocket::CallbackInterface</class>
  </compound>
  <compound kind="file">
    <name>UDPVideoStreamCli.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/udpapp/</path>
    <filename>_u_d_p_video_stream_cli_8cc</filename>
    <includes id="_u_d_p_video_stream_cli_8h" name="UDPVideoStreamCli.h" local="yes" imported="no">UDPVideoStreamCli.h</includes>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_u_d_p_video_stream_cli_8cc.html</anchorfile>
      <anchor>a6bb422315cac2ff4957418e3ddcca208</anchor>
      <arglist>(UDPVideoStreamCli)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UDPVideoStreamCli.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/udpapp/</path>
    <filename>_u_d_p_video_stream_cli_8h</filename>
    <includes id="_u_d_p_app_base_8h" name="UDPAppBase.h" local="yes" imported="no">UDPAppBase.h</includes>
    <class kind="class">UDPVideoStreamCli</class>
  </compound>
  <compound kind="file">
    <name>UDPVideoStreamSvr.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/udpapp/</path>
    <filename>_u_d_p_video_stream_svr_8cc</filename>
    <includes id="_u_d_p_video_stream_svr_8h" name="UDPVideoStreamSvr.h" local="yes" imported="no">UDPVideoStreamSvr.h</includes>
    <includes id="_u_d_p_control_info__m_8h" name="UDPControlInfo_m.h" local="yes" imported="no">UDPControlInfo_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_u_d_p_video_stream_svr_8cc.html</anchorfile>
      <anchor>ad6e49bdc9fe516b342009f62ef95daf4</anchor>
      <arglist>(UDPVideoStreamSvr)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_u_d_p_video_stream_svr_8cc.html</anchorfile>
      <anchor>a635f24433df826fed0b3245212fac075</anchor>
      <arglist>(std::ostream &amp;out, const UDPVideoStreamSvr::VideoStreamData &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UDPVideoStreamSvr.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/udpapp/</path>
    <filename>_u_d_p_video_stream_svr_8h</filename>
    <includes id="_u_d_p_app_base_8h" name="UDPAppBase.h" local="yes" imported="no">UDPAppBase.h</includes>
    <class kind="class">UDPVideoStreamSvr</class>
    <class kind="struct">UDPVideoStreamSvr::VideoStreamData</class>
  </compound>
  <compound kind="file">
    <name>Utils.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/rsvp_te/</path>
    <filename>_utils_8cc</filename>
    <includes id="_utils_8h" name="Utils.h" local="yes" imported="no">Utils.h</includes>
    <includes id="_int_serv_8h" name="IntServ.h" local="yes" imported="no">IntServ.h</includes>
    <member kind="function">
      <type>void</type>
      <name>removeDuplicates</name>
      <anchorfile>_utils_8cc.html</anchorfile>
      <anchor>a34b392c552c260b1480085de813e7eb5</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchorfile>_utils_8cc.html</anchorfile>
      <anchor>a33bdc8b2583dcc9d2a8bfe1ec578352d</anchor>
      <arglist>(const EroVector &amp;ERO, IPAddress node)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>find</name>
      <anchorfile>_utils_8cc.html</anchorfile>
      <anchor>a31431863811362000baff948a6a7f3ca</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;vec, int value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>find</name>
      <anchorfile>_utils_8cc.html</anchorfile>
      <anchor>a9efe10fe0022a13934d1d5dcded61d65</anchor>
      <arglist>(const IPAddressVector &amp;vec, IPAddress addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>_utils_8cc.html</anchorfile>
      <anchor>a221673627a7b5f2f3ff55d711453240b</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;dest, const std::vector&lt; int &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getPayloadOwner</name>
      <anchorfile>_utils_8cc.html</anchorfile>
      <anchor>a668c8d40e52d60e63ec262b049304d53</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Utils.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/rsvp_te/</path>
    <filename>_utils_8h</filename>
    <includes id="_int_serv_8h" name="IntServ.h" local="yes" imported="no">IntServ.h</includes>
    <member kind="function">
      <type>void</type>
      <name>removeDuplicates</name>
      <anchorfile>_utils_8h.html</anchorfile>
      <anchor>a34b392c552c260b1480085de813e7eb5</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>find</name>
      <anchorfile>_utils_8h.html</anchorfile>
      <anchor>a31431863811362000baff948a6a7f3ca</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;vec, int value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>find</name>
      <anchorfile>_utils_8h.html</anchorfile>
      <anchor>a9efe10fe0022a13934d1d5dcded61d65</anchor>
      <arglist>(const IPAddressVector &amp;vec, IPAddress addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>_utils_8h.html</anchorfile>
      <anchor>a221673627a7b5f2f3ff55d711453240b</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;dest, const std::vector&lt; int &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchorfile>_utils_8h.html</anchorfile>
      <anchor>a33bdc8b2583dcc9d2a8bfe1ec578352d</anchor>
      <arglist>(const EroVector &amp;ERO, IPAddress node)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getPayloadOwner</name>
      <anchorfile>_utils_8h.html</anchorfile>
      <anchor>a668c8d40e52d60e63ec262b049304d53</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WirelessMacBase.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mfcore/</path>
    <filename>_wireless_mac_base_8cc</filename>
    <includes id="_wireless_mac_base_8h" name="WirelessMacBase.h" local="yes" imported="no">WirelessMacBase.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
  </compound>
  <compound kind="file">
    <name>WirelessMacBase.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mfcore/</path>
    <filename>_wireless_mac_base_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <class kind="class">WirelessMacBase</class>
  </compound>
  <compound kind="file">
    <name>XMLUtils.cc</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/</path>
    <filename>_x_m_l_utils_8cc</filename>
    <includes id="_x_m_l_utils_8h" name="XMLUtils.h" local="yes" imported="no">XMLUtils.h</includes>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <member kind="function">
      <type>const cXMLElement *</type>
      <name>getUniqueChild</name>
      <anchorfile>_x_m_l_utils_8cc.html</anchorfile>
      <anchor>a8a79ce4f5f5c6998172d2234877ca4ca</anchor>
      <arglist>(const cXMLElement *node, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>const cXMLElement *</type>
      <name>getUniqueChildIfExists</name>
      <anchorfile>_x_m_l_utils_8cc.html</anchorfile>
      <anchor>a354dec476d4b54e6a7d45e7c02dfdab3</anchor>
      <arglist>(const cXMLElement *node, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseBool</name>
      <anchorfile>_x_m_l_utils_8cc.html</anchorfile>
      <anchor>a0aecae906308a8ede20f9b9050c139dc</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkTags</name>
      <anchorfile>_x_m_l_utils_8cc.html</anchorfile>
      <anchor>a10d193d56ab9828e48d984d940cc30c0</anchor>
      <arglist>(const cXMLElement *node, const char *allowed)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getParameterStrValue</name>
      <anchorfile>_x_m_l_utils_8cc.html</anchorfile>
      <anchor>af497e46a3d73dc71fc4dffbe2b07ad1b</anchor>
      <arglist>(const cXMLElement *ptr, const char *name, const char *def)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getParameterBoolValue</name>
      <anchorfile>_x_m_l_utils_8cc.html</anchorfile>
      <anchor>a5245590987c556092552c2e25fafc964</anchor>
      <arglist>(const cXMLElement *ptr, const char *name, bool def)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getParameterBoolValue</name>
      <anchorfile>_x_m_l_utils_8cc.html</anchorfile>
      <anchor>a945b96328e29dea4c5a7f2220ceabe62</anchor>
      <arglist>(const cXMLElement *ptr, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getParameterStrValue</name>
      <anchorfile>_x_m_l_utils_8cc.html</anchorfile>
      <anchor>a5dfbb2ca594d6a9b4a66f8b4e7d33369</anchor>
      <arglist>(const cXMLElement *ptr, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParameterIntValue</name>
      <anchorfile>_x_m_l_utils_8cc.html</anchorfile>
      <anchor>a904310d712761c82c65e7975800e817b</anchor>
      <arglist>(const cXMLElement *ptr, const char *name, int def)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParameterIntValue</name>
      <anchorfile>_x_m_l_utils_8cc.html</anchorfile>
      <anchor>ab5b8ce17464781a0d295b073eb3a9b2f</anchor>
      <arglist>(const cXMLElement *ptr, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getParameterIPAddressValue</name>
      <anchorfile>_x_m_l_utils_8cc.html</anchorfile>
      <anchor>abc530a666bb91e5d1305f0d0fc5525c7</anchor>
      <arglist>(const cXMLElement *ptr, const char *name, IPAddress def)</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getParameterIPAddressValue</name>
      <anchorfile>_x_m_l_utils_8cc.html</anchorfile>
      <anchor>af6620113f559f528070edd66f8a9ac14</anchor>
      <arglist>(const cXMLElement *ptr, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getParameterDoubleValue</name>
      <anchorfile>_x_m_l_utils_8cc.html</anchorfile>
      <anchor>a0de17fc8d544d2ea831eff7d563e787f</anchor>
      <arglist>(const cXMLElement *ptr, const char *name, double def)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getParameterDoubleValue</name>
      <anchorfile>_x_m_l_utils_8cc.html</anchorfile>
      <anchor>ab2f64a016b58e02794ac8e105135b543</anchor>
      <arglist>(const cXMLElement *ptr, const char *name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>XMLUtils.h</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/</path>
    <filename>_x_m_l_utils_8h</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <member kind="function">
      <type>const cXMLElement *</type>
      <name>getUniqueChild</name>
      <anchorfile>_x_m_l_utils_8h.html</anchorfile>
      <anchor>a8a79ce4f5f5c6998172d2234877ca4ca</anchor>
      <arglist>(const cXMLElement *node, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>const cXMLElement *</type>
      <name>getUniqueChildIfExists</name>
      <anchorfile>_x_m_l_utils_8h.html</anchorfile>
      <anchor>a354dec476d4b54e6a7d45e7c02dfdab3</anchor>
      <arglist>(const cXMLElement *node, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkTags</name>
      <anchorfile>_x_m_l_utils_8h.html</anchorfile>
      <anchor>a10d193d56ab9828e48d984d940cc30c0</anchor>
      <arglist>(const cXMLElement *node, const char *allowed)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getParameterBoolValue</name>
      <anchorfile>_x_m_l_utils_8h.html</anchorfile>
      <anchor>a5245590987c556092552c2e25fafc964</anchor>
      <arglist>(const cXMLElement *ptr, const char *name, bool def)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getParameterBoolValue</name>
      <anchorfile>_x_m_l_utils_8h.html</anchorfile>
      <anchor>a945b96328e29dea4c5a7f2220ceabe62</anchor>
      <arglist>(const cXMLElement *ptr, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParameterIntValue</name>
      <anchorfile>_x_m_l_utils_8h.html</anchorfile>
      <anchor>ab5b8ce17464781a0d295b073eb3a9b2f</anchor>
      <arglist>(const cXMLElement *ptr, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParameterIntValue</name>
      <anchorfile>_x_m_l_utils_8h.html</anchorfile>
      <anchor>a904310d712761c82c65e7975800e817b</anchor>
      <arglist>(const cXMLElement *ptr, const char *name, int def)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getParameterStrValue</name>
      <anchorfile>_x_m_l_utils_8h.html</anchorfile>
      <anchor>a5dfbb2ca594d6a9b4a66f8b4e7d33369</anchor>
      <arglist>(const cXMLElement *ptr, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getParameterStrValue</name>
      <anchorfile>_x_m_l_utils_8h.html</anchorfile>
      <anchor>af497e46a3d73dc71fc4dffbe2b07ad1b</anchor>
      <arglist>(const cXMLElement *ptr, const char *name, const char *def)</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getParameterIPAddressValue</name>
      <anchorfile>_x_m_l_utils_8h.html</anchorfile>
      <anchor>af6620113f559f528070edd66f8a9ac14</anchor>
      <arglist>(const cXMLElement *ptr, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getParameterIPAddressValue</name>
      <anchorfile>_x_m_l_utils_8h.html</anchorfile>
      <anchor>abc530a666bb91e5d1305f0d0fc5525c7</anchor>
      <arglist>(const cXMLElement *ptr, const char *name, IPAddress def)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getParameterDoubleValue</name>
      <anchorfile>_x_m_l_utils_8h.html</anchorfile>
      <anchor>ab2f64a016b58e02794ac8e105135b543</anchor>
      <arglist>(const cXMLElement *ptr, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getParameterDoubleValue</name>
      <anchorfile>_x_m_l_utils_8h.html</anchorfile>
      <anchor>a0de17fc8d544d2ea831eff7d563e787f</anchor>
      <arglist>(const cXMLElement *ptr, const char *name, double def)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseBool</name>
      <anchorfile>_x_m_l_utils_8h.html</anchorfile>
      <anchor>a0aecae906308a8ede20f9b9050c139dc</anchor>
      <arglist>(const char *text)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>WHATSNEW</name>
    <title>What&apos;s New</title>
    <filename>whatsnew</filename>
  </compound>
  <compound kind="struct">
    <name>abort_chunk</name>
    <filename>structabort__chunk.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>structabort__chunk.html</anchorfile>
      <anchor>a200a7dd8961e04397da4af4a23f6bd99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>flags</name>
      <anchorfile>structabort__chunk.html</anchorfile>
      <anchor>a992b83b08e484d47b508e12fb6c38bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>structabort__chunk.html</anchorfile>
      <anchor>a4a2a7ecc1d918556fc24574ddecc0113</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>error_causes</name>
      <anchorfile>structabort__chunk.html</anchorfile>
      <anchor>a119d964d1b2997eb1f3db4ba38a94fce</anchor>
      <arglist>[0]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractQueue</name>
    <filename>class_abstract_queue.html</filename>
    <member kind="function">
      <type></type>
      <name>AbstractQueue</name>
      <anchorfile>class_abstract_queue.html</anchorfile>
      <anchor>a9021c481eb61e35c16aa6b3cd5e66123</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractQueue</name>
      <anchorfile>class_abstract_queue.html</anchorfile>
      <anchor>a946d470c6108184392729a8c82c97679</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_abstract_queue.html</anchorfile>
      <anchor>ab8c3f35bb3d85ca4c7706a79e6bcd384</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_abstract_queue.html</anchorfile>
      <anchor>a928058c86abf7813b7f9c613480d1a65</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>arrival</name>
      <anchorfile>class_abstract_queue.html</anchorfile>
      <anchor>a88f00baa496f742cd32012d26bd27591</anchor>
      <arglist>(cPacket *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual cPacket *</type>
      <name>arrivalWhenIdle</name>
      <anchorfile>class_abstract_queue.html</anchorfile>
      <anchor>af48e3dfda519333e9a5b3cd2ed71c073</anchor>
      <arglist>(cPacket *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual simtime_t</type>
      <name>startService</name>
      <anchorfile>class_abstract_queue.html</anchorfile>
      <anchor>ad70e97c327a93a2c31fba8da0fb5c63d</anchor>
      <arglist>(cPacket *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>endService</name>
      <anchorfile>class_abstract_queue.html</anchorfile>
      <anchor>ace92c02848b73e048465be50c82aeb01</anchor>
      <arglist>(cPacket *msg)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPacketQueue</type>
      <name>queue</name>
      <anchorfile>class_abstract_queue.html</anchorfile>
      <anchor>aec57a7fb0af43102a17433e2b7ddd339</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doStartService</name>
      <anchorfile>class_abstract_queue.html</anchorfile>
      <anchor>acb54eeb1b60070f5b3a38856dfa419d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doEndService</name>
      <anchorfile>class_abstract_queue.html</anchorfile>
      <anchor>a13862e686a34841e0328a94476b5a798</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cPacket *</type>
      <name>msgServiced</name>
      <anchorfile>class_abstract_queue.html</anchorfile>
      <anchor>a30de1cc52511a089e235005d7d976ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>endServiceMsg</name>
      <anchorfile>class_abstract_queue.html</anchorfile>
      <anchor>adef8da2dee32fef9a74044219341cc86</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractRadio</name>
    <filename>class_abstract_radio.html</filename>
    <base>ChannelAccess</base>
    <class kind="struct">AbstractRadio::SnrStruct</class>
    <member kind="function">
      <type></type>
      <name>AbstractRadio</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>a7438e8075f8a43bed2d5f2495993905c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractRadio</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>a2ae96666e302359b8441895f3dc8d716</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; AirFrame *, double &gt;</type>
      <name>RecvBuff</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>ab742103aa6adec5989a47fca51059026</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>ad646c42cb1ee4b8fa5d0bf555a6ef0fe</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>a618ff4c01fa836ccf906d7dee514c214</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>aa7800db11fac1c18457a7d5c57d81c3d</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>aee4b43805a3b94cbb1b65b698a80f3bf</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>a3035e4a5d365d6a5a9267329199fa3a6</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleCommand</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>a364d17ee4e46c541896622141607c0c0</anchor>
      <arglist>(int msgkind, cPolymorphic *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsgStart</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>ab99c16474f3d123d1597f5b67c985e7e</anchor>
      <arglist>(AirFrame *airframe)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsgEnd</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>a1f8cd41c9dc2c34f51e1c68b561c27cf</anchor>
      <arglist>(AirFrame *airframe)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>bufferMsg</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>a9a0a19c2ffd8a9f1a516c368a6e4b7b0</anchor>
      <arglist>(AirFrame *airframe)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AirFrame *</type>
      <name>unbufferMsg</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>a64e2958a548e3cf480f1afe215e1dea9</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendUp</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>a31ac7ea59c04d9614d6f61e72ab2e3b4</anchor>
      <arglist>(AirFrame *airframe)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDown</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>a871595ad4b30a0dc843899edce0c6897</anchor>
      <arglist>(AirFrame *airframe)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AirFrame *</type>
      <name>encapsulatePacket</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>aca7489dae305d0afeaa9d2beda764dc2</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setRadioState</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>a0d0a613aba5a78acd1b4eb8fdb31f112</anchor>
      <arglist>(RadioState::State newState)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>getChannelNumber</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>a5d08dc0ef0b75513e2a2c1a7ea8397fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addNewSnr</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>a98b9b9d5f0124b4c292b372aae123913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AirFrame *</type>
      <name>createAirFrame</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>a2d6020e8f7601cc7dbbe71500cab6c26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>changeChannel</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>adf9361bf91285886c54fbc917c8e3e89</anchor>
      <arglist>(int channel)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setBitrate</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>a2d2c984f3ad5621135b287615b2e4147</anchor>
      <arglist>(double bitrate)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual IReceptionModel *</type>
      <name>createReceptionModel</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>a6cf413915eeb3105a89acaf1d6e4e894</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual IRadioModel *</type>
      <name>createRadioModel</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>a59a22e03b4bd27c61e3f966e4185cd02</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IRadioModel *</type>
      <name>radioModel</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>a7e6436fc8bb1931f46c47ae7a7446d01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IReceptionModel *</type>
      <name>receptionModel</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>a2d472dafa39234e2d2ceb3c77ca20c4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>transmitterPower</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>a3b2cd111e9febcbced779a755c4a960a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SnrStruct</type>
      <name>snrInfo</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>ac43bfe80e1284106a494732f79de8cb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RecvBuff</type>
      <name>recvBuff</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>a4555680a6bf06aebbbed01a67c03b638</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RadioState</type>
      <name>rs</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>a12a4fe65c7da402fde1d86d87e685d58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>newChannel</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>a198f3ac6a1ab6a0f7252bebb4048ca47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>newBitrate</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>a7e23b50ae626be43197b6950a772537d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>noiseLevel</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>aeea450d539294f8e54917dd5bc279ff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>carrierFrequency</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>afd694d58688e028489f993597a9f44af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>thermalNoise</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>aeff3be287270fa5332e3bb4db3955cee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sensitivity</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>aff52d795ae9cc6d12075ad120848da44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>uppergateOut</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>ab4183b07dda8b3909b5e098990f1f420</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>uppergateIn</name>
      <anchorfile>class_abstract_radio.html</anchorfile>
      <anchor>ae9254113d76c6aeecfaf2483105ae824</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AbstractRadio::SnrStruct</name>
    <filename>struct_abstract_radio_1_1_snr_struct.html</filename>
    <member kind="variable">
      <type>AirFrame *</type>
      <name>ptr</name>
      <anchorfile>struct_abstract_radio_1_1_snr_struct.html</anchorfile>
      <anchor>a50829d26259d1bb7cbbff74179e8a800</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>rcvdPower</name>
      <anchorfile>struct_abstract_radio_1_1_snr_struct.html</anchorfile>
      <anchor>a4d916ac27467f3f7dd5ebec0689b4887</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SnrList</type>
      <name>sList</name>
      <anchorfile>struct_abstract_radio_1_1_snr_struct.html</anchorfile>
      <anchor>a69a0eeb12fe8bf0c96afb82c2a720077</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AirFrame</name>
    <filename>class_air_frame.html</filename>
    <member kind="function">
      <type></type>
      <name>AirFrame</name>
      <anchorfile>class_air_frame.html</anchorfile>
      <anchor>a2fd7658b827d9ea2872c3b9333b0d1ef</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AirFrame</name>
      <anchorfile>class_air_frame.html</anchorfile>
      <anchor>a20bda9256a558b05f7f37862356ec3c8</anchor>
      <arglist>(const AirFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AirFrame</name>
      <anchorfile>class_air_frame.html</anchorfile>
      <anchor>a28ad99af0ac72e59644073272cf5a1f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AirFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>class_air_frame.html</anchorfile>
      <anchor>a9e3ac36c11b8d88e5657f36f92fcef6b</anchor>
      <arglist>(const AirFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AirFrame *</type>
      <name>dup</name>
      <anchorfile>class_air_frame.html</anchorfile>
      <anchor>aee29f72e2445142e19cfb652f6d2f0ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_air_frame.html</anchorfile>
      <anchor>a86a4e3747cefe87cd549e32324eacf94</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_air_frame.html</anchorfile>
      <anchor>a5278e72d38e21788f828ce13d2f9ee14</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPSend</name>
      <anchorfile>class_air_frame.html</anchorfile>
      <anchor>a8b0e2eb1d14e0a5d9cab5c5a6f66c044</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPSend</name>
      <anchorfile>class_air_frame.html</anchorfile>
      <anchor>a9d278d987573a57dbd6654e83347d9de</anchor>
      <arglist>(double pSend_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getChannelNumber</name>
      <anchorfile>class_air_frame.html</anchorfile>
      <anchor>a8cabf7478ff3a18c0c535eee85afdd01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChannelNumber</name>
      <anchorfile>class_air_frame.html</anchorfile>
      <anchor>adb8af0755b960ae4c43e9852a1170c9c</anchor>
      <arglist>(int channelNumber_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getDuration</name>
      <anchorfile>class_air_frame.html</anchorfile>
      <anchor>a564aa81be93f77dfd92846f53d6c9f40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDuration</name>
      <anchorfile>class_air_frame.html</anchorfile>
      <anchor>a1fb0ced1ea85d343ef257da90d0552e8</anchor>
      <arglist>(simtime_t duration_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBitrate</name>
      <anchorfile>class_air_frame.html</anchorfile>
      <anchor>ade6ec20d4ff28dd42bbf137f564934a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBitrate</name>
      <anchorfile>class_air_frame.html</anchorfile>
      <anchor>a8bcfd0326205891113cd2c9aa2afbd2f</anchor>
      <arglist>(double bitrate_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord &amp;</type>
      <name>getSenderPos</name>
      <anchorfile>class_air_frame.html</anchorfile>
      <anchor>a6330e718269d5471a1beaeba7b505a60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Coord &amp;</type>
      <name>getSenderPos</name>
      <anchorfile>class_air_frame.html</anchorfile>
      <anchor>a381495e3322633124304de1fe5df23c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSenderPos</name>
      <anchorfile>class_air_frame.html</anchorfile>
      <anchor>a74542f549bb58fd36400b0313a63f364</anchor>
      <arglist>(const Coord &amp;senderPos_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_air_frame.html</anchorfile>
      <anchor>a9b5aec02d902ee100318893928cfa7b1</anchor>
      <arglist>(const AirFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>pSend_var</name>
      <anchorfile>class_air_frame.html</anchorfile>
      <anchor>a3942bf9abf79942af554dca0ac975050</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>channelNumber_var</name>
      <anchorfile>class_air_frame.html</anchorfile>
      <anchor>a5fee40662d02d1659ba0de20093b41da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>duration_var</name>
      <anchorfile>class_air_frame.html</anchorfile>
      <anchor>a16c25ef0b6498aeaf467a14a482ff160</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate_var</name>
      <anchorfile>class_air_frame.html</anchorfile>
      <anchor>aaeacc6811ec4937ba99b95dd413b7927</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::Coord</type>
      <name>senderPos_var</name>
      <anchorfile>class_air_frame.html</anchorfile>
      <anchor>ac72bf49ffa61a772fca14c883d176ee0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ANSimMobility</name>
    <filename>class_a_n_sim_mobility.html</filename>
    <base>LineSegmentsMobilityBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_a_n_sim_mobility.html</anchorfile>
      <anchor>ad93ced0c6aa653d8d4018f9ce95e61b1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchorfile>class_a_n_sim_mobility.html</anchorfile>
      <anchor>a297696a4c49833d685f3a79775079663</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>extractDataFrom</name>
      <anchorfile>class_a_n_sim_mobility.html</anchorfile>
      <anchor>a39577e65116b0ec8f05c118710b5445b</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>class_a_n_sim_mobility.html</anchorfile>
      <anchor>a63980e265c4bff8981b4c317386a60e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nodeId</name>
      <anchorfile>class_a_n_sim_mobility.html</anchorfile>
      <anchor>ae840aa686318c0ddafb17ac1e52c6021</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cXMLElement *</type>
      <name>nextPosChange</name>
      <anchorfile>class_a_n_sim_mobility.html</anchorfile>
      <anchor>acb9e3c0d4205bd3e3854a946c45c8cdd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ARP</name>
    <filename>class_a_r_p.html</filename>
    <class kind="struct">ARP::ARPCacheEntry</class>
    <member kind="typedef">
      <type>std::map&lt; IPAddress, ARPCacheEntry * &gt;</type>
      <name>ARPCache</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>a1743e83e60fcd1b655b45674c84aa632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; cMessage * &gt;</type>
      <name>MsgPtrVector</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>ae27a4597c212a8f6837039ce85d8653f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ARP</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>ad6269a6243141b8b2abee6f89f29d76a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ARP</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>aca6b074fd7f8370879f6d11ec3f3f827</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>a5071bf2c124d92df782267a3eb3611d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>a729b4d6391b1e2d3b4743f7918ab879e</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>a69c8708abbc87f92fb73f461bafae18b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processOutboundPacket</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>ad6458365e00f833f9a2145325e19843d</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendPacketToNIC</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>a25c895b799516c89d74f3f48a533366a</anchor>
      <arglist>(cMessage *msg, InterfaceEntry *ie, const MACAddress &amp;macAddress)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initiateARPResolution</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>afb8883b1120bb6f4ac30813649d739de</anchor>
      <arglist>(ARPCacheEntry *entry)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendARPRequest</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>affe53baeba58d8dd825d29101dd13381</anchor>
      <arglist>(InterfaceEntry *ie, IPAddress ipAddress)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>requestTimedOut</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>aa3340435405d27f330d2813acb3ae473</anchor>
      <arglist>(cMessage *selfmsg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>addressRecognized</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>a2d7ce12d375f9d13ebaa212889e887db</anchor>
      <arglist>(IPAddress destAddr, InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processARPPacket</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>a18fd3027c04e06eab2f201434a4ef6d6</anchor>
      <arglist>(ARPPacket *arp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateARPCache</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>a6d8b15097a3d45f15b886649ad95ac23</anchor>
      <arglist>(ARPCacheEntry *entry, const MACAddress &amp;macAddress)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>dumpARPPacket</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>ae9bbd334ff93beab6f657a2dafdc1dca</anchor>
      <arglist>(ARPPacket *arp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDisplayString</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>aa15536a8294f9cedcdc7e3951bd0c447</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>retryTimeout</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>af8acfc0671e9b49fdb9758ca0ee5bfc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>retryCount</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>ab3c12470dabeadd4ccef62cec1abd68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>cacheTimeout</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>afb5797aabe9d5753db94c32f3c72ebd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>doProxyARP</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>a5dcbbdd0ebda691a11e7700f767be861</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numResolutions</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>a02400692b64d721999809e9c91bd07ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numFailedResolutions</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>aefe4a5386cc690ff31427347c31beecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numRequestsSent</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>a76c6dc1129f43da4ca9f5f659e3b4e30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numRepliesSent</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>a290e24615b0ff5f7c612b79dd1f73379</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ARPCache</type>
      <name>arpCache</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>a59d39887e51925477192853a2a0e5421</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cQueue</type>
      <name>pendingQueue</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>a103eb6a9d5bfc22f869a36f0a2b87066</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nicOutBaseGateId</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>ac6de460de9c0953ebe248e5b221b6cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IInterfaceTable *</type>
      <name>ift</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>a667cacb2b5a0435f9a72f892aa1c74fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IRoutingTable *</type>
      <name>rt</name>
      <anchorfile>class_a_r_p.html</anchorfile>
      <anchor>acb769850ffc36f2c99c60e52bbaa354f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ARP::ARPCacheEntry</name>
    <filename>struct_a_r_p_1_1_a_r_p_cache_entry.html</filename>
    <member kind="variable">
      <type>InterfaceEntry *</type>
      <name>ie</name>
      <anchorfile>struct_a_r_p_1_1_a_r_p_cache_entry.html</anchorfile>
      <anchor>a393d8e4760b9d30b97c4d6d17f81ea7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>pending</name>
      <anchorfile>struct_a_r_p_1_1_a_r_p_cache_entry.html</anchorfile>
      <anchor>ad58ac79e5f013915f5e9195722a96367</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MACAddress</type>
      <name>macAddress</name>
      <anchorfile>struct_a_r_p_1_1_a_r_p_cache_entry.html</anchorfile>
      <anchor>a7e62c90ac52336b7b1efa2d682b79e33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>lastUpdate</name>
      <anchorfile>struct_a_r_p_1_1_a_r_p_cache_entry.html</anchorfile>
      <anchor>ab8d5fe6c88e922e5eb329b1055ec227e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numRetries</name>
      <anchorfile>struct_a_r_p_1_1_a_r_p_cache_entry.html</anchorfile>
      <anchor>a8d3f5f8051fb90f5953d256cd44d5c4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>timer</name>
      <anchorfile>struct_a_r_p_1_1_a_r_p_cache_entry.html</anchorfile>
      <anchor>a06cf7fd2760cc3da31cb05f09f0919cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MsgPtrVector</type>
      <name>pendingPackets</name>
      <anchorfile>struct_a_r_p_1_1_a_r_p_cache_entry.html</anchorfile>
      <anchor>a7d368683930c4b133c207013b96cd820</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ARPCache::iterator</type>
      <name>myIter</name>
      <anchorfile>struct_a_r_p_1_1_a_r_p_cache_entry.html</anchorfile>
      <anchor>a6e81dd59d531450f9339bb03ff4cd5a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ARPPacket</name>
    <filename>class_a_r_p_packet.html</filename>
    <member kind="function">
      <type></type>
      <name>ARPPacket</name>
      <anchorfile>class_a_r_p_packet.html</anchorfile>
      <anchor>a4ff6658b908c631dd8375e679b90f564</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ARPPacket</name>
      <anchorfile>class_a_r_p_packet.html</anchorfile>
      <anchor>a259ed61ac2bbfd138b2837d72868e738</anchor>
      <arglist>(const ARPPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ARPPacket</name>
      <anchorfile>class_a_r_p_packet.html</anchorfile>
      <anchor>a670512be1a9d5cf2adbc89f332c64ec0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ARPPacket &amp;</type>
      <name>operator=</name>
      <anchorfile>class_a_r_p_packet.html</anchorfile>
      <anchor>a7642b8fffaf956f2ba651097c838569c</anchor>
      <arglist>(const ARPPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ARPPacket *</type>
      <name>dup</name>
      <anchorfile>class_a_r_p_packet.html</anchorfile>
      <anchor>ad6e156d53934ba8e6bbb7dab8814face</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_a_r_p_packet.html</anchorfile>
      <anchor>a0947106dba6e929702e0fc5979cb5f06</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_a_r_p_packet.html</anchorfile>
      <anchor>a5abd8a8646424bdd301a204e2569a3b3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getOpcode</name>
      <anchorfile>class_a_r_p_packet.html</anchorfile>
      <anchor>ac4fd8dfc44b300c12335e227fc360ae2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOpcode</name>
      <anchorfile>class_a_r_p_packet.html</anchorfile>
      <anchor>aa69377d6c0ff028175eb0e37699a1460</anchor>
      <arglist>(int opcode_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getSrcMACAddress</name>
      <anchorfile>class_a_r_p_packet.html</anchorfile>
      <anchor>a00e51f3f258546540f033a9f07ea8532</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getSrcMACAddress</name>
      <anchorfile>class_a_r_p_packet.html</anchorfile>
      <anchor>a27d341b227c49b9e31af4558616700f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcMACAddress</name>
      <anchorfile>class_a_r_p_packet.html</anchorfile>
      <anchor>a7760ef9a6c14c947503991868ac4082c</anchor>
      <arglist>(const MACAddress &amp;srcMACAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getDestMACAddress</name>
      <anchorfile>class_a_r_p_packet.html</anchorfile>
      <anchor>ad62324430a0f1af369069c71184ea68d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getDestMACAddress</name>
      <anchorfile>class_a_r_p_packet.html</anchorfile>
      <anchor>a801d8fc359f0157ef22b5c149f975eb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestMACAddress</name>
      <anchorfile>class_a_r_p_packet.html</anchorfile>
      <anchor>a4c33980c58c7715bd95f5ca0af797872</anchor>
      <arglist>(const MACAddress &amp;destMACAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getSrcIPAddress</name>
      <anchorfile>class_a_r_p_packet.html</anchorfile>
      <anchor>aa5182becd45ebac8f8c7461a4f240638</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getSrcIPAddress</name>
      <anchorfile>class_a_r_p_packet.html</anchorfile>
      <anchor>a425b4905e6aae81c199f06e9fb080304</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcIPAddress</name>
      <anchorfile>class_a_r_p_packet.html</anchorfile>
      <anchor>a58fba5011a64beb426f7b90cca390ff3</anchor>
      <arglist>(const IPAddress &amp;srcIPAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getDestIPAddress</name>
      <anchorfile>class_a_r_p_packet.html</anchorfile>
      <anchor>a9a2dbbf5996b9894e60b7d96c0600456</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getDestIPAddress</name>
      <anchorfile>class_a_r_p_packet.html</anchorfile>
      <anchor>ace23a05881d3b4c7ba43d77b08c505d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestIPAddress</name>
      <anchorfile>class_a_r_p_packet.html</anchorfile>
      <anchor>adaa6bc16e6b343b3136cb155c1451d98</anchor>
      <arglist>(const IPAddress &amp;destIPAddress_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_a_r_p_packet.html</anchorfile>
      <anchor>ac53773504d2d4dc5ef28458891e93ea3</anchor>
      <arglist>(const ARPPacket &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>opcode_var</name>
      <anchorfile>class_a_r_p_packet.html</anchorfile>
      <anchor>af32a6be02af5da94a009ba84211f90ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::MACAddress</type>
      <name>srcMACAddress_var</name>
      <anchorfile>class_a_r_p_packet.html</anchorfile>
      <anchor>ad8b8f6b472fa94bce1708e2034aeb368</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::MACAddress</type>
      <name>destMACAddress_var</name>
      <anchorfile>class_a_r_p_packet.html</anchorfile>
      <anchor>a905e4d45c98d1e90035988a51dec48f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>srcIPAddress_var</name>
      <anchorfile>class_a_r_p_packet.html</anchorfile>
      <anchor>ad1f212d0b7159f13d6adcaf20b077102</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>destIPAddress_var</name>
      <anchorfile>class_a_r_p_packet.html</anchorfile>
      <anchor>a7ccf1da4ae2418274c7d465518c49b04</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasicDecider</name>
    <filename>class_basic_decider.html</filename>
    <base>BasicModule</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_basic_decider.html</anchorfile>
      <anchor>a533578bad02397c1818503f1d5beb736</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_basic_decider.html</anchorfile>
      <anchor>a87d0e47e1206820549b2482a89cb94ba</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_basic_decider.html</anchorfile>
      <anchor>afc8343b57259d8a628dbc36bc1f7491e</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>class_basic_decider.html</anchorfile>
      <anchor>a72b05862a5c56775a22b52eaa30eab90</anchor>
      <arglist>(AirFrame *, SnrList &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendUp</name>
      <anchorfile>class_basic_decider.html</anchorfile>
      <anchor>af138c784173f1f4099d25d59e1bde3e7</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>uppergateOut</name>
      <anchorfile>class_basic_decider.html</anchorfile>
      <anchor>a3ad2b2b9e0c8fce89f16e8aa0977d960</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowergateIn</name>
      <anchorfile>class_basic_decider.html</anchorfile>
      <anchor>aba71711e1e4f95ccab675702efc30f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numRcvd</name>
      <anchorfile>class_basic_decider.html</anchorfile>
      <anchor>ad15601b4c04c91f60d2731ec8d3a9dac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numSentUp</name>
      <anchorfile>class_basic_decider.html</anchorfile>
      <anchor>a2bfa79e32cc3f9b83e38ea36919adc42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasicDSCPClassifier</name>
    <filename>class_basic_d_s_c_p_classifier.html</filename>
    <base>IQoSClassifier</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumQueues</name>
      <anchorfile>class_basic_d_s_c_p_classifier.html</anchorfile>
      <anchor>ac2bc1e02f01e401636afedfc2a79826a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>classifyPacket</name>
      <anchorfile>class_basic_d_s_c_p_classifier.html</anchorfile>
      <anchor>a49cc84ba9fbe77fd8bb0825468f4c268</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>classifyByDSCP</name>
      <anchorfile>class_basic_d_s_c_p_classifier.html</anchorfile>
      <anchor>a7f36b832b639b6a964e290ee7ccf228b</anchor>
      <arglist>(int dscp)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasicMobility</name>
    <filename>class_basic_mobility.html</filename>
    <base>BasicModule</base>
    <member kind="enumeration">
      <name>BorderPolicy</name>
      <anchorfile>class_basic_mobility.html</anchorfile>
      <anchor>a3df467f3202a9895f325fe7b7618f2af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REFLECT</name>
      <anchorfile>class_basic_mobility.html</anchorfile>
      <anchor>a3df467f3202a9895f325fe7b7618f2afa1bb147021ed59276e0cc29b720b994f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WRAP</name>
      <anchorfile>class_basic_mobility.html</anchorfile>
      <anchor>a3df467f3202a9895f325fe7b7618f2afa4ff9718f050292a88422bfaae64fb780</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PLACERANDOMLY</name>
      <anchorfile>class_basic_mobility.html</anchorfile>
      <anchor>a3df467f3202a9895f325fe7b7618f2afa8a09ded1c2e3d1f4f2a838a7687c4593</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RAISEERROR</name>
      <anchorfile>class_basic_mobility.html</anchorfile>
      <anchor>a3df467f3202a9895f325fe7b7618f2afa2d96ee5c23ec7b69f54fdebaa595bd6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_basic_mobility.html</anchorfile>
      <anchor>afa763ec9a58c959f0e00ca255b9b6aa6</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_basic_mobility.html</anchorfile>
      <anchor>a6e424be0175ada88871a3b0ff0adeb0e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_basic_mobility.html</anchorfile>
      <anchor>a5eb17903be7a530e5d9ef76a42f832e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_basic_mobility.html</anchorfile>
      <anchor>a4441e2aad4569312460b6e2c195e0c49</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updatePosition</name>
      <anchorfile>class_basic_mobility.html</anchorfile>
      <anchor>aeca7c4a0105ebf716bcfb1bb285b5cf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>getPlaygroundSizeX</name>
      <anchorfile>class_basic_mobility.html</anchorfile>
      <anchor>ad9c4ae095c26f0e768e538f78309e6e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>getPlaygroundSizeY</name>
      <anchorfile>class_basic_mobility.html</anchorfile>
      <anchor>a8f613b9e5e62279f02f9c05e0d1adf8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getRandomPosition</name>
      <anchorfile>class_basic_mobility.html</anchorfile>
      <anchor>a6968aed9f3c0cf95df01f67fe1ca6118</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>reflectIfOutside</name>
      <anchorfile>class_basic_mobility.html</anchorfile>
      <anchor>a594a342b37a0f2d7a4e9c2cc26325778</anchor>
      <arglist>(Coord &amp;targetPos, Coord &amp;step, double &amp;angle)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>wrapIfOutside</name>
      <anchorfile>class_basic_mobility.html</anchorfile>
      <anchor>adff34549c60343393276d4e67ea038d1</anchor>
      <arglist>(Coord &amp;targetPos)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>placeRandomlyIfOutside</name>
      <anchorfile>class_basic_mobility.html</anchorfile>
      <anchor>a47c93ef6ec0c6411daac62cdfacd0919</anchor>
      <arglist>(Coord &amp;targetPos)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>raiseErrorIfOutside</name>
      <anchorfile>class_basic_mobility.html</anchorfile>
      <anchor>a5ce1e76419afff853c42921e942a4c94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleIfOutside</name>
      <anchorfile>class_basic_mobility.html</anchorfile>
      <anchor>abe55a2413e6d335fb5baeeadcadd975c</anchor>
      <arglist>(BorderPolicy policy, Coord &amp;targetPos, Coord &amp;step, double &amp;angle)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChannelControl *</type>
      <name>cc</name>
      <anchorfile>class_basic_mobility.html</anchorfile>
      <anchor>afde3b80bfcfe4c3ca01ad525618a1cbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChannelControl::HostRef</type>
      <name>myHostRef</name>
      <anchorfile>class_basic_mobility.html</anchorfile>
      <anchor>a3252cc2a805ee2837a93ee244f91cbee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cModule *</type>
      <name>hostPtr</name>
      <anchorfile>class_basic_mobility.html</anchorfile>
      <anchor>a8723d7a9725d2e370b584a4737d8dbb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>pos</name>
      <anchorfile>class_basic_mobility.html</anchorfile>
      <anchor>aaaa0e7080d07fb40a1e077c86b99f4ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasicModule</name>
    <filename>class_basic_module.html</filename>
    <base>INotifiable</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>findHost</name>
      <anchorfile>class_basic_module.html</anchorfile>
      <anchor>a8188a32c320b4632bdd2c0e7241d06f8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>getLogName</name>
      <anchorfile>class_basic_module.html</anchorfile>
      <anchor>ad3cb64be134cf17fedc75bd04b698a8e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_basic_module.html</anchorfile>
      <anchor>ae0497ccac7ad62630013847a8985dd4e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_basic_module.html</anchorfile>
      <anchor>a970d6ae46715ef49ca54b79efcf8df7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>logName</name>
      <anchorfile>class_basic_module.html</anchorfile>
      <anchor>a148b7c2d82dc4b7a551193a367591e04</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchorfile>class_basic_module.html</anchorfile>
      <anchor>a3392bc8a864498c79e2ea033f1f39009</anchor>
      <arglist>(int category, const cPolymorphic *details)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NotificationBoard *</type>
      <name>nb</name>
      <anchorfile>class_basic_module.html</anchorfile>
      <anchor>addff3486601f037d673200507e1fbf12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>class_basic_module.html</anchorfile>
      <anchor>a8236f7f9236aa45ff3921bb7918e8b16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>class_basic_module.html</anchorfile>
      <anchor>a6ad967ecb9d1507f3efea5a11f89eae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>loggingName</name>
      <anchorfile>class_basic_module.html</anchorfile>
      <anchor>a6b20f2c5f3846ce757517c5b37db501b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasicSnrEval</name>
    <filename>class_basic_snr_eval.html</filename>
    <base>ChannelAccess</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_basic_snr_eval.html</anchorfile>
      <anchor>a89445ede6f19960b30f74d17335ee30f</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_basic_snr_eval.html</anchorfile>
      <anchor>a63f8fd5fab971fe18a609c1053624dc1</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcDuration</name>
      <anchorfile>class_basic_snr_eval.html</anchorfile>
      <anchor>a3670766c937b99c04bdcd84663092c7c</anchor>
      <arglist>(cPacket *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>getChannelNumber</name>
      <anchorfile>class_basic_snr_eval.html</anchorfile>
      <anchor>a1865474b5fc30b052459a3cb2b9d35fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>class_basic_snr_eval.html</anchorfile>
      <anchor>a2eec34538f64365af3d19825140dacb8</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_basic_snr_eval.html</anchorfile>
      <anchor>a6056d3736b5f4440aa95067f1e03386c</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsgStart</name>
      <anchorfile>class_basic_snr_eval.html</anchorfile>
      <anchor>a58f6bd32dd024e3bf3bdeb84126f3bb9</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsgEnd</name>
      <anchorfile>class_basic_snr_eval.html</anchorfile>
      <anchor>aacd0c25177016c20be7e0b6090a7f191</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>bufferMsg</name>
      <anchorfile>class_basic_snr_eval.html</anchorfile>
      <anchor>a2b3c76b94adf5ef26526d4ac0c8db686</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AirFrame *</type>
      <name>unbufferMsg</name>
      <anchorfile>class_basic_snr_eval.html</anchorfile>
      <anchor>a2319ad5b97819e6a106980dd3cf67cf3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendUp</name>
      <anchorfile>class_basic_snr_eval.html</anchorfile>
      <anchor>a94a474e2deb6ce756900b1b64ba779df</anchor>
      <arglist>(AirFrame *, SnrList &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDown</name>
      <anchorfile>class_basic_snr_eval.html</anchorfile>
      <anchor>ab24fce7973732d213aa991c89de1cf97</anchor>
      <arglist>(AirFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AirFrame *</type>
      <name>encapsMsg</name>
      <anchorfile>class_basic_snr_eval.html</anchorfile>
      <anchor>ad8268ab8f023e50ca32dca40356fa933</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AirFrame *</type>
      <name>createCapsulePkt</name>
      <anchorfile>class_basic_snr_eval.html</anchorfile>
      <anchor>af1205d1afd8805d7f7a0ca16cd9f6e5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>class_basic_snr_eval.html</anchorfile>
      <anchor>a515b273855ffc377f579922d5eb68dfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength</name>
      <anchorfile>class_basic_snr_eval.html</anchorfile>
      <anchor>a25d3734b058a75c1a42b637db4b65902</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>transmitterPower</name>
      <anchorfile>class_basic_snr_eval.html</anchorfile>
      <anchor>adb9a71c73bd1cb87cc91a4708ecc289f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>uppergateOut</name>
      <anchorfile>class_basic_snr_eval.html</anchorfile>
      <anchor>a8651e49c751d8e8c488eadf25eba2047</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>uppergateIn</name>
      <anchorfile>class_basic_snr_eval.html</anchorfile>
      <anchor>a973b2265e5854d65b9ed5e8631b16aa3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Blackboard</name>
    <filename>class_blackboard.html</filename>
    <class kind="class">Blackboard::BBItem</class>
    <class kind="class">Blackboard::iterator</class>
    <member kind="typedef">
      <type>std::vector&lt; BlackboardAccess * &gt;</type>
      <name>SubscriberVector</name>
      <anchorfile>class_blackboard.html</anchorfile>
      <anchor>afcca5874bdc32029cb27de3a8c2c9896</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BBItem *</type>
      <name>BBItemRef</name>
      <anchorfile>class_blackboard.html</anchorfile>
      <anchor>a19ade3a7996ed60a05d70ff039aa4236</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Blackboard</name>
      <anchorfile>class_blackboard.html</anchorfile>
      <anchor>a83b8477e21df0582ed1b57527f4631af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Blackboard</name>
      <anchorfile>class_blackboard.html</anchorfile>
      <anchor>ad0c7a3c8f1d8074679b178631c262298</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BBItemRef</type>
      <name>publish</name>
      <anchorfile>class_blackboard.html</anchorfile>
      <anchor>a80a003f601b1906516e46e312ba5fe66</anchor>
      <arglist>(const char *label, cPolymorphic *item)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>withdraw</name>
      <anchorfile>class_blackboard.html</anchorfile>
      <anchor>ad9ea575d3f6de4c0ed797e5050f04271</anchor>
      <arglist>(BBItemRef bbItem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>changed</name>
      <anchorfile>class_blackboard.html</anchorfile>
      <anchor>ae081479b4a85d4eb9d863dbeb97d3612</anchor>
      <arglist>(BBItemRef bbItem, cPolymorphic *item=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BBItemRef</type>
      <name>subscribe</name>
      <anchorfile>class_blackboard.html</anchorfile>
      <anchor>a3476b12db241a8c8e297d22272bf7c18</anchor>
      <arglist>(BlackboardAccess *bbClient, const char *label)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BBItemRef</type>
      <name>find</name>
      <anchorfile>class_blackboard.html</anchorfile>
      <anchor>aa120491baa07536fb85326e42878f5e2</anchor>
      <arglist>(const char *label)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BBItemRef</type>
      <name>subscribe</name>
      <anchorfile>class_blackboard.html</anchorfile>
      <anchor>ab50ce0f0f1b97b268d6be7c1e23d86e6</anchor>
      <arglist>(BlackboardAccess *bbClient, BBItemRef bbItem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unsubscribe</name>
      <anchorfile>class_blackboard.html</anchorfile>
      <anchor>a83ae41a4d843dd302ae9763f9790e5c7</anchor>
      <arglist>(BlackboardAccess *bbClient, BBItemRef bbItem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>registerClient</name>
      <anchorfile>class_blackboard.html</anchorfile>
      <anchor>a8df76d28beac3e5ae68e60157687914b</anchor>
      <arglist>(BlackboardAccess *bbClient)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeClient</name>
      <anchorfile>class_blackboard.html</anchorfile>
      <anchor>a22f6532f3778e68afc07edad67f4fbf0</anchor>
      <arglist>(BlackboardAccess *bbClient)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBlackboardContent</name>
      <anchorfile>class_blackboard.html</anchorfile>
      <anchor>ab88b990f3902c2fa34dac6e76f94adca</anchor>
      <arglist>(BlackboardAccess *bbClient)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>class_blackboard.html</anchorfile>
      <anchor>a2c0820094ae4124a29b3693b8108fe03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>class_blackboard.html</anchorfile>
      <anchor>a89792300829e387ccfd719bd0276a0c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, BBItem * &gt;</type>
      <name>ContentsMap</name>
      <anchorfile>class_blackboard.html</anchorfile>
      <anchor>a428cddced037c11d65188ba48b808820</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_blackboard.html</anchorfile>
      <anchor>a14d34ec889dc4debb4fb4968fc2bbcc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_blackboard.html</anchorfile>
      <anchor>a663ac4a5877cbba804cf22b7e75c6b4a</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>class_blackboard.html</anchorfile>
      <anchor>a21366b51e0654dd9ff1b87727c93aaee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ContentsMap</type>
      <name>contents</name>
      <anchorfile>class_blackboard.html</anchorfile>
      <anchor>a39afcec7de357dcdf349ad94992d9e72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SubscriberVector</type>
      <name>registeredClients</name>
      <anchorfile>class_blackboard.html</anchorfile>
      <anchor>a5442b59653bb0eb50127aec2df33088a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Iterator</name>
      <anchorfile>class_blackboard.html</anchorfile>
      <anchor>a9830fc407400559db7e7783cc10a9394</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Blackboard::BBItem</name>
    <filename>class_blackboard_1_1_b_b_item.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>getLabel</name>
      <anchorfile>class_blackboard_1_1_b_b_item.html</anchorfile>
      <anchor>a47436b72e4d248a079faa6c528805f7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cPolymorphic *</type>
      <name>getData</name>
      <anchorfile>class_blackboard_1_1_b_b_item.html</anchorfile>
      <anchor>a595e7cef8027a533adc3854581a9b18f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const cPolymorphic *</type>
      <name>getData</name>
      <anchorfile>class_blackboard_1_1_b_b_item.html</anchorfile>
      <anchor>ae9c36dc85ba76910dd808278f7b4dba0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cPolymorphic *</type>
      <name>_item</name>
      <anchorfile>class_blackboard_1_1_b_b_item.html</anchorfile>
      <anchor>a083add42e2a2afc9ec3a0a7df6c02de1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>_label</name>
      <anchorfile>class_blackboard_1_1_b_b_item.html</anchorfile>
      <anchor>ad24f7068e41e0a8a44a0010fa8bd85fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SubscriberVector</type>
      <name>subscribers</name>
      <anchorfile>class_blackboard_1_1_b_b_item.html</anchorfile>
      <anchor>a81017ebef1ebe3a8136cdc5a3aa6c1aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Blackboard</name>
      <anchorfile>class_blackboard_1_1_b_b_item.html</anchorfile>
      <anchor>a351732f8d1a1ea40635c0c01a2bb655b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Blackboard::iterator</name>
    <filename>class_blackboard_1_1iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>iterator</name>
      <anchorfile>class_blackboard_1_1iterator.html</anchorfile>
      <anchor>a4769388d786b992c97fd97abe73ed657</anchor>
      <arglist>(ContentsMap::iterator it0)</arglist>
    </member>
    <member kind="function">
      <type>BBItemRef</type>
      <name>operator*</name>
      <anchorfile>class_blackboard_1_1iterator.html</anchorfile>
      <anchor>ac3b6234d78d15cc525c6974dfb11627a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>class_blackboard_1_1iterator.html</anchorfile>
      <anchor>a83054c357e2109e981bd1d248470266d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>operator++</name>
      <anchorfile>class_blackboard_1_1iterator.html</anchorfile>
      <anchor>a8db35c2fee2c220358a7d139f253ba49</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>iterator &amp;</type>
      <name>operator--</name>
      <anchorfile>class_blackboard_1_1iterator.html</anchorfile>
      <anchor>afe47d827b47d69179b62189e1f37f007</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>operator--</name>
      <anchorfile>class_blackboard_1_1iterator.html</anchorfile>
      <anchor>a5fd116d521e238e27570e7b5bdeceadf</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_blackboard_1_1iterator.html</anchorfile>
      <anchor>a1bf92ee54cdad1974118e5123c645a29</anchor>
      <arglist>(const iterator &amp;i2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>class_blackboard_1_1iterator.html</anchorfile>
      <anchor>afe19132c8ad528b97de2619fcf367dde</anchor>
      <arglist>(const iterator &amp;i2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ContentsMap::iterator</type>
      <name>it</name>
      <anchorfile>class_blackboard_1_1iterator.html</anchorfile>
      <anchor>a8bc8996aa16c2a702ad8a1811062a18c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BlackboardAccess</name>
    <filename>class_blackboard_access.html</filename>
    <member kind="function">
      <type></type>
      <name>BlackboardAccess</name>
      <anchorfile>class_blackboard_access.html</anchorfile>
      <anchor>a180c99fd431b775ec411d0e75270ae6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BlackboardAccess</name>
      <anchorfile>class_blackboard_access.html</anchorfile>
      <anchor>a89b71dc31f84818a0aa34594120d4ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Blackboard *</type>
      <name>getBlackboard</name>
      <anchorfile>class_blackboard_access.html</anchorfile>
      <anchor>a39faf8e13317b7ee50ebc2eaa85810e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>blackboardItemChanged</name>
      <anchorfile>class_blackboard_access.html</anchorfile>
      <anchor>ac5f9e78abdd973f6ae4e529e79eaaab6</anchor>
      <arglist>(BBItemRef item)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>blackboardItemPublished</name>
      <anchorfile>class_blackboard_access.html</anchorfile>
      <anchor>a7b2a5096152e4777797aa6af7ef41c8c</anchor>
      <arglist>(BBItemRef item)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>blackboardItemWithdrawn</name>
      <anchorfile>class_blackboard_access.html</anchorfile>
      <anchor>a1223e9d734d67a3714f3f8f3b70ee0c9</anchor>
      <arglist>(BBItemRef item)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Blackboard *</type>
      <name>bb</name>
      <anchorfile>class_blackboard_access.html</anchorfile>
      <anchor>a6a3540373d851f112a1b9ccc1cbdfdea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BonnMotionFile</name>
    <filename>class_bonn_motion_file.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>Line</name>
      <anchorfile>class_bonn_motion_file.html</anchorfile>
      <anchor>a8d0cd61f5b1284cbffd827c179d60ec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Line *</type>
      <name>getLine</name>
      <anchorfile>class_bonn_motion_file.html</anchorfile>
      <anchor>a53dd2337b7b1809751fca2a828a11665</anchor>
      <arglist>(int nodeId) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; Line &gt;</type>
      <name>LineList</name>
      <anchorfile>class_bonn_motion_file.html</anchorfile>
      <anchor>a07effbbc07901ec6bf284331f592a61c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LineList</type>
      <name>lines</name>
      <anchorfile>class_bonn_motion_file.html</anchorfile>
      <anchor>a64119f4470afc52e4d8ccb74d96e2023</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>BonnMotionFileCache</name>
      <anchorfile>class_bonn_motion_file.html</anchorfile>
      <anchor>ad131800aaf23bcc613f26a3ae6bde111</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BonnMotionFileCache</name>
    <filename>class_bonn_motion_file_cache.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual const BonnMotionFile *</type>
      <name>getFile</name>
      <anchorfile>class_bonn_motion_file_cache.html</anchorfile>
      <anchor>acd2a73b9199e01b31db26ec817604b8b</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BonnMotionFileCache *</type>
      <name>getInstance</name>
      <anchorfile>class_bonn_motion_file_cache.html</anchorfile>
      <anchor>a995dc4f97f699bb7a7361120f5cb46b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>deleteInstance</name>
      <anchorfile>class_bonn_motion_file_cache.html</anchorfile>
      <anchor>a8eda04da33078a95b2971e2c429969e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, BonnMotionFile &gt;</type>
      <name>BMFileMap</name>
      <anchorfile>class_bonn_motion_file_cache.html</anchorfile>
      <anchor>ac750dfb8bf1a24c281a65d3f8604fa69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>parseFile</name>
      <anchorfile>class_bonn_motion_file_cache.html</anchorfile>
      <anchor>a419bd9e8bbf1b82de00d37f69d289257</anchor>
      <arglist>(const char *filename, BonnMotionFile &amp;bmFile)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BonnMotionFileCache</name>
      <anchorfile>class_bonn_motion_file_cache.html</anchorfile>
      <anchor>a534f7affd51962e4dcb01281a8ee2b88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~BonnMotionFileCache</name>
      <anchorfile>class_bonn_motion_file_cache.html</anchorfile>
      <anchor>aa5e2662133eef4f16420fdd355eb0edf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BMFileMap</type>
      <name>cache</name>
      <anchorfile>class_bonn_motion_file_cache.html</anchorfile>
      <anchor>a97929fd681c1e9f2aa8d5269d47655fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static BonnMotionFileCache *</type>
      <name>inst</name>
      <anchorfile>class_bonn_motion_file_cache.html</anchorfile>
      <anchor>a5afb0e0b1382039314aee521db870412</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BonnMotionMobility</name>
    <filename>class_bonn_motion_mobility.html</filename>
    <base>LineSegmentsMobilityBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~BonnMotionMobility</name>
      <anchorfile>class_bonn_motion_mobility.html</anchorfile>
      <anchor>a890e8e118b618dfb90e16398d0aae8bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_bonn_motion_mobility.html</anchorfile>
      <anchor>ae509ee708096dfad9b02bafbf69a79ad</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchorfile>class_bonn_motion_mobility.html</anchorfile>
      <anchor>a329cf4ceedc6b5bebc1714889c4924e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>class_bonn_motion_mobility.html</anchorfile>
      <anchor>a8978680c719bf4c3e076b0b530053d81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BonnMotionFile::Line *</type>
      <name>vecp</name>
      <anchorfile>class_bonn_motion_mobility.html</anchorfile>
      <anchor>a91dd63c39abcbf7f2df9786b805acfe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>vecpos</name>
      <anchorfile>class_bonn_motion_mobility.html</anchorfile>
      <anchor>a4a8de25f627033565d3d5907eeb83693</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BPSKModulation</name>
    <filename>class_b_p_s_k_modulation.html</filename>
    <base>IModulation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>class_b_p_s_k_modulation.html</anchorfile>
      <anchor>a7fecd829ffeafb474dedc3ae157e0199</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>calculateBER</name>
      <anchorfile>class_b_p_s_k_modulation.html</anchorfile>
      <anchor>a3c0ecbc89989fa44a8969991e8690de9</anchor>
      <arglist>(double snir, double bandwidth, double bitrate)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ByteArrayMessage</name>
    <filename>class_byte_array_message.html</filename>
    <base>ByteArrayMessage_Base</base>
    <member kind="function">
      <type></type>
      <name>ByteArrayMessage</name>
      <anchorfile>class_byte_array_message.html</anchorfile>
      <anchor>a2deacac8b76e80aa79bb71137a5ac044</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ByteArrayMessage</name>
      <anchorfile>class_byte_array_message.html</anchorfile>
      <anchor>ad261351c4adc1b4a3fb1011a04d5485d</anchor>
      <arglist>(const ByteArrayMessage &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ByteArrayMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>class_byte_array_message.html</anchorfile>
      <anchor>ac88be7e275dd13fe9aa480ee323bc055</anchor>
      <arglist>(const ByteArrayMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayMessage *</type>
      <name>dup</name>
      <anchorfile>class_byte_array_message.html</anchorfile>
      <anchor>a35d6737a1f520692861cedac303ff718</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDataFromBuffer</name>
      <anchorfile>class_byte_array_message.html</anchorfile>
      <anchor>a352c60672a45cfb44ecbc82dd49016a7</anchor>
      <arglist>(const void *ptr, int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataToBuffer</name>
      <anchorfile>class_byte_array_message.html</anchorfile>
      <anchor>ac5609f18674ca52bb641ad8e57e0fef7</anchor>
      <arglist>(void *ptr, int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removePrefix</name>
      <anchorfile>class_byte_array_message.html</anchorfile>
      <anchor>ad4132c8516b662a2ecd70ff2190620f5</anchor>
      <arglist>(int length)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ByteArrayMessage_Base</name>
    <filename>class_byte_array_message___base.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ByteArrayMessage_Base</name>
      <anchorfile>class_byte_array_message___base.html</anchorfile>
      <anchor>af0c6d17662ce0c6eee35710535f5496b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayMessage_Base *</type>
      <name>dup</name>
      <anchorfile>class_byte_array_message___base.html</anchorfile>
      <anchor>a4542827d2f56e22ad4468e86bac9aa64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_byte_array_message___base.html</anchorfile>
      <anchor>a9df6b985ba1e7cf32c3d8b754476f530</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_byte_array_message___base.html</anchorfile>
      <anchor>a51dbe5b35dbe343a573487b6385e7973</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDataArraySize</name>
      <anchorfile>class_byte_array_message___base.html</anchorfile>
      <anchor>abd31426cbe37a7ece8f19563c2fe3df8</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getDataArraySize</name>
      <anchorfile>class_byte_array_message___base.html</anchorfile>
      <anchor>a4dab738a6c9b0d3d71acc3db553597df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getData</name>
      <anchorfile>class_byte_array_message___base.html</anchorfile>
      <anchor>ad5e0d95d337f2b7f88c04d00be61956f</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setData</name>
      <anchorfile>class_byte_array_message___base.html</anchorfile>
      <anchor>a92847ae2e0f42b475df323355f08288e</anchor>
      <arglist>(unsigned int k, char data_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_byte_array_message___base.html</anchorfile>
      <anchor>afe7ef341d900336eb254a3a7e1c3aa08</anchor>
      <arglist>(const ByteArrayMessage_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ByteArrayMessage_Base</name>
      <anchorfile>class_byte_array_message___base.html</anchorfile>
      <anchor>a0459ea5122fd1aeddff3a995def7800d</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ByteArrayMessage_Base</name>
      <anchorfile>class_byte_array_message___base.html</anchorfile>
      <anchor>aca7c31dce262b97422e58678b8aa3dcd</anchor>
      <arglist>(const ByteArrayMessage_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ByteArrayMessage_Base &amp;</type>
      <name>operator=</name>
      <anchorfile>class_byte_array_message___base.html</anchorfile>
      <anchor>a0ace440e4224cc3be06a0820162844cc</anchor>
      <arglist>(const ByteArrayMessage_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>data_var</name>
      <anchorfile>class_byte_array_message___base.html</anchorfile>
      <anchor>a61791e2007ea40c822bbd11a53e6d3c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>data_arraysize</name>
      <anchorfile>class_byte_array_message___base.html</anchorfile>
      <anchor>a32a79634dcb8e55fced92233f5b21c37</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelAccess</name>
    <filename>class_channel_access.html</filename>
    <base>BasicModule</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToChannel</name>
      <anchorfile>class_channel_access.html</anchorfile>
      <anchor>a562995b3d9c5b279ed8a55c5221dd7b7</anchor>
      <arglist>(AirFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Coord &amp;</type>
      <name>getMyPosition</name>
      <anchorfile>class_channel_access.html</anchorfile>
      <anchor>a9e51969a624ff64101cf808514d50d4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_channel_access.html</anchorfile>
      <anchor>af4c4d6652f6e3d4846cb3d2e826f4bed</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_channel_access.html</anchorfile>
      <anchor>aa371b9090b1ab4d731c2ad5d24c00f4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChannelControl *</type>
      <name>cc</name>
      <anchorfile>class_channel_access.html</anchorfile>
      <anchor>a0f42b731ff69be4b1193929356e75aff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChannelControl::HostRef</type>
      <name>myHostRef</name>
      <anchorfile>class_channel_access.html</anchorfile>
      <anchor>aff3d33ee8db5a945fff05fe4305ccf2e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelControl</name>
    <filename>class_channel_control.html</filename>
    <class kind="struct">ChannelControl::HostEntry</class>
    <member kind="typedef">
      <type>HostEntry *</type>
      <name>HostRef</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>ac8ae1ed4e75e8037a4aaa2c4e2e3623f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; HostRef &gt;</type>
      <name>HostRefVector</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>a12010da20487a440452a561f5d36aa66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; AirFrame * &gt;</type>
      <name>TransmissionList</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>a3d946c87c47729fdd4ad4ae9a17b406f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChannelControl</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>a36ebd2cac1b9ef331cf59e76ae4af80d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ChannelControl</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>ae6cb727085869ce973bf42a313f4676b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HostRef</type>
      <name>registerHost</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>a36d2e2b03274866f6df8a703e7b7eedf</anchor>
      <arglist>(cModule *host, const Coord &amp;initialPos, cGate *radioInGate=NULL)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getHost</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>a30555a57698e4815c4668266119e53e9</anchor>
      <arglist>(HostRef h) const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getRadioGate</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>a3c0b7dc6959ea197304126db59f630b6</anchor>
      <arglist>(HostRef h) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHostChannel</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>a9fd793c1a09f02bb7426382d4f5d5515</anchor>
      <arglist>(HostRef h) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HostRef</type>
      <name>lookupHost</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>ab4684fa0b1eac2a58e10fa8b88b90636</anchor>
      <arglist>(cModule *host)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateHostPosition</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>a2157ef7fa9bbed598308708bfc947c8f</anchor>
      <arglist>(HostRef h, const Coord &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateHostChannel</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>a04bbb08c92d001b804c06ba42d8e43ea</anchor>
      <arglist>(HostRef h, const int channel)</arglist>
    </member>
    <member kind="function">
      <type>const TransmissionList &amp;</type>
      <name>getOngoingTransmissions</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>a29b60c6b3cdaa3c63a9c48e83beb9f9e</anchor>
      <arglist>(const int channel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addOngoingTransmission</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>ab2174e367222ca81c4506110746b2dc6</anchor>
      <arglist>(HostRef h, AirFrame *frame)</arglist>
    </member>
    <member kind="function">
      <type>const Coord &amp;</type>
      <name>getHostPosition</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>a38a14f5c2513e87e8bcce1bb38dad71d</anchor>
      <arglist>(HostRef h)</arglist>
    </member>
    <member kind="function">
      <type>const HostRefVector &amp;</type>
      <name>getNeighbors</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>aead1beaa6ed884053b4b50398e9438b1</anchor>
      <arglist>(HostRef h)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToChannel</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>a25429ad8b7385979a4024d4d375fc6c4</anchor>
      <arglist>(cSimpleModule *srcRadioMod, HostRef srcHost, AirFrame *airFrame)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCommunicationRange</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>adf3ed61f767c94b35bfd5d5246e46717</anchor>
      <arglist>(HostRef h)</arglist>
    </member>
    <member kind="function">
      <type>const Coord *</type>
      <name>getPgs</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>a90fbbbcff9e0ed645a4953c0b11d5b1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const int</type>
      <name>getNumChannels</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>ac3a565b50d10c70e4fe2e7a0442aa086</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ChannelControl *</type>
      <name>get</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>a7795c55b6091bedac1ddfec4265d8926</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; HostEntry &gt;</type>
      <name>HostList</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>a18036f901bf2416cd6129803ac5712ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; TransmissionList &gt;</type>
      <name>ChannelTransmissionLists</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>a0602750a52a59a66d23a91b3ad01d47a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateConnections</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>af7d5804dc8bac5f33d56c04d26852a87</anchor>
      <arglist>(HostRef h)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcInterfDist</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>a231e0f639ec1ac693b7e57bfbcfe96d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDisplayString</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>a0e4704ab30c34aa61cc9b25a7255fd11</anchor>
      <arglist>(cModule *playgroundMod)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>a6c8db6065ba46257fde48b1fb381195a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>purgeOngoingTransmissions</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>ad53d16e71355d90e7bbdd3c375a80eb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>checkChannel</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>afa904d18027cae27cdc9b0434719b655</anchor>
      <arglist>(const int channel)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HostList</type>
      <name>hosts</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>a1c5107943931b536fec0d0e9dd04748c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChannelTransmissionLists</type>
      <name>transmissions</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>aabf82a52f85c0fe5b6ec4380896b0b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastOngoingTransmissionsUpdate</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>ad526016dbaf33742f1b4852498f346e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>a90d58e99955061196cc0e9d0f695ba2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>playgroundSize</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>a7d7016518ca0a2a713d6ef25c6205de0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxInterferenceDistance</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>a978c044372ea40e217285bb999903272</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numChannels</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>a7247e91033b4eb3a2beab0cdec5963f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>a0e5017e85cec12a23e33288d3ca570b0</anchor>
      <arglist>(std::ostream &amp;, const HostEntry &amp;)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_channel_control.html</anchorfile>
      <anchor>aa145bc19859e798f44e53dcdeb3e4bf0</anchor>
      <arglist>(std::ostream &amp;, const TransmissionList &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ChannelControl::HostEntry</name>
    <filename>struct_channel_control_1_1_host_entry.html</filename>
    <member kind="variable">
      <type>cModule *</type>
      <name>host</name>
      <anchorfile>struct_channel_control_1_1_host_entry.html</anchorfile>
      <anchor>a969095ecdadd716a3a395e59caf95047</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cGate *</type>
      <name>radioInGate</name>
      <anchorfile>struct_channel_control_1_1_host_entry.html</anchorfile>
      <anchor>a337ada63fc12e69bf6eeff91197ffb1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>channel</name>
      <anchorfile>struct_channel_control_1_1_host_entry.html</anchorfile>
      <anchor>ab2f254c0183fa991582ceb35740e67b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Coord</type>
      <name>pos</name>
      <anchorfile>struct_channel_control_1_1_host_entry.html</anchorfile>
      <anchor>a3e6df3511ce1af969e4dc2254f7f4c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; HostRef &gt;</type>
      <name>neighbors</name>
      <anchorfile>struct_channel_control_1_1_host_entry.html</anchorfile>
      <anchor>a6b6709dfcdf2a172020258e39192590a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isNeighborListValid</name>
      <anchorfile>struct_channel_control_1_1_host_entry.html</anchorfile>
      <anchor>accfa3f229f7187751785bf1bed53342d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HostRefVector</type>
      <name>neighborList</name>
      <anchorfile>struct_channel_control_1_1_host_entry.html</anchorfile>
      <anchor>a490ed34535d1635077f2ba807b9f7fa3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelInstaller</name>
    <filename>class_channel_installer.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_channel_installer.html</anchorfile>
      <anchor>ac2bda2e9b8abc552cd9cfa380b979efb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_channel_installer.html</anchorfile>
      <anchor>ae887da5f2042a6492fb81493a53ab6c5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cChannel *</type>
      <name>createReplacementChannelFor</name>
      <anchorfile>class_channel_installer.html</anchorfile>
      <anchor>a6913ef7d7e08c0882a7959075f931b6d</anchor>
      <arglist>(cChannel *channel)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>chunk</name>
    <filename>structchunk.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>structchunk.html</anchorfile>
      <anchor>ac0aaab9ed798716a67a04b5ceb1710c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>flags</name>
      <anchorfile>structchunk.html</anchorfile>
      <anchor>a773866bc9d2e26e4c92ee1d6e2b12e08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>structchunk.html</anchorfile>
      <anchor>a5072686a22940707af6e24f58da4464d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CircleMobility</name>
    <filename>class_circle_mobility.html</filename>
    <base>BasicMobility</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_circle_mobility.html</anchorfile>
      <anchor>a5da791fc2eee9520ae16cd66e3bf3b10</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_circle_mobility.html</anchorfile>
      <anchor>a2d0dddc8b5ea4d901d3485bfa48e0c11</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>class_circle_mobility.html</anchorfile>
      <anchor>aaf63e4200e8f9b401b527b8e73717b03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>cx</name>
      <anchorfile>class_circle_mobility.html</anchorfile>
      <anchor>aac5a0778c988092ab75bf9db0b1b150c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>cy</name>
      <anchorfile>class_circle_mobility.html</anchorfile>
      <anchor>a192968e4e0d9931e7897603eb1e9cca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>r</name>
      <anchorfile>class_circle_mobility.html</anchorfile>
      <anchor>a5508772822b819e94fe73c289bf15f93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>omega</name>
      <anchorfile>class_circle_mobility.html</anchorfile>
      <anchor>a9e64ba0defa6892982103bcb98ded29d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>updateInterval</name>
      <anchorfile>class_circle_mobility.html</anchorfile>
      <anchor>a94fb334d3d9577e24b0bf6e1082383f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>stationary</name>
      <anchorfile>class_circle_mobility.html</anchorfile>
      <anchor>ad575cb7d888fb361f8cabb22fda6ff76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>angle</name>
      <anchorfile>class_circle_mobility.html</anchorfile>
      <anchor>a039e90d57dabbf0a5d52ac1be126cc81</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>common_header</name>
    <filename>structcommon__header.html</filename>
    <member kind="variable">
      <type>unsigned short</type>
      <name>source_port</name>
      <anchorfile>structcommon__header.html</anchorfile>
      <anchor>a2cf321172fbf667bbe289b8a2652deb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>destination_port</name>
      <anchorfile>structcommon__header.html</anchorfile>
      <anchor>a8d96baea3a0e65d927f256f39cb11be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>verification_tag</name>
      <anchorfile>structcommon__header.html</anchorfile>
      <anchor>a9a708b1085d5581534de25205ed824fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>checksum</name>
      <anchorfile>structcommon__header.html</anchorfile>
      <anchor>aa26277b84373f48bbeca774cfb91bd6e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstSpeedMobility</name>
    <filename>class_const_speed_mobility.html</filename>
    <base>BasicMobility</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_const_speed_mobility.html</anchorfile>
      <anchor>a3fbcc5d086c9dfb8c3ac6d80ccbb9625</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_const_speed_mobility.html</anchorfile>
      <anchor>af6e485c840b0ec8f0f3a2a925e177e6b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchorfile>class_const_speed_mobility.html</anchorfile>
      <anchor>ae1e2838d4bae6d0821054a5e6c2abb4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>class_const_speed_mobility.html</anchorfile>
      <anchor>a9162fa1437cf6599ca371aef33edad0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>vHost</name>
      <anchorfile>class_const_speed_mobility.html</anchorfile>
      <anchor>aaf81c558c4b1774cc167b211052604ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>updateInterval</name>
      <anchorfile>class_const_speed_mobility.html</anchorfile>
      <anchor>ab5cfb1be4445cfc95ff47222221291bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>stationary</name>
      <anchorfile>class_const_speed_mobility.html</anchorfile>
      <anchor>ab35182d4c6b7493c8c5032c7212c164c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>targetPos</name>
      <anchorfile>class_const_speed_mobility.html</anchorfile>
      <anchor>af59b8e8b1693f2f8e81d015f96be790e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>stepSize</name>
      <anchorfile>class_const_speed_mobility.html</anchorfile>
      <anchor>ac5b6bb8b47caff5f6d946d6db14bbc0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numSteps</name>
      <anchorfile>class_const_speed_mobility.html</anchorfile>
      <anchor>acba4123279b0c3ee840dcc02b20ed785</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>step</name>
      <anchorfile>class_const_speed_mobility.html</anchorfile>
      <anchor>ae69b84a8287a321ebaed05d92b9811f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ControlManetRouting</name>
    <filename>class_control_manet_routing.html</filename>
    <member kind="function">
      <type></type>
      <name>ControlManetRouting</name>
      <anchorfile>class_control_manet_routing.html</anchorfile>
      <anchor>abb7dd7c9532f2cd87f6261c40bad433d</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ControlManetRouting</name>
      <anchorfile>class_control_manet_routing.html</anchorfile>
      <anchor>ab8f60e303fcd15a194bd983421706cfa</anchor>
      <arglist>(const ControlManetRouting &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ControlManetRouting</name>
      <anchorfile>class_control_manet_routing.html</anchorfile>
      <anchor>a675ac39face01d66a7e4edafa3703fc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ControlManetRouting &amp;</type>
      <name>operator=</name>
      <anchorfile>class_control_manet_routing.html</anchorfile>
      <anchor>a708dadafbee570417f141484113734c1</anchor>
      <arglist>(const ControlManetRouting &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ControlManetRouting *</type>
      <name>dup</name>
      <anchorfile>class_control_manet_routing.html</anchorfile>
      <anchor>a9bb00de883f1e1fbd5f05260a50b0a3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_control_manet_routing.html</anchorfile>
      <anchor>aa60a378d92eaefc3c7ea6359c9eac7ee</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_control_manet_routing.html</anchorfile>
      <anchor>a47c2ecf22c9fb3ddeec36169e5d18c89</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getSrcAddress</name>
      <anchorfile>class_control_manet_routing.html</anchorfile>
      <anchor>a6b56e3d29a3dc7d808bb28f1936bbbb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getSrcAddress</name>
      <anchorfile>class_control_manet_routing.html</anchorfile>
      <anchor>ab05428413dd2fb5cf5cb83ecb34db5d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcAddress</name>
      <anchorfile>class_control_manet_routing.html</anchorfile>
      <anchor>a0e683da3ac51aa72e7cdc58a51d6cfe5</anchor>
      <arglist>(const IPAddress &amp;srcAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getDestAddress</name>
      <anchorfile>class_control_manet_routing.html</anchorfile>
      <anchor>adf740225dc68d1f21fe5873befdbfed0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getDestAddress</name>
      <anchorfile>class_control_manet_routing.html</anchorfile>
      <anchor>a7cf04d99d89c35305b563a8904e89631</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestAddress</name>
      <anchorfile>class_control_manet_routing.html</anchorfile>
      <anchor>acae1fa94a83f219353128643ab973bc3</anchor>
      <arglist>(const IPAddress &amp;destAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getOptionCode</name>
      <anchorfile>class_control_manet_routing.html</anchorfile>
      <anchor>aa983539bc5a0bb4d92d36fb80a80a422</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOptionCode</name>
      <anchorfile>class_control_manet_routing.html</anchorfile>
      <anchor>abdecb594c6038d7cc0ca8c5812d1f448</anchor>
      <arglist>(int optionCode_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_control_manet_routing.html</anchorfile>
      <anchor>afee1e545ea85ab5c2acf5a283ba29302</anchor>
      <arglist>(const ControlManetRouting &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>srcAddress_var</name>
      <anchorfile>class_control_manet_routing.html</anchorfile>
      <anchor>ad0b38d48c9ccf168f41050aa6e762cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>destAddress_var</name>
      <anchorfile>class_control_manet_routing.html</anchorfile>
      <anchor>ab9ab9446492c5cee68a28bddbef2d0d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>optionCode_var</name>
      <anchorfile>class_control_manet_routing.html</anchorfile>
      <anchor>a8d7fb0336e1bfe0b0c104152f600d19e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cookie_ack_chunk</name>
    <filename>structcookie__ack__chunk.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>structcookie__ack__chunk.html</anchorfile>
      <anchor>a87b115bc1de262d4076df65d2f196876</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>flags</name>
      <anchorfile>structcookie__ack__chunk.html</anchorfile>
      <anchor>a181886a0bc2f09032dfc3a072bda4099</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>structcookie__ack__chunk.html</anchorfile>
      <anchor>a02fa73d9d24a536683cdb05da8129eee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cookie_echo_chunk</name>
    <filename>structcookie__echo__chunk.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>structcookie__echo__chunk.html</anchorfile>
      <anchor>a40184fdb3b99a32d4332cc578863a6a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>flags</name>
      <anchorfile>structcookie__echo__chunk.html</anchorfile>
      <anchor>adab8e87290ad40866501a2578eb1e031</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>structcookie__echo__chunk.html</anchorfile>
      <anchor>a466b046e8549fb8a02b244d0e7cc6a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>state_cookie</name>
      <anchorfile>structcookie__echo__chunk.html</anchorfile>
      <anchor>a25ec8a0b8120f9f52372a1eb10d3eccc</anchor>
      <arglist>[0]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cookie_parameter</name>
    <filename>structcookie__parameter.html</filename>
    <member kind="variable">
      <type>unsigned int</type>
      <name>creationTime</name>
      <anchorfile>structcookie__parameter.html</anchorfile>
      <anchor>a5fa4a15acf568cf5b25d8627988fc927</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>localTag</name>
      <anchorfile>structcookie__parameter.html</anchorfile>
      <anchor>aa3115732125b8148ca5e04f41607adef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>peerTag</name>
      <anchorfile>structcookie__parameter.html</anchorfile>
      <anchor>af2803d8053574960b04513be904cc1fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>localTieTag</name>
      <anchorfile>structcookie__parameter.html</anchorfile>
      <anchor>adc005a2e6fc47920bc672adc90f4e6c4</anchor>
      <arglist>[32]</arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>peerTieTag</name>
      <anchorfile>structcookie__parameter.html</anchorfile>
      <anchor>af52831d23b3c84000d0f8602dd7c8a52</anchor>
      <arglist>[32]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Coord</name>
    <filename>class_coord.html</filename>
    <member kind="function">
      <type></type>
      <name>Coord</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>aae2e39161c063b969ab0a520fe5468dd</anchor>
      <arglist>(double _x=0, double _y=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Coord</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a641096179019c04796d941726d3bb890</anchor>
      <arglist>(const Coord &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Coord</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a0a27319979fe90f4c16d71d0ddc1f3b8</anchor>
      <arglist>(const Coord *pos)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a86994bfa7096155d951abb03dcf30bf1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Coord &amp;</type>
      <name>operator+=</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a9cc5188e403a62bd1a923510eacc5222</anchor>
      <arglist>(const Coord &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const Coord &amp;</type>
      <name>operator=</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>adc7447eb8214a1d14af868d226f47e55</anchor>
      <arglist>(const Coord &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const Coord &amp;</type>
      <name>operator-=</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>ae0a8ce8906cc928ffccae52c9b5e8c6e</anchor>
      <arglist>(const Coord &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>ab6a7bfcc5c55e5d8edbc7c0cb5a11626</anchor>
      <arglist>(const Coord &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sqrdist</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a9245e5acb794d95128e191e6faef99d4</anchor>
      <arglist>(const Coord &amp;a) const </arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a0172a22ee75843a96e3a84ebc25f3de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>af6e543e0522076e717bae53102655b87</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator+</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a4eb976e0a2def05ecb6464bd170b5fa9</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator-</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a0a956e1210813652ce2caa7529b3e0be</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator*</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a432afd497adcff7b20ca23af611ec919</anchor>
      <arglist>(const Coord &amp;a, double f)</arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator/</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a310db4e85a0b20ec14725f49aae08cc3</anchor>
      <arglist>(const Coord &amp;a, double f)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a2dc488cbfa8e8256dfc22b4916b9ef9b</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a321e8d56735047b9e49f869fd8f23d3e</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CSMAMacLayer</name>
    <filename>class_c_s_m_a_mac_layer.html</filename>
    <base>WirelessMacBase</base>
    <base>INotifiable</base>
    <member kind="function">
      <type></type>
      <name>CSMAMacLayer</name>
      <anchorfile>class_c_s_m_a_mac_layer.html</anchorfile>
      <anchor>a52ea80af0023e1d7002d4bdbc6ae39cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CSMAMacLayer</name>
      <anchorfile>class_c_s_m_a_mac_layer.html</anchorfile>
      <anchor>a670e9734cd2d4300fb9dd23f1873409f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_c_s_m_a_mac_layer.html</anchorfile>
      <anchor>af0b2c470ab7f10fe061cf2daf9907e39</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>registerInterface</name>
      <anchorfile>class_c_s_m_a_mac_layer.html</anchorfile>
      <anchor>ade403acd57e58a03f974b7f48a32d734</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_c_s_m_a_mac_layer.html</anchorfile>
      <anchor>aeaffa0655b4e87224a9a2f09b96805d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>class_c_s_m_a_mac_layer.html</anchorfile>
      <anchor>a131f9fa39f15a2e1a995a5581ba05fb1</anchor>
      <arglist>(cPacket *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleCommand</name>
      <anchorfile>class_c_s_m_a_mac_layer.html</anchorfile>
      <anchor>ad4e68633095418d62399d0eaa8a4b0ce</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>class_c_s_m_a_mac_layer.html</anchorfile>
      <anchor>a6df436f9290586658dc48738d7cd2160</anchor>
      <arglist>(cPacket *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_c_s_m_a_mac_layer.html</anchorfile>
      <anchor>a254a29c1cc1f0292039d57c1d189cda3</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MacPkt *</type>
      <name>encapsMsg</name>
      <anchorfile>class_c_s_m_a_mac_layer.html</anchorfile>
      <anchor>adf48e62e08023a725d932f6fb6d59d28</anchor>
      <arglist>(cPacket *netw)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchorfile>class_c_s_m_a_mac_layer.html</anchorfile>
      <anchor>a086c3e39266c68e144bd6443797a4051</anchor>
      <arglist>(int category, const cPolymorphic *details)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>myMacAddr</name>
      <anchorfile>class_c_s_m_a_mac_layer.html</anchorfile>
      <anchor>afdf97d7f96e7f3af317915cb8c67fb46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RadioState::State</type>
      <name>radioState</name>
      <anchorfile>class_c_s_m_a_mac_layer.html</anchorfile>
      <anchor>a8cef547042b1676d1ddce0dea22f0191</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cQueue</type>
      <name>macQueue</name>
      <anchorfile>class_c_s_m_a_mac_layer.html</anchorfile>
      <anchor>a7520d042d75476c466a6c22b2f39677a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>queueLength</name>
      <anchorfile>class_c_s_m_a_mac_layer.html</anchorfile>
      <anchor>a592653908837e5acbe36dfe7f20efbdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>timer</name>
      <anchorfile>class_c_s_m_a_mac_layer.html</anchorfile>
      <anchor>a4aa3b46aa38d83fd86f2ef499caa48bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>sendTime</name>
      <anchorfile>class_c_s_m_a_mac_layer.html</anchorfile>
      <anchor>ab7ea060c217bbfb8a06bc39c1dfeaa9f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cSocketRTScheduler</name>
    <filename>classc_socket_r_t_scheduler.html</filename>
    <member kind="function">
      <type></type>
      <name>cSocketRTScheduler</name>
      <anchorfile>classc_socket_r_t_scheduler.html</anchorfile>
      <anchor>a23e3959de965c0ca647d893d63f651fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cSocketRTScheduler</name>
      <anchorfile>classc_socket_r_t_scheduler.html</anchorfile>
      <anchor>a9b1a8be2d87838a78ddbfedeee1c8066</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classc_socket_r_t_scheduler.html</anchorfile>
      <anchor>af96670dd4ac28f8f383a1e9dd66da099</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classc_socket_r_t_scheduler.html</anchorfile>
      <anchor>a61e075ebe73d48712ac9754c0c4ea604</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>executionResumed</name>
      <anchorfile>classc_socket_r_t_scheduler.html</anchorfile>
      <anchor>a20105283dfe394ac128ac6dbf757688b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInterfaceModule</name>
      <anchorfile>classc_socket_r_t_scheduler.html</anchorfile>
      <anchor>af5544050b6cd9fdab52c405b9b98df4e</anchor>
      <arglist>(cModule *mod, const char *dev, const char *filter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>getNextEvent</name>
      <anchorfile>classc_socket_r_t_scheduler.html</anchorfile>
      <anchor>aef8387346fd4a7b713c0e0d94b63b1e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendBytes</name>
      <anchorfile>classc_socket_r_t_scheduler.html</anchorfile>
      <anchor>a261a7d14a3645e01cdfad5e1a4d9e918</anchor>
      <arglist>(unsigned char *buf, size_t numBytes, struct sockaddr *from, socklen_t addrlen)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static timeval</type>
      <name>baseTime</name>
      <anchorfile>classc_socket_r_t_scheduler.html</anchorfile>
      <anchor>a430dd5b9f432feba82af6911b2123b03</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>receiveWithTimeout</name>
      <anchorfile>classc_socket_r_t_scheduler.html</anchorfile>
      <anchor>a92a7df7dfc8c4d227a31f7c7880b0cfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>receiveUntil</name>
      <anchorfile>classc_socket_r_t_scheduler.html</anchorfile>
      <anchor>a30471d5c508d293450ae1b70ff72f63c</anchor>
      <arglist>(const timeval &amp;targetTime)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>fd</name>
      <anchorfile>classc_socket_r_t_scheduler.html</anchorfile>
      <anchor>aed7c6ddd2b5fa8fe020ae2e321d13acd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>data_chunk</name>
    <filename>structdata__chunk.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>structdata__chunk.html</anchorfile>
      <anchor>a4cee139cd8720de33c194e1bac2bb4aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>flags</name>
      <anchorfile>structdata__chunk.html</anchorfile>
      <anchor>aa705d8bf5f389d647f322aa875f12fb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>structdata__chunk.html</anchorfile>
      <anchor>a1dbd7995d6c6c426d657df75686041ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>tsn</name>
      <anchorfile>structdata__chunk.html</anchorfile>
      <anchor>a08b4f663ebf9aece0b7acf6993fa0f2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>sid</name>
      <anchorfile>structdata__chunk.html</anchorfile>
      <anchor>a0cfb75f65fe9853e05d29f07c742d90d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>ssn</name>
      <anchorfile>structdata__chunk.html</anchorfile>
      <anchor>a55047d3f6b09017d3e88b9b891f57b4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>ppi</name>
      <anchorfile>structdata__chunk.html</anchorfile>
      <anchor>a667c35403cd8905460b1ff26c53fb77c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>user_data</name>
      <anchorfile>structdata__chunk.html</anchorfile>
      <anchor>a40af394fe4d063bfe688ac858a9d9b63</anchor>
      <arglist>[0]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>data_vector</name>
    <filename>structdata__vector.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>data</name>
      <anchorfile>structdata__vector.html</anchorfile>
      <anchor>a8a531d09fe1110980b2d876e14f9cdea</anchor>
      <arglist>[0]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Decider80211</name>
    <filename>class_decider80211.html</filename>
    <base>BasicDecider</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_decider80211.html</anchorfile>
      <anchor>aeb072d74b7c663c9da94c7086763bd98</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>class_decider80211.html</anchorfile>
      <anchor>af6854fde7f771504c5153a5030a9f27d</anchor>
      <arglist>(AirFrame *, SnrList &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>dB2fraction</name>
      <anchorfile>class_decider80211.html</anchorfile>
      <anchor>ab9ec01d8111c80b4f174a1d2953bfffd</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPacketOK</name>
      <anchorfile>class_decider80211.html</anchorfile>
      <anchor>af7d3ab0abb268f2ee6ae958a3a4bca3d</anchor>
      <arglist>(double, int)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>class_decider80211.html</anchorfile>
      <anchor>af9e015a3296f012415d82d62111bfaf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>snirThreshold</name>
      <anchorfile>class_decider80211.html</anchorfile>
      <anchor>a22313d93ee2d3568357c32b68caf675a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DropsGenerator</name>
    <filename>class_drops_generator.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_drops_generator.html</anchorfile>
      <anchor>a40b077df14125393b9558a6f8e499f28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_drops_generator.html</anchorfile>
      <anchor>ab633a9bd509609893957f020da09e7de</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>parseVector</name>
      <anchorfile>class_drops_generator.html</anchorfile>
      <anchor>a6d1b0005939df0abdaee113c32c671a8</anchor>
      <arglist>(const char *vector)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_drops_generator.html</anchorfile>
      <anchor>ad0602af066cb94c7bfa2ad2b18891101</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numPackets</name>
      <anchorfile>class_drops_generator.html</anchorfile>
      <anchor>a7680751b1b99f44ef32752be3a73a09c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numDropped</name>
      <anchorfile>class_drops_generator.html</anchorfile>
      <anchor>a68f729474ae8dd345ad2c34f9ea8ada8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>generateFurtherDrops</name>
      <anchorfile>class_drops_generator.html</anchorfile>
      <anchor>ac01cd1ab848eb21d3fc0147e0f8cf297</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>dropsVector</name>
      <anchorfile>class_drops_generator.html</anchorfile>
      <anchor>a1c1e0071c59d656d90abdf67f797e8bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DropTailQoSQueue</name>
    <filename>class_drop_tail_qo_s_queue.html</filename>
    <base>PassiveQueueBase</base>
    <member kind="function">
      <type></type>
      <name>DropTailQoSQueue</name>
      <anchorfile>class_drop_tail_qo_s_queue.html</anchorfile>
      <anchor>ae0688ae7880e8c362e21c67508b4a6cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DropTailQoSQueue</name>
      <anchorfile>class_drop_tail_qo_s_queue.html</anchorfile>
      <anchor>a0996dbda58da52b40f28eee158ca84b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_drop_tail_qo_s_queue.html</anchorfile>
      <anchor>aa7c7b2e2ac9e682498efe0236cca2753</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>enqueue</name>
      <anchorfile>class_drop_tail_qo_s_queue.html</anchorfile>
      <anchor>a4ede675fafc2cfb3fe26f85ade1b98a6</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>dequeue</name>
      <anchorfile>class_drop_tail_qo_s_queue.html</anchorfile>
      <anchor>a378c5f0043d7de719c8faa405f6a1ce8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendOut</name>
      <anchorfile>class_drop_tail_qo_s_queue.html</anchorfile>
      <anchor>a85b7449ba48daaede4c79bf5af150686</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>frameCapacity</name>
      <anchorfile>class_drop_tail_qo_s_queue.html</anchorfile>
      <anchor>a3727484f98845c17287e266db009044b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numQueues</name>
      <anchorfile>class_drop_tail_qo_s_queue.html</anchorfile>
      <anchor>a5026e8154cdcf612d53d725b92bf4ac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cQueue **</type>
      <name>queues</name>
      <anchorfile>class_drop_tail_qo_s_queue.html</anchorfile>
      <anchor>ada86cd6f82fb8f731c512316eb740225</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IQoSClassifier *</type>
      <name>classifier</name>
      <anchorfile>class_drop_tail_qo_s_queue.html</anchorfile>
      <anchor>aa803022bebcdd4216b088e80afe757cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cGate *</type>
      <name>outGate</name>
      <anchorfile>class_drop_tail_qo_s_queue.html</anchorfile>
      <anchor>a4bedc7bfec527ef8b11a41018dce5a4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DropTailQueue</name>
    <filename>class_drop_tail_queue.html</filename>
    <base>PassiveQueueBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_drop_tail_queue.html</anchorfile>
      <anchor>a842b690148d4b8f288aaf03e900227e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>enqueue</name>
      <anchorfile>class_drop_tail_queue.html</anchorfile>
      <anchor>a66c7d3261be558ada1788079825c04a2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>dequeue</name>
      <anchorfile>class_drop_tail_queue.html</anchorfile>
      <anchor>a489dc2af69c4af6951f5b8f955a31f43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendOut</name>
      <anchorfile>class_drop_tail_queue.html</anchorfile>
      <anchor>ab2b9e180b7790cac65aaa1bb56e2946e</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>frameCapacity</name>
      <anchorfile>class_drop_tail_queue.html</anchorfile>
      <anchor>ab42d316ca45ebf6729155cbb03f9a7bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cQueue</type>
      <name>queue</name>
      <anchorfile>class_drop_tail_queue.html</anchorfile>
      <anchor>afc9c263671150f184e1f97c22bf1f2b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cGate *</type>
      <name>outGate</name>
      <anchorfile>class_drop_tail_queue.html</anchorfile>
      <anchor>adc925146354ce3ede46dc1ccc1cb8a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>qlenVec</name>
      <anchorfile>class_drop_tail_queue.html</anchorfile>
      <anchor>aa0aa733eaa1e1ed5b9f1033a3e1b6403</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>dropVec</name>
      <anchorfile>class_drop_tail_queue.html</anchorfile>
      <anchor>a3ffd42ce32d602b2a00b67a4ccac4139</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DumbTCP</name>
    <filename>class_dumb_t_c_p.html</filename>
    <base>TCPAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>DumbTCP</name>
      <anchorfile>class_dumb_t_c_p.html</anchorfile>
      <anchor>a2b94545d038f9a7e087d2cf10584034d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DumbTCP</name>
      <anchorfile>class_dumb_t_c_p.html</anchorfile>
      <anchor>a67f17b145d9d945a12ff0dafc0c9af4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_dumb_t_c_p.html</anchorfile>
      <anchor>a126269446a79304596cfa2f9c6ce05f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>established</name>
      <anchorfile>class_dumb_t_c_p.html</anchorfile>
      <anchor>ac6623697e6ea2a1484c7ebaa71d6d9da</anchor>
      <arglist>(bool active)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectionClosed</name>
      <anchorfile>class_dumb_t_c_p.html</anchorfile>
      <anchor>a3e2bed832b7e4e2e258290b947eea526</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processTimer</name>
      <anchorfile>class_dumb_t_c_p.html</anchorfile>
      <anchor>a657167c651630243eec9f6885ce7050b</anchor>
      <arglist>(cMessage *timer, TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendCommandInvoked</name>
      <anchorfile>class_dumb_t_c_p.html</anchorfile>
      <anchor>acac9e70114fe2db39931c4c130a81ef2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedOutOfOrderSegment</name>
      <anchorfile>class_dumb_t_c_p.html</anchorfile>
      <anchor>ae4e6d375ffed529764578686e011726a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSeqChanged</name>
      <anchorfile>class_dumb_t_c_p.html</anchorfile>
      <anchor>a2f6cdf0df70da4714fb31c9c0b88d375</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDataAck</name>
      <anchorfile>class_dumb_t_c_p.html</anchorfile>
      <anchor>a22dfeeb20cbf6f934bc60dba62d42c10</anchor>
      <arglist>(uint32 firstSeqAcked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDuplicateAck</name>
      <anchorfile>class_dumb_t_c_p.html</anchorfile>
      <anchor>a7a6de582e410e39328f6eca68bd08ffc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedAckForDataNotYetSent</name>
      <anchorfile>class_dumb_t_c_p.html</anchorfile>
      <anchor>ae41e06b4a200bc5e3f9292cc0bbd20b4</anchor>
      <arglist>(uint32 seq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ackSent</name>
      <anchorfile>class_dumb_t_c_p.html</anchorfile>
      <anchor>a836f67d0b7562942abaf42d4b3d8c1be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dataSent</name>
      <anchorfile>class_dumb_t_c_p.html</anchorfile>
      <anchor>a312e0203fada40e843fc3635ff4b1cdf</anchor>
      <arglist>(uint32 fromseq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>restartRexmitTimer</name>
      <anchorfile>class_dumb_t_c_p.html</anchorfile>
      <anchor>ab80d79feb0ae9b17d5d80a4be78afbb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPStateVariables *</type>
      <name>createStateVariables</name>
      <anchorfile>class_dumb_t_c_p.html</anchorfile>
      <anchor>a7fe971c4330d12fc691c1c473952e8f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DumbTCPStateVariables *&amp;</type>
      <name>state</name>
      <anchorfile>class_dumb_t_c_p.html</anchorfile>
      <anchor>a02bcdd5896b3887cbd9612049b798121</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>rexmitTimer</name>
      <anchorfile>class_dumb_t_c_p.html</anchorfile>
      <anchor>a74d14fe4fe2a56eb7799d6a9f57fb2a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DumbTCPStateVariables</name>
    <filename>class_dumb_t_c_p_state_variables.html</filename>
    <base>TCPStateVariables</base>
  </compound>
  <compound kind="class">
    <name>Dummy</name>
    <filename>class_dummy.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_dummy.html</anchorfile>
      <anchor>a9315df2443d1519959396b8f8d21ea66</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DuplicatesGenerator</name>
    <filename>class_duplicates_generator.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_duplicates_generator.html</anchorfile>
      <anchor>ae3c164e4f43154ff19361b4f502dfa5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_duplicates_generator.html</anchorfile>
      <anchor>ac820a439539be9d0d908252a12b7466e</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>parseVector</name>
      <anchorfile>class_duplicates_generator.html</anchorfile>
      <anchor>aaabac3a7a359a52c239fce488207484a</anchor>
      <arglist>(const char *vector)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_duplicates_generator.html</anchorfile>
      <anchor>a8b4330d4f78fd6ffc71b271acbf2749d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numPackets</name>
      <anchorfile>class_duplicates_generator.html</anchorfile>
      <anchor>a8ca1a8282185b0f99a40e3edac2377ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numDuplicated</name>
      <anchorfile>class_duplicates_generator.html</anchorfile>
      <anchor>af5af69c364b349514de0aa43569af02f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>generateFurtherDuplicates</name>
      <anchorfile>class_duplicates_generator.html</anchorfile>
      <anchor>a1e292f14145365a7475f89cdacf1b8a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>duplicatesVector</name>
      <anchorfile>class_duplicates_generator.html</anchorfile>
      <anchor>a658d8fa5382dee6f370099d8f49f4dfb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EnqueueHook</name>
    <filename>class_enqueue_hook.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setModule</name>
      <anchorfile>class_enqueue_hook.html</anchorfile>
      <anchor>ae3cdb7098b0fd7038cc2830f8967323e</anchor>
      <arglist>(cSimpleModule *)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enqueue</name>
      <anchorfile>class_enqueue_hook.html</anchorfile>
      <anchor>a73b45d9498136e8bb157702428e8469e</anchor>
      <arglist>(cMessage *msg, cQueue &amp;queue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cMessage *</type>
      <name>dropIfNotNeeded</name>
      <anchorfile>class_enqueue_hook.html</anchorfile>
      <anchor>aed3fcf4692ae5effbe2f72ec6cad8400</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>EroObj_t</name>
    <filename>struct_ero_obj__t.html</filename>
    <member kind="function">
      <type></type>
      <name>EroObj_t</name>
      <anchorfile>struct_ero_obj__t.html</anchorfile>
      <anchor>a840dd224123f2dda6369048c110d58cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>L</name>
      <anchorfile>struct_ero_obj__t.html</anchorfile>
      <anchor>a89603253681255ecea111b092b07ca7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::IPAddress</type>
      <name>node</name>
      <anchorfile>struct_ero_obj__t.html</anchorfile>
      <anchor>a697b7a0cd929d6cc6cf38cec56d8399c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ErrAndCollDecider</name>
    <filename>class_err_and_coll_decider.html</filename>
    <base>SnrDecider</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>class_err_and_coll_decider.html</anchorfile>
      <anchor>aee1da91d3d0a44bd00edc9ac58b600a8</anchor>
      <arglist>(AirFrame *, SnrList &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>error_cause</name>
    <filename>structerror__cause.html</filename>
    <member kind="variable">
      <type>unsigned short</type>
      <name>cause_code</name>
      <anchorfile>structerror__cause.html</anchorfile>
      <anchor>a86019882f2cfd1dd4625c5548c341514</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>structerror__cause.html</anchorfile>
      <anchor>a8d8eaea49c387077b6947024acf1423b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>info</name>
      <anchorfile>structerror__cause.html</anchorfile>
      <anchor>add838f02e8dca1c4dba8c675746a0669</anchor>
      <arglist>[0]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>error_chunk</name>
    <filename>structerror__chunk.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>structerror__chunk.html</anchorfile>
      <anchor>aa2b1ccac4dffd263fe8006786798d931</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>flags</name>
      <anchorfile>structerror__chunk.html</anchorfile>
      <anchor>ac43d98dfea8e4bc720aef8ed6a8d45ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>structerror__chunk.html</anchorfile>
      <anchor>afe25ec6af821b76f44934aa97986618f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>error_causes</name>
      <anchorfile>structerror__chunk.html</anchorfile>
      <anchor>a7ecaa877024ed5858d8b7ff7ad1288c0</anchor>
      <arglist>[0]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ErrorHandling</name>
    <filename>class_error_handling.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_error_handling.html</anchorfile>
      <anchor>a65fc857fecd19c98be330886c8000cf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_error_handling.html</anchorfile>
      <anchor>a034cd1b8f016398d1ac730d2e1546433</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numReceived</name>
      <anchorfile>class_error_handling.html</anchorfile>
      <anchor>ada0e230dc74e0468795eb23ba03a6f8a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ether_addr</name>
    <filename>structether__addr.html</filename>
    <member kind="variable">
      <type>u_char</type>
      <name>octet</name>
      <anchorfile>structether__addr.html</anchorfile>
      <anchor>ae9d6754e2e4d52d4c7443dbc9b926b23</anchor>
      <arglist>[ETHER_ADDR_LEN]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ether_header</name>
    <filename>structether__header.html</filename>
    <member kind="variable">
      <type>u_char</type>
      <name>ether_dhost</name>
      <anchorfile>structether__header.html</anchorfile>
      <anchor>a9b79e16ca31078ae97191e30adb2beee</anchor>
      <arglist>[ETHER_ADDR_LEN]</arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ether_shost</name>
      <anchorfile>structether__header.html</anchorfile>
      <anchor>acbb5f59f38c5f64c9f2c58a4bc2c3281</anchor>
      <arglist>[ETHER_ADDR_LEN]</arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>ether_type</name>
      <anchorfile>structether__header.html</anchorfile>
      <anchor>a5ac2441cb33430bf6d18becabe800956</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherAppCli</name>
    <filename>class_ether_app_cli.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_ether_app_cli.html</anchorfile>
      <anchor>a0208f0f531a06c1a994702802c833878</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_ether_app_cli.html</anchorfile>
      <anchor>ac3e8a6d200be37560eafc82eb43e7b2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_ether_app_cli.html</anchorfile>
      <anchor>a4e26f8eec74dd1f8bf49ae6a85f4e942</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_ether_app_cli.html</anchorfile>
      <anchor>a3f74cc9cc41221c787f165c312e8f919</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MACAddress</type>
      <name>resolveDestMACAddress</name>
      <anchorfile>class_ether_app_cli.html</anchorfile>
      <anchor>afdc79e0a77e2cde1e0ea975d6f3d50e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendPacket</name>
      <anchorfile>class_ether_app_cli.html</anchorfile>
      <anchor>a8de4dd5cd41193949b363fad483b90f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receivePacket</name>
      <anchorfile>class_ether_app_cli.html</anchorfile>
      <anchor>a4634f15ae0f87a98932223364cc98c4b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>registerDSAP</name>
      <anchorfile>class_ether_app_cli.html</anchorfile>
      <anchor>acbc9b49d95c9c7ced46e77bf9e1566a4</anchor>
      <arglist>(int dsap)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>seqNum</name>
      <anchorfile>class_ether_app_cli.html</anchorfile>
      <anchor>aeb681c96593933789ac862a996705385</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPar *</type>
      <name>reqLength</name>
      <anchorfile>class_ether_app_cli.html</anchorfile>
      <anchor>a3a070cc0030965fa80bf50315e4c0ad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPar *</type>
      <name>respLength</name>
      <anchorfile>class_ether_app_cli.html</anchorfile>
      <anchor>a3b9e4f3dcb52cf1aa60f83174325e256</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPar *</type>
      <name>waitTime</name>
      <anchorfile>class_ether_app_cli.html</anchorfile>
      <anchor>ab22de9316ab401cfd44fe407f72923f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>localSAP</name>
      <anchorfile>class_ether_app_cli.html</anchorfile>
      <anchor>ad3397d7d99289eade52a7e915965091b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>remoteSAP</name>
      <anchorfile>class_ether_app_cli.html</anchorfile>
      <anchor>ab4b8348b9d60a95e983e7ce3a5b7549e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>destMACAddress</name>
      <anchorfile>class_ether_app_cli.html</anchorfile>
      <anchor>a4152976662d1ba95970b0e2b71e0d6b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>packetsSent</name>
      <anchorfile>class_ether_app_cli.html</anchorfile>
      <anchor>a40caa48bf161dc01c4006d05f5021693</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>packetsReceived</name>
      <anchorfile>class_ether_app_cli.html</anchorfile>
      <anchor>a6ff94f3dbe7a04f717422ecd7b722dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>eedVector</name>
      <anchorfile>class_ether_app_cli.html</anchorfile>
      <anchor>a2f16f77249b5a5f6d21fe07f32c4caa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cStdDev</type>
      <name>eedStats</name>
      <anchorfile>class_ether_app_cli.html</anchorfile>
      <anchor>a767fbd4fc8b50852be28cd53231cd0d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherAppReq</name>
    <filename>class_ether_app_req.html</filename>
    <member kind="function">
      <type></type>
      <name>EtherAppReq</name>
      <anchorfile>class_ether_app_req.html</anchorfile>
      <anchor>a327caa557145e1468f354302be523f82</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EtherAppReq</name>
      <anchorfile>class_ether_app_req.html</anchorfile>
      <anchor>a19d54b4a92bdca65b4ea511b3ee3f80f</anchor>
      <arglist>(const EtherAppReq &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EtherAppReq</name>
      <anchorfile>class_ether_app_req.html</anchorfile>
      <anchor>afb4fb0dca8f87fe5819b7a447855cbea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EtherAppReq &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ether_app_req.html</anchorfile>
      <anchor>a597a4c79138ee2c183ef0b5d4a8ff8a7</anchor>
      <arglist>(const EtherAppReq &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EtherAppReq *</type>
      <name>dup</name>
      <anchorfile>class_ether_app_req.html</anchorfile>
      <anchor>a1b4136fd3a297dfd62c6e0f983da4116</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ether_app_req.html</anchorfile>
      <anchor>a8700bc5b0b42280c06390522b1aa05a7</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ether_app_req.html</anchorfile>
      <anchor>ad496602e09ab8a5e4c5e6ce4016ec84a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getRequestId</name>
      <anchorfile>class_ether_app_req.html</anchorfile>
      <anchor>a260da28fc4ed53aceabc67efda796d4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRequestId</name>
      <anchorfile>class_ether_app_req.html</anchorfile>
      <anchor>ad9135aa508631b4a57bbe254f5f96e0a</anchor>
      <arglist>(long requestId_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getResponseBytes</name>
      <anchorfile>class_ether_app_req.html</anchorfile>
      <anchor>a5a19a0a4cdb98d02b47c7625593d6af0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setResponseBytes</name>
      <anchorfile>class_ether_app_req.html</anchorfile>
      <anchor>a66b225d2f0d4ddc139f2eed5726725bd</anchor>
      <arglist>(long responseBytes_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ether_app_req.html</anchorfile>
      <anchor>a91bf33f59702c0a9a1e731fd69c925aa</anchor>
      <arglist>(const EtherAppReq &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>requestId_var</name>
      <anchorfile>class_ether_app_req.html</anchorfile>
      <anchor>ac758afcd2e7556102e91e76ea6fad7ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>responseBytes_var</name>
      <anchorfile>class_ether_app_req.html</anchorfile>
      <anchor>abbe6282c7d71083b921cb5fbc6aa2600</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherAppResp</name>
    <filename>class_ether_app_resp.html</filename>
    <member kind="function">
      <type></type>
      <name>EtherAppResp</name>
      <anchorfile>class_ether_app_resp.html</anchorfile>
      <anchor>a8017733b74042438ac28d56815646d31</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EtherAppResp</name>
      <anchorfile>class_ether_app_resp.html</anchorfile>
      <anchor>af63ae6065cd38f280c8dc1247e67428d</anchor>
      <arglist>(const EtherAppResp &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EtherAppResp</name>
      <anchorfile>class_ether_app_resp.html</anchorfile>
      <anchor>a27074edb8cd512d21e91a864cb52606f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EtherAppResp &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ether_app_resp.html</anchorfile>
      <anchor>a38cbe275f9cfb4d419b590fc6ee5609b</anchor>
      <arglist>(const EtherAppResp &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EtherAppResp *</type>
      <name>dup</name>
      <anchorfile>class_ether_app_resp.html</anchorfile>
      <anchor>ad2ff07911a68fdfb66d897457c1187b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ether_app_resp.html</anchorfile>
      <anchor>ab954ed2aa12803290665fcf74879cb6e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ether_app_resp.html</anchorfile>
      <anchor>a3aa1c03a0604f2614c46b5237fed3d31</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRequestId</name>
      <anchorfile>class_ether_app_resp.html</anchorfile>
      <anchor>a489eb565ed4a6f99a12d025663c12521</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRequestId</name>
      <anchorfile>class_ether_app_resp.html</anchorfile>
      <anchor>a95ce676276ce8ebdd9901778a1ba38bc</anchor>
      <arglist>(int requestId_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumFrames</name>
      <anchorfile>class_ether_app_resp.html</anchorfile>
      <anchor>a021ac50085e778b5828345b51020cbb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumFrames</name>
      <anchorfile>class_ether_app_resp.html</anchorfile>
      <anchor>a41920c536667f8fef2fd2d390fbb62d2</anchor>
      <arglist>(int numFrames_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ether_app_resp.html</anchorfile>
      <anchor>a58354bba5ed51bdd6304ece06fc70d5e</anchor>
      <arglist>(const EtherAppResp &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>requestId_var</name>
      <anchorfile>class_ether_app_resp.html</anchorfile>
      <anchor>ac3e974ee4c4ce213432ef100f7d66b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numFrames_var</name>
      <anchorfile>class_ether_app_resp.html</anchorfile>
      <anchor>a324560aefda3d3b22f5ccfad7a555a85</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherAppSrv</name>
    <filename>class_ether_app_srv.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_ether_app_srv.html</anchorfile>
      <anchor>ab8ee3bd367e0cf510b6738425040ffe0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_ether_app_srv.html</anchorfile>
      <anchor>aad8a1e0c57bb36f6aacf212c76d0d0af</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_ether_app_srv.html</anchorfile>
      <anchor>a3ebee222e9025751ab7a5ad7c86445c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerDSAP</name>
      <anchorfile>class_ether_app_srv.html</anchorfile>
      <anchor>a6fde9b2753c91625e5fa409c43ff8410</anchor>
      <arglist>(int dsap)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendPacket</name>
      <anchorfile>class_ether_app_srv.html</anchorfile>
      <anchor>a372fe480dbfd0d39e89dec25c1dd03d8</anchor>
      <arglist>(cMessage *datapacket, const MACAddress &amp;destAddr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>localSAP</name>
      <anchorfile>class_ether_app_srv.html</anchorfile>
      <anchor>a1fd3eae11c6b96f8827d490f0c07fc09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>remoteSAP</name>
      <anchorfile>class_ether_app_srv.html</anchorfile>
      <anchor>ae1d75c235e0f40ea4cebfdcb5bacb3bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>packetsSent</name>
      <anchorfile>class_ether_app_srv.html</anchorfile>
      <anchor>ad7ad4c1c9c2c8919731b729180047bd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>packetsReceived</name>
      <anchorfile>class_ether_app_srv.html</anchorfile>
      <anchor>a18e3e3f1e7b8df99ab8ac7aed75ebc0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>eedVector</name>
      <anchorfile>class_ether_app_srv.html</anchorfile>
      <anchor>a6a7a0461e8b40e49f217e52b8dc8f1f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cStdDev</type>
      <name>eedStats</name>
      <anchorfile>class_ether_app_srv.html</anchorfile>
      <anchor>a2fbc2d424b25591a1c91dd787665235b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherAutoconfig</name>
    <filename>class_ether_autoconfig.html</filename>
    <member kind="function">
      <type></type>
      <name>EtherAutoconfig</name>
      <anchorfile>class_ether_autoconfig.html</anchorfile>
      <anchor>a44458bd3a1e940a1c0435863c3963ad2</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EtherAutoconfig</name>
      <anchorfile>class_ether_autoconfig.html</anchorfile>
      <anchor>a4ac685bdeab556df01b80c2f362046d3</anchor>
      <arglist>(const EtherAutoconfig &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EtherAutoconfig</name>
      <anchorfile>class_ether_autoconfig.html</anchorfile>
      <anchor>a1fd640dc34ea4b757f2483afe27be708</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EtherAutoconfig &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ether_autoconfig.html</anchorfile>
      <anchor>a9bc16a38ea3fc9bc5f5d9f4f2c2cfc70</anchor>
      <arglist>(const EtherAutoconfig &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EtherAutoconfig *</type>
      <name>dup</name>
      <anchorfile>class_ether_autoconfig.html</anchorfile>
      <anchor>a2ebe2a9804e2b76430baad998c59953d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ether_autoconfig.html</anchorfile>
      <anchor>a3a1e1c99326b21f62c575aa0fc881e0d</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ether_autoconfig.html</anchorfile>
      <anchor>a5c29eea75daee7c7e7eb81b729bd0dfb</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getTxrate</name>
      <anchorfile>class_ether_autoconfig.html</anchorfile>
      <anchor>a63a7d9ee7cad07f16e31330580200993</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTxrate</name>
      <anchorfile>class_ether_autoconfig.html</anchorfile>
      <anchor>ab9709e0853368ef3993734a9f6a83f51</anchor>
      <arglist>(double txrate_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getHalfDuplex</name>
      <anchorfile>class_ether_autoconfig.html</anchorfile>
      <anchor>a554b6bcffa1b38ed1a1ad796c7325952</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHalfDuplex</name>
      <anchorfile>class_ether_autoconfig.html</anchorfile>
      <anchor>ae86c236316561382c4b2e31a10c4307e</anchor>
      <arglist>(bool halfDuplex_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ether_autoconfig.html</anchorfile>
      <anchor>a2387284c90b980cc11cfd37fcbe565d2</anchor>
      <arglist>(const EtherAutoconfig &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>txrate_var</name>
      <anchorfile>class_ether_autoconfig.html</anchorfile>
      <anchor>a5368ad8933b9f2159f3a52fd63c3c854</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>halfDuplex_var</name>
      <anchorfile>class_ether_autoconfig.html</anchorfile>
      <anchor>a6f7345cd8a8b4035717c99648e7e00ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherBus</name>
    <filename>class_ether_bus.html</filename>
    <class kind="struct">EtherBus::BusTap</class>
    <member kind="function">
      <type></type>
      <name>EtherBus</name>
      <anchorfile>class_ether_bus.html</anchorfile>
      <anchor>abf6f3e8e6c9f66aa1db9e0924058cb54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EtherBus</name>
      <anchorfile>class_ether_bus.html</anchorfile>
      <anchor>ae964fdf7cd502083dd64d0797bb55b73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_ether_bus.html</anchorfile>
      <anchor>aa9103ead3d52328992f3552042de19f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_ether_bus.html</anchorfile>
      <anchor>a2d9769ddc5abdfea9fd611806d7d1032</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_ether_bus.html</anchorfile>
      <anchor>a42424c657962b0e11eb4674f477577b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>tokenize</name>
      <anchorfile>class_ether_bus.html</anchorfile>
      <anchor>a9a9aba7a3ca46634e2a33770082bf02a</anchor>
      <arglist>(const char *str, std::vector&lt; double &gt; &amp;array)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>propagationSpeed</name>
      <anchorfile>class_ether_bus.html</anchorfile>
      <anchor>a67ab8414865ce84b633ef3a6b9cab740</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BusTap *</type>
      <name>tap</name>
      <anchorfile>class_ether_bus.html</anchorfile>
      <anchor>adac598e12927e743757602578adc2a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>taps</name>
      <anchorfile>class_ether_bus.html</anchorfile>
      <anchor>af1efce2293dfdb1be1e8091a2899b1a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numMessages</name>
      <anchorfile>class_ether_bus.html</anchorfile>
      <anchor>a2f405fe03dc3c21f4580d8b7df4e1b27</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>EtherBus::BusTap</name>
    <filename>struct_ether_bus_1_1_bus_tap.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>id</name>
      <anchorfile>struct_ether_bus_1_1_bus_tap.html</anchorfile>
      <anchor>a4902b7cbbfbafed664ebcf354be45112</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>position</name>
      <anchorfile>struct_ether_bus_1_1_bus_tap.html</anchorfile>
      <anchor>adf33f42b254152ba66ff16c7617f89f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>propagationDelay</name>
      <anchorfile>struct_ether_bus_1_1_bus_tap.html</anchorfile>
      <anchor>ac55ab2b50802979bd08061a6f98ca6b3</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherEncap</name>
    <filename>class_ether_encap.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_ether_encap.html</anchorfile>
      <anchor>a2018d7af2c73db7387b42bb141e44dca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_ether_encap.html</anchorfile>
      <anchor>a48e154b7367ab221912b8fb87452cd6f</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_ether_encap.html</anchorfile>
      <anchor>a5647848d2beedaa94ff3060b491ee6d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPacketFromHigherLayer</name>
      <anchorfile>class_ether_encap.html</anchorfile>
      <anchor>a8d44655fd5ea101ae705a7147ea656db</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processFrameFromMAC</name>
      <anchorfile>class_ether_encap.html</anchorfile>
      <anchor>a0b143dc46e518879d2eb0ae22271ce1c</anchor>
      <arglist>(EtherFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSendPause</name>
      <anchorfile>class_ether_encap.html</anchorfile>
      <anchor>a19c1c2a920244c5d5cfb1ea436f00fb8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDisplayString</name>
      <anchorfile>class_ether_encap.html</anchorfile>
      <anchor>ade0e9ef2a1fd424c543c4de24c6b16ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>seqNum</name>
      <anchorfile>class_ether_encap.html</anchorfile>
      <anchor>a23f5ada913adf79fdb74ad63b4cbb9af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>totalFromHigherLayer</name>
      <anchorfile>class_ether_encap.html</anchorfile>
      <anchor>aaddd1ec9f016e45d849d468a05a9aa22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>totalFromMAC</name>
      <anchorfile>class_ether_encap.html</anchorfile>
      <anchor>ada4f935d4db8f78f12b0c8c5f4f3fc94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>totalPauseSent</name>
      <anchorfile>class_ether_encap.html</anchorfile>
      <anchor>ad77445fc86f0c2a7564d7ee500884a77</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherFrame</name>
    <filename>class_ether_frame.html</filename>
    <member kind="function">
      <type></type>
      <name>EtherFrame</name>
      <anchorfile>class_ether_frame.html</anchorfile>
      <anchor>adcd7cc9f129cfb0411336254885bc555</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EtherFrame</name>
      <anchorfile>class_ether_frame.html</anchorfile>
      <anchor>a7201f68fe6efed98fbf0d3b4c1b2d232</anchor>
      <arglist>(const EtherFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EtherFrame</name>
      <anchorfile>class_ether_frame.html</anchorfile>
      <anchor>ae49555fabfa6ec3c3df03630a33bd775</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EtherFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ether_frame.html</anchorfile>
      <anchor>a2afecf759d627cbebf473b8df1dbfbc3</anchor>
      <arglist>(const EtherFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EtherFrame *</type>
      <name>dup</name>
      <anchorfile>class_ether_frame.html</anchorfile>
      <anchor>a21018a0098400ffe10c9b06bc6537ace</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ether_frame.html</anchorfile>
      <anchor>a183d06f5308f0342cca1d57220756d60</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ether_frame.html</anchorfile>
      <anchor>add88ffe9399d211e9269a2d2d1ea53df</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getDest</name>
      <anchorfile>class_ether_frame.html</anchorfile>
      <anchor>a0fc8027cd1ecc275bd2fc6cb1977d51b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getDest</name>
      <anchorfile>class_ether_frame.html</anchorfile>
      <anchor>ae172b45ccb65f199d214f36a96c04642</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDest</name>
      <anchorfile>class_ether_frame.html</anchorfile>
      <anchor>a4e894d933bf0ced7d41419f6f037279b</anchor>
      <arglist>(const MACAddress &amp;dest_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getSrc</name>
      <anchorfile>class_ether_frame.html</anchorfile>
      <anchor>ad28a0f89c2e9e5dbe274ed8b9fd419a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getSrc</name>
      <anchorfile>class_ether_frame.html</anchorfile>
      <anchor>ab2397f7b7b0f867ee36ee9a86740ac20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrc</name>
      <anchorfile>class_ether_frame.html</anchorfile>
      <anchor>aac1d4552924388dfcf9a127c8ca73e48</anchor>
      <arglist>(const MACAddress &amp;src_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ether_frame.html</anchorfile>
      <anchor>a77da44de3773a7c6d057794b8b4b20dc</anchor>
      <arglist>(const EtherFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::MACAddress</type>
      <name>dest_var</name>
      <anchorfile>class_ether_frame.html</anchorfile>
      <anchor>ab5ca4527f84b4f5c349c2f342282b6fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::MACAddress</type>
      <name>src_var</name>
      <anchorfile>class_ether_frame.html</anchorfile>
      <anchor>a1d7812995ed2719dca6ba4a934b0125d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherFrameWithLLC</name>
    <filename>class_ether_frame_with_l_l_c.html</filename>
    <base>EtherFrame</base>
    <member kind="function">
      <type></type>
      <name>EtherFrameWithLLC</name>
      <anchorfile>class_ether_frame_with_l_l_c.html</anchorfile>
      <anchor>a4341f97087e6ba6e27ecf99c3418c863</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EtherFrameWithLLC</name>
      <anchorfile>class_ether_frame_with_l_l_c.html</anchorfile>
      <anchor>aec4e7dea7dfe2a132aba01a2a1093a9d</anchor>
      <arglist>(const EtherFrameWithLLC &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EtherFrameWithLLC</name>
      <anchorfile>class_ether_frame_with_l_l_c.html</anchorfile>
      <anchor>a11563ce9325ec0899e4722f853715c73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EtherFrameWithLLC &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ether_frame_with_l_l_c.html</anchorfile>
      <anchor>adecfebd371730849a3bae43e4789f97d</anchor>
      <arglist>(const EtherFrameWithLLC &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EtherFrameWithLLC *</type>
      <name>dup</name>
      <anchorfile>class_ether_frame_with_l_l_c.html</anchorfile>
      <anchor>a490ee8bb1ad928822e721a962f10c41c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ether_frame_with_l_l_c.html</anchorfile>
      <anchor>a72058024125aa7a875694cdd3aba640f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ether_frame_with_l_l_c.html</anchorfile>
      <anchor>a8a7bc0d817b483308d74d791d786246a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSsap</name>
      <anchorfile>class_ether_frame_with_l_l_c.html</anchorfile>
      <anchor>a44ca98098015c2d985bfa175271ed678</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSsap</name>
      <anchorfile>class_ether_frame_with_l_l_c.html</anchorfile>
      <anchor>a7b588a7af24f13453918bc0d7fd70ee1</anchor>
      <arglist>(int ssap_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDsap</name>
      <anchorfile>class_ether_frame_with_l_l_c.html</anchorfile>
      <anchor>a74d5eb77731ab993d365100afc577fde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDsap</name>
      <anchorfile>class_ether_frame_with_l_l_c.html</anchorfile>
      <anchor>af4353f3500eccf0fdb04949cfb5ad5af</anchor>
      <arglist>(int dsap_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getControl</name>
      <anchorfile>class_ether_frame_with_l_l_c.html</anchorfile>
      <anchor>a7041fb0256c30dfa02f87142fcbbc8c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setControl</name>
      <anchorfile>class_ether_frame_with_l_l_c.html</anchorfile>
      <anchor>ad6e5d915cec3b00a8e734868d131cae2</anchor>
      <arglist>(int control_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ether_frame_with_l_l_c.html</anchorfile>
      <anchor>a9c75c75bda34cc1480753b2a42c491f3</anchor>
      <arglist>(const EtherFrameWithLLC &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ssap_var</name>
      <anchorfile>class_ether_frame_with_l_l_c.html</anchorfile>
      <anchor>aed1c9ede6d203c9dccdcacfce756a2c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dsap_var</name>
      <anchorfile>class_ether_frame_with_l_l_c.html</anchorfile>
      <anchor>a084d14eef63300e59325f3a6abcc40b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>control_var</name>
      <anchorfile>class_ether_frame_with_l_l_c.html</anchorfile>
      <anchor>a0640bc804a0cbd7befdcc6173616b7cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherFrameWithSNAP</name>
    <filename>class_ether_frame_with_s_n_a_p.html</filename>
    <base>EtherFrame</base>
    <member kind="function">
      <type></type>
      <name>EtherFrameWithSNAP</name>
      <anchorfile>class_ether_frame_with_s_n_a_p.html</anchorfile>
      <anchor>ac5fcd7f009fe603add40317920faea2d</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EtherFrameWithSNAP</name>
      <anchorfile>class_ether_frame_with_s_n_a_p.html</anchorfile>
      <anchor>a8853898f1b8722c66aeb35b57be0d4f2</anchor>
      <arglist>(const EtherFrameWithSNAP &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EtherFrameWithSNAP</name>
      <anchorfile>class_ether_frame_with_s_n_a_p.html</anchorfile>
      <anchor>a3a98b1d8b099918b67af8b3ab48e720f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EtherFrameWithSNAP &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ether_frame_with_s_n_a_p.html</anchorfile>
      <anchor>a78af8717e65c14d68fdc5d1d3e43c1c6</anchor>
      <arglist>(const EtherFrameWithSNAP &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EtherFrameWithSNAP *</type>
      <name>dup</name>
      <anchorfile>class_ether_frame_with_s_n_a_p.html</anchorfile>
      <anchor>ad519e00b25386e58538864eb06d370af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ether_frame_with_s_n_a_p.html</anchorfile>
      <anchor>a5f07d774dff6d1be873ce409da6b11cb</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ether_frame_with_s_n_a_p.html</anchorfile>
      <anchor>a8804258f89b1a8f4a4241ccf0e54ae40</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getOrgCode</name>
      <anchorfile>class_ether_frame_with_s_n_a_p.html</anchorfile>
      <anchor>ac1d03273bd6b01cbf3488f78f309a31a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOrgCode</name>
      <anchorfile>class_ether_frame_with_s_n_a_p.html</anchorfile>
      <anchor>a9d3e78b5eef8c2e0f479332261608280</anchor>
      <arglist>(long orgCode_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getLocalcode</name>
      <anchorfile>class_ether_frame_with_s_n_a_p.html</anchorfile>
      <anchor>a7cec1de3d13fc7eff44d6c03efdff977</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLocalcode</name>
      <anchorfile>class_ether_frame_with_s_n_a_p.html</anchorfile>
      <anchor>a25487a7cdf1cd22c0a2f978bc9d76dc8</anchor>
      <arglist>(int localcode_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ether_frame_with_s_n_a_p.html</anchorfile>
      <anchor>ae71accec728e429500132fbc91e0d46f</anchor>
      <arglist>(const EtherFrameWithSNAP &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>orgCode_var</name>
      <anchorfile>class_ether_frame_with_s_n_a_p.html</anchorfile>
      <anchor>ac778a858ba1f7d6515a460f2aeaa19d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>localcode_var</name>
      <anchorfile>class_ether_frame_with_s_n_a_p.html</anchorfile>
      <anchor>a19eca871944b1c10669a0367ce89e5c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherHub</name>
    <filename>class_ether_hub.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_ether_hub.html</anchorfile>
      <anchor>aaedd6382be2f1814b173decb274e2fc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_ether_hub.html</anchorfile>
      <anchor>a38dfb3820e446125d4f3f991f60b0e2a</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_ether_hub.html</anchorfile>
      <anchor>a600219305008dab227faaf9dbb854ee1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ports</name>
      <anchorfile>class_ether_hub.html</anchorfile>
      <anchor>a01778631f057d4e3e28958e7fe097b79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numMessages</name>
      <anchorfile>class_ether_hub.html</anchorfile>
      <anchor>a60302e1d2242b53bac547186b8fe7fa9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherJam</name>
    <filename>class_ether_jam.html</filename>
    <member kind="function">
      <type></type>
      <name>EtherJam</name>
      <anchorfile>class_ether_jam.html</anchorfile>
      <anchor>a90c758632192124de0dea108c38c74bf</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EtherJam</name>
      <anchorfile>class_ether_jam.html</anchorfile>
      <anchor>ac104e0ec58316b570e0624789d5b94f5</anchor>
      <arglist>(const EtherJam &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EtherJam</name>
      <anchorfile>class_ether_jam.html</anchorfile>
      <anchor>ae41263ef69ae0aaf7513255a6dcf9b09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EtherJam &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ether_jam.html</anchorfile>
      <anchor>a525f14ad0f22acb03ca7f0cf549f8b1a</anchor>
      <arglist>(const EtherJam &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EtherJam *</type>
      <name>dup</name>
      <anchorfile>class_ether_jam.html</anchorfile>
      <anchor>a87e3c6cd6fbc4b5dcdbffdbeccf7f3eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ether_jam.html</anchorfile>
      <anchor>a2744952eeb3454c8e711591a03115017</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ether_jam.html</anchorfile>
      <anchor>a427d85d269aca4dac16799edcb46ba6d</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ether_jam.html</anchorfile>
      <anchor>a8be7a2f300d3cd8e3379e2bfbfe9802f</anchor>
      <arglist>(const EtherJam &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherLLC</name>
    <filename>class_ether_l_l_c.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_ether_l_l_c.html</anchorfile>
      <anchor>a77029a4cba7e5e732a3c3670dbf5bb35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_ether_l_l_c.html</anchorfile>
      <anchor>a87bab7918ffcd106d5e61f9f4f919411</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_ether_l_l_c.html</anchorfile>
      <anchor>adcb4fda69918f8d0ccfe588470718929</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPacketFromHigherLayer</name>
      <anchorfile>class_ether_l_l_c.html</anchorfile>
      <anchor>a2ad31a2157ca9917aa877b91142cc33e</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processFrameFromMAC</name>
      <anchorfile>class_ether_l_l_c.html</anchorfile>
      <anchor>aa5a6c0a7db6c7271c17372be5248aa0e</anchor>
      <arglist>(EtherFrameWithLLC *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRegisterSAP</name>
      <anchorfile>class_ether_l_l_c.html</anchorfile>
      <anchor>a78fbb2c9c4be5340dfb8cd80b1adbc3b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDeregisterSAP</name>
      <anchorfile>class_ether_l_l_c.html</anchorfile>
      <anchor>aa4c76554c8b999bf7641c447bed7c991</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSendPause</name>
      <anchorfile>class_ether_l_l_c.html</anchorfile>
      <anchor>aa88b3737fae3bc49f61fe8aaca619cb7</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>findPortForSAP</name>
      <anchorfile>class_ether_l_l_c.html</anchorfile>
      <anchor>a89afd27129560e58be4bb3bb95c27e25</anchor>
      <arglist>(int sap)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDisplayString</name>
      <anchorfile>class_ether_l_l_c.html</anchorfile>
      <anchor>a9c0c2b223bf7ad4c4a29cdfc0082de47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>seqNum</name>
      <anchorfile>class_ether_l_l_c.html</anchorfile>
      <anchor>a51679575c43e2482f173483b27a9fce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, int &gt;</type>
      <name>dsapToPort</name>
      <anchorfile>class_ether_l_l_c.html</anchorfile>
      <anchor>aee7418cecc6fde5b76ab81cd42740493</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>dsapsRegistered</name>
      <anchorfile>class_ether_l_l_c.html</anchorfile>
      <anchor>ad6d57971294bff8530bea6dcf9089df7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>totalFromHigherLayer</name>
      <anchorfile>class_ether_l_l_c.html</anchorfile>
      <anchor>a7650f876dcd361aefcb06882b767a185</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>totalFromMAC</name>
      <anchorfile>class_ether_l_l_c.html</anchorfile>
      <anchor>aa87542e80dbaf9c26be49a4a13a57a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>totalPassedUp</name>
      <anchorfile>class_ether_l_l_c.html</anchorfile>
      <anchor>a89744cad776ac1440cf6cf3f147ace1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>droppedUnknownDSAP</name>
      <anchorfile>class_ether_l_l_c.html</anchorfile>
      <anchor>a44ac5378bf773c5ae3c9e043910a32c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherMAC</name>
    <filename>class_ether_m_a_c.html</filename>
    <base>EtherMACBase</base>
    <member kind="function">
      <type></type>
      <name>EtherMAC</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>a936a9d50c3e4cda99c3004c4778cadf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EtherMAC</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>a52727b8fdc3ddb6ead25d8beab1fe817</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>ad8e31ebe719a1be991c6d390313cea51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeTxrate</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>a92d05279e9e43258d310d019ebe79ea0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>a7b8fce39a1befbef2a3baddaf7fb8ecc</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>a32d76cb953c50e550638319aad976c89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processFrameFromUpperLayer</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>a770c337725b006c9d89a81db7bff1985</anchor>
      <arglist>(EtherFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processMsgFromNetwork</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>a71c21fb4c966e819abbf041ea42f056f</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEndIFGPeriod</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>aac09d6f301dc86d8571b5357723df86a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEndTxPeriod</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>af94eb578c2dcc59eba5f13c88910a2a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEndRxPeriod</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>ac928ada773c433249bbfc213866ecd76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEndBackoffPeriod</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>ac1bf54200283ab7e0345c959d7a42a5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEndJammingPeriod</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>a1d46c3efdf2ba5b8ce90f68960541ca1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>startAutoconfig</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>a00e227576a4ff0bff41d35f06309c139</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAutoconfigMessage</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>a2155aa702e03e8c9341b69ae8ddfeea0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>printState</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>ab1091e4dd64112bac3bbcfb3e43005af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleEndRxPeriod</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>a5b7f05eeb8fa2d3424256837b72e6305</anchor>
      <arglist>(cPacket *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendJamSignal</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>a9631222986440dc566b8bba2f018d00a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRetransmission</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>af15db7ca7aea23ee77e75c047bbd46a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>startFrameTransmission</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>a38a8c421c3bee0282b4fa9660d6e71bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateHasSubcribers</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>a388be3d4571873fa7251757a39d679a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>autoconfigInProgress</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>a0cfed26778963f7ae08927551c45211b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>lowestTxrateSuggested</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>adc8ea8365dd52091a665378c0e0fdecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>duplexVetoed</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>a0b1a0ff4e165028710640042773459de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>backoffs</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>adaa6c4898c554a32a5c527c3fa0cd61f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numConcurrentTransmissions</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>ab387cd871e256012011122abfddab12a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EtherFrame *</type>
      <name>frameBeingReceived</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>a16f286d37d477fc83724c8b125ff5270</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endRxMsg</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>ab79b95dcdd4fd99014b65b20480079ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endBackoffMsg</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>ab33a400a74d73295145562de67ae0abf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endJammingMsg</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>a1d0fc561153186e5cc32c3c7347fd175</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>totalCollisionTime</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>a4a14c7389b4f0174c421ea2ab2e38884</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>totalSuccessfulRxTxTime</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>a7ea84aee874e2a47b305917d5d05cb0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>channelBusySince</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>a092179c05dca493d0bfa237057c766f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numCollisions</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>ab9950c06d98064cf81fc1421d01ae282</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numBackoffs</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>a1102e2facae32b0696ca147ac0d1c8ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>numCollisionsVector</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>ac5eadf348b48dafe8f5bb2d879f65866</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>numBackoffsVector</name>
      <anchorfile>class_ether_m_a_c.html</anchorfile>
      <anchor>a3ba7ca3372df18a5c74e6792ebed9045</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherMAC2</name>
    <filename>class_ether_m_a_c2.html</filename>
    <base>EtherMACBase</base>
    <member kind="function">
      <type></type>
      <name>EtherMAC2</name>
      <anchorfile>class_ether_m_a_c2.html</anchorfile>
      <anchor>a062b706683fc189ef801d2de575f9104</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_ether_m_a_c2.html</anchorfile>
      <anchor>a3cba3d7dffc3ce909e15fca2f4dc2df0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeTxrate</name>
      <anchorfile>class_ether_m_a_c2.html</anchorfile>
      <anchor>ae8f4a803a71b228788f9de004fd5684f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_ether_m_a_c2.html</anchorfile>
      <anchor>afe9ce9d3adc1c3c1e03bf1e70e63e384</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>startFrameTransmission</name>
      <anchorfile>class_ether_m_a_c2.html</anchorfile>
      <anchor>a45173ef5b47b8bfc5364029ddfc6ef97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processFrameFromUpperLayer</name>
      <anchorfile>class_ether_m_a_c2.html</anchorfile>
      <anchor>ae2282425df57f971c00bb3fad7222334</anchor>
      <arglist>(EtherFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processMsgFromNetwork</name>
      <anchorfile>class_ether_m_a_c2.html</anchorfile>
      <anchor>affe85a14532305b2b2a438f93a927594</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEndIFGPeriod</name>
      <anchorfile>class_ether_m_a_c2.html</anchorfile>
      <anchor>a6f1d75e8d33527ebe1d6d1682cd21c5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEndTxPeriod</name>
      <anchorfile>class_ether_m_a_c2.html</anchorfile>
      <anchor>ae923bc088641c0c99075fbfd91fddc57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateHasSubcribers</name>
      <anchorfile>class_ether_m_a_c2.html</anchorfile>
      <anchor>a4fef0959987ad6c1c6da607ae6773331</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherMACBase</name>
    <filename>class_ether_m_a_c_base.html</filename>
    <base>INotifiable</base>
    <member kind="function">
      <type></type>
      <name>EtherMACBase</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>aaed5846977b4c645a7ea60ed004630db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EtherMACBase</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>ad95e1ab8c490fffb0f211c8ff5475e92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getQueueLength</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a3e91991f00ebb6a0c2a9e511197ca35e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress</type>
      <name>getMACAddress</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a835bf40e60ee870581b685b60e76943c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>aeaef7b8c1c293ee6fa53e1786b7966ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>initializeTxrate</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a330aa19d171b33014ef6f26f05116b84</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeFlags</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a77c3453b8c67baa5561f8891b8470817</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeMACAddress</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a50d0a304a7d0708d93f2baefe15af2cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeQueueModule</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a15c5b18d84c956cb12c7916b53c5903a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeNotificationBoard</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a9166d57645f1c666e9d0e892e979bb6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeStatistics</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>ac87b0bdc6d72b719a389e12568afefe1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>registerInterface</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a702a108914e8af801f8eb4a38a24cb6b</anchor>
      <arglist>(double txrate)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkDestinationAddress</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a7e6f1c067a846e4b696539cb7495d820</anchor>
      <arglist>(EtherFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>calculateParameters</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>abf74598139ff3d6b072bdafdaea84a63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>printParameters</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>acb4bf48379ac4a40f596be3a4ac26398</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>ab4c2f71e9ed4e6874e5ad62f488e51e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processFrameFromUpperLayer</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>ada0ba5f016929f0b6e1cfc36ea00d739</anchor>
      <arglist>(EtherFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processMsgFromNetwork</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a5ead8d1f0c2dcbe9a39b1c04c9730adc</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processMessageWhenNotConnected</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>ad8e6457ae8bd03c5699d6dc2cc8e3f48</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processMessageWhenDisabled</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a2a0702c1998d2bb5ea7e7129e6762c8b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEndIFGPeriod</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>aa74e941ddd6ec84cba15b515a8637da0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEndTxPeriod</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>aeef682be2263580f2bc857f326494ad7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEndPausePeriod</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>ae6b022b3261a68de11dd41fdcaf26adf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleEndIFGPeriod</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a42b361fc78ad32e17e3f33cf336d6a7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleEndTxPeriod</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a53f70dc888b2e24464d524581de3f8f3</anchor>
      <arglist>(cPacket *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleEndPausePeriod</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>afb4f5909285f2a6d2056bcaf5f5efcc3</anchor>
      <arglist>(int pauseUnits)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkAndScheduleEndPausePeriod</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>aab5753d09b37edd82c1a853b8363d7b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fireChangeNotification</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>aa45b498f666428cb0b10dfef747ece44</anchor>
      <arglist>(int type, cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginSendFrames</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a1badd37f8bafc8901b37402dbe3184f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>frameReceptionComplete</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a08b5bf7bcb012584912397eb8fcae7fd</anchor>
      <arglist>(EtherFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processReceivedDataFrame</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>aa55f829939233b026855f8518ac8cef5</anchor>
      <arglist>(EtherFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPauseCommand</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a115b58bd9ce464de8e400fe7b4002869</anchor>
      <arglist>(int pauseUnits)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDisplayString</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a34f2526399ce9f2acc43eb80998f59bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateConnectionColor</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>aa827c8d34ae90fe0c4b63c2a7bb2fde5</anchor>
      <arglist>(int txState)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>updateHasSubcribers</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>ad217a66f7ba42eb71b960a63305f8ba6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a01f942cd46ea921352f8be1a9d61bc6f</anchor>
      <arglist>(int category, const cPolymorphic *details)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>connected</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>ace95f162bb4a264cded6f61154885b04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>disabled</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a3ab55f66782d6fae503fd9c062896dc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>promiscuous</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a4b9b41ef5eae868a14b4f1835d46ae1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>address</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>aebb1b775724f697d509aa9594d590ffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>txQueueLimit</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>add12d9553302028c2aafff74a06949c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>duplexMode</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>ad33267145e8bb8bec8ccdaf1b4419a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>carrierExtension</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>aad587d87f0ee21cf37f7c18ceb173a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>frameBursting</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a2d3576698535f9092562070198820198</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>txrate</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a82f73bf45cef382be21dcc17c512e644</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>bitTime</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>ad8c1ea02550aef25d24526dbacfd92f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>slotTime</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a172ecc082bd83ba47278fad39d3e656c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>interFrameGap</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a5635f2528683a928ec461f14ca867822</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>jamDuration</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>af44252e3f1e9b60d8ff8a8dbfb78bc3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>shortestFrameDuration</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a83e7c51a408f3b8972f8aa0ae086a9f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>transmitState</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a1b69935f2d60c8df93d459b82da99dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>receiveState</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>af65a4115222e836e9aa1883a50dd6859</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>pauseUnitsRequested</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>af09fa6fddf8c72c22c3ff25d4802aef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cQueue</type>
      <name>txQueue</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>af821fd79d625be2536582fb50f4eadd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPassiveQueue *</type>
      <name>queueModule</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a6df03c208a1c1a5ba68d8e3e9609c1fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cGate *</type>
      <name>physOutGate</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>aa83bcb5c4f6024e598c2bbbd2f7773bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterfaceEntry *</type>
      <name>interfaceEntry</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>af93500f5c3261e7d52d1b73e234b5977</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NotificationBoard *</type>
      <name>nb</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a60ced9495a8ce5a79d8cadd89aeafde9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TxNotifDetails</type>
      <name>notifDetails</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>acb06f2e60542cb3128065506b52d0806</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hasSubscribers</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a302d966ed62ce375d5a3e320b2131ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endTxMsg</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a9b054b17bf4311eae452c82b7345129c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endIFGMsg</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>aff45e7c294f90d4c381091e69227e409</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endPauseMsg</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>ae21daac2e0436b82e7c3bcd7ff673d71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>framesSentInBurst</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>ac375b2d52a008a9d67cc5a39d1142f94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bytesSentInBurst</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a84c2b0ce05482d8dc50182d880f30d58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numFramesSent</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a4a3c84673aeee74535c9d45db732ac74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numFramesReceivedOK</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>ab362e3dab6588c7bd7d06a951731055f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numBytesSent</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a99c30e737395408d0b501f39864441ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numBytesReceivedOK</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a2a20de751837dad02bb913e42c00bed7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numFramesFromHL</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>aa023724e043a0b1ee29b57c240d2a446</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numDroppedIfaceDown</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a3758c9954f38a63de0398d3f9ccaf581</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numDroppedBitError</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a967dc8c880a1513816466c776202ea4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numDroppedNotForUs</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>ad80444d8971c093b3974deabfe8ee294</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numFramesPassedToHL</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a77c26a21dc9b1cc9a759d78c52d43b99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numPauseFramesRcvd</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a5b2a8fc5412d43839ac22eb117222ef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numPauseFramesSent</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a8d966a21b0811d3fec20d668fc417936</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>numFramesSentVector</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a1e7452816f3668d84293c71efb9ab271</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>numFramesReceivedOKVector</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>aaf68d71228c452281ee3bba81d441568</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>numBytesSentVector</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a5921cb18de831fb282a6c7d4bdc0d0c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>numBytesReceivedOKVector</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a6967a5ed87d98bf2a2e1e80e73d93cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>numDroppedIfaceDownVector</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>ace7875fb620b96935e2b3735862f350c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>numDroppedBitErrorVector</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a1df5c4c90bf81447f9d95c705ae8d7cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>numDroppedNotForUsVector</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a5d147def64e0c1734e2ecfbf9245158b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>numFramesPassedToHLVector</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a15cade38df1a00de2e6cf956e5f4068d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>numPauseFramesRcvdVector</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>af2841cb712e24186366524630563c345</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>numPauseFramesSentVector</name>
      <anchorfile>class_ether_m_a_c_base.html</anchorfile>
      <anchor>a469b5e7fbc1af6a1c29514fdca2209a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EthernetIIFrame</name>
    <filename>class_ethernet_i_i_frame.html</filename>
    <base>EtherFrame</base>
    <member kind="function">
      <type></type>
      <name>EthernetIIFrame</name>
      <anchorfile>class_ethernet_i_i_frame.html</anchorfile>
      <anchor>ae1525f8a7cf3c719c568044143d5237f</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EthernetIIFrame</name>
      <anchorfile>class_ethernet_i_i_frame.html</anchorfile>
      <anchor>abd28bafbf3adf64cf5006d5f6df85e13</anchor>
      <arglist>(const EthernetIIFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EthernetIIFrame</name>
      <anchorfile>class_ethernet_i_i_frame.html</anchorfile>
      <anchor>a6b122e469e0a23d9aa1c468f3c9ea858</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EthernetIIFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ethernet_i_i_frame.html</anchorfile>
      <anchor>acf62d2ed67b6f839a35440bcd8f8567d</anchor>
      <arglist>(const EthernetIIFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EthernetIIFrame *</type>
      <name>dup</name>
      <anchorfile>class_ethernet_i_i_frame.html</anchorfile>
      <anchor>a109e348fbb31df6a24b3113090687e9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ethernet_i_i_frame.html</anchorfile>
      <anchor>a6320700a43ef4a95de841cf7e908d385</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ethernet_i_i_frame.html</anchorfile>
      <anchor>a48e83e4a086c61b5bd9458b95e0edec0</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getEtherType</name>
      <anchorfile>class_ethernet_i_i_frame.html</anchorfile>
      <anchor>a6b6e25161f552d615d27313e8a55682a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEtherType</name>
      <anchorfile>class_ethernet_i_i_frame.html</anchorfile>
      <anchor>ae6221ffe5740da53e7b1a78e6078e5bf</anchor>
      <arglist>(int etherType_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ethernet_i_i_frame.html</anchorfile>
      <anchor>acd5aaeab12b9b05b94c83bf1d7e40095</anchor>
      <arglist>(const EthernetIIFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>etherType_var</name>
      <anchorfile>class_ethernet_i_i_frame.html</anchorfile>
      <anchor>a9203724230cf20d36f3217f9a4f527dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherPauseFrame</name>
    <filename>class_ether_pause_frame.html</filename>
    <base>EtherFrame</base>
    <member kind="function">
      <type></type>
      <name>EtherPauseFrame</name>
      <anchorfile>class_ether_pause_frame.html</anchorfile>
      <anchor>a45aad186269cd2f3b52fe75324577487</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EtherPauseFrame</name>
      <anchorfile>class_ether_pause_frame.html</anchorfile>
      <anchor>a7f78ab8e7dc07f1eafa02a7368814b1b</anchor>
      <arglist>(const EtherPauseFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EtherPauseFrame</name>
      <anchorfile>class_ether_pause_frame.html</anchorfile>
      <anchor>a39f2265fb057d1c93ce7052a6aab874a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EtherPauseFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ether_pause_frame.html</anchorfile>
      <anchor>a4eba3eb2100c4083268c19fc7a6e4ccb</anchor>
      <arglist>(const EtherPauseFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EtherPauseFrame *</type>
      <name>dup</name>
      <anchorfile>class_ether_pause_frame.html</anchorfile>
      <anchor>a0e55ef1a8d6784e5664d1cdf077ea375</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ether_pause_frame.html</anchorfile>
      <anchor>ae524e853166eb20111ca55b227651e4e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ether_pause_frame.html</anchorfile>
      <anchor>ad6420e3363238b411ab045ea2d3a29cb</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPauseTime</name>
      <anchorfile>class_ether_pause_frame.html</anchorfile>
      <anchor>a42dc3eb8f15fac476a1677592a5c1fa6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPauseTime</name>
      <anchorfile>class_ether_pause_frame.html</anchorfile>
      <anchor>aa698c0e9f66d099f0437b4eb134b298a</anchor>
      <arglist>(int pauseTime_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ether_pause_frame.html</anchorfile>
      <anchor>a1c3c8e61fa62115e17188a64ee5b73ee</anchor>
      <arglist>(const EtherPauseFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>pauseTime_var</name>
      <anchorfile>class_ether_pause_frame.html</anchorfile>
      <anchor>afb90683c732470f432d6f9d93cc35502</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExternalTOSInfo</name>
    <filename>struct_external_t_o_s_info.html</filename>
    <member kind="function">
      <type></type>
      <name>ExternalTOSInfo</name>
      <anchorfile>struct_external_t_o_s_info.html</anchorfile>
      <anchor>a5fda6209f3c14f92871eaadbe8f4e006</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>::TOSData</type>
      <name>tosData</name>
      <anchorfile>struct_external_t_o_s_info.html</anchorfile>
      <anchor>a5ea8e5005994e0af205ef6588be14c25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>E_ExternalMetricType</name>
      <anchorfile>struct_external_t_o_s_info.html</anchorfile>
      <anchor>ade5932ffc98c64f15c05c682a10eb512</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::IPAddress</type>
      <name>forwardingAddress</name>
      <anchorfile>struct_external_t_o_s_info.html</anchorfile>
      <anchor>a8400668512ca42aa6527a59b873ff2bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>externalRouteTag</name>
      <anchorfile>struct_external_t_o_s_info.html</anchorfile>
      <anchor>a3015056f29cc931af8759413d5ae76ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ExtFrame</name>
    <filename>class_ext_frame.html</filename>
    <member kind="function">
      <type></type>
      <name>ExtFrame</name>
      <anchorfile>class_ext_frame.html</anchorfile>
      <anchor>a506d16de7b699b327f4eec32dada0980</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExtFrame</name>
      <anchorfile>class_ext_frame.html</anchorfile>
      <anchor>a93dbdfa7f26b29e695563163a95fb370</anchor>
      <arglist>(const ExtFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExtFrame</name>
      <anchorfile>class_ext_frame.html</anchorfile>
      <anchor>a6883c11ea252692e3da5b6c609757bac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ExtFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ext_frame.html</anchorfile>
      <anchor>a65b3279564a0788858c80b6b449c037d</anchor>
      <arglist>(const ExtFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExtFrame *</type>
      <name>dup</name>
      <anchorfile>class_ext_frame.html</anchorfile>
      <anchor>a4c02c37e0e21a0f0bf9556530d3f5129</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ext_frame.html</anchorfile>
      <anchor>a599a6157c42729e21b873d1b991a82ad</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ext_frame.html</anchorfile>
      <anchor>adab930b5a20d2b3e9792eec8cd82d552</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDataArraySize</name>
      <anchorfile>class_ext_frame.html</anchorfile>
      <anchor>a218dcc307c1989d3a8bf5a17eee485ff</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getDataArraySize</name>
      <anchorfile>class_ext_frame.html</anchorfile>
      <anchor>a85b2e66b77d13ec21363b54a5e805037</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint8</type>
      <name>getData</name>
      <anchorfile>class_ext_frame.html</anchorfile>
      <anchor>ae841cdc8e71c75e7a9aeb0b9005f6bdc</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setData</name>
      <anchorfile>class_ext_frame.html</anchorfile>
      <anchor>a1a79bb303321f770e5c0181067399126</anchor>
      <arglist>(unsigned int k, uint8 data_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ext_frame.html</anchorfile>
      <anchor>a8d46f5df6e1320500939cce0e248d506</anchor>
      <arglist>(const ExtFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint8 *</type>
      <name>data_var</name>
      <anchorfile>class_ext_frame.html</anchorfile>
      <anchor>a9bb84cfd9b44b0c1d5848f15342858c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>data_arraysize</name>
      <anchorfile>class_ext_frame.html</anchorfile>
      <anchor>aa9f6f638ae463639388f8e99f5ec3515</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ExtInterface</name>
    <filename>class_ext_interface.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual int32</type>
      <name>numInitStages</name>
      <anchorfile>class_ext_interface.html</anchorfile>
      <anchor>a6478e0bc653a2afed3e04d5f195dcc84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_ext_interface.html</anchorfile>
      <anchor>a474fb11b9b935298b2f621b4c538d216</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_ext_interface.html</anchorfile>
      <anchor>ac9916da77ebe48168f99ad5188499051</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_ext_interface.html</anchorfile>
      <anchor>a7f7ee40c612f265a9d6b2db6ab5c9a1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InterfaceEntry *</type>
      <name>registerInterface</name>
      <anchorfile>class_ext_interface.html</anchorfile>
      <anchor>a48a0b9afce73360c73ef6d0840907766</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>displayBusy</name>
      <anchorfile>class_ext_interface.html</anchorfile>
      <anchor>a5fb086fd72721a270552454de4cbee99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>displayIdle</name>
      <anchorfile>class_ext_interface.html</anchorfile>
      <anchor>ac0a4792c32f8801e0f869d1fb80fd394</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplayString</name>
      <anchorfile>class_ext_interface.html</anchorfile>
      <anchor>a8c5a1a31446f1dbec4f112c321001beb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>connected</name>
      <anchorfile>class_ext_interface.html</anchorfile>
      <anchor>a237dfba93803f7243699b77c9286ea15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint8</type>
      <name>buffer</name>
      <anchorfile>class_ext_interface.html</anchorfile>
      <anchor>a0441b7dbc19df71b01d4a4782bfcf4a6</anchor>
      <arglist>[1&lt;&lt; 16]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>device</name>
      <anchorfile>class_ext_interface.html</anchorfile>
      <anchor>a612413a06e8b189a9f9ee41395839e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterfaceEntry *</type>
      <name>interfaceEntry</name>
      <anchorfile>class_ext_interface.html</anchorfile>
      <anchor>a16e2db9843e95cb9236fc2166e66f2ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint64</type>
      <name>numSent</name>
      <anchorfile>class_ext_interface.html</anchorfile>
      <anchor>a69ef29ef51f351e8120ac771c48a9058</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint64</type>
      <name>numRcvd</name>
      <anchorfile>class_ext_interface.html</anchorfile>
      <anchor>a7019986adc8492517578c57ef0d5379c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint64</type>
      <name>numDropped</name>
      <anchorfile>class_ext_interface.html</anchorfile>
      <anchor>aaf35da21d9c6d0adafc47e5794c349d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cSocketRTScheduler *</type>
      <name>rtScheduler</name>
      <anchorfile>class_ext_interface.html</anchorfile>
      <anchor>a0ad9b7cdda887501a19356ab948ca685</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>tag_color</name>
      <anchorfile>class_ext_interface.html</anchorfile>
      <anchor>af7b4514fb739714324f342dfd867dc4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>tag_width</name>
      <anchorfile>class_ext_interface.html</anchorfile>
      <anchor>a4348d9f65f1dec1e046b9839fdd2ad42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FailureManager</name>
    <filename>class_failure_manager.html</filename>
    <base>IScriptable</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_failure_manager.html</anchorfile>
      <anchor>a7ff85750593628612861002ce1c489bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_failure_manager.html</anchorfile>
      <anchor>aea5cb3ed1ccce8fe8540bfb28606906e</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processCommand</name>
      <anchorfile>class_failure_manager.html</anchorfile>
      <anchor>a7e0a4a91288010f417a4b20b02a146ab</anchor>
      <arglist>(const cXMLElement &amp;node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>replaceNode</name>
      <anchorfile>class_failure_manager.html</anchorfile>
      <anchor>aa894f0d15ee00b3542181fdd236639e3</anchor>
      <arglist>(cModule *mod, const char *newNodeType)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>reconnectNode</name>
      <anchorfile>class_failure_manager.html</anchorfile>
      <anchor>a5245ed2f9651a1fe0c511fc4a35ac0c6</anchor>
      <arglist>(cModule *old, cModule *n)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>reconnectAllGates</name>
      <anchorfile>class_failure_manager.html</anchorfile>
      <anchor>a7bbf4a13ff50cee8615cf171af00e2c7</anchor>
      <arglist>(cModule *old, cModule *n)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>reconnectGates</name>
      <anchorfile>class_failure_manager.html</anchorfile>
      <anchor>abab9de4e25dc850227bd6105dcb1df9a</anchor>
      <arglist>(cModule *old, cModule *n, const char *gateName, int gateIndex=-1)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>reconnectGate</name>
      <anchorfile>class_failure_manager.html</anchorfile>
      <anchor>a07519c556ec1a995d63374a54049dc3c</anchor>
      <arglist>(cGate *oldGate, cGate *newGate)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getTargetNode</name>
      <anchorfile>class_failure_manager.html</anchorfile>
      <anchor>ad421a26712c62ba5d8be35933c0268a2</anchor>
      <arglist>(const char *target)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static cChannel *</type>
      <name>copyChannel</name>
      <anchorfile>class_failure_manager.html</anchorfile>
      <anchor>a021551b6db9defca82de1d70a076c8a4</anchor>
      <arglist>(cChannel *channel)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>copyParams</name>
      <anchorfile>class_failure_manager.html</anchorfile>
      <anchor>a82ccde39845b0568b14699fa36f00d9b</anchor>
      <arglist>(cComponent *from, cComponent *to)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>FEC_TLV</name>
    <filename>struct_f_e_c___t_l_v.html</filename>
    <member kind="function">
      <type></type>
      <name>FEC_TLV</name>
      <anchorfile>struct_f_e_c___t_l_v.html</anchorfile>
      <anchor>a161fdbaa4f5fd1e2a206a424dcf2c64e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>::IPAddress</type>
      <name>addr</name>
      <anchorfile>struct_f_e_c___t_l_v.html</anchorfile>
      <anchor>abd7a5297a97dd0212bae8e2c86d285d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>length</name>
      <anchorfile>struct_f_e_c___t_l_v.html</anchorfile>
      <anchor>a2458693c3117cfa3fc4e43aa0c17f84e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>FilterSpecObj_t</name>
    <filename>struct_filter_spec_obj__t.html</filename>
    <base>SenderTemplateObj_t</base>
    <member kind="function">
      <type></type>
      <name>FilterSpecObj_t</name>
      <anchorfile>struct_filter_spec_obj__t.html</anchorfile>
      <anchor>a9c96df589ae58b417a106e2d785bfe2d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FlatNetworkConfigurator</name>
    <filename>class_flat_network_configurator.html</filename>
    <class kind="struct">FlatNetworkConfigurator::NodeInfo</class>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; NodeInfo &gt;</type>
      <name>NodeInfoVector</name>
      <anchorfile>class_flat_network_configurator.html</anchorfile>
      <anchor>a047eb4ea937e8bfa0b293d5e20d15aee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_flat_network_configurator.html</anchorfile>
      <anchor>a1c26756fdf75854440006660fe6f01a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_flat_network_configurator.html</anchorfile>
      <anchor>ad8b6f6f6759741a730880759e318d4c5</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_flat_network_configurator.html</anchorfile>
      <anchor>aeb68888d73d49feda9ac77ded1552e40</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>extractTopology</name>
      <anchorfile>class_flat_network_configurator.html</anchorfile>
      <anchor>aae0a772cbf701e006ae74fbca93f0773</anchor>
      <arglist>(cTopology &amp;topo, NodeInfoVector &amp;nodeInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>assignAddresses</name>
      <anchorfile>class_flat_network_configurator.html</anchorfile>
      <anchor>a305d4e1e5e969d82235809db80daedce</anchor>
      <arglist>(cTopology &amp;topo, NodeInfoVector &amp;nodeInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addDefaultRoutes</name>
      <anchorfile>class_flat_network_configurator.html</anchorfile>
      <anchor>a4d2882c8d8b528fad740df6878b3d1f4</anchor>
      <arglist>(cTopology &amp;topo, NodeInfoVector &amp;nodeInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fillRoutingTables</name>
      <anchorfile>class_flat_network_configurator.html</anchorfile>
      <anchor>ae2d746c7464effca7cdddcc0834d928d</anchor>
      <arglist>(cTopology &amp;topo, NodeInfoVector &amp;nodeInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setDisplayString</name>
      <anchorfile>class_flat_network_configurator.html</anchorfile>
      <anchor>ad722dd91e2cd7989a9845d0a0b2b5e0d</anchor>
      <arglist>(cTopology &amp;topo, NodeInfoVector &amp;nodeInfo)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>FlatNetworkConfigurator::NodeInfo</name>
    <filename>struct_flat_network_configurator_1_1_node_info.html</filename>
    <member kind="function">
      <type></type>
      <name>NodeInfo</name>
      <anchorfile>struct_flat_network_configurator_1_1_node_info.html</anchorfile>
      <anchor>a7b7d86439c6359e0a011538038213530</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isIPNode</name>
      <anchorfile>struct_flat_network_configurator_1_1_node_info.html</anchorfile>
      <anchor>a7c613bb9edb00c0d3e3e5d3344479116</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IInterfaceTable *</type>
      <name>ift</name>
      <anchorfile>struct_flat_network_configurator_1_1_node_info.html</anchorfile>
      <anchor>a70cfdf66ee1caff115a0e80587e5a500</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IRoutingTable *</type>
      <name>rt</name>
      <anchorfile>struct_flat_network_configurator_1_1_node_info.html</anchorfile>
      <anchor>afa6bf38ac1dd075363b23738e6eb55d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>address</name>
      <anchorfile>struct_flat_network_configurator_1_1_node_info.html</anchorfile>
      <anchor>aa00d28278e902770510b37463270276b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>usesDefaultRoute</name>
      <anchorfile>struct_flat_network_configurator_1_1_node_info.html</anchorfile>
      <anchor>ab27088edd872e9f320f08debd132b588</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FlatNetworkConfigurator6</name>
    <filename>class_flat_network_configurator6.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_flat_network_configurator6.html</anchorfile>
      <anchor>a2f5695e02c3283882731e5b252d1192d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_flat_network_configurator6.html</anchorfile>
      <anchor>a7384a5ea6158f37546987a6bdf32f9b0</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_flat_network_configurator6.html</anchorfile>
      <anchor>a77ac0593d710a8dc41f3cfc23f6236b7</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>configureAdvPrefixes</name>
      <anchorfile>class_flat_network_configurator6.html</anchorfile>
      <anchor>a4b3401699c2735d6a42e36c3df86b010</anchor>
      <arglist>(cTopology &amp;topo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addOwnAdvPrefixRoutes</name>
      <anchorfile>class_flat_network_configurator6.html</anchorfile>
      <anchor>aa4e9be7807116b4b03193292cefa7368</anchor>
      <arglist>(cTopology &amp;topo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addStaticRoutes</name>
      <anchorfile>class_flat_network_configurator6.html</anchorfile>
      <anchor>a684fdefcfe46d118e158423c3f77fe22</anchor>
      <arglist>(cTopology &amp;topo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setDisplayString</name>
      <anchorfile>class_flat_network_configurator6.html</anchorfile>
      <anchor>a75dc3f9363d2ee61dae93998034adcfa</anchor>
      <arglist>(int numIPNodes, int numNonIPNodes)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isIPNode</name>
      <anchorfile>class_flat_network_configurator6.html</anchorfile>
      <anchor>aedf7247f30e97c587d9e94069f59c3c4</anchor>
      <arglist>(cTopology::Node *node)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>FlowDescriptor_t</name>
    <filename>struct_flow_descriptor__t.html</filename>
    <member kind="function">
      <type></type>
      <name>FlowDescriptor_t</name>
      <anchorfile>struct_flow_descriptor__t.html</anchorfile>
      <anchor>a9d1a5ca60863942ef811b1f310a50ddd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>::FlowSpecObj_t</type>
      <name>Flowspec_Object</name>
      <anchorfile>struct_flow_descriptor__t.html</anchorfile>
      <anchor>a66675069c50ee542c00bbeac43f51fbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::FilterSpecObj_t</type>
      <name>Filter_Spec_Object</name>
      <anchorfile>struct_flow_descriptor__t.html</anchorfile>
      <anchor>a127df251ef2d7b9da5f28c96b5bfdfef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::IPAddressVector</type>
      <name>RRO</name>
      <anchorfile>struct_flow_descriptor__t.html</anchorfile>
      <anchor>a7afb9a7edad01f14cccfcf2a83b6cbea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>label</name>
      <anchorfile>struct_flow_descriptor__t.html</anchorfile>
      <anchor>a1c1607c17ed24a30b186f7648248fb58</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>FlowSpecObj_t</name>
    <filename>struct_flow_spec_obj__t.html</filename>
    <base>SenderTspecObj_t</base>
    <member kind="function">
      <type></type>
      <name>FlowSpecObj_t</name>
      <anchorfile>struct_flow_spec_obj__t.html</anchorfile>
      <anchor>a7bd4e54c8d052bf3b33c3d074304d201</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FWMath</name>
    <filename>class_f_w_math.html</filename>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>mod</name>
      <anchorfile>class_f_w_math.html</anchorfile>
      <anchor>a2867eea5a97b7685de513a989046f699</anchor>
      <arglist>(double dividend, double divisor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>div</name>
      <anchorfile>class_f_w_math.html</anchorfile>
      <anchor>a76f6d077fea756cc254c9405d0b51708</anchor>
      <arglist>(double dividend, double divisor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>close</name>
      <anchorfile>class_f_w_math.html</anchorfile>
      <anchor>a38d2500887b49de2a2b5f8610f7ba6d1</anchor>
      <arglist>(double one, double two)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>stepfunction</name>
      <anchorfile>class_f_w_math.html</anchorfile>
      <anchor>a4d2b3271455f9f914bd85c0e22064c09</anchor>
      <arglist>(double i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>sign</name>
      <anchorfile>class_f_w_math.html</anchorfile>
      <anchor>aa9f55c74f3cb5eb99d5ff3d00ca3d281</anchor>
      <arglist>(double i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>round</name>
      <anchorfile>class_f_w_math.html</anchorfile>
      <anchor>ad5b2d4a46bf7af77e9cc0070b6a82c18</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>max</name>
      <anchorfile>class_f_w_math.html</anchorfile>
      <anchor>a7fd5acab90d26f509178dbda7935adcf</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>dBm2mW</name>
      <anchorfile>class_f_w_math.html</anchorfile>
      <anchor>af308407856d9835b103f2421e373ee28</anchor>
      <arglist>(double dBm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericAppMsg</name>
    <filename>class_generic_app_msg.html</filename>
    <member kind="function">
      <type></type>
      <name>GenericAppMsg</name>
      <anchorfile>class_generic_app_msg.html</anchorfile>
      <anchor>a6bf34093320cb1b454693a9b4b9c5d37</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericAppMsg</name>
      <anchorfile>class_generic_app_msg.html</anchorfile>
      <anchor>ae1732e17d5a0e4135449930e60305a51</anchor>
      <arglist>(const GenericAppMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericAppMsg</name>
      <anchorfile>class_generic_app_msg.html</anchorfile>
      <anchor>a193541396c7ba5eb4f6e941bfeb6e47f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GenericAppMsg &amp;</type>
      <name>operator=</name>
      <anchorfile>class_generic_app_msg.html</anchorfile>
      <anchor>ab086038a148a6a07c57e5e082779da21</anchor>
      <arglist>(const GenericAppMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GenericAppMsg *</type>
      <name>dup</name>
      <anchorfile>class_generic_app_msg.html</anchorfile>
      <anchor>ad106b0a24b8b1b64b52acfe7aae16f9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_generic_app_msg.html</anchorfile>
      <anchor>a7e5c228c8913cf23dc55ead567051275</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_generic_app_msg.html</anchorfile>
      <anchor>a267c8b8f113bc72fcdfd9ba49b052e27</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getExpectedReplyLength</name>
      <anchorfile>class_generic_app_msg.html</anchorfile>
      <anchor>a14ec967646fa30f70f4042f4ba99f5c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpectedReplyLength</name>
      <anchorfile>class_generic_app_msg.html</anchorfile>
      <anchor>a3eeb8b520c49518b55d0b717f7abb73c</anchor>
      <arglist>(int expectedReplyLength_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getReplyDelay</name>
      <anchorfile>class_generic_app_msg.html</anchorfile>
      <anchor>a1a735ef9361b32271a29d3cd3ba2cff5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReplyDelay</name>
      <anchorfile>class_generic_app_msg.html</anchorfile>
      <anchor>ad6afb60718f9cede4ac6996d38bfcf28</anchor>
      <arglist>(double replyDelay_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getServerClose</name>
      <anchorfile>class_generic_app_msg.html</anchorfile>
      <anchor>a57e86b105b8193c750645af4d38bee53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setServerClose</name>
      <anchorfile>class_generic_app_msg.html</anchorfile>
      <anchor>a68f4625b885743161da8ae8959879daa</anchor>
      <arglist>(bool serverClose_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_generic_app_msg.html</anchorfile>
      <anchor>adf9cb19925ad6a7289327fa19333a71a</anchor>
      <arglist>(const GenericAppMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>expectedReplyLength_var</name>
      <anchorfile>class_generic_app_msg.html</anchorfile>
      <anchor>a65430840ec19623d5f5903e12b4571d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>replyDelay_var</name>
      <anchorfile>class_generic_app_msg.html</anchorfile>
      <anchor>a78776e11f2325d3eed7eadd5a3484780</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>serverClose_var</name>
      <anchorfile>class_generic_app_msg.html</anchorfile>
      <anchor>ae1b9c04afded7997923496651459839b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericRadio</name>
    <filename>class_generic_radio.html</filename>
    <base>AbstractRadio</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IReceptionModel *</type>
      <name>createReceptionModel</name>
      <anchorfile>class_generic_radio.html</anchorfile>
      <anchor>a61aa21621eeb1ee1afd0a404dbe9197e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IRadioModel *</type>
      <name>createRadioModel</name>
      <anchorfile>class_generic_radio.html</anchorfile>
      <anchor>a147fee60c155fca1b49d708f9d63b934</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericRadioModel</name>
    <filename>class_generic_radio_model.html</filename>
    <base>IRadioModel</base>
    <member kind="function">
      <type></type>
      <name>GenericRadioModel</name>
      <anchorfile>class_generic_radio_model.html</anchorfile>
      <anchor>aee8268ebcc49b55d103199e38e6fa471</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericRadioModel</name>
      <anchorfile>class_generic_radio_model.html</anchorfile>
      <anchor>aeaf0feff783e344445912c32bc6630e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeFrom</name>
      <anchorfile>class_generic_radio_model.html</anchorfile>
      <anchor>a25b0db4fae6bfa7d46ff38e1b7bd072e</anchor>
      <arglist>(cModule *radioModule)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>calculateDuration</name>
      <anchorfile>class_generic_radio_model.html</anchorfile>
      <anchor>af1154c80f6921db39470dc0b412aa204</anchor>
      <arglist>(AirFrame *airframe)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isReceivedCorrectly</name>
      <anchorfile>class_generic_radio_model.html</anchorfile>
      <anchor>adb06639d7e365ddb00b0b42eccecb515</anchor>
      <arglist>(AirFrame *airframe, const SnrList &amp;receivedList)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPacketOK</name>
      <anchorfile>class_generic_radio_model.html</anchorfile>
      <anchor>adedc6f8327e9a44235180416d23d462b</anchor>
      <arglist>(double snirMin, int length, double bitrate)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>dB2fraction</name>
      <anchorfile>class_generic_radio_model.html</anchorfile>
      <anchor>a8ecbbe2c623ce8b1eeda532ff03b83ef</anchor>
      <arglist>(double dB)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>snirThreshold</name>
      <anchorfile>class_generic_radio_model.html</anchorfile>
      <anchor>a1c0fd5c7739c1a3b63a073b09ee72386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>headerLengthBits</name>
      <anchorfile>class_generic_radio_model.html</anchorfile>
      <anchor>a6786809e88cbdf4d953a890f29fe253c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bandwidth</name>
      <anchorfile>class_generic_radio_model.html</anchorfile>
      <anchor>a81eba019e2d942c59d858bc16a174ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IModulation *</type>
      <name>modulation</name>
      <anchorfile>class_generic_radio_model.html</anchorfile>
      <anchor>a0fd8b22941bc4c99e3e2de65b20cbd74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GilbertElliotSnr</name>
    <filename>class_gilbert_elliot_snr.html</filename>
    <base>SnrEval</base>
    <member kind="function">
      <type></type>
      <name>GilbertElliotSnr</name>
      <anchorfile>class_gilbert_elliot_snr.html</anchorfile>
      <anchor>ae02eec1a4a054235a125a2d5c19407d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GilbertElliotSnr</name>
      <anchorfile>class_gilbert_elliot_snr.html</anchorfile>
      <anchor>ac008a6b8f104c68f6b5afa36c2acc1a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration">
      <name>State</name>
      <anchorfile>class_gilbert_elliot_snr.html</anchorfile>
      <anchor>a56daf6d1ebc4d15acda53702f9ac57d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GOOD</name>
      <anchorfile>class_gilbert_elliot_snr.html</anchorfile>
      <anchor>a56daf6d1ebc4d15acda53702f9ac57d6a654c2902c8fd3d09aa36ab5cdf09fed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD</name>
      <anchorfile>class_gilbert_elliot_snr.html</anchorfile>
      <anchor>a56daf6d1ebc4d15acda53702f9ac57d6aad228caa67311c37b0eeeb5204b6f66a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_gilbert_elliot_snr.html</anchorfile>
      <anchor>a0886205c3ab74194fb14ccd7495498df</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_gilbert_elliot_snr.html</anchorfile>
      <anchor>a16deedca42913461c667c319487eb4a4</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsgStart</name>
      <anchorfile>class_gilbert_elliot_snr.html</anchorfile>
      <anchor>a7e5d2fb286b5a2a78834a6d5a7ccd392</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsgEnd</name>
      <anchorfile>class_gilbert_elliot_snr.html</anchorfile>
      <anchor>a8cce1850da492f871c08ddcb3647b2ed</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>State</type>
      <name>state</name>
      <anchorfile>class_gilbert_elliot_snr.html</anchorfile>
      <anchor>a68b860e38ce5be9a94cd9f96ffe01524</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>meanGood</name>
      <anchorfile>class_gilbert_elliot_snr.html</anchorfile>
      <anchor>a0ccd32cd10b6ff40e867dc405f7bc478</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>meanBad</name>
      <anchorfile>class_gilbert_elliot_snr.html</anchorfile>
      <anchor>a0d11343b892fad29a3286331e91771cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>stateChange</name>
      <anchorfile>class_gilbert_elliot_snr.html</anchorfile>
      <anchor>ad753c14038c286afef497bcb288f850d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hdr_ethernet_t</name>
    <filename>structhdr__ethernet__t.html</filename>
    <member kind="variable">
      <type>uint8</type>
      <name>dest_addr</name>
      <anchorfile>structhdr__ethernet__t.html</anchorfile>
      <anchor>aa73c881269260d1c4798155e51643dbc</anchor>
      <arglist>[6]</arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>src_addr</name>
      <anchorfile>structhdr__ethernet__t.html</anchorfile>
      <anchor>a1878cd07bbe6919ccff108743de227cd</anchor>
      <arglist>[6]</arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>l3pid</name>
      <anchorfile>structhdr__ethernet__t.html</anchorfile>
      <anchor>a64a4ce637c0c791ce20235b4150a2cb0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>heartbeat_ack_chunk</name>
    <filename>structheartbeat__ack__chunk.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>structheartbeat__ack__chunk.html</anchorfile>
      <anchor>a063a7ca61a236936f34bf95d0942f72f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>flags</name>
      <anchorfile>structheartbeat__ack__chunk.html</anchorfile>
      <anchor>a8a89895a278b28b54c1b99983296d979</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>structheartbeat__ack__chunk.html</anchorfile>
      <anchor>aacfcf9165ec41a3a3d1ebc96cd86cfa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>heartbeat_info</name>
      <anchorfile>structheartbeat__ack__chunk.html</anchorfile>
      <anchor>aaf3c863cdad357c4ecfdea99da200569</anchor>
      <arglist>[0]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>heartbeat_chunk</name>
    <filename>structheartbeat__chunk.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>structheartbeat__chunk.html</anchorfile>
      <anchor>a6ffe229f9e7dfa548b4949093c13bf0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>flags</name>
      <anchorfile>structheartbeat__chunk.html</anchorfile>
      <anchor>aa79a6cd85e2d5fbb4319c2cd9e528463</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>structheartbeat__chunk.html</anchorfile>
      <anchor>a5c20abb915c60e45107554041a42e0bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>heartbeat_info</name>
      <anchorfile>structheartbeat__chunk.html</anchorfile>
      <anchor>a7e08c8010b85658b6ddbce1a82a1a79c</anchor>
      <arglist>[0]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>heartbeat_info</name>
    <filename>structheartbeat__info.html</filename>
    <member kind="variable">
      <type>unsigned short</type>
      <name>type</name>
      <anchorfile>structheartbeat__info.html</anchorfile>
      <anchor>a5bcbd7393c0f22a5397a9a515664774b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>structheartbeat__info.html</anchorfile>
      <anchor>a55435852b48b1bc49e376bc20586bf4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>union heartbeat_info::@6</type>
      <name>heartbeat_info_union</name>
      <anchorfile>structheartbeat__info.html</anchorfile>
      <anchor>a29d590848738b355443cb5516c890d20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>info</name>
      <anchorfile>unionheartbeat__info_1_1@6.html</anchorfile>
      <anchor>a0a4579576b7132c2d6b0e07d6c80f011</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>struct heartbeat_info::@6::@7</type>
      <name>addr_and_time</name>
      <anchorfile>unionheartbeat__info_1_1@6.html</anchorfile>
      <anchor>a3aadf8276cec827283058e15d22c06e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>addr</name>
      <anchorfile>structheartbeat__info_1_1@6_1_1@7.html</anchorfile>
      <anchor>a465b273668ba81fa825169bd02c5191f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>time</name>
      <anchorfile>structheartbeat__info_1_1@6_1_1@7.html</anchorfile>
      <anchor>a707e5df923a181d152fd5cbc03b3f2be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HelloTimeoutMsg</name>
    <filename>class_hello_timeout_msg.html</filename>
    <base>SignallingMsg</base>
    <member kind="function">
      <type></type>
      <name>HelloTimeoutMsg</name>
      <anchorfile>class_hello_timeout_msg.html</anchorfile>
      <anchor>a08ea076a9acc16db0adca24caf4aa0a2</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HelloTimeoutMsg</name>
      <anchorfile>class_hello_timeout_msg.html</anchorfile>
      <anchor>ac4a8edabb05042150992dca2d6f3ecfd</anchor>
      <arglist>(const HelloTimeoutMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HelloTimeoutMsg</name>
      <anchorfile>class_hello_timeout_msg.html</anchorfile>
      <anchor>a5fd582065f70aefd2f83547dfba2d49d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HelloTimeoutMsg &amp;</type>
      <name>operator=</name>
      <anchorfile>class_hello_timeout_msg.html</anchorfile>
      <anchor>a73f44569b02589fb7b2c1c7e6ee189ed</anchor>
      <arglist>(const HelloTimeoutMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HelloTimeoutMsg *</type>
      <name>dup</name>
      <anchorfile>class_hello_timeout_msg.html</anchorfile>
      <anchor>a87babc2147497fed86fe8168a854596b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_hello_timeout_msg.html</anchorfile>
      <anchor>a0de1bb97183ec0591d83b5d4ad40da77</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_hello_timeout_msg.html</anchorfile>
      <anchor>aa1cb7d89a74fea5a5640537acc0b22f2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getPeer</name>
      <anchorfile>class_hello_timeout_msg.html</anchorfile>
      <anchor>a0be97c72fff7399df8dd04d23305d065</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getPeer</name>
      <anchorfile>class_hello_timeout_msg.html</anchorfile>
      <anchor>aabc670d9e6021d2aabd8295e61dc1e1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPeer</name>
      <anchorfile>class_hello_timeout_msg.html</anchorfile>
      <anchor>ae08634f7e32a1d63f6ba8193f880d031</anchor>
      <arglist>(const IPAddress &amp;peer_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommand</name>
      <anchorfile>class_hello_timeout_msg.html</anchorfile>
      <anchor>aae8a83af5bf7347877179c8db870dc6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchorfile>class_hello_timeout_msg.html</anchorfile>
      <anchor>a44085532ecdc7c0d61cf9d6d1b15bfda</anchor>
      <arglist>(int command_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_hello_timeout_msg.html</anchorfile>
      <anchor>a341b514fffbe48d1aaf9405e56761888</anchor>
      <arglist>(const HelloTimeoutMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>peer_var</name>
      <anchorfile>class_hello_timeout_msg.html</anchorfile>
      <anchor>af4bb0d7bd905ff3954c32bd83f274f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>command_var</name>
      <anchorfile>class_hello_timeout_msg.html</anchorfile>
      <anchor>a37bb074a83c6bceeef9ab4aea58e087c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HelloTimerMsg</name>
    <filename>class_hello_timer_msg.html</filename>
    <base>SignallingMsg</base>
    <member kind="function">
      <type></type>
      <name>HelloTimerMsg</name>
      <anchorfile>class_hello_timer_msg.html</anchorfile>
      <anchor>aacb97ec25fc13d10aeeb950a340c571b</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HelloTimerMsg</name>
      <anchorfile>class_hello_timer_msg.html</anchorfile>
      <anchor>a2be80c91cf285dbe0baece4eb613f54f</anchor>
      <arglist>(const HelloTimerMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HelloTimerMsg</name>
      <anchorfile>class_hello_timer_msg.html</anchorfile>
      <anchor>a89e4cc37b65e6f0f4fe7339c1c0a9356</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HelloTimerMsg &amp;</type>
      <name>operator=</name>
      <anchorfile>class_hello_timer_msg.html</anchorfile>
      <anchor>ab7177ce5aaaf83841f503f1bc960751d</anchor>
      <arglist>(const HelloTimerMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HelloTimerMsg *</type>
      <name>dup</name>
      <anchorfile>class_hello_timer_msg.html</anchorfile>
      <anchor>a749ce620b499ff359042435556ad7286</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_hello_timer_msg.html</anchorfile>
      <anchor>aecd39835624945907e955c234b19cf0e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_hello_timer_msg.html</anchorfile>
      <anchor>a1b94b6711a2b6a4d705a6557e225c51c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getPeer</name>
      <anchorfile>class_hello_timer_msg.html</anchorfile>
      <anchor>a847e78ec3db1b06ef692d9da85ea87a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getPeer</name>
      <anchorfile>class_hello_timer_msg.html</anchorfile>
      <anchor>a0cc825a0c6240562fb5c8d49be1f0b29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPeer</name>
      <anchorfile>class_hello_timer_msg.html</anchorfile>
      <anchor>a759043d71440db8b07c0984ee8a34fc4</anchor>
      <arglist>(const IPAddress &amp;peer_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommand</name>
      <anchorfile>class_hello_timer_msg.html</anchorfile>
      <anchor>a2a7e5843efb7d87270dea7bf46dadf51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchorfile>class_hello_timer_msg.html</anchorfile>
      <anchor>a4376e11fe8b140bc8fb7a536664fd9a7</anchor>
      <arglist>(int command_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_hello_timer_msg.html</anchorfile>
      <anchor>a661b78142feaef7f9890a87c95982d28</anchor>
      <arglist>(const HelloTimerMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>peer_var</name>
      <anchorfile>class_hello_timer_msg.html</anchorfile>
      <anchor>afccfae3415861ccfd884473b0fe2c527</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>command_var</name>
      <anchorfile>class_hello_timer_msg.html</anchorfile>
      <anchor>a87f39a60e7fc4d38418591e7ba2f238d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IClassifier</name>
    <filename>class_i_classifier.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IClassifier</name>
      <anchorfile>class_i_classifier.html</anchorfile>
      <anchor>a8ed25f0baa2b39965296f50bcc32195a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>lookupLabel</name>
      <anchorfile>class_i_classifier.html</anchorfile>
      <anchor>aba6e1b589f1c6a6416a6118001b33e31</anchor>
      <arglist>(IPDatagram *ipdatagram, LabelOpVector &amp;outLabel, std::string &amp;outInterface, int &amp;color)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ICMP</name>
    <filename>class_i_c_m_p.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendErrorMessage</name>
      <anchorfile>class_i_c_m_p.html</anchorfile>
      <anchor>aba71ad81ea6722c162a1d15f90202446</anchor>
      <arglist>(IPDatagram *datagram, ICMPType type, ICMPCode code)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendErrorMessage</name>
      <anchorfile>class_i_c_m_p.html</anchorfile>
      <anchor>a714ea1c38f64a0a53ae123b2c100df63</anchor>
      <arglist>(cPacket *transportPacket, IPControlInfo *ctrl, ICMPType type, ICMPCode code)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processICMPMessage</name>
      <anchorfile>class_i_c_m_p.html</anchorfile>
      <anchor>a77db33997979f4905ee57d9e501b798e</anchor>
      <arglist>(ICMPMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>errorOut</name>
      <anchorfile>class_i_c_m_p.html</anchorfile>
      <anchor>ab103aa9e463f7583dd37f82c55e52b1c</anchor>
      <arglist>(ICMPMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processEchoRequest</name>
      <anchorfile>class_i_c_m_p.html</anchorfile>
      <anchor>a629e11d00ac9f4cd014c58bbc8440266</anchor>
      <arglist>(ICMPMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processEchoReply</name>
      <anchorfile>class_i_c_m_p.html</anchorfile>
      <anchor>a715d4731f2e111f653c53e7dcf8d8810</anchor>
      <arglist>(ICMPMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendEchoRequest</name>
      <anchorfile>class_i_c_m_p.html</anchorfile>
      <anchor>ad56e65b6cbb4ea16ee11b8a5f2328626</anchor>
      <arglist>(cPacket *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToIP</name>
      <anchorfile>class_i_c_m_p.html</anchorfile>
      <anchor>a5007b8ee0752c12784a94f896d09cf4a</anchor>
      <arglist>(ICMPMessage *, const IPAddress &amp;dest)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToIP</name>
      <anchorfile>class_i_c_m_p.html</anchorfile>
      <anchor>a73387c01edde772eb485e5328646ea40</anchor>
      <arglist>(ICMPMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_i_c_m_p.html</anchorfile>
      <anchor>abc34fb76d6e1e6987dc39ca292aa8659</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RoutingTableAccess</type>
      <name>routingTableAccess</name>
      <anchorfile>class_i_c_m_p.html</anchorfile>
      <anchor>a292095d944ce5a9313b0acac432f133a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>icmp</name>
    <filename>structicmp.html</filename>
    <member kind="variable">
      <type>u_char</type>
      <name>icmp_type</name>
      <anchorfile>structicmp.html</anchorfile>
      <anchor>aa1e03d610e2391565d96ef5ace20caf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>icmp_code</name>
      <anchorfile>structicmp.html</anchorfile>
      <anchor>a4db7a65d2113b9800928821b67494ee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>icmp_cksum</name>
      <anchorfile>structicmp.html</anchorfile>
      <anchor>af1087f74d787650ed3b46ea777de030f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>union icmp::@4</type>
      <name>icmp_hun</name>
      <anchorfile>structicmp.html</anchorfile>
      <anchor>a0329d5c370d7866c51ca888e226cd2aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ih_pptr</name>
      <anchorfile>unionicmp_1_1@4.html</anchorfile>
      <anchor>a17c6cea45893ec1645192fc446cd76d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct in_addr</type>
      <name>ih_gwaddr</name>
      <anchorfile>unionicmp_1_1@4.html</anchorfile>
      <anchor>a5a74375e5f6d881c92296366cbe0139d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct icmp::@4::ih_idseq</type>
      <name>ih_idseq</name>
      <anchorfile>unionicmp_1_1@4.html</anchorfile>
      <anchor>a7543826541faa4caa2ede009c011f909</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_short</type>
      <name>icd_id</name>
      <anchorfile>structicmp_1_1@4_1_1ih__idseq.html</anchorfile>
      <anchor>a4ed18874ce1e23b7c67fc7406070fda6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_short</type>
      <name>icd_seq</name>
      <anchorfile>structicmp_1_1@4_1_1ih__idseq.html</anchorfile>
      <anchor>ad33ac3704d4529a01d94dfb9eb727a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ih_void</name>
      <anchorfile>unionicmp_1_1@4.html</anchorfile>
      <anchor>a0eb5387fe17fac16ef36dd016f5eed9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct icmp::@4::ih_pmtu</type>
      <name>ih_pmtu</name>
      <anchorfile>unionicmp_1_1@4.html</anchorfile>
      <anchor>a1b8627288eeda4328afb9b616b97ad83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_short</type>
      <name>ipm_void</name>
      <anchorfile>structicmp_1_1@4_1_1ih__pmtu.html</anchorfile>
      <anchor>a0befe771af3b6faf584733e3a2b79ad1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_short</type>
      <name>ipm_nextmtu</name>
      <anchorfile>structicmp_1_1@4_1_1ih__pmtu.html</anchorfile>
      <anchor>a94705c9d581c2a1deb43ee636d4b42b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct icmp::@4::ih_rtradv</type>
      <name>ih_rtradv</name>
      <anchorfile>unionicmp_1_1@4.html</anchorfile>
      <anchor>afd3c9ecfa79cd6713a8912f7521997a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>irt_num_addrs</name>
      <anchorfile>structicmp_1_1@4_1_1ih__rtradv.html</anchorfile>
      <anchor>a814919ce935f7ef93cc388d012bbf777</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>irt_wpa</name>
      <anchorfile>structicmp_1_1@4_1_1ih__rtradv.html</anchorfile>
      <anchor>a25654dc63f823f9fbf879b330ad96593</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_int16_t</type>
      <name>irt_lifetime</name>
      <anchorfile>structicmp_1_1@4_1_1ih__rtradv.html</anchorfile>
      <anchor>adf4e6ae2947e9ae16aad0966102d3b06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>union icmp::@5</type>
      <name>icmp_dun</name>
      <anchorfile>structicmp.html</anchorfile>
      <anchor>ac380e958ce6875336e67dab1e3b8dfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct icmp::@5::id_ts</type>
      <name>id_ts</name>
      <anchorfile>unionicmp_1_1@5.html</anchorfile>
      <anchor>a4913cce46bedbe146b028d00bc112555</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_time</type>
      <name>its_otime</name>
      <anchorfile>structicmp_1_1@5_1_1id__ts.html</anchorfile>
      <anchor>ae6e4fa56c61270df40ebea2bdab69808</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_time</type>
      <name>its_rtime</name>
      <anchorfile>structicmp_1_1@5_1_1id__ts.html</anchorfile>
      <anchor>a20650a5d547a881eb9e7cf06a9a3a2be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_time</type>
      <name>its_ttime</name>
      <anchorfile>structicmp_1_1@5_1_1id__ts.html</anchorfile>
      <anchor>a1174132ad2e677c405480749aee1543d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct icmp::@5::id_ip</type>
      <name>id_ip</name>
      <anchorfile>unionicmp_1_1@5.html</anchorfile>
      <anchor>a9fbdad3996b789577f8b4bccba623339</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct ip</type>
      <name>idi_ip</name>
      <anchorfile>structicmp_1_1@5_1_1id__ip.html</anchorfile>
      <anchor>a46dc21d6a05df86010722ca12abed96a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct icmp_ra_addr</type>
      <name>id_radv</name>
      <anchorfile>unionicmp_1_1@5.html</anchorfile>
      <anchor>a8964905694691e757fb4182890250323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_int32_t</type>
      <name>id_mask</name>
      <anchorfile>unionicmp_1_1@5.html</anchorfile>
      <anchor>ae4d113cea4526177caec6937493f3118</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>id_data</name>
      <anchorfile>unionicmp_1_1@5.html</anchorfile>
      <anchor>a8d537f6efcecca2723743a9a40edd75d</anchor>
      <arglist>[1]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>icmp_ra_addr</name>
    <filename>structicmp__ra__addr.html</filename>
    <member kind="variable">
      <type>u_int32_t</type>
      <name>ira_addr</name>
      <anchorfile>structicmp__ra__addr.html</anchorfile>
      <anchor>a85e1565d1ad5723eff5d3dfa3322b3e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_int32_t</type>
      <name>ira_preference</name>
      <anchorfile>structicmp__ra__addr.html</anchorfile>
      <anchor>a95585cd789388313f05af6415f169370</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ICMPAccess</name>
    <filename>class_i_c_m_p_access.html</filename>
    <base>ModuleAccess&lt; ICMP &gt;</base>
    <member kind="function">
      <type></type>
      <name>ICMPAccess</name>
      <anchorfile>class_i_c_m_p_access.html</anchorfile>
      <anchor>a3aa1132a560c95c3d19dd82573e8bc6d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ICMPMessage</name>
    <filename>class_i_c_m_p_message.html</filename>
    <member kind="function">
      <type></type>
      <name>ICMPMessage</name>
      <anchorfile>class_i_c_m_p_message.html</anchorfile>
      <anchor>a4a46d5fac4c510d154f7c24e0dc36ca5</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ICMPMessage</name>
      <anchorfile>class_i_c_m_p_message.html</anchorfile>
      <anchor>aba5cc72589fb9f93c27a03284802797b</anchor>
      <arglist>(const ICMPMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ICMPMessage</name>
      <anchorfile>class_i_c_m_p_message.html</anchorfile>
      <anchor>ac8c79b98d9ebb1857b32d1bf722b50eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ICMPMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_c_m_p_message.html</anchorfile>
      <anchor>af7abd86ee32cf9aba3622d2ef99197e8</anchor>
      <arglist>(const ICMPMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ICMPMessage *</type>
      <name>dup</name>
      <anchorfile>class_i_c_m_p_message.html</anchorfile>
      <anchor>a88f4119b34e48e67287906f6fabcd2a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_c_m_p_message.html</anchorfile>
      <anchor>a392324b785b0f68f33ab8397f9bdb904</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_c_m_p_message.html</anchorfile>
      <anchor>a555e66eaf536ab5b0199f98036f196b2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getType</name>
      <anchorfile>class_i_c_m_p_message.html</anchorfile>
      <anchor>a93a1643bfbdfe838cb8b26207b5d7673</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>class_i_c_m_p_message.html</anchorfile>
      <anchor>af0bf12051d44300b20b59d4cdcc01975</anchor>
      <arglist>(int type_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCode</name>
      <anchorfile>class_i_c_m_p_message.html</anchorfile>
      <anchor>a1eb1213018b26b5d182b37ef78cdb358</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCode</name>
      <anchorfile>class_i_c_m_p_message.html</anchorfile>
      <anchor>a178306c5afbfbf35254b8d780b00cd2e</anchor>
      <arglist>(int code_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_c_m_p_message.html</anchorfile>
      <anchor>a4b811dcb50fce92ff47cfec7ca5f7406</anchor>
      <arglist>(const ICMPMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>type_var</name>
      <anchorfile>class_i_c_m_p_message.html</anchorfile>
      <anchor>adb292143a7cc627f454977569cb5e793</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>code_var</name>
      <anchorfile>class_i_c_m_p_message.html</anchorfile>
      <anchor>aad8d61982d9c6038b4b122d445b7a47e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ICMPSerializer</name>
    <filename>class_i_c_m_p_serializer.html</filename>
    <member kind="function">
      <type></type>
      <name>ICMPSerializer</name>
      <anchorfile>class_i_c_m_p_serializer.html</anchorfile>
      <anchor>a4ee457fd5cfe592d7fda8fd80e8c2b72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>serialize</name>
      <anchorfile>class_i_c_m_p_serializer.html</anchorfile>
      <anchor>a09d237e99abdaafa67b110d6719fd621</anchor>
      <arglist>(const ICMPMessage *pkt, unsigned char *buf, unsigned int bufsize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>class_i_c_m_p_serializer.html</anchorfile>
      <anchor>a2953800845ab7e15394ea6b54aa7fb3e</anchor>
      <arglist>(const unsigned char *buf, unsigned int bufsize, ICMPMessage *pkt)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ICMPv6</name>
    <filename>class_i_c_m_pv6.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendErrorMessage</name>
      <anchorfile>class_i_c_m_pv6.html</anchorfile>
      <anchor>a3968b2c9964bb40a3d14b3fda9fdbba5</anchor>
      <arglist>(IPv6Datagram *datagram, ICMPv6Type type, int code)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendErrorMessage</name>
      <anchorfile>class_i_c_m_pv6.html</anchorfile>
      <anchor>ac5c4d78f63c567376be9cb67c0773d18</anchor>
      <arglist>(cPacket *transportPacket, IPv6ControlInfo *ctrl, ICMPv6Type type, int code)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToIP</name>
      <anchorfile>class_i_c_m_pv6.html</anchorfile>
      <anchor>a4d11555b42c4b2fc028b6482dd93b6bc</anchor>
      <arglist>(ICMPv6Message *msg, const IPv6Address &amp;dest)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToIP</name>
      <anchorfile>class_i_c_m_pv6.html</anchorfile>
      <anchor>a9edd348ffc175a3f212bbb38e8333b8c</anchor>
      <arglist>(ICMPv6Message *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ICMPv6Message *</type>
      <name>createDestUnreachableMsg</name>
      <anchorfile>class_i_c_m_pv6.html</anchorfile>
      <anchor>a9755b5748d4d41b2727724ca21fab5bd</anchor>
      <arglist>(int code)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ICMPv6Message *</type>
      <name>createPacketTooBigMsg</name>
      <anchorfile>class_i_c_m_pv6.html</anchorfile>
      <anchor>ade2a86dec093e6d95fb0a27336137daa</anchor>
      <arglist>(int mtu)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ICMPv6Message *</type>
      <name>createTimeExceededMsg</name>
      <anchorfile>class_i_c_m_pv6.html</anchorfile>
      <anchor>a70790d6086a1887b9b9cf8e765e668ff</anchor>
      <arglist>(int code)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ICMPv6Message *</type>
      <name>createParamProblemMsg</name>
      <anchorfile>class_i_c_m_pv6.html</anchorfile>
      <anchor>a1e04d68ace9f2a8a4a9f598ed9628b62</anchor>
      <arglist>(int code)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_i_c_m_pv6.html</anchorfile>
      <anchor>a0579529d7a1566e71057a34244a0c3df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_i_c_m_pv6.html</anchorfile>
      <anchor>a8b602fc0e5ab4e5f831dd61278b54ec8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processICMPv6Message</name>
      <anchorfile>class_i_c_m_pv6.html</anchorfile>
      <anchor>a88b45124390f09cc6848c432a80c1d68</anchor>
      <arglist>(ICMPv6Message *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processEchoRequest</name>
      <anchorfile>class_i_c_m_pv6.html</anchorfile>
      <anchor>af42e4f033f33ef7dcf95f694e0941297</anchor>
      <arglist>(ICMPv6EchoRequestMsg *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processEchoReply</name>
      <anchorfile>class_i_c_m_pv6.html</anchorfile>
      <anchor>a1501d708133de74f3ac748877b0c3cf6</anchor>
      <arglist>(ICMPv6EchoReplyMsg *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendEchoRequest</name>
      <anchorfile>class_i_c_m_pv6.html</anchorfile>
      <anchor>adcb65923a2eef477479d4c1d5b576d04</anchor>
      <arglist>(cPacket *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>validateDatagramPromptingError</name>
      <anchorfile>class_i_c_m_pv6.html</anchorfile>
      <anchor>ac9119ae006608365bdb41a050c130f72</anchor>
      <arglist>(IPv6Datagram *datagram)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>errorOut</name>
      <anchorfile>class_i_c_m_pv6.html</anchorfile>
      <anchor>a60e3588d7c19bd70c59662668222df1e</anchor>
      <arglist>(ICMPv6Message *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ICMPv6Access</name>
    <filename>class_i_c_m_pv6_access.html</filename>
    <base>ModuleAccess&lt; ICMPv6 &gt;</base>
    <member kind="function">
      <type></type>
      <name>ICMPv6Access</name>
      <anchorfile>class_i_c_m_pv6_access.html</anchorfile>
      <anchor>a3cdb6ca1984930bdc3b9f87568215ce0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ICMPv6DestUnreachableMsg</name>
    <filename>class_i_c_m_pv6_dest_unreachable_msg.html</filename>
    <base>ICMPv6Message</base>
    <member kind="function">
      <type></type>
      <name>ICMPv6DestUnreachableMsg</name>
      <anchorfile>class_i_c_m_pv6_dest_unreachable_msg.html</anchorfile>
      <anchor>ab8bd45363d4d79e8ac013f17f7a1ce03</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ICMPv6DestUnreachableMsg</name>
      <anchorfile>class_i_c_m_pv6_dest_unreachable_msg.html</anchorfile>
      <anchor>a46c70f8461ddc2eab1f819d27181025b</anchor>
      <arglist>(const ICMPv6DestUnreachableMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ICMPv6DestUnreachableMsg</name>
      <anchorfile>class_i_c_m_pv6_dest_unreachable_msg.html</anchorfile>
      <anchor>a3750c78ba0a8243c09f401b6f35f915d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ICMPv6DestUnreachableMsg &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_c_m_pv6_dest_unreachable_msg.html</anchorfile>
      <anchor>ad838e6c839f263a4acad729bf3e4780a</anchor>
      <arglist>(const ICMPv6DestUnreachableMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ICMPv6DestUnreachableMsg *</type>
      <name>dup</name>
      <anchorfile>class_i_c_m_pv6_dest_unreachable_msg.html</anchorfile>
      <anchor>af343c72be4cc62fd664f81906c2e0661</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_c_m_pv6_dest_unreachable_msg.html</anchorfile>
      <anchor>abce9ed5bd9e5ac64e328368f8ab637ea</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_c_m_pv6_dest_unreachable_msg.html</anchorfile>
      <anchor>a9ac816f0c76139ca93a760c226d97253</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCode</name>
      <anchorfile>class_i_c_m_pv6_dest_unreachable_msg.html</anchorfile>
      <anchor>aae40c60bddbf27365da704eb504f943e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCode</name>
      <anchorfile>class_i_c_m_pv6_dest_unreachable_msg.html</anchorfile>
      <anchor>a143886b29a08b8a61dcacb601218fbde</anchor>
      <arglist>(int code_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_c_m_pv6_dest_unreachable_msg.html</anchorfile>
      <anchor>a4416c1fe49a34db50d3630f95fc9575a</anchor>
      <arglist>(const ICMPv6DestUnreachableMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>code_var</name>
      <anchorfile>class_i_c_m_pv6_dest_unreachable_msg.html</anchorfile>
      <anchor>a6f6fcea01d61f450ea385edf2079fa2b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ICMPv6EchoReplyMsg</name>
    <filename>class_i_c_m_pv6_echo_reply_msg.html</filename>
    <base>ICMPv6Message</base>
    <member kind="function">
      <type></type>
      <name>ICMPv6EchoReplyMsg</name>
      <anchorfile>class_i_c_m_pv6_echo_reply_msg.html</anchorfile>
      <anchor>a5ba6f6d6f58e0bf29977747270c8bb3c</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ICMPv6EchoReplyMsg</name>
      <anchorfile>class_i_c_m_pv6_echo_reply_msg.html</anchorfile>
      <anchor>a59abc2056f2bd902ff9eadff05bddd15</anchor>
      <arglist>(const ICMPv6EchoReplyMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ICMPv6EchoReplyMsg</name>
      <anchorfile>class_i_c_m_pv6_echo_reply_msg.html</anchorfile>
      <anchor>abfe96caf562db98a130c6279ceac1a42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ICMPv6EchoReplyMsg &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_c_m_pv6_echo_reply_msg.html</anchorfile>
      <anchor>a3fd7dd9ea83a15654edf8f12aea9fccd</anchor>
      <arglist>(const ICMPv6EchoReplyMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ICMPv6EchoReplyMsg *</type>
      <name>dup</name>
      <anchorfile>class_i_c_m_pv6_echo_reply_msg.html</anchorfile>
      <anchor>afdd7bc4e829aaa7e60a0474121b02fce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_c_m_pv6_echo_reply_msg.html</anchorfile>
      <anchor>aa72e38e7a2e74482498c271ca17b4413</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_c_m_pv6_echo_reply_msg.html</anchorfile>
      <anchor>a97e9e7912e84383690a5af5980374cfc</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCode</name>
      <anchorfile>class_i_c_m_pv6_echo_reply_msg.html</anchorfile>
      <anchor>a7359ef34fce99e625a33af72730bbc9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCode</name>
      <anchorfile>class_i_c_m_pv6_echo_reply_msg.html</anchorfile>
      <anchor>a695f5338fb43d4e4381e0b7023e80205</anchor>
      <arglist>(int code_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getIdentifier</name>
      <anchorfile>class_i_c_m_pv6_echo_reply_msg.html</anchorfile>
      <anchor>a788c184de76295c2149277d252ff829e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIdentifier</name>
      <anchorfile>class_i_c_m_pv6_echo_reply_msg.html</anchorfile>
      <anchor>ae4a177d89dd4be4545a59abedc7bf2f4</anchor>
      <arglist>(int identifier_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSeqNumber</name>
      <anchorfile>class_i_c_m_pv6_echo_reply_msg.html</anchorfile>
      <anchor>a7804b4127c7bb62fe0e934c400228eb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSeqNumber</name>
      <anchorfile>class_i_c_m_pv6_echo_reply_msg.html</anchorfile>
      <anchor>a5e15c0c2629c112653cb27af3cd1a41a</anchor>
      <arglist>(int seqNumber_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_c_m_pv6_echo_reply_msg.html</anchorfile>
      <anchor>a59fede0f62756b7d2abf774f3ad6db62</anchor>
      <arglist>(const ICMPv6EchoReplyMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>code_var</name>
      <anchorfile>class_i_c_m_pv6_echo_reply_msg.html</anchorfile>
      <anchor>a154997b7f178a6761d014edb8e372fe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>identifier_var</name>
      <anchorfile>class_i_c_m_pv6_echo_reply_msg.html</anchorfile>
      <anchor>a267939e0162ccbb6f307cd17d2a6476f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>seqNumber_var</name>
      <anchorfile>class_i_c_m_pv6_echo_reply_msg.html</anchorfile>
      <anchor>a3c7c6a808326d31d71a030bfbf4a4c16</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ICMPv6EchoRequestMsg</name>
    <filename>class_i_c_m_pv6_echo_request_msg.html</filename>
    <base>ICMPv6Message</base>
    <member kind="function">
      <type></type>
      <name>ICMPv6EchoRequestMsg</name>
      <anchorfile>class_i_c_m_pv6_echo_request_msg.html</anchorfile>
      <anchor>ab4411213f98c53e2b9f5feb6b83e3bb3</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ICMPv6EchoRequestMsg</name>
      <anchorfile>class_i_c_m_pv6_echo_request_msg.html</anchorfile>
      <anchor>a9ddd5619bb119f06d817a8ffa164f413</anchor>
      <arglist>(const ICMPv6EchoRequestMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ICMPv6EchoRequestMsg</name>
      <anchorfile>class_i_c_m_pv6_echo_request_msg.html</anchorfile>
      <anchor>acb0c5bc7716c66c8e605819dfe99594a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ICMPv6EchoRequestMsg &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_c_m_pv6_echo_request_msg.html</anchorfile>
      <anchor>a4cecff8c48683cb9b61ba5bad15729a3</anchor>
      <arglist>(const ICMPv6EchoRequestMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ICMPv6EchoRequestMsg *</type>
      <name>dup</name>
      <anchorfile>class_i_c_m_pv6_echo_request_msg.html</anchorfile>
      <anchor>ac0f01ba80fc3efae746f99ac6d39b700</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_c_m_pv6_echo_request_msg.html</anchorfile>
      <anchor>a0440641fafe603d0f4a144b932565eec</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_c_m_pv6_echo_request_msg.html</anchorfile>
      <anchor>a7b592653c910257ffb87a070a70eb71c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCode</name>
      <anchorfile>class_i_c_m_pv6_echo_request_msg.html</anchorfile>
      <anchor>a665456dd47bfb31f14b56a565d7778e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCode</name>
      <anchorfile>class_i_c_m_pv6_echo_request_msg.html</anchorfile>
      <anchor>a929be1ee5c1711fd753f23081cbdcd15</anchor>
      <arglist>(int code_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getIdentifier</name>
      <anchorfile>class_i_c_m_pv6_echo_request_msg.html</anchorfile>
      <anchor>afdde9c8be7bf302931ebdfbd7db5c429</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIdentifier</name>
      <anchorfile>class_i_c_m_pv6_echo_request_msg.html</anchorfile>
      <anchor>a2754c409bd06d36ad4c3dd5e7ded9253</anchor>
      <arglist>(int identifier_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSeqNumber</name>
      <anchorfile>class_i_c_m_pv6_echo_request_msg.html</anchorfile>
      <anchor>a7d1aff705f499c4a3e3c5570f4a2fc83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSeqNumber</name>
      <anchorfile>class_i_c_m_pv6_echo_request_msg.html</anchorfile>
      <anchor>a1f75a6481c4aef113c13d1dea5046bbd</anchor>
      <arglist>(int seqNumber_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_c_m_pv6_echo_request_msg.html</anchorfile>
      <anchor>ab1fe52bdefeb657d5b1898f0aa6383ed</anchor>
      <arglist>(const ICMPv6EchoRequestMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>code_var</name>
      <anchorfile>class_i_c_m_pv6_echo_request_msg.html</anchorfile>
      <anchor>a6f2ad44b6765f822ff988855030196e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>identifier_var</name>
      <anchorfile>class_i_c_m_pv6_echo_request_msg.html</anchorfile>
      <anchor>a5d58d21c124a36228319fa57cca5f3a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>seqNumber_var</name>
      <anchorfile>class_i_c_m_pv6_echo_request_msg.html</anchorfile>
      <anchor>a8eef7c36366a914e0ca32d08957a2b0e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ICMPv6Message</name>
    <filename>class_i_c_m_pv6_message.html</filename>
    <member kind="function">
      <type></type>
      <name>ICMPv6Message</name>
      <anchorfile>class_i_c_m_pv6_message.html</anchorfile>
      <anchor>a4842a0c9ebe074869153855dcfbc2689</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ICMPv6Message</name>
      <anchorfile>class_i_c_m_pv6_message.html</anchorfile>
      <anchor>a5bb98326230dab7794d9f0cfce4c5e45</anchor>
      <arglist>(const ICMPv6Message &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ICMPv6Message</name>
      <anchorfile>class_i_c_m_pv6_message.html</anchorfile>
      <anchor>a4880a1f6a2423ebad13ac987bcb73dd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ICMPv6Message &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_c_m_pv6_message.html</anchorfile>
      <anchor>a5eba184243647ed9e5836db1054bbcba</anchor>
      <arglist>(const ICMPv6Message &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ICMPv6Message *</type>
      <name>dup</name>
      <anchorfile>class_i_c_m_pv6_message.html</anchorfile>
      <anchor>a71a4c83b946f7af0e18cb75b524bd78f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_c_m_pv6_message.html</anchorfile>
      <anchor>acbfcd5215ee97c3f6780dfd4047788f8</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_c_m_pv6_message.html</anchorfile>
      <anchor>a196cb58f0bf32101d92b9c31248cede4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getType</name>
      <anchorfile>class_i_c_m_pv6_message.html</anchorfile>
      <anchor>a92fc7e6a2fd2f99b271a9029f1ec490a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>class_i_c_m_pv6_message.html</anchorfile>
      <anchor>a0d30a321ffafbc6af65fcafac9165a14</anchor>
      <arglist>(int type_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_c_m_pv6_message.html</anchorfile>
      <anchor>abe85aca238eb5aa5a1ab85292ccb5434</anchor>
      <arglist>(const ICMPv6Message &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>type_var</name>
      <anchorfile>class_i_c_m_pv6_message.html</anchorfile>
      <anchor>a7b1842a2c33b864c47d809ac66911143</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ICMPv6PacketTooBigMsg</name>
    <filename>class_i_c_m_pv6_packet_too_big_msg.html</filename>
    <base>ICMPv6Message</base>
    <member kind="function">
      <type></type>
      <name>ICMPv6PacketTooBigMsg</name>
      <anchorfile>class_i_c_m_pv6_packet_too_big_msg.html</anchorfile>
      <anchor>a7157c88476464ca2ec46ca2f1e8014ec</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ICMPv6PacketTooBigMsg</name>
      <anchorfile>class_i_c_m_pv6_packet_too_big_msg.html</anchorfile>
      <anchor>a159b7454cf3fb60eff315f3c621ea412</anchor>
      <arglist>(const ICMPv6PacketTooBigMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ICMPv6PacketTooBigMsg</name>
      <anchorfile>class_i_c_m_pv6_packet_too_big_msg.html</anchorfile>
      <anchor>a291b500aaf51ebaf8fd7ee34c09fac89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ICMPv6PacketTooBigMsg &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_c_m_pv6_packet_too_big_msg.html</anchorfile>
      <anchor>a561964410c0196df8f1151f617565f62</anchor>
      <arglist>(const ICMPv6PacketTooBigMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ICMPv6PacketTooBigMsg *</type>
      <name>dup</name>
      <anchorfile>class_i_c_m_pv6_packet_too_big_msg.html</anchorfile>
      <anchor>ad7542a46bb10f4f1d9d8e007bb8614e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_c_m_pv6_packet_too_big_msg.html</anchorfile>
      <anchor>a483a81cc0d9f4fe5b9c65910cfc59fe4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_c_m_pv6_packet_too_big_msg.html</anchorfile>
      <anchor>a41f7e5023fa1dec1e2ade5271bf9b8eb</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCode</name>
      <anchorfile>class_i_c_m_pv6_packet_too_big_msg.html</anchorfile>
      <anchor>aee9c35d2e63164dc2f3fb9ee6667b3a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCode</name>
      <anchorfile>class_i_c_m_pv6_packet_too_big_msg.html</anchorfile>
      <anchor>aff3303cf90686182de01072ca937a6c6</anchor>
      <arglist>(int code_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMTU</name>
      <anchorfile>class_i_c_m_pv6_packet_too_big_msg.html</anchorfile>
      <anchor>ac10714ee89460aaa706e5bb1030736c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMTU</name>
      <anchorfile>class_i_c_m_pv6_packet_too_big_msg.html</anchorfile>
      <anchor>a295d9a4c5b56896c21366e82fcaefc69</anchor>
      <arglist>(int MTU_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_c_m_pv6_packet_too_big_msg.html</anchorfile>
      <anchor>ab50ab7ad86885751cdaefb0a4993a7bc</anchor>
      <arglist>(const ICMPv6PacketTooBigMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>code_var</name>
      <anchorfile>class_i_c_m_pv6_packet_too_big_msg.html</anchorfile>
      <anchor>ab64525f94b7f6499aa57bb6f096f6be1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>MTU_var</name>
      <anchorfile>class_i_c_m_pv6_packet_too_big_msg.html</anchorfile>
      <anchor>a9c019a06ba5e48dcf2fd6aa5fae2b41d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ICMPv6ParamProblemMsg</name>
    <filename>class_i_c_m_pv6_param_problem_msg.html</filename>
    <base>ICMPv6Message</base>
    <member kind="function">
      <type></type>
      <name>ICMPv6ParamProblemMsg</name>
      <anchorfile>class_i_c_m_pv6_param_problem_msg.html</anchorfile>
      <anchor>a2f21a0d7cc78495dabd642c6c155b13a</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ICMPv6ParamProblemMsg</name>
      <anchorfile>class_i_c_m_pv6_param_problem_msg.html</anchorfile>
      <anchor>a3cabf95fa32cb64a0947a825be46aaba</anchor>
      <arglist>(const ICMPv6ParamProblemMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ICMPv6ParamProblemMsg</name>
      <anchorfile>class_i_c_m_pv6_param_problem_msg.html</anchorfile>
      <anchor>ad4ba4144359f54ec55e935ae36c6cdf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ICMPv6ParamProblemMsg &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_c_m_pv6_param_problem_msg.html</anchorfile>
      <anchor>a008a6fb8610761b8eceae20efe87148e</anchor>
      <arglist>(const ICMPv6ParamProblemMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ICMPv6ParamProblemMsg *</type>
      <name>dup</name>
      <anchorfile>class_i_c_m_pv6_param_problem_msg.html</anchorfile>
      <anchor>ad6837274fb495093c4ccbf81990cb789</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_c_m_pv6_param_problem_msg.html</anchorfile>
      <anchor>a17b77fdd29e15b348c4af669b9d426f2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_c_m_pv6_param_problem_msg.html</anchorfile>
      <anchor>ae1ae99e40101574f9cf3b5cc2c26802a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCode</name>
      <anchorfile>class_i_c_m_pv6_param_problem_msg.html</anchorfile>
      <anchor>afe4b4e8a9695bbcd7d3f79dd2f301b70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCode</name>
      <anchorfile>class_i_c_m_pv6_param_problem_msg.html</anchorfile>
      <anchor>a55be8defca0c562216137920349106bc</anchor>
      <arglist>(int code_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_c_m_pv6_param_problem_msg.html</anchorfile>
      <anchor>af9762f4301fb924262f6bff8a82302d1</anchor>
      <arglist>(const ICMPv6ParamProblemMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>code_var</name>
      <anchorfile>class_i_c_m_pv6_param_problem_msg.html</anchorfile>
      <anchor>aea6b4cf51ba292aabb74820f378ef6fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ICMPv6TimeExceededMsg</name>
    <filename>class_i_c_m_pv6_time_exceeded_msg.html</filename>
    <base>ICMPv6Message</base>
    <member kind="function">
      <type></type>
      <name>ICMPv6TimeExceededMsg</name>
      <anchorfile>class_i_c_m_pv6_time_exceeded_msg.html</anchorfile>
      <anchor>a728cab86246a1828fc3cd670144e64ca</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ICMPv6TimeExceededMsg</name>
      <anchorfile>class_i_c_m_pv6_time_exceeded_msg.html</anchorfile>
      <anchor>a2ae91720f59be2e8a516280a43f05d41</anchor>
      <arglist>(const ICMPv6TimeExceededMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ICMPv6TimeExceededMsg</name>
      <anchorfile>class_i_c_m_pv6_time_exceeded_msg.html</anchorfile>
      <anchor>a312910393683d5e045fe1756cd17b97d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ICMPv6TimeExceededMsg &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_c_m_pv6_time_exceeded_msg.html</anchorfile>
      <anchor>a5c602bcb1dfba241ea2540b846569f27</anchor>
      <arglist>(const ICMPv6TimeExceededMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ICMPv6TimeExceededMsg *</type>
      <name>dup</name>
      <anchorfile>class_i_c_m_pv6_time_exceeded_msg.html</anchorfile>
      <anchor>a9c006496391ab076e81094fcdc32fd00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_c_m_pv6_time_exceeded_msg.html</anchorfile>
      <anchor>a0cfc5aafe7bac0660f3e6e2f14c70a69</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_c_m_pv6_time_exceeded_msg.html</anchorfile>
      <anchor>a08a59fc032b35607a51b2d4f7c2602c9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCode</name>
      <anchorfile>class_i_c_m_pv6_time_exceeded_msg.html</anchorfile>
      <anchor>aac6b7850235046bcfddc7429392c5193</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCode</name>
      <anchorfile>class_i_c_m_pv6_time_exceeded_msg.html</anchorfile>
      <anchor>afc9c53975adf4450edd12489a6f9b6bb</anchor>
      <arglist>(int code_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_c_m_pv6_time_exceeded_msg.html</anchorfile>
      <anchor>a6ada54119eabd1369879eb35affa85c8</anchor>
      <arglist>(const ICMPv6TimeExceededMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>code_var</name>
      <anchorfile>class_i_c_m_pv6_time_exceeded_msg.html</anchorfile>
      <anchor>a4e8d0468702a7c4759da74cddf0f1a45</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211ACKFrame</name>
    <filename>class_ieee80211_a_c_k_frame.html</filename>
    <base>Ieee80211OneAddressFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211ACKFrame</name>
      <anchorfile>class_ieee80211_a_c_k_frame.html</anchorfile>
      <anchor>a147f8e3d3266639eace18bd3cbc02f44</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211ACKFrame</name>
      <anchorfile>class_ieee80211_a_c_k_frame.html</anchorfile>
      <anchor>a4efb0e151e8b222a11a77ce0358cdb4b</anchor>
      <arglist>(const Ieee80211ACKFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211ACKFrame</name>
      <anchorfile>class_ieee80211_a_c_k_frame.html</anchorfile>
      <anchor>a8858a558830c6b90937ae1c6ac6ce518</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211ACKFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_a_c_k_frame.html</anchorfile>
      <anchor>afbdbe7f3177575cad52c74750a04db2f</anchor>
      <arglist>(const Ieee80211ACKFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211ACKFrame *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_a_c_k_frame.html</anchorfile>
      <anchor>a099840cf07737671f923d9f21970a7fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_a_c_k_frame.html</anchorfile>
      <anchor>ad0b8122984d8df3362ad86ce9eb0071d</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_a_c_k_frame.html</anchorfile>
      <anchor>a061fde7f9c40c8867bfa7b654ae1b734</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_a_c_k_frame.html</anchorfile>
      <anchor>ae6243e4e60b78124f7715e7f78bbaba2</anchor>
      <arglist>(const Ieee80211ACKFrame &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211AgentSTA</name>
    <filename>class_ieee80211_agent_s_t_a.html</filename>
    <base>INotifiable</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_ieee80211_agent_s_t_a.html</anchorfile>
      <anchor>a65bb94f619879098668db4fe4c83f923</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_ieee80211_agent_s_t_a.html</anchorfile>
      <anchor>a2f5e6bb11cd0a84b98957b154c36f6f5</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_ieee80211_agent_s_t_a.html</anchorfile>
      <anchor>a03a98d30a9517260b0237797344cedb3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimer</name>
      <anchorfile>class_ieee80211_agent_s_t_a.html</anchorfile>
      <anchor>ad72815b6bf3d09d157e67a8f14b72b00</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleResponse</name>
      <anchorfile>class_ieee80211_agent_s_t_a.html</anchorfile>
      <anchor>a11e091169f61e067310824d4e80b3123</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchorfile>class_ieee80211_agent_s_t_a.html</anchorfile>
      <anchor>a217a908201ee41cd40471fbe15b912c7</anchor>
      <arglist>(int category, const cPolymorphic *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendRequest</name>
      <anchorfile>class_ieee80211_agent_s_t_a.html</anchorfile>
      <anchor>acd7b99c40a2e578917046719a7d71adc</anchor>
      <arglist>(Ieee80211PrimRequest *req)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>chooseBSS</name>
      <anchorfile>class_ieee80211_agent_s_t_a.html</anchorfile>
      <anchor>afa653e1bfc56472d236e9ee16cac8da2</anchor>
      <arglist>(Ieee80211Prim_ScanConfirm *resp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>dumpAPList</name>
      <anchorfile>class_ieee80211_agent_s_t_a.html</anchorfile>
      <anchor>a7dad50f5d17e58aab7bcbf64f1b232ab</anchor>
      <arglist>(Ieee80211Prim_ScanConfirm *resp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendScanRequest</name>
      <anchorfile>class_ieee80211_agent_s_t_a.html</anchorfile>
      <anchor>a9defce60a3b48ccbe3d21db5194a125d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendAuthenticateRequest</name>
      <anchorfile>class_ieee80211_agent_s_t_a.html</anchorfile>
      <anchor>acbbc5e109004804df17796376a5c05ed</anchor>
      <arglist>(const MACAddress &amp;address)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDeauthenticateRequest</name>
      <anchorfile>class_ieee80211_agent_s_t_a.html</anchorfile>
      <anchor>a55e802f20a5a993217635afc4ab37342</anchor>
      <arglist>(const MACAddress &amp;address, int reasonCode)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendAssociateRequest</name>
      <anchorfile>class_ieee80211_agent_s_t_a.html</anchorfile>
      <anchor>a50ca92e7d6ab726c9dfc61d0d0a6c1d6</anchor>
      <arglist>(const MACAddress &amp;address)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendReassociateRequest</name>
      <anchorfile>class_ieee80211_agent_s_t_a.html</anchorfile>
      <anchor>ae2d6d07331709dd21ad7efb1d19d0297</anchor>
      <arglist>(const MACAddress &amp;address)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDisassociateRequest</name>
      <anchorfile>class_ieee80211_agent_s_t_a.html</anchorfile>
      <anchor>ad6d0d7fe2213d5947b0a3ea4be3a868c</anchor>
      <arglist>(const MACAddress &amp;address, int reasonCode)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processScanConfirm</name>
      <anchorfile>class_ieee80211_agent_s_t_a.html</anchorfile>
      <anchor>a67d75b767b0c29c47e42c1c08f0f9eb5</anchor>
      <arglist>(Ieee80211Prim_ScanConfirm *resp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processAuthenticateConfirm</name>
      <anchorfile>class_ieee80211_agent_s_t_a.html</anchorfile>
      <anchor>a8c1aa0013d4b1c81e07dc6583300aa98</anchor>
      <arglist>(Ieee80211Prim_AuthenticateConfirm *resp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processAssociateConfirm</name>
      <anchorfile>class_ieee80211_agent_s_t_a.html</anchorfile>
      <anchor>a1413e1069179635c61dd996892f90438</anchor>
      <arglist>(Ieee80211Prim_AssociateConfirm *resp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processReassociateConfirm</name>
      <anchorfile>class_ieee80211_agent_s_t_a.html</anchorfile>
      <anchor>a957013cedd4bbab435ac5c3df96dbbaf</anchor>
      <arglist>(Ieee80211Prim_ReassociateConfirm *resp)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>activeScan</name>
      <anchorfile>class_ieee80211_agent_s_t_a.html</anchorfile>
      <anchor>ae1b797d0dbdc91d7f1d27ab3d6a76e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>channelsToScan</name>
      <anchorfile>class_ieee80211_agent_s_t_a.html</anchorfile>
      <anchor>a9997c3bc1b3b5c9f844a0e8b0857e567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>probeDelay</name>
      <anchorfile>class_ieee80211_agent_s_t_a.html</anchorfile>
      <anchor>aa9fcda68071acefd6edb48ca7c301e55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>minChannelTime</name>
      <anchorfile>class_ieee80211_agent_s_t_a.html</anchorfile>
      <anchor>ae2149c75144f604c24235ffe7d6cc1cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>maxChannelTime</name>
      <anchorfile>class_ieee80211_agent_s_t_a.html</anchorfile>
      <anchor>a5068f870abfb7dc3cbf00c20d8ac35ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>authenticationTimeout</name>
      <anchorfile>class_ieee80211_agent_s_t_a.html</anchorfile>
      <anchor>ac1f4c10bf4221b8b7b1ca0bf57876fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>associationTimeout</name>
      <anchorfile>class_ieee80211_agent_s_t_a.html</anchorfile>
      <anchor>adffb5d14350128393ce0bcc18743fa12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211AssociationRequestFrame</name>
    <filename>class_ieee80211_association_request_frame.html</filename>
    <base>Ieee80211ManagementFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211AssociationRequestFrame</name>
      <anchorfile>class_ieee80211_association_request_frame.html</anchorfile>
      <anchor>a8a0137afa591e16da6d2a9d3afed4165</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211AssociationRequestFrame</name>
      <anchorfile>class_ieee80211_association_request_frame.html</anchorfile>
      <anchor>abca24943440eafcebeafbb31d396fc9c</anchor>
      <arglist>(const Ieee80211AssociationRequestFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211AssociationRequestFrame</name>
      <anchorfile>class_ieee80211_association_request_frame.html</anchorfile>
      <anchor>ac333e0c194193152c71f9571dfe82b31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211AssociationRequestFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_association_request_frame.html</anchorfile>
      <anchor>a2944e628e5bd580efa33e153696443bc</anchor>
      <arglist>(const Ieee80211AssociationRequestFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211AssociationRequestFrame *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_association_request_frame.html</anchorfile>
      <anchor>a2f05b954ad10e8b710c17db76bc72717</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_association_request_frame.html</anchorfile>
      <anchor>a1a2c7f784f6ec33218e04f4e6660317c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_association_request_frame.html</anchorfile>
      <anchor>a37845979aa01d9d8d69fb76c18263fe5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211AssociationRequestFrameBody &amp;</type>
      <name>getBody</name>
      <anchorfile>class_ieee80211_association_request_frame.html</anchorfile>
      <anchor>ab91407198423c1fe541ab994b976a114</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211AssociationRequestFrameBody &amp;</type>
      <name>getBody</name>
      <anchorfile>class_ieee80211_association_request_frame.html</anchorfile>
      <anchor>ac038ea22d805754e3393069bfcbd3152</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBody</name>
      <anchorfile>class_ieee80211_association_request_frame.html</anchorfile>
      <anchor>ae741cb1ec1b732a8a994ce32babb7ab5</anchor>
      <arglist>(const Ieee80211AssociationRequestFrameBody &amp;body_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_association_request_frame.html</anchorfile>
      <anchor>ac1a93cc179f02a5bacc7f3b57b449564</anchor>
      <arglist>(const Ieee80211AssociationRequestFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::Ieee80211AssociationRequestFrameBody</type>
      <name>body_var</name>
      <anchorfile>class_ieee80211_association_request_frame.html</anchorfile>
      <anchor>a01fc814aa6e37cfced0ab7b1b512c2df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211AssociationRequestFrameBody</name>
    <filename>class_ieee80211_association_request_frame_body.html</filename>
    <base>Ieee80211FrameBody</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211AssociationRequestFrameBody</name>
      <anchorfile>class_ieee80211_association_request_frame_body.html</anchorfile>
      <anchor>a5a92ddc8e81161f0682d8459a5bae249</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211AssociationRequestFrameBody</name>
      <anchorfile>class_ieee80211_association_request_frame_body.html</anchorfile>
      <anchor>ac6ca007ce5b7bf449a575ebea112552d</anchor>
      <arglist>(const Ieee80211AssociationRequestFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211AssociationRequestFrameBody</name>
      <anchorfile>class_ieee80211_association_request_frame_body.html</anchorfile>
      <anchor>aa6d486e8530f6e8a24036302c76cb01a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211AssociationRequestFrameBody &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_association_request_frame_body.html</anchorfile>
      <anchor>a04b668e0d387db7f73b8a47ff4492b84</anchor>
      <arglist>(const Ieee80211AssociationRequestFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211AssociationRequestFrameBody *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_association_request_frame_body.html</anchorfile>
      <anchor>af4f9ab4ff012b56dd495709c6c32865d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_association_request_frame_body.html</anchorfile>
      <anchor>a8c0c90028165f784d9f9c2eec5c509a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_association_request_frame_body.html</anchorfile>
      <anchor>a4761e5f862d453dcb4d79f0356fa0417</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getSSID</name>
      <anchorfile>class_ieee80211_association_request_frame_body.html</anchorfile>
      <anchor>a54e89d7dd201c56bf3d79cb7dabe690a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSSID</name>
      <anchorfile>class_ieee80211_association_request_frame_body.html</anchorfile>
      <anchor>abda4ad8732a29f1ea8c753aef394423c</anchor>
      <arglist>(const char *SSID_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211SupportedRatesElement &amp;</type>
      <name>getSupportedRates</name>
      <anchorfile>class_ieee80211_association_request_frame_body.html</anchorfile>
      <anchor>a24f1a785e2767c83d935a429d8de1b5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211SupportedRatesElement &amp;</type>
      <name>getSupportedRates</name>
      <anchorfile>class_ieee80211_association_request_frame_body.html</anchorfile>
      <anchor>a4cfa09064f82c456f2fb38e70745d3c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSupportedRates</name>
      <anchorfile>class_ieee80211_association_request_frame_body.html</anchorfile>
      <anchor>ac35259284ac2dedbd5b209c8a859c25b</anchor>
      <arglist>(const Ieee80211SupportedRatesElement &amp;supportedRates_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_association_request_frame_body.html</anchorfile>
      <anchor>af57d3a742e0555a3ae9811712f8e8607</anchor>
      <arglist>(const Ieee80211AssociationRequestFrameBody &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>SSID_var</name>
      <anchorfile>class_ieee80211_association_request_frame_body.html</anchorfile>
      <anchor>a9872d574ed6c5f3c1c67b1630d8cdddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::Ieee80211SupportedRatesElement</type>
      <name>supportedRates_var</name>
      <anchorfile>class_ieee80211_association_request_frame_body.html</anchorfile>
      <anchor>abc982e9dc2eead20a8f3d36aa9d080c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211AssociationResponseFrame</name>
    <filename>class_ieee80211_association_response_frame.html</filename>
    <base>Ieee80211ManagementFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211AssociationResponseFrame</name>
      <anchorfile>class_ieee80211_association_response_frame.html</anchorfile>
      <anchor>afb5e8bce99ed92a5928a8efd210be46e</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211AssociationResponseFrame</name>
      <anchorfile>class_ieee80211_association_response_frame.html</anchorfile>
      <anchor>a0b75eed6f19e26b4f420977250089056</anchor>
      <arglist>(const Ieee80211AssociationResponseFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211AssociationResponseFrame</name>
      <anchorfile>class_ieee80211_association_response_frame.html</anchorfile>
      <anchor>a8acec4af8f4c5c27d26796b1671f6e4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211AssociationResponseFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_association_response_frame.html</anchorfile>
      <anchor>aeb1e9366aa10ffb39c09c304c19a647d</anchor>
      <arglist>(const Ieee80211AssociationResponseFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211AssociationResponseFrame *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_association_response_frame.html</anchorfile>
      <anchor>aba9f446adec390d4cd180f302b8dd56c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_association_response_frame.html</anchorfile>
      <anchor>a83d32f8b8ab607ba1c472ede5ea321f6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_association_response_frame.html</anchorfile>
      <anchor>a9fb7961fbfcea7e9095a270d58643eba</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211AssociationResponseFrameBody &amp;</type>
      <name>getBody</name>
      <anchorfile>class_ieee80211_association_response_frame.html</anchorfile>
      <anchor>a370a31cfea2b9f283252cd0e059c342e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211AssociationResponseFrameBody &amp;</type>
      <name>getBody</name>
      <anchorfile>class_ieee80211_association_response_frame.html</anchorfile>
      <anchor>a464dca0bba9c944f2aca987045c75a71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBody</name>
      <anchorfile>class_ieee80211_association_response_frame.html</anchorfile>
      <anchor>a24bd6dbd719b9760e79ef807a080f19a</anchor>
      <arglist>(const Ieee80211AssociationResponseFrameBody &amp;body_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_association_response_frame.html</anchorfile>
      <anchor>aa79d25636ab19aa412a86cdb86d17b71</anchor>
      <arglist>(const Ieee80211AssociationResponseFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::Ieee80211AssociationResponseFrameBody</type>
      <name>body_var</name>
      <anchorfile>class_ieee80211_association_response_frame.html</anchorfile>
      <anchor>aaf91e64a4688c3af49a7740ffd8f5549</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211AssociationResponseFrameBody</name>
    <filename>class_ieee80211_association_response_frame_body.html</filename>
    <base>Ieee80211FrameBody</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211AssociationResponseFrameBody</name>
      <anchorfile>class_ieee80211_association_response_frame_body.html</anchorfile>
      <anchor>aaef9b04dba7069c8e6e797f80a0436b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211AssociationResponseFrameBody</name>
      <anchorfile>class_ieee80211_association_response_frame_body.html</anchorfile>
      <anchor>abc3f87765ff896d78e6d7874447fd056</anchor>
      <arglist>(const Ieee80211AssociationResponseFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211AssociationResponseFrameBody</name>
      <anchorfile>class_ieee80211_association_response_frame_body.html</anchorfile>
      <anchor>a4de0bded9152b0d8fe196b1ebf14aa6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211AssociationResponseFrameBody &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_association_response_frame_body.html</anchorfile>
      <anchor>a33b54f6f52aec4a6c721049718020f29</anchor>
      <arglist>(const Ieee80211AssociationResponseFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211AssociationResponseFrameBody *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_association_response_frame_body.html</anchorfile>
      <anchor>a2d2a7602deb7e84d1e598bca4d2a749b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_association_response_frame_body.html</anchorfile>
      <anchor>a2415ee965f060b4fd4111cc885c45a60</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_association_response_frame_body.html</anchorfile>
      <anchor>ac684beff9bc2fe824b4790ac0fb64921</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getStatusCode</name>
      <anchorfile>class_ieee80211_association_response_frame_body.html</anchorfile>
      <anchor>aefb6e09c9f564049c496414617660ab1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStatusCode</name>
      <anchorfile>class_ieee80211_association_response_frame_body.html</anchorfile>
      <anchor>a3a46c76a3e863a779b233d7751cffb9b</anchor>
      <arglist>(int statusCode_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getAid</name>
      <anchorfile>class_ieee80211_association_response_frame_body.html</anchorfile>
      <anchor>af8f8dce53c3c52a5e90cfebdc98e8f2c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAid</name>
      <anchorfile>class_ieee80211_association_response_frame_body.html</anchorfile>
      <anchor>acbfc11f172bd2a10de0f7827d3be98a5</anchor>
      <arglist>(short aid_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211SupportedRatesElement &amp;</type>
      <name>getSupportedRates</name>
      <anchorfile>class_ieee80211_association_response_frame_body.html</anchorfile>
      <anchor>ad08c9edcf959f6f95456fce1d1d7c1d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211SupportedRatesElement &amp;</type>
      <name>getSupportedRates</name>
      <anchorfile>class_ieee80211_association_response_frame_body.html</anchorfile>
      <anchor>a8005b58efff6491400d5d99821f3a590</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSupportedRates</name>
      <anchorfile>class_ieee80211_association_response_frame_body.html</anchorfile>
      <anchor>a58ebb2809e5319a0111a519c86de4226</anchor>
      <arglist>(const Ieee80211SupportedRatesElement &amp;supportedRates_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_association_response_frame_body.html</anchorfile>
      <anchor>ae485e1eebeae89114bbec64b2d23707e</anchor>
      <arglist>(const Ieee80211AssociationResponseFrameBody &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>statusCode_var</name>
      <anchorfile>class_ieee80211_association_response_frame_body.html</anchorfile>
      <anchor>a25a6cd50340e52d1415df2c50f04e6d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>aid_var</name>
      <anchorfile>class_ieee80211_association_response_frame_body.html</anchorfile>
      <anchor>afa0aba1f3f89ed71d88621a654a9e138</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::Ieee80211SupportedRatesElement</type>
      <name>supportedRates_var</name>
      <anchorfile>class_ieee80211_association_response_frame_body.html</anchorfile>
      <anchor>a5920f903e061dc75662cf185ee9e7761</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211AuthenticationFrame</name>
    <filename>class_ieee80211_authentication_frame.html</filename>
    <base>Ieee80211ManagementFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211AuthenticationFrame</name>
      <anchorfile>class_ieee80211_authentication_frame.html</anchorfile>
      <anchor>adc699da977b8cfdd8b7d3f242ea3128a</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211AuthenticationFrame</name>
      <anchorfile>class_ieee80211_authentication_frame.html</anchorfile>
      <anchor>a4c78b03fc9f58dbe19219b0ab6b926db</anchor>
      <arglist>(const Ieee80211AuthenticationFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211AuthenticationFrame</name>
      <anchorfile>class_ieee80211_authentication_frame.html</anchorfile>
      <anchor>a9b2371ea3a08911ba56b51fe067ce885</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211AuthenticationFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_authentication_frame.html</anchorfile>
      <anchor>a152cc7e1d6da0aace9b7e94e87466b0c</anchor>
      <arglist>(const Ieee80211AuthenticationFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211AuthenticationFrame *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_authentication_frame.html</anchorfile>
      <anchor>ac3fe0d7b68b7f4e7aeb7ca7a4b3cdc07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_authentication_frame.html</anchorfile>
      <anchor>afa5e678ef5fb820eb0aabe03813457fd</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_authentication_frame.html</anchorfile>
      <anchor>a684e3e5396dfb2b866da658d3eb8aebb</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211AuthenticationFrameBody &amp;</type>
      <name>getBody</name>
      <anchorfile>class_ieee80211_authentication_frame.html</anchorfile>
      <anchor>a5386591e1e2334b4a2cce001912b1775</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211AuthenticationFrameBody &amp;</type>
      <name>getBody</name>
      <anchorfile>class_ieee80211_authentication_frame.html</anchorfile>
      <anchor>aa2a401407aed9b6543194540a36e8542</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBody</name>
      <anchorfile>class_ieee80211_authentication_frame.html</anchorfile>
      <anchor>a81dbea2cbf8ddd9de142ffc0d82e8ec2</anchor>
      <arglist>(const Ieee80211AuthenticationFrameBody &amp;body_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_authentication_frame.html</anchorfile>
      <anchor>a64477212e8ebfaa324c93380c2ae4f34</anchor>
      <arglist>(const Ieee80211AuthenticationFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::Ieee80211AuthenticationFrameBody</type>
      <name>body_var</name>
      <anchorfile>class_ieee80211_authentication_frame.html</anchorfile>
      <anchor>a5bc9cccd36335e12d4bbddb0fba60fce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211AuthenticationFrameBody</name>
    <filename>class_ieee80211_authentication_frame_body.html</filename>
    <base>Ieee80211FrameBody</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211AuthenticationFrameBody</name>
      <anchorfile>class_ieee80211_authentication_frame_body.html</anchorfile>
      <anchor>a8176ade103c876585147089f54f71e19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211AuthenticationFrameBody</name>
      <anchorfile>class_ieee80211_authentication_frame_body.html</anchorfile>
      <anchor>a81e2fefd08eb5436abc92a4b616225f5</anchor>
      <arglist>(const Ieee80211AuthenticationFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211AuthenticationFrameBody</name>
      <anchorfile>class_ieee80211_authentication_frame_body.html</anchorfile>
      <anchor>a8c5aed563f0e87a4852898742da0ee5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211AuthenticationFrameBody &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_authentication_frame_body.html</anchorfile>
      <anchor>ae6cb242a735dc0e172b99374358ac54f</anchor>
      <arglist>(const Ieee80211AuthenticationFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211AuthenticationFrameBody *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_authentication_frame_body.html</anchorfile>
      <anchor>aadb854ec8caaa08f517d9ad67b0d95f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_authentication_frame_body.html</anchorfile>
      <anchor>afec1e6277c43145ba8e377b297839d0e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_authentication_frame_body.html</anchorfile>
      <anchor>a9589f89bf57926cf7e60596c9b918c8a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getSequenceNumber</name>
      <anchorfile>class_ieee80211_authentication_frame_body.html</anchorfile>
      <anchor>aca78ce3ecb51afcb0efde2a0ce2124e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSequenceNumber</name>
      <anchorfile>class_ieee80211_authentication_frame_body.html</anchorfile>
      <anchor>a4672fbd26e75931134a74f22205d9943</anchor>
      <arglist>(unsigned short sequenceNumber_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getStatusCode</name>
      <anchorfile>class_ieee80211_authentication_frame_body.html</anchorfile>
      <anchor>a4b09881ded0f7f84bad6da7f60e0aabc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStatusCode</name>
      <anchorfile>class_ieee80211_authentication_frame_body.html</anchorfile>
      <anchor>a61db56d15febde5c6094b6c5e5eb2f88</anchor>
      <arglist>(int statusCode_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getIsLast</name>
      <anchorfile>class_ieee80211_authentication_frame_body.html</anchorfile>
      <anchor>a158ad4ebb3101bf5644127de85e6b59b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsLast</name>
      <anchorfile>class_ieee80211_authentication_frame_body.html</anchorfile>
      <anchor>ac7dc779a98d19a6d9026ab55b92344ab</anchor>
      <arglist>(bool isLast_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_authentication_frame_body.html</anchorfile>
      <anchor>a44edb67afe98fa1ad678c688e89422dc</anchor>
      <arglist>(const Ieee80211AuthenticationFrameBody &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>sequenceNumber_var</name>
      <anchorfile>class_ieee80211_authentication_frame_body.html</anchorfile>
      <anchor>a098b20923793492c1013885adf8d6835</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>statusCode_var</name>
      <anchorfile>class_ieee80211_authentication_frame_body.html</anchorfile>
      <anchor>af7145cb0f5c7f98f6334764fef8adc30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isLast_var</name>
      <anchorfile>class_ieee80211_authentication_frame_body.html</anchorfile>
      <anchor>a32cadb156dcef3d1d07a17efc9be8b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211BeaconFrame</name>
    <filename>class_ieee80211_beacon_frame.html</filename>
    <base>Ieee80211ManagementFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211BeaconFrame</name>
      <anchorfile>class_ieee80211_beacon_frame.html</anchorfile>
      <anchor>adc64aad25a724c3f538187ecdc58a2b3</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211BeaconFrame</name>
      <anchorfile>class_ieee80211_beacon_frame.html</anchorfile>
      <anchor>ab2721ff13f1a5ed541a1cf04fd4127d3</anchor>
      <arglist>(const Ieee80211BeaconFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211BeaconFrame</name>
      <anchorfile>class_ieee80211_beacon_frame.html</anchorfile>
      <anchor>a9dcc23b1e857d926dcd86ae784ae49b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211BeaconFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_beacon_frame.html</anchorfile>
      <anchor>a21fa9a5104983db2088669181638d00c</anchor>
      <arglist>(const Ieee80211BeaconFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211BeaconFrame *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_beacon_frame.html</anchorfile>
      <anchor>a4bdf6391d42ded249445680a380ee068</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_beacon_frame.html</anchorfile>
      <anchor>aedf4770352e817f7a5508dda8fb30b8e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_beacon_frame.html</anchorfile>
      <anchor>aa4b549f030064b6ba364d6314068f20c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211BeaconFrameBody &amp;</type>
      <name>getBody</name>
      <anchorfile>class_ieee80211_beacon_frame.html</anchorfile>
      <anchor>aad6e4673ac5bf7f6e45fe654cc71303c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211BeaconFrameBody &amp;</type>
      <name>getBody</name>
      <anchorfile>class_ieee80211_beacon_frame.html</anchorfile>
      <anchor>a543be81bce4d07607d89e621e9eab50b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBody</name>
      <anchorfile>class_ieee80211_beacon_frame.html</anchorfile>
      <anchor>a5b82b37acd7be53aaa4191f42d44e04c</anchor>
      <arglist>(const Ieee80211BeaconFrameBody &amp;body_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_beacon_frame.html</anchorfile>
      <anchor>a4b169457901efa9e8dbebe63c4cb7c60</anchor>
      <arglist>(const Ieee80211BeaconFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::Ieee80211BeaconFrameBody</type>
      <name>body_var</name>
      <anchorfile>class_ieee80211_beacon_frame.html</anchorfile>
      <anchor>a6bb2038accb932b79068e9244f8bff9e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211BeaconFrameBody</name>
    <filename>class_ieee80211_beacon_frame_body.html</filename>
    <base>Ieee80211FrameBody</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211BeaconFrameBody</name>
      <anchorfile>class_ieee80211_beacon_frame_body.html</anchorfile>
      <anchor>aaca0750ff0fc5c9ca6a1dbf33da8525d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211BeaconFrameBody</name>
      <anchorfile>class_ieee80211_beacon_frame_body.html</anchorfile>
      <anchor>a55d342083de3f10650624e0812a98a13</anchor>
      <arglist>(const Ieee80211BeaconFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211BeaconFrameBody</name>
      <anchorfile>class_ieee80211_beacon_frame_body.html</anchorfile>
      <anchor>ad62be4f103951a2b2db9f74efcfaa550</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211BeaconFrameBody &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_beacon_frame_body.html</anchorfile>
      <anchor>ae9f57fdb22d93d63c31375ae42ccafaa</anchor>
      <arglist>(const Ieee80211BeaconFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211BeaconFrameBody *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_beacon_frame_body.html</anchorfile>
      <anchor>ae8fac1636093fdc5f81e8f0beb12642e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_beacon_frame_body.html</anchorfile>
      <anchor>a4665088e1fd67666ca8287e2613ca744</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_beacon_frame_body.html</anchorfile>
      <anchor>abd96449702035d7108ae1dcb86b0d352</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getSSID</name>
      <anchorfile>class_ieee80211_beacon_frame_body.html</anchorfile>
      <anchor>a68cb69a47e4763121f021b16bcfe0f4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSSID</name>
      <anchorfile>class_ieee80211_beacon_frame_body.html</anchorfile>
      <anchor>a3a898b5b1ba88376a64bba24fc07d602</anchor>
      <arglist>(const char *SSID_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211SupportedRatesElement &amp;</type>
      <name>getSupportedRates</name>
      <anchorfile>class_ieee80211_beacon_frame_body.html</anchorfile>
      <anchor>af953b99dcbcac614c4f9a3d445e4e504</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211SupportedRatesElement &amp;</type>
      <name>getSupportedRates</name>
      <anchorfile>class_ieee80211_beacon_frame_body.html</anchorfile>
      <anchor>a367de42205a54b648fc3d94af2d69eb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSupportedRates</name>
      <anchorfile>class_ieee80211_beacon_frame_body.html</anchorfile>
      <anchor>ac0bbe03dc3a97d369b1067a3fc9a3fac</anchor>
      <arglist>(const Ieee80211SupportedRatesElement &amp;supportedRates_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getBeaconInterval</name>
      <anchorfile>class_ieee80211_beacon_frame_body.html</anchorfile>
      <anchor>a1881fc541e13987efab005f76dd106bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBeaconInterval</name>
      <anchorfile>class_ieee80211_beacon_frame_body.html</anchorfile>
      <anchor>a70589e1939d2a2cfc138d36abe30b461</anchor>
      <arglist>(simtime_t beaconInterval_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getChannelNumber</name>
      <anchorfile>class_ieee80211_beacon_frame_body.html</anchorfile>
      <anchor>a4761a74f63ddb2930acc92c1e4ff6c07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChannelNumber</name>
      <anchorfile>class_ieee80211_beacon_frame_body.html</anchorfile>
      <anchor>ab066474096f36a91ef381b27177680fe</anchor>
      <arglist>(int channelNumber_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211HandoverParameters &amp;</type>
      <name>getHandoverParameters</name>
      <anchorfile>class_ieee80211_beacon_frame_body.html</anchorfile>
      <anchor>a643bacc6f3519be9eb3c7f9009596959</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211HandoverParameters &amp;</type>
      <name>getHandoverParameters</name>
      <anchorfile>class_ieee80211_beacon_frame_body.html</anchorfile>
      <anchor>a57fd376285c59faa36474ad581f9d9da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHandoverParameters</name>
      <anchorfile>class_ieee80211_beacon_frame_body.html</anchorfile>
      <anchor>a5df40702b6c0b794e61f91c1248be1bb</anchor>
      <arglist>(const Ieee80211HandoverParameters &amp;handoverParameters_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_beacon_frame_body.html</anchorfile>
      <anchor>a638f2f3a95f104f66db4711cb4d8ffbf</anchor>
      <arglist>(const Ieee80211BeaconFrameBody &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>SSID_var</name>
      <anchorfile>class_ieee80211_beacon_frame_body.html</anchorfile>
      <anchor>a728987bb806fa4ce4a4f636193fe0ee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::Ieee80211SupportedRatesElement</type>
      <name>supportedRates_var</name>
      <anchorfile>class_ieee80211_beacon_frame_body.html</anchorfile>
      <anchor>aea5dedf9b4e7280e668296dcb3f3a7cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>beaconInterval_var</name>
      <anchorfile>class_ieee80211_beacon_frame_body.html</anchorfile>
      <anchor>a6d16c5c1c3c8b67215832640bca9625d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>channelNumber_var</name>
      <anchorfile>class_ieee80211_beacon_frame_body.html</anchorfile>
      <anchor>a0aed55ce93098a949d86a4daedf3a9a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::Ieee80211HandoverParameters</type>
      <name>handoverParameters_var</name>
      <anchorfile>class_ieee80211_beacon_frame_body.html</anchorfile>
      <anchor>a3ffec221d08c0062b9530b1b1d22d723</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ieee80211CapabilityInformation</name>
    <filename>struct_ieee80211_capability_information.html</filename>
    <member kind="function">
      <type></type>
      <name>Ieee80211CapabilityInformation</name>
      <anchorfile>struct_ieee80211_capability_information.html</anchorfile>
      <anchor>a2ae9c5610cfd4553cec92ef8944cef8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>ESS</name>
      <anchorfile>struct_ieee80211_capability_information.html</anchorfile>
      <anchor>abbbe79555ee211a3ad405e1fa1d8e724</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>IBSS</name>
      <anchorfile>struct_ieee80211_capability_information.html</anchorfile>
      <anchor>ae3c0abebf6bc30406d8630be229292bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>CFPollable</name>
      <anchorfile>struct_ieee80211_capability_information.html</anchorfile>
      <anchor>a1c53e59460c597a29cc722f6240b99cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>CFPollRequest</name>
      <anchorfile>struct_ieee80211_capability_information.html</anchorfile>
      <anchor>a5c1153e4134ec3d88defd1cee344dd37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>privacy</name>
      <anchorfile>struct_ieee80211_capability_information.html</anchorfile>
      <anchor>a033215d9a9ccf9d04d75475fbd5c51e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211CTSFrame</name>
    <filename>class_ieee80211_c_t_s_frame.html</filename>
    <base>Ieee80211OneAddressFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211CTSFrame</name>
      <anchorfile>class_ieee80211_c_t_s_frame.html</anchorfile>
      <anchor>ac42a60d15004fbfc470baf38cf53dcc4</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211CTSFrame</name>
      <anchorfile>class_ieee80211_c_t_s_frame.html</anchorfile>
      <anchor>af78be83b55cd236fc87d6dd7b2190297</anchor>
      <arglist>(const Ieee80211CTSFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211CTSFrame</name>
      <anchorfile>class_ieee80211_c_t_s_frame.html</anchorfile>
      <anchor>acf882de4bc347bc9d77a97b4ac2b550c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211CTSFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_c_t_s_frame.html</anchorfile>
      <anchor>a27bec8c701b0f44a03300faa909ddd21</anchor>
      <arglist>(const Ieee80211CTSFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211CTSFrame *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_c_t_s_frame.html</anchorfile>
      <anchor>a6d10f97e0c0dd2ad955074de63e02f72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_c_t_s_frame.html</anchorfile>
      <anchor>a608056e85e5c03ed08ec729dbe661a3b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_c_t_s_frame.html</anchorfile>
      <anchor>a028d12311cbe458ac175a36244311f64</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_c_t_s_frame.html</anchorfile>
      <anchor>a84452fc0a6ce2be7563bd0e6846b0f29</anchor>
      <arglist>(const Ieee80211CTSFrame &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211DataFrame</name>
    <filename>class_ieee80211_data_frame.html</filename>
    <base>Ieee80211DataOrMgmtFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211DataFrame</name>
      <anchorfile>class_ieee80211_data_frame.html</anchorfile>
      <anchor>a0d0861d09cd4844c0fe4ff4e99ceec22</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211DataFrame</name>
      <anchorfile>class_ieee80211_data_frame.html</anchorfile>
      <anchor>ac7c214383c9a7bb95812c92a61decaa9</anchor>
      <arglist>(const Ieee80211DataFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211DataFrame</name>
      <anchorfile>class_ieee80211_data_frame.html</anchorfile>
      <anchor>aad4ae15d3627a17faa8fc3ec28dd25c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211DataFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_data_frame.html</anchorfile>
      <anchor>aba07db508101c360bbc519e73b021602</anchor>
      <arglist>(const Ieee80211DataFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211DataFrame *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_data_frame.html</anchorfile>
      <anchor>ae3d36327af5f2b9c923268de80b81b32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_data_frame.html</anchorfile>
      <anchor>a57eae295e5beb29c7ab6c718d36ebfe9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_data_frame.html</anchorfile>
      <anchor>a4eab70203ccb29f0c416cdb467a2b54f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getAddress4</name>
      <anchorfile>class_ieee80211_data_frame.html</anchorfile>
      <anchor>a5656bf68b7c48debc140c9f8fbbb38a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getAddress4</name>
      <anchorfile>class_ieee80211_data_frame.html</anchorfile>
      <anchor>acca0427ee3512016c86d1bf329e07553</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress4</name>
      <anchorfile>class_ieee80211_data_frame.html</anchorfile>
      <anchor>a2237822e1c2db88c5164f9dada32e8b3</anchor>
      <arglist>(const MACAddress &amp;address4_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_data_frame.html</anchorfile>
      <anchor>a41ea76322a8fc8c56430c52ba462dcb3</anchor>
      <arglist>(const Ieee80211DataFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::MACAddress</type>
      <name>address4_var</name>
      <anchorfile>class_ieee80211_data_frame.html</anchorfile>
      <anchor>ade0b1af7dcec0459b02e826aefff1e8a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211DataOrMgmtFrame</name>
    <filename>class_ieee80211_data_or_mgmt_frame.html</filename>
    <base>Ieee80211TwoAddressFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211DataOrMgmtFrame</name>
      <anchorfile>class_ieee80211_data_or_mgmt_frame.html</anchorfile>
      <anchor>a52520b3f0c25b52ba1c79172069aa04e</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211DataOrMgmtFrame</name>
      <anchorfile>class_ieee80211_data_or_mgmt_frame.html</anchorfile>
      <anchor>ac9af639418e542a7d13c88c28d86acc3</anchor>
      <arglist>(const Ieee80211DataOrMgmtFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211DataOrMgmtFrame</name>
      <anchorfile>class_ieee80211_data_or_mgmt_frame.html</anchorfile>
      <anchor>ac97222aba36131d95251220d8aff9f86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211DataOrMgmtFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_data_or_mgmt_frame.html</anchorfile>
      <anchor>af35db9678a73a73a9fe130a9dcb79ecf</anchor>
      <arglist>(const Ieee80211DataOrMgmtFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211DataOrMgmtFrame *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_data_or_mgmt_frame.html</anchorfile>
      <anchor>ab643546cacf8f6b151b7f98f9d59d65b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_data_or_mgmt_frame.html</anchorfile>
      <anchor>a24511f3ae311537427d538b4007829de</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_data_or_mgmt_frame.html</anchorfile>
      <anchor>a007d0f9b6f4b0b1b8f1908472392b5b2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getAddress3</name>
      <anchorfile>class_ieee80211_data_or_mgmt_frame.html</anchorfile>
      <anchor>af1bad63bfd1bd1f7b5dd7c5463219095</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getAddress3</name>
      <anchorfile>class_ieee80211_data_or_mgmt_frame.html</anchorfile>
      <anchor>a06090d9fe18038dd14c4486947f6f5e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress3</name>
      <anchorfile>class_ieee80211_data_or_mgmt_frame.html</anchorfile>
      <anchor>ad9998f29af908cd77063090440efab7b</anchor>
      <arglist>(const MACAddress &amp;address3_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getFragmentNumber</name>
      <anchorfile>class_ieee80211_data_or_mgmt_frame.html</anchorfile>
      <anchor>ad5917664ded0ef34e2ad4fb7f816f333</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFragmentNumber</name>
      <anchorfile>class_ieee80211_data_or_mgmt_frame.html</anchorfile>
      <anchor>ae3a4302e2f8d151781db49c58676a1f5</anchor>
      <arglist>(short fragmentNumber_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getSequenceNumber</name>
      <anchorfile>class_ieee80211_data_or_mgmt_frame.html</anchorfile>
      <anchor>a3b262dfc33134f6e8af3e50e97ee56ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSequenceNumber</name>
      <anchorfile>class_ieee80211_data_or_mgmt_frame.html</anchorfile>
      <anchor>a0e4dcde90f647f68fa45d2eae458b6dc</anchor>
      <arglist>(short sequenceNumber_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_data_or_mgmt_frame.html</anchorfile>
      <anchor>a34346b18472e996a887d6c898a3b94c3</anchor>
      <arglist>(const Ieee80211DataOrMgmtFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::MACAddress</type>
      <name>address3_var</name>
      <anchorfile>class_ieee80211_data_or_mgmt_frame.html</anchorfile>
      <anchor>a127e3641c1a725656bd25c911708b824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>fragmentNumber_var</name>
      <anchorfile>class_ieee80211_data_or_mgmt_frame.html</anchorfile>
      <anchor>a68b59f08aa1d3a73bb754512454b1021</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>sequenceNumber_var</name>
      <anchorfile>class_ieee80211_data_or_mgmt_frame.html</anchorfile>
      <anchor>af51e592326eb9959487962376c865102</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211DeauthenticationFrame</name>
    <filename>class_ieee80211_deauthentication_frame.html</filename>
    <base>Ieee80211ManagementFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211DeauthenticationFrame</name>
      <anchorfile>class_ieee80211_deauthentication_frame.html</anchorfile>
      <anchor>a71da48963a33e50b0dd8260d45b4818e</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211DeauthenticationFrame</name>
      <anchorfile>class_ieee80211_deauthentication_frame.html</anchorfile>
      <anchor>ab64fb86afc79c6f1a61c4bc50a196ae3</anchor>
      <arglist>(const Ieee80211DeauthenticationFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211DeauthenticationFrame</name>
      <anchorfile>class_ieee80211_deauthentication_frame.html</anchorfile>
      <anchor>ae846d6cac0948bf5377c662a38575a98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211DeauthenticationFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_deauthentication_frame.html</anchorfile>
      <anchor>a4d2bb8505388e5dd127bcb487912ef71</anchor>
      <arglist>(const Ieee80211DeauthenticationFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211DeauthenticationFrame *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_deauthentication_frame.html</anchorfile>
      <anchor>af65284ef8e584a32019b1f2fad00372e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_deauthentication_frame.html</anchorfile>
      <anchor>a524547134660206ad91d604c2762b22f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_deauthentication_frame.html</anchorfile>
      <anchor>a18f173647c68e5d12965f6b481ad956b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211DeauthenticationFrameBody &amp;</type>
      <name>getBody</name>
      <anchorfile>class_ieee80211_deauthentication_frame.html</anchorfile>
      <anchor>a09a72c494651545bc62480cec7989494</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211DeauthenticationFrameBody &amp;</type>
      <name>getBody</name>
      <anchorfile>class_ieee80211_deauthentication_frame.html</anchorfile>
      <anchor>a3a96db8aa423bf2a9ba391cb35297387</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBody</name>
      <anchorfile>class_ieee80211_deauthentication_frame.html</anchorfile>
      <anchor>aff264bb9046ffe28ab1cf79f734bf839</anchor>
      <arglist>(const Ieee80211DeauthenticationFrameBody &amp;body_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_deauthentication_frame.html</anchorfile>
      <anchor>a6a04c85aa30442974466d19be082310e</anchor>
      <arglist>(const Ieee80211DeauthenticationFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::Ieee80211DeauthenticationFrameBody</type>
      <name>body_var</name>
      <anchorfile>class_ieee80211_deauthentication_frame.html</anchorfile>
      <anchor>a3d381386d3eca1884f0b94cfb7bee800</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211DeauthenticationFrameBody</name>
    <filename>class_ieee80211_deauthentication_frame_body.html</filename>
    <base>Ieee80211FrameBody</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211DeauthenticationFrameBody</name>
      <anchorfile>class_ieee80211_deauthentication_frame_body.html</anchorfile>
      <anchor>aafce8864fb95ff32416de14421b29eb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211DeauthenticationFrameBody</name>
      <anchorfile>class_ieee80211_deauthentication_frame_body.html</anchorfile>
      <anchor>a693cf61d67f46a2865d77e7f946af6ce</anchor>
      <arglist>(const Ieee80211DeauthenticationFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211DeauthenticationFrameBody</name>
      <anchorfile>class_ieee80211_deauthentication_frame_body.html</anchorfile>
      <anchor>afb106b1a95d8410482b6579c212aea3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211DeauthenticationFrameBody &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_deauthentication_frame_body.html</anchorfile>
      <anchor>a4bc416fc45daefc442a27bf83b68b963</anchor>
      <arglist>(const Ieee80211DeauthenticationFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211DeauthenticationFrameBody *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_deauthentication_frame_body.html</anchorfile>
      <anchor>af196a777dc40453fb175cf89304873ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_deauthentication_frame_body.html</anchorfile>
      <anchor>a55b4090a05d41fe52d40da7af4a371cb</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_deauthentication_frame_body.html</anchorfile>
      <anchor>ab55fccf3a10ea4f75539be54fc8e7520</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getReasonCode</name>
      <anchorfile>class_ieee80211_deauthentication_frame_body.html</anchorfile>
      <anchor>a823da9b088d63e13a35f43f6151073f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReasonCode</name>
      <anchorfile>class_ieee80211_deauthentication_frame_body.html</anchorfile>
      <anchor>ac5c21e4591f375186b8c1bc235318ed6</anchor>
      <arglist>(int reasonCode_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_deauthentication_frame_body.html</anchorfile>
      <anchor>a233d6aca1b2b641dfa8084d149670f55</anchor>
      <arglist>(const Ieee80211DeauthenticationFrameBody &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>reasonCode_var</name>
      <anchorfile>class_ieee80211_deauthentication_frame_body.html</anchorfile>
      <anchor>a2ce378454446dc9dedcd197e0841972d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211DisassociationFrame</name>
    <filename>class_ieee80211_disassociation_frame.html</filename>
    <base>Ieee80211ManagementFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211DisassociationFrame</name>
      <anchorfile>class_ieee80211_disassociation_frame.html</anchorfile>
      <anchor>aa9c04f87544d0eeec029fce92b884b9c</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211DisassociationFrame</name>
      <anchorfile>class_ieee80211_disassociation_frame.html</anchorfile>
      <anchor>aa3a455392a1cdd1e954aa09136e5edb1</anchor>
      <arglist>(const Ieee80211DisassociationFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211DisassociationFrame</name>
      <anchorfile>class_ieee80211_disassociation_frame.html</anchorfile>
      <anchor>aab3ed783ba44cd9c0297428b9ba408ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211DisassociationFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_disassociation_frame.html</anchorfile>
      <anchor>abedb977ac18f9a1830f11ee91384c9e9</anchor>
      <arglist>(const Ieee80211DisassociationFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211DisassociationFrame *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_disassociation_frame.html</anchorfile>
      <anchor>ac666740688eb21cd6c62faf33a14cc02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_disassociation_frame.html</anchorfile>
      <anchor>a323044a1d5317e839f50389c9a356f91</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_disassociation_frame.html</anchorfile>
      <anchor>a00612393f092c8193f44c95becf5848c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211DisassociationFrameBody &amp;</type>
      <name>getBody</name>
      <anchorfile>class_ieee80211_disassociation_frame.html</anchorfile>
      <anchor>a25230e5055bc3862edfcbd3a544ed13b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211DisassociationFrameBody &amp;</type>
      <name>getBody</name>
      <anchorfile>class_ieee80211_disassociation_frame.html</anchorfile>
      <anchor>a000226e55380bf467bb510e6e6798ace</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBody</name>
      <anchorfile>class_ieee80211_disassociation_frame.html</anchorfile>
      <anchor>a2222045357712fe2fa08bc9cb9da4342</anchor>
      <arglist>(const Ieee80211DisassociationFrameBody &amp;body_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_disassociation_frame.html</anchorfile>
      <anchor>af488ff4f6d76ca369cd57b668b1479dc</anchor>
      <arglist>(const Ieee80211DisassociationFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::Ieee80211DisassociationFrameBody</type>
      <name>body_var</name>
      <anchorfile>class_ieee80211_disassociation_frame.html</anchorfile>
      <anchor>aabbb50c38f4447c8e831011bc11a25e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211DisassociationFrameBody</name>
    <filename>class_ieee80211_disassociation_frame_body.html</filename>
    <base>Ieee80211FrameBody</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211DisassociationFrameBody</name>
      <anchorfile>class_ieee80211_disassociation_frame_body.html</anchorfile>
      <anchor>af20221e471e4fe4e6432373ab2eec2c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211DisassociationFrameBody</name>
      <anchorfile>class_ieee80211_disassociation_frame_body.html</anchorfile>
      <anchor>a912be1da2b33ff31910e745ee68c18d8</anchor>
      <arglist>(const Ieee80211DisassociationFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211DisassociationFrameBody</name>
      <anchorfile>class_ieee80211_disassociation_frame_body.html</anchorfile>
      <anchor>a9fdd0caae485df5e98ba13dad1c325d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211DisassociationFrameBody &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_disassociation_frame_body.html</anchorfile>
      <anchor>a26c9bdc3ff8d5a6f898928dbe8d990d7</anchor>
      <arglist>(const Ieee80211DisassociationFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211DisassociationFrameBody *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_disassociation_frame_body.html</anchorfile>
      <anchor>a214ee17f2a145dbb5d61027a6a8887b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_disassociation_frame_body.html</anchorfile>
      <anchor>a5de0890f207030a6dee914fd2de2b1e6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_disassociation_frame_body.html</anchorfile>
      <anchor>a136d82289d27f92c61e3217b44e2a3b9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getReasonCode</name>
      <anchorfile>class_ieee80211_disassociation_frame_body.html</anchorfile>
      <anchor>ab3cc4649c0b09cef778ebf87837477a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReasonCode</name>
      <anchorfile>class_ieee80211_disassociation_frame_body.html</anchorfile>
      <anchor>a3b400e52a336f8e478ef468de7760ebb</anchor>
      <arglist>(int reasonCode_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_disassociation_frame_body.html</anchorfile>
      <anchor>ab944116c597a2b86c66072e5bfddc6de</anchor>
      <arglist>(const Ieee80211DisassociationFrameBody &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>reasonCode_var</name>
      <anchorfile>class_ieee80211_disassociation_frame_body.html</anchorfile>
      <anchor>ae103594a9c97388b7d6bbac028f4b804</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211Frame</name>
    <filename>class_ieee80211_frame.html</filename>
    <member kind="function">
      <type></type>
      <name>Ieee80211Frame</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>aebfdab1ca96d2366adcef07deb2bb82e</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211Frame</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>af55bfda901c5467ef8b2bab1a574f28f</anchor>
      <arglist>(const Ieee80211Frame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211Frame</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>aedf8e8a31a47ab7b8b238f182dd7c8d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211Frame &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>a91634247985352a8d0cd8643d39a5c16</anchor>
      <arglist>(const Ieee80211Frame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211Frame *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>a8a459c2fbc6cb63a0815118b1479f15e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>ac9098e65b327eb627e40585ce97bfa26</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>ac7c8e689e6ddaf4a2bad0da178d38cbd</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getType</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>a2e7c19c38074e54f5d99cb09992b2f89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>ac01e9dca56c17768c18868cbab71a466</anchor>
      <arglist>(short type_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getToDS</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>a398c7d57be53613839506405680e400b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setToDS</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>a3e4f1d15681012d7d6ed4241fc0bc44c</anchor>
      <arglist>(bool toDS_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getFromDS</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>a6924450962ed3ce35c16241aa23705f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFromDS</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>a9475a3bb913c9f224a01d1826634dd40</anchor>
      <arglist>(bool fromDS_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRetry</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>ad00fa814f933593e0c9b11067253aade</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRetry</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>ab04786a478f0cb875782694c0ab0a08b</anchor>
      <arglist>(bool retry_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getMoreFragments</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>a8d7eb0502caef6252275e46e01b13aaa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMoreFragments</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>a82957ddd2dda1a867a55c341ee78818f</anchor>
      <arglist>(bool moreFragments_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getDuration</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>a5779472ccaefae6d1f80db8f2473c035</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDuration</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>a30561171ebc4e9fe077acaa58d6e2a4a</anchor>
      <arglist>(simtime_t duration_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getAID</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>aba3acda639d6c60cafed7259c236ed9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAID</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>a7b76644dc1c91f0e4ac04aa0e8d36a58</anchor>
      <arglist>(short AID_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getReceiverAddress</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>a342fbce2fe9bff7e0894e8ee1cf8da36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getReceiverAddress</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>a07726f6d24e2a4757da6540acfe4e7bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReceiverAddress</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>a9988d4ef0a1e96b0778f2ff550c15560</anchor>
      <arglist>(const MACAddress &amp;receiverAddress_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>a02e9cf88db0313441f530f617ac512a2</anchor>
      <arglist>(const Ieee80211Frame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>type_var</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>a5a5bfc95d88a7bcc083e730e8717961a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>toDS_var</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>a793bd786f0a50938986a20061e7cbfea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>fromDS_var</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>a46d2452b1ed95f8aa896a9737a4c7224</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>retry_var</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>a2f2c3140e57d57174802939bc1102eac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>moreFragments_var</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>a860087a2375313b9698c24d29496e273</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>duration_var</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>a3fa35e39f893c8a3d36b63151739ea93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>AID_var</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>a2953522e7a6386fe242370e5ffda78db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::MACAddress</type>
      <name>receiverAddress_var</name>
      <anchorfile>class_ieee80211_frame.html</anchorfile>
      <anchor>ad544dd56990b0a79a8fbef0504c7f149</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211FrameBody</name>
    <filename>class_ieee80211_frame_body.html</filename>
    <member kind="function">
      <type></type>
      <name>Ieee80211FrameBody</name>
      <anchorfile>class_ieee80211_frame_body.html</anchorfile>
      <anchor>a8f67b49e3362ec923051ad0ee65ce786</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211FrameBody</name>
      <anchorfile>class_ieee80211_frame_body.html</anchorfile>
      <anchor>a69d28463a2b47c391f13ce046355a387</anchor>
      <arglist>(const Ieee80211FrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211FrameBody</name>
      <anchorfile>class_ieee80211_frame_body.html</anchorfile>
      <anchor>a1b6cb0020ae9ce7008b8ae1b8b851405</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211FrameBody &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_frame_body.html</anchorfile>
      <anchor>ab3086e94fbe23707c0d47d2c8dd8215a</anchor>
      <arglist>(const Ieee80211FrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211FrameBody *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_frame_body.html</anchorfile>
      <anchor>aae9690a74d618b5fffa7f737bcc8adb6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_frame_body.html</anchorfile>
      <anchor>a713df14e693466006acc8c964b43623b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_frame_body.html</anchorfile>
      <anchor>ac15c5f46e65ba3fb03c461a4531dec1f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getBodyLength</name>
      <anchorfile>class_ieee80211_frame_body.html</anchorfile>
      <anchor>af90318fc97d69ddc594865d085b03e8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBodyLength</name>
      <anchorfile>class_ieee80211_frame_body.html</anchorfile>
      <anchor>a4e34d174cee1a0dacbf84b9e540022df</anchor>
      <arglist>(short bodyLength_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_frame_body.html</anchorfile>
      <anchor>ae3f18bcb5e055769a72426a7f77e574a</anchor>
      <arglist>(const Ieee80211FrameBody &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>bodyLength_var</name>
      <anchorfile>class_ieee80211_frame_body.html</anchorfile>
      <anchor>a2263560b828ed0303f5e49180d09a50e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ieee80211HandoverParameters</name>
    <filename>struct_ieee80211_handover_parameters.html</filename>
    <member kind="function">
      <type></type>
      <name>Ieee80211HandoverParameters</name>
      <anchorfile>struct_ieee80211_handover_parameters.html</anchorfile>
      <anchor>a5839a4746f28d624b913a3679580bb31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>avgBackoffTime</name>
      <anchorfile>struct_ieee80211_handover_parameters.html</anchorfile>
      <anchor>a77da54aea70a6f346161ac7b740bea03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>avgWaitTime</name>
      <anchorfile>struct_ieee80211_handover_parameters.html</anchorfile>
      <anchor>ada3f88b289db1ac3952df5e0c321be58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>avgErrorRate</name>
      <anchorfile>struct_ieee80211_handover_parameters.html</anchorfile>
      <anchor>a9b46a94f73d5b04c1e91a4f827ce0953</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>estAvailBW</name>
      <anchorfile>struct_ieee80211_handover_parameters.html</anchorfile>
      <anchor>a49218d23f7304da91939c45895dd43f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211Mac</name>
    <filename>class_ieee80211_mac.html</filename>
    <base>WirelessMacBase</base>
    <base>INotifiable</base>
    <class kind="struct">Ieee80211Mac::Ieee80211ASFTuple</class>
    <member kind="function">
      <type></type>
      <name>Ieee80211Mac</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a34230eadfc933351daa3921147113e67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211Mac</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a5996f42ab538115f55c7f74121276f09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Ieee80211Frame *</type>
      <name>setBasicBitrate</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a90256fefdfde93f0f350a100c8b94eda</anchor>
      <arglist>(Ieee80211Frame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a71351c92bb5234f62edb24b1a0f1f1b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>acc89ca1fc93ad17f2a78a01bd474f058</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>registerInterface</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a306f0e039efc2ede2e2e209bf02f7b1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeQueueModule</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a76503451f2ddc57bec7426c3f9f919ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a3c6164232e8645bbbef5d178d78fd8c4</anchor>
      <arglist>(int category, const cPolymorphic *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleCommand</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>aedaaf3e337f2d4a0790dbe392ac9f481</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a9c4e21cc98783e53810b622e0c6deda2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a3c78df80f39331fe0c35a19b2a991714</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>af163e249ed0577fb5027e3e9cf54d6a5</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleWithFSM</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>aa95e52e25b2792fb62dd4d758cac72a2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getSIFS</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a502179f9e3503763304b8f3fd4ba32fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getSlotTime</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>ace75d97f719d23cab2bf582ab26d083e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getDIFS</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a0f34064c34a1e6bc53832280a95e8fbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getEIFS</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a87bec8aaae96a4fe5d70816d48477183</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getPIFS</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a8aee694a3627cb27994c0b29bc4c0d1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>computeBackoffPeriod</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>ab34517c360aa546041515d97c354dd43</anchor>
      <arglist>(Ieee80211Frame *msg, int r)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleSIFSPeriod</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a325e59dc74a3ad59596933aaf96012a7</anchor>
      <arglist>(Ieee80211Frame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleDIFSPeriod</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a84bd3147b655f8396f37926fe34a17ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>cancelDIFSPeriod</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a1427f98783abfa545523111cd3f209bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleDataTimeoutPeriod</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>ab699599e2dc2ffb747a9a7ae8a8f98e8</anchor>
      <arglist>(Ieee80211DataOrMgmtFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleBroadcastTimeoutPeriod</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>ae49ff307323745c607aa72ddbd8eefcd</anchor>
      <arglist>(Ieee80211DataOrMgmtFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>cancelTimeoutPeriod</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a9a3d534aa427c8ec65713ad1f3e0e223</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleCTSTimeoutPeriod</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a916864ac7a266c8fdf466a185c3a68dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleReservePeriod</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a21662171dd8c6356df3c8b050d7c9414</anchor>
      <arglist>(Ieee80211Frame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>invalidateBackoffPeriod</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a45baf5991b010588132ecfea105a17b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInvalidBackoffPeriod</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>ac0b29b4f8c930e44e5dd062b79e394c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generateBackoffPeriod</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>adb7349369b15dc3f966da2b8a7b8d0d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>decreaseBackoffPeriod</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>accd0c207251e64841e545a538a0d5e13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleBackoffPeriod</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a4ea47166959fb7622be67011d131d8f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>cancelBackoffPeriod</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a80a6ffa55936b6ee00a09c45cf82aaf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendACKFrameOnEndSIFS</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a1fa778f58e945ac0b347dfa66785224b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendACKFrame</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a0afcec3ebbe4fac7c63ac32937604540</anchor>
      <arglist>(Ieee80211DataOrMgmtFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendRTSFrame</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>abe3eb2e0a57570ce0f786da221090924</anchor>
      <arglist>(Ieee80211DataOrMgmtFrame *frameToSend)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendCTSFrameOnEndSIFS</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a821d34cb04fd6ebd9b0d6989b963614d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendCTSFrame</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a910622485a5816a5a5475858871bbbdc</anchor>
      <arglist>(Ieee80211RTSFrame *rtsFrame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDataFrameOnEndSIFS</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a535d6bc217f1cfc210fe798c3b89a114</anchor>
      <arglist>(Ieee80211DataOrMgmtFrame *frameToSend)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDataFrame</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a3283d9bfc1d01d05dc65887e6f0e8518</anchor>
      <arglist>(Ieee80211DataOrMgmtFrame *frameToSend)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendBroadcastFrame</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a39720691a045c98037ec4025b9ab5207</anchor>
      <arglist>(Ieee80211DataOrMgmtFrame *frameToSend)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Ieee80211DataOrMgmtFrame *</type>
      <name>buildDataFrame</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a5806d200b6dc0abcd87732edb240479e</anchor>
      <arglist>(Ieee80211DataOrMgmtFrame *frameToSend)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Ieee80211ACKFrame *</type>
      <name>buildACKFrame</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a7eab1962fd94c95151d62e3fb71253e0</anchor>
      <arglist>(Ieee80211DataOrMgmtFrame *frameToACK)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Ieee80211RTSFrame *</type>
      <name>buildRTSFrame</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>aec5d4575e8b8f4339815208c394f86cc</anchor>
      <arglist>(Ieee80211DataOrMgmtFrame *frameToSend)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Ieee80211CTSFrame *</type>
      <name>buildCTSFrame</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>aaea047b56dcec7dc99d9681138c1f719</anchor>
      <arglist>(Ieee80211RTSFrame *rtsFrame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Ieee80211DataOrMgmtFrame *</type>
      <name>buildBroadcastFrame</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a8213d9fea4bc9500dfe899ee70d2789e</anchor>
      <arglist>(Ieee80211DataOrMgmtFrame *frameToSend)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finishCurrentTransmission</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>ae7e7f22c4c76ac7be8ffff853cbf7503</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>giveUpCurrentTransmission</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a793227beb883e6f0f0b5c993aa6b7f56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>retryCurrentTransmission</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a1140ac3364f8defb6d66deb76af9d55e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDownPendingRadioConfigMsg</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>af24a75754986f091cf9b5e6987bb7bf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setMode</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a030408679db4d3c498bf79032baa4618</anchor>
      <arglist>(Mode mode)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Ieee80211DataOrMgmtFrame *</type>
      <name>getCurrentTransmission</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a85bc4ee88b4123a9b38d42cbf6af8e43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>resetStateVariables</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>ace0608e9ca57414b54817d04b184b120</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMediumStateChange</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>adf18b82f7ec2838535e84fba8ef43f3e</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMediumFree</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>aa4550d6a69c5e5a56d2a72ac0dc86729</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBroadcast</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a3e8e21090db18d0cc4596af8588346c9</anchor>
      <arglist>(Ieee80211Frame *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isForUs</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a6a44f63a391702d7e31078eae7fe453b</anchor>
      <arglist>(Ieee80211Frame *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDataOrMgmtFrame</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a331f759ba45d0d363362dce7d1b9f9b0</anchor>
      <arglist>(Ieee80211Frame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Ieee80211Frame *</type>
      <name>getFrameReceivedBeforeSIFS</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a3ae0423bce927f7db18f55a88e44e20a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>popTransmissionQueue</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>af9ffa2b13e0336e9cc15334dea0122da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>computeFrameDuration</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a938984c4144284ab225e087b6789ce71</anchor>
      <arglist>(Ieee80211Frame *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>computeFrameDuration</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a38e18309549f34d7b355c1b1f4aab298</anchor>
      <arglist>(int bits, double bitrate)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>logState</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a0cae572eab527e836aadae2ef9df5b3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>modeName</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>ad717066cb5cc83f789b4abbe28d311d7</anchor>
      <arglist>(int mode)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endSIFS</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a72b8ec2bcb1b505a709eab0ff96799dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endDIFS</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a5bec0576b30d76fcb7f6546a83e6194a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endBackoff</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a82794398a43a1d936ba16d893871e0e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endTimeout</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a27bd612a3164002020b5c315fb096f79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endReserve</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a0f69601950c961a483e33c1455390f9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>mediumStateChange</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>add8e4e32b5dc5f2e4960563eb457ed40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numRetry</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a5a3258861ee26e78b2378160233ae6f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numSentWithoutRetry</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a6c4930c1fd531fe421935816d8856443</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numGivenUp</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>aea9e86c3d8f9db03a6a9dcab0bd36df7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numCollision</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a7cde61a60a0ba921bec433b5d1113c84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numSent</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a5451e3e610dca607187e39f176d91120</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numReceived</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a44149d10cf8b6f6b1f906d68d2157714</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numSentBroadcast</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>aa6376b24ff26d3f78706f5b8656c3167</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numReceivedBroadcast</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>af5839182df73e2f63a767d1927a5ac16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>stateVector</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a784de8a16601c48f1f792adc9a35c321</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>radioStateVector</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a84539589b7715d29c69d1191a521f45b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::list&lt; Ieee80211DataOrMgmtFrame * &gt;</type>
      <name>Ieee80211DataOrMgmtFrameList</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a79de4fc04e68ba3e7154437b1b6bf6de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::list&lt; Ieee80211ASFTuple * &gt;</type>
      <name>Ieee80211ASFTupleList</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a58735d5a5662d92c0dd3246a4e8ffbeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>State</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a7c7e301f779c29eb446b9a06f74020da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IDLE</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a7c7e301f779c29eb446b9a06f74020daae7e75316d129fb411aa5a21ff03ddec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEFER</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a7c7e301f779c29eb446b9a06f74020daa5c036fca4b3f1c9032358fee9fc2ab25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WAITDIFS</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a7c7e301f779c29eb446b9a06f74020daa5b19e098d83d766d41ee620e19aa2186</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BACKOFF</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a7c7e301f779c29eb446b9a06f74020daaccc2ce74d000421b6504f4ea7995b708</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WAITACK</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a7c7e301f779c29eb446b9a06f74020daa3b6427c4aab59339ba051c2705a5fd70</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WAITBROADCAST</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a7c7e301f779c29eb446b9a06f74020daa71f935807206413912f41a57be08c5bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WAITCTS</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a7c7e301f779c29eb446b9a06f74020daac1baac3a7681ac2dbfaf5f5d79e28588</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WAITSIFS</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a7c7e301f779c29eb446b9a06f74020daafe9bbc5fc649aa20f4512da028cbbeac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RECEIVE</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a7c7e301f779c29eb446b9a06f74020daa07c35947e7029a7277a4a23db15b0a0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Mode</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>acc067e4a0585c9fbac4ce009e2ed03ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DCF</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>acc067e4a0585c9fbac4ce009e2ed03caad4632a6aa23ad2c585b22a7d823fd792</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PCF</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>acc067e4a0585c9fbac4ce009e2ed03caa3a0563a9327d929352635290f322e189</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cFSM</type>
      <name>fsm</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a43b47b9bec83a94863108b1b3ae34bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Mode</type>
      <name>mode</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a4d34e2aa99b6fd38ef07005d8cc7be99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sequenceNumber</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a109b2d75d8fc4201674478a72bb31762</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>lastReceiveFailed</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>aae4419ab39198abdf1fc8955b07e5e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>backoff</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>aa21f2979d0e71025b7d7da1ae9a5e656</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>nav</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a591c8f37742e3960afb1a50df3e6673f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>backoffPeriod</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a97fb235214ec97bd334dc0bcdcb94f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>retryCounter</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>aaf4fd54bc69d8695ebc5d1f86d4cacdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RadioState::State</type>
      <name>radioState</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a08443ed66fd8def7cdbce3953cb732c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ieee80211DataOrMgmtFrameList</type>
      <name>transmissionQueue</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>ac08493c34df5189f10a3199ba60f95c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ieee80211ASFTupleList</type>
      <name>asfTuplesList</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>af3cf1a0d1737d69c490ef2fdf9595f3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPassiveQueue *</type>
      <name>queueModule</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a59cc1a59362db4fdf48b81b8e7f62d2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>pendingRadioConfigMsg</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>ad747f5e3abaad56a3fb03ec39426c27e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>address</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a3c12af5380d900067de2346248e5fc57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a1a66661cea11c9b2bcf69076d85b70c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>basicBitrate</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a1bb21c978ee1dced3878113908a6cc56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxQueueSize</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a06b55f6481683d64db13605b27b9537a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>rtsThreshold</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a1bb03a4c3ab2056a1a3d9cab41388613</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>transmissionLimit</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a7ef4f6b331003c2e2054428fa4534bd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>cwMinData</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a620e6bf7dd85045ca5f65164a47e1cfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>cwMinBroadcast</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>a189e3641d647b4d4c506e709a0873467</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>fragmentationThreshold</name>
      <anchorfile>class_ieee80211_mac.html</anchorfile>
      <anchor>af6a8a67f828409cf76bf3c3f0fd6d35b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ieee80211Mac::Ieee80211ASFTuple</name>
    <filename>struct_ieee80211_mac_1_1_ieee80211_a_s_f_tuple.html</filename>
    <member kind="variable">
      <type>MACAddress</type>
      <name>address</name>
      <anchorfile>struct_ieee80211_mac_1_1_ieee80211_a_s_f_tuple.html</anchorfile>
      <anchor>a16403e1539d61501ae28ddde4930b552</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sequenceNumber</name>
      <anchorfile>struct_ieee80211_mac_1_1_ieee80211_a_s_f_tuple.html</anchorfile>
      <anchor>a7dbd209f044cba1dd4415d7ce18308bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>fragmentNumber</name>
      <anchorfile>struct_ieee80211_mac_1_1_ieee80211_a_s_f_tuple.html</anchorfile>
      <anchor>ad48f75fee839b3e7cb5e26be7276e9c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211ManagementFrame</name>
    <filename>class_ieee80211_management_frame.html</filename>
    <base>Ieee80211DataOrMgmtFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211ManagementFrame</name>
      <anchorfile>class_ieee80211_management_frame.html</anchorfile>
      <anchor>acb656a9361e4efbf08fe87bec9e4b00b</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211ManagementFrame</name>
      <anchorfile>class_ieee80211_management_frame.html</anchorfile>
      <anchor>a889d58275fb3f97e68c94c125887dcf6</anchor>
      <arglist>(const Ieee80211ManagementFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211ManagementFrame</name>
      <anchorfile>class_ieee80211_management_frame.html</anchorfile>
      <anchor>aef3cc64d82bb73d51c687756aaa263eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211ManagementFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_management_frame.html</anchorfile>
      <anchor>a919a7f415d832b21349f5cb7f9d2eba4</anchor>
      <arglist>(const Ieee80211ManagementFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211ManagementFrame *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_management_frame.html</anchorfile>
      <anchor>a746ae50cfcf21f9822bd2300090198c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_management_frame.html</anchorfile>
      <anchor>a2428490184fbd13e3cfc417d165d06c9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_management_frame.html</anchorfile>
      <anchor>adaacef87f0c1631c504ac940208c26b9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_management_frame.html</anchorfile>
      <anchor>aa7fc8a74ff23baa1a79d22c5a427c57f</anchor>
      <arglist>(const Ieee80211ManagementFrame &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211MgmtAdhoc</name>
    <filename>class_ieee80211_mgmt_adhoc.html</filename>
    <base>Ieee80211MgmtBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_ieee80211_mgmt_adhoc.html</anchorfile>
      <anchor>aa186c7f0e982496588a6b67562df866c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_ieee80211_mgmt_adhoc.html</anchorfile>
      <anchor>ad04dd552eb4e33908875575302051eef</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimer</name>
      <anchorfile>class_ieee80211_mgmt_adhoc.html</anchorfile>
      <anchor>a406c535f5721d3406de0d3bfb3d3d8ab</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMessage</name>
      <anchorfile>class_ieee80211_mgmt_adhoc.html</anchorfile>
      <anchor>a695dd42fce536b58143729c9e02567e9</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleCommand</name>
      <anchorfile>class_ieee80211_mgmt_adhoc.html</anchorfile>
      <anchor>ad314cdbf28f5f56e0dc02fcfb2b9c782</anchor>
      <arglist>(int msgkind, cPolymorphic *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Ieee80211DataFrame *</type>
      <name>encapsulate</name>
      <anchorfile>class_ieee80211_mgmt_adhoc.html</anchorfile>
      <anchor>afc633ec39ab730872710c00bfc087c9f</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchorfile>class_ieee80211_mgmt_adhoc.html</anchorfile>
      <anchor>a9c9d14a75d5587460b3b959602088173</anchor>
      <arglist>(int category, const cPolymorphic *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDataFrame</name>
      <anchorfile>class_ieee80211_mgmt_adhoc.html</anchorfile>
      <anchor>a2d358e53ae17e0ca98b7895fc5751d23</anchor>
      <arglist>(Ieee80211DataFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAuthenticationFrame</name>
      <anchorfile>class_ieee80211_mgmt_adhoc.html</anchorfile>
      <anchor>ad5bbf51ee53b5dbbb864d3bba53e286d</anchor>
      <arglist>(Ieee80211AuthenticationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDeauthenticationFrame</name>
      <anchorfile>class_ieee80211_mgmt_adhoc.html</anchorfile>
      <anchor>aaf47b70f131706bc62b88d8d8900f389</anchor>
      <arglist>(Ieee80211DeauthenticationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAssociationRequestFrame</name>
      <anchorfile>class_ieee80211_mgmt_adhoc.html</anchorfile>
      <anchor>a541579bcf5cfea4873a5c35dc13628aa</anchor>
      <arglist>(Ieee80211AssociationRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAssociationResponseFrame</name>
      <anchorfile>class_ieee80211_mgmt_adhoc.html</anchorfile>
      <anchor>a7c299fcad9b3be6c0bc79cca28c35b7a</anchor>
      <arglist>(Ieee80211AssociationResponseFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReassociationRequestFrame</name>
      <anchorfile>class_ieee80211_mgmt_adhoc.html</anchorfile>
      <anchor>ae5212ff9a851d7842f43cdb3bae10619</anchor>
      <arglist>(Ieee80211ReassociationRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReassociationResponseFrame</name>
      <anchorfile>class_ieee80211_mgmt_adhoc.html</anchorfile>
      <anchor>a78f531a7ffe7ad42a6b75abee932b29b</anchor>
      <arglist>(Ieee80211ReassociationResponseFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDisassociationFrame</name>
      <anchorfile>class_ieee80211_mgmt_adhoc.html</anchorfile>
      <anchor>a6a644ace6f9cdedda2b1fca91e73786b</anchor>
      <arglist>(Ieee80211DisassociationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleBeaconFrame</name>
      <anchorfile>class_ieee80211_mgmt_adhoc.html</anchorfile>
      <anchor>ae49f3146b8125a7530b8f522dbf816d3</anchor>
      <arglist>(Ieee80211BeaconFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleProbeRequestFrame</name>
      <anchorfile>class_ieee80211_mgmt_adhoc.html</anchorfile>
      <anchor>a83f8f38ac4e8fe49dce576833c0c951b</anchor>
      <arglist>(Ieee80211ProbeRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleProbeResponseFrame</name>
      <anchorfile>class_ieee80211_mgmt_adhoc.html</anchorfile>
      <anchor>a42bca04cd0a435089561619422d67596</anchor>
      <arglist>(Ieee80211ProbeResponseFrame *frame)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211MgmtAP</name>
    <filename>class_ieee80211_mgmt_a_p.html</filename>
    <base>Ieee80211MgmtAPBase</base>
    <class kind="struct">Ieee80211MgmtAP::MAC_compare</class>
    <class kind="struct">Ieee80211MgmtAP::STAInfo</class>
    <member kind="enumeration">
      <name>STAStatus</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>ad77a01f17f24a35adb07b3635f921bec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_AUTHENTICATED</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>ad77a01f17f24a35adb07b3635f921beca24eb52f05fb58e1520103edb4314a256</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AUTHENTICATED</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>ad77a01f17f24a35adb07b3635f921beca762b09fbd36a4f53cfc3f94f330c212e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASSOCIATED</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>ad77a01f17f24a35adb07b3635f921beca30e681aef64bbc74f7c464a4b630fbc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; MACAddress, STAInfo, MAC_compare &gt;</type>
      <name>STAList</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>aa5b45c7698c5c072fb7d88769b2ee8a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>acb327eb4bb0949656b6dfd0a8783d55f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>a36406c3128da871fd778370e54f62520</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimer</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>a14cae66dd1f19e5d1b2d8e957cfd5c46</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMessage</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>a619399638a27fcd0e0fa1335c119d2c1</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleCommand</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>a9c22f920ec65585eb161a144b79a5f95</anchor>
      <arglist>(int msgkind, cPolymorphic *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>a1eb7ccc8fdc45c147ece4e4eb4e1a490</anchor>
      <arglist>(int category, const cPolymorphic *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual STAInfo *</type>
      <name>lookupSenderSTA</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>ab04ca35bebfea54ab6c035e896e88693</anchor>
      <arglist>(Ieee80211ManagementFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendManagementFrame</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>af5ee77992d4756442300010572a4e5e3</anchor>
      <arglist>(Ieee80211ManagementFrame *frame, const MACAddress &amp;destAddr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendBeacon</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>a578868cd99d153dcc0d1a68ffb5f5e91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDataFrame</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>a725155999cce112150ffa68c47c5f580</anchor>
      <arglist>(Ieee80211DataFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAuthenticationFrame</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>a279a38facb96f3dafdbc9b427738bd77</anchor>
      <arglist>(Ieee80211AuthenticationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDeauthenticationFrame</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>a207312fdcec67f03e451012d17ded368</anchor>
      <arglist>(Ieee80211DeauthenticationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAssociationRequestFrame</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>a95771e35bb7ffe1ed6cb931fd7c88229</anchor>
      <arglist>(Ieee80211AssociationRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAssociationResponseFrame</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>a645208bc703bf64a4011cfab75909309</anchor>
      <arglist>(Ieee80211AssociationResponseFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReassociationRequestFrame</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>aa097c2d2f304e01b1baaaa4009d057e9</anchor>
      <arglist>(Ieee80211ReassociationRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReassociationResponseFrame</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>a730e563fe48ce5246396f3cd596f30ed</anchor>
      <arglist>(Ieee80211ReassociationResponseFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDisassociationFrame</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>a2ddea1922b11fb68f9791822d160c3ad</anchor>
      <arglist>(Ieee80211DisassociationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleBeaconFrame</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>ae9667e4bbc3f34570c38a7354c16667e</anchor>
      <arglist>(Ieee80211BeaconFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleProbeRequestFrame</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>abee2be39e916fcba4b064647cca8dc55</anchor>
      <arglist>(Ieee80211ProbeRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleProbeResponseFrame</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>a79b278c1f6291e07f5af89a9ebc78cf9</anchor>
      <arglist>(Ieee80211ProbeResponseFrame *frame)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>ssid</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>ab8bfee1d912aaa2da36d5441d770c973</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>channelNumber</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>af9b1dce018af0ee3d76785152d2e11f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>beaconInterval</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>a64012212d7a7e2e1d3147b12b3fab781</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numAuthSteps</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>af4a045524c831fcee0428eea0c9c6ccc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ieee80211SupportedRatesElement</type>
      <name>supportedRates</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>a95f85c1a2218b1d61a7d6a76406a3d97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>STAList</type>
      <name>staList</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>a3f99984d03a0c4e6b7d252e718b22e27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>beaconTimer</name>
      <anchorfile>class_ieee80211_mgmt_a_p.html</anchorfile>
      <anchor>a89923791cea3e03643999920fa0a0eb0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ieee80211MgmtAP::MAC_compare</name>
    <filename>struct_ieee80211_mgmt_a_p_1_1_m_a_c__compare.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>struct_ieee80211_mgmt_a_p_1_1_m_a_c__compare.html</anchorfile>
      <anchor>a2772afd4677e4d95a254e813b15d7708</anchor>
      <arglist>(const MACAddress &amp;u1, const MACAddress &amp;u2) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ieee80211MgmtAP::STAInfo</name>
    <filename>struct_ieee80211_mgmt_a_p_1_1_s_t_a_info.html</filename>
    <member kind="variable">
      <type>MACAddress</type>
      <name>address</name>
      <anchorfile>struct_ieee80211_mgmt_a_p_1_1_s_t_a_info.html</anchorfile>
      <anchor>a27b2efe4adcd8016505451d641e9c7df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>STAStatus</type>
      <name>status</name>
      <anchorfile>struct_ieee80211_mgmt_a_p_1_1_s_t_a_info.html</anchorfile>
      <anchor>a6858f9ed4944c3936a6a1a85e3de1fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>authSeqExpected</name>
      <anchorfile>struct_ieee80211_mgmt_a_p_1_1_s_t_a_info.html</anchorfile>
      <anchor>a7c1bc19c82be3dceb0fdf00c9cc05218</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211MgmtAPBase</name>
    <filename>class_ieee80211_mgmt_a_p_base.html</filename>
    <base>Ieee80211MgmtBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_ieee80211_mgmt_a_p_base.html</anchorfile>
      <anchor>a71294ee4a1b1bad07bfec2667df7fe2c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_ieee80211_mgmt_a_p_base.html</anchorfile>
      <anchor>abdb240bc75033b0886f942f9a25f6db1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>distributeReceivedDataFrame</name>
      <anchorfile>class_ieee80211_mgmt_a_p_base.html</anchorfile>
      <anchor>ac5e268ac5672704ec9bc7f4ab2ff9ae5</anchor>
      <arglist>(Ieee80211DataFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Ieee80211DataFrame *</type>
      <name>convertFromEtherFrame</name>
      <anchorfile>class_ieee80211_mgmt_a_p_base.html</anchorfile>
      <anchor>a2d4fea33ff46be5cfaf54230cc5479ad</anchor>
      <arglist>(EtherFrame *ethframe)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual EtherFrame *</type>
      <name>convertToEtherFrame</name>
      <anchorfile>class_ieee80211_mgmt_a_p_base.html</anchorfile>
      <anchor>a64fdab1d74007e971a5e57b0eca77bee</anchor>
      <arglist>(Ieee80211DataFrame *frame)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hasRelayUnit</name>
      <anchorfile>class_ieee80211_mgmt_a_p_base.html</anchorfile>
      <anchor>a82dc79e17c0921275ee4e1440088a199</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211MgmtAPSimplified</name>
    <filename>class_ieee80211_mgmt_a_p_simplified.html</filename>
    <base>Ieee80211MgmtAPBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_ieee80211_mgmt_a_p_simplified.html</anchorfile>
      <anchor>a99b387ead5f5bf1c27159f09fe65d279</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_ieee80211_mgmt_a_p_simplified.html</anchorfile>
      <anchor>a58a6841319af12160d0baa79fc33dc30</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimer</name>
      <anchorfile>class_ieee80211_mgmt_a_p_simplified.html</anchorfile>
      <anchor>a13b1051cc0fe8c8dd078dcc31cc5be0b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMessage</name>
      <anchorfile>class_ieee80211_mgmt_a_p_simplified.html</anchorfile>
      <anchor>ac0559a158cc52feada4506f5263689ba</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleCommand</name>
      <anchorfile>class_ieee80211_mgmt_a_p_simplified.html</anchorfile>
      <anchor>a054e48c2bfdc4e5bdb393f079e73ffa4</anchor>
      <arglist>(int msgkind, cPolymorphic *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchorfile>class_ieee80211_mgmt_a_p_simplified.html</anchorfile>
      <anchor>a5da5dcd0d70f97cc058fe333132bceeb</anchor>
      <arglist>(int category, const cPolymorphic *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDataFrame</name>
      <anchorfile>class_ieee80211_mgmt_a_p_simplified.html</anchorfile>
      <anchor>a995e7ceff2192694c7999d8a07ea1a8c</anchor>
      <arglist>(Ieee80211DataFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAuthenticationFrame</name>
      <anchorfile>class_ieee80211_mgmt_a_p_simplified.html</anchorfile>
      <anchor>a3d71fae9a518069744427c56bfd49f8d</anchor>
      <arglist>(Ieee80211AuthenticationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDeauthenticationFrame</name>
      <anchorfile>class_ieee80211_mgmt_a_p_simplified.html</anchorfile>
      <anchor>a3d647d780330feeafb8f192985fda1a4</anchor>
      <arglist>(Ieee80211DeauthenticationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAssociationRequestFrame</name>
      <anchorfile>class_ieee80211_mgmt_a_p_simplified.html</anchorfile>
      <anchor>a6a08fe9b638a0972f434a8bd5dc459aa</anchor>
      <arglist>(Ieee80211AssociationRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAssociationResponseFrame</name>
      <anchorfile>class_ieee80211_mgmt_a_p_simplified.html</anchorfile>
      <anchor>afea46338f7d93aedf8957a05147f96b9</anchor>
      <arglist>(Ieee80211AssociationResponseFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReassociationRequestFrame</name>
      <anchorfile>class_ieee80211_mgmt_a_p_simplified.html</anchorfile>
      <anchor>a2e95bcfe1e9615d199e7222c7d150115</anchor>
      <arglist>(Ieee80211ReassociationRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReassociationResponseFrame</name>
      <anchorfile>class_ieee80211_mgmt_a_p_simplified.html</anchorfile>
      <anchor>a8da994cc1206e071f4031d92046c198b</anchor>
      <arglist>(Ieee80211ReassociationResponseFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDisassociationFrame</name>
      <anchorfile>class_ieee80211_mgmt_a_p_simplified.html</anchorfile>
      <anchor>a8c01f9e1dfafd78e31a6c4741b79b06d</anchor>
      <arglist>(Ieee80211DisassociationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleBeaconFrame</name>
      <anchorfile>class_ieee80211_mgmt_a_p_simplified.html</anchorfile>
      <anchor>a64c19200bb8229cb856cebf01d9df687</anchor>
      <arglist>(Ieee80211BeaconFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleProbeRequestFrame</name>
      <anchorfile>class_ieee80211_mgmt_a_p_simplified.html</anchorfile>
      <anchor>adc95d29987c7489b2f74242424474a00</anchor>
      <arglist>(Ieee80211ProbeRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleProbeResponseFrame</name>
      <anchorfile>class_ieee80211_mgmt_a_p_simplified.html</anchorfile>
      <anchor>a077266c174660b5d6d4bb285788026f3</anchor>
      <arglist>(Ieee80211ProbeResponseFrame *frame)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211MgmtBase</name>
    <filename>class_ieee80211_mgmt_base.html</filename>
    <base>PassiveQueueBase</base>
    <base>INotifiable</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>a0d931abecbdbf8847be19bb765f5eede</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>aaa9f842b2aca6ee182ad45434d0e8a45</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>a9f9a1101ddb85ce42b117bf696d32d38</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleTimer</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>aa0a6dc2a920aeb7a87a9728c6096ec57</anchor>
      <arglist>(cMessage *frame)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleUpperMessage</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>af131daff6c71a51e5599213193db691f</anchor>
      <arglist>(cPacket *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleCommand</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>ad9858d95f521360f19a54d9a1c3c213c</anchor>
      <arglist>(int msgkind, cPolymorphic *ctrl)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendOrEnqueue</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>a350a3d70798831a71a3b70fb70b89e5a</anchor>
      <arglist>(cPacket *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>enqueue</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>aba52a75686aa9138f087af1cc4697282</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>dequeue</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>a1a254de090cc2083a5047ca6562508dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendOut</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>ad1087afbc2ccbff81d65a4a17e051414</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>dropManagementFrame</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>a76188e9f12f876ff5c36eddcafb59006</anchor>
      <arglist>(Ieee80211ManagementFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>decapsulate</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>a6f56b916cca940c64600bbcb3b060acb</anchor>
      <arglist>(Ieee80211DataFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendUp</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>adf7f127ffeda830a75c75fc143f6bdf7</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processFrame</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>a25c4691da324cfcbf9d0399b9caab144</anchor>
      <arglist>(Ieee80211DataOrMgmtFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleDataFrame</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>a6e747ac8d4484be1fd290c9568593e38</anchor>
      <arglist>(Ieee80211DataFrame *frame)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleAuthenticationFrame</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>a85f9832bc7651878b63d9f1d900308ba</anchor>
      <arglist>(Ieee80211AuthenticationFrame *frame)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleDeauthenticationFrame</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>a4a7f0e22011382f68232ebce57234406</anchor>
      <arglist>(Ieee80211DeauthenticationFrame *frame)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleAssociationRequestFrame</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>acfee0b55bb50ea11d2b0155a205e5d9c</anchor>
      <arglist>(Ieee80211AssociationRequestFrame *frame)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleAssociationResponseFrame</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>adb9a432f4fb1bb58c0a4fa500de5877d</anchor>
      <arglist>(Ieee80211AssociationResponseFrame *frame)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleReassociationRequestFrame</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>a90a5043ca45acf838edf401981bdf26d</anchor>
      <arglist>(Ieee80211ReassociationRequestFrame *frame)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleReassociationResponseFrame</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>ae029f0e94b62b8aa5e731af81956d1af</anchor>
      <arglist>(Ieee80211ReassociationResponseFrame *frame)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleDisassociationFrame</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>acea75b9d1686494c9e7f70a627c68f9d</anchor>
      <arglist>(Ieee80211DisassociationFrame *frame)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleBeaconFrame</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>abb64901e1bf8decc833f8724ba10a32e</anchor>
      <arglist>(Ieee80211BeaconFrame *frame)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleProbeRequestFrame</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>aee9f646dc97d234d188aa5c78fb91116</anchor>
      <arglist>(Ieee80211ProbeRequestFrame *frame)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleProbeResponseFrame</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>acd8fdb359e500759513e07840310b670</anchor>
      <arglist>(Ieee80211ProbeResponseFrame *frame)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>frameCapacity</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>a4d4f050c7ffc230cec55351e54fce6df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>myAddress</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>a32e5af7c19851ca0aadb77473080f476</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cQueue</type>
      <name>dataQueue</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>a33d2051294b2090f316514b5927a6130</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cQueue</type>
      <name>mgmtQueue</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>aab7aca678f87f8b61f9b2e97f360a3dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numDataFramesReceived</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>a25249abb0e6b2d56d7558d224ae7387e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numMgmtFramesReceived</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>af16d59d378994f6eece9c8baffd17c3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numMgmtFramesDropped</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>a2b9d2666d5e80dbddf4df5047cda7b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>dataQueueLenVec</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>a0d162adf0b177f5ec9971873609f4a01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>dataQueueDropVec</name>
      <anchorfile>class_ieee80211_mgmt_base.html</anchorfile>
      <anchor>a4904fd97037c8a98b252156fa8dca576</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211MgmtSTA</name>
    <filename>class_ieee80211_mgmt_s_t_a.html</filename>
    <base>Ieee80211MgmtBase</base>
    <class kind="struct">Ieee80211MgmtSTA::APInfo</class>
    <class kind="struct">Ieee80211MgmtSTA::AssociatedAPInfo</class>
    <class kind="struct">Ieee80211MgmtSTA::ScanningInfo</class>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; APInfo &gt;</type>
      <name>AccessPointList</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>af5d2c97360eab4b2f0b323d018b9c1c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>ac3c258c62778e687ecd5e2bdc66d3ef4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a27356f93e2e47c3942dca0e194585a3b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimer</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a972c6d8d646dbca1b25fe59f64ad7798</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMessage</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a358f6038a2149e27d6242bdecb170bb9</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleCommand</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a04516f3ec5cd9c3194fee6a23f8f09df</anchor>
      <arglist>(int msgkind, cPolymorphic *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Ieee80211DataFrame *</type>
      <name>encapsulate</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>ad06b5ea75b6b2979892c8330f1e81b40</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>startAuthentication</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a3ac1715440376cea9407f6e80f635d38</anchor>
      <arglist>(APInfo *ap, simtime_t timeout)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>startAssociation</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a77af91a88bb67e0f9050cbf2e30344e5</anchor>
      <arglist>(APInfo *ap, simtime_t timeout)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual APInfo *</type>
      <name>lookupAP</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>afd2d6d8ad58a5a1d141049c87ddcc44b</anchor>
      <arglist>(const MACAddress &amp;address)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>clearAPList</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a6002b905681d1bd995a814e18079469d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>changeChannel</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>ad9e7e6d893756f30c8e685ceaa635f61</anchor>
      <arglist>(int channelNum)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>storeAPInfo</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a0ce7ae410431f396b3785abce16ae820</anchor>
      <arglist>(const MACAddress &amp;address, const Ieee80211BeaconFrameBody &amp;body)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>scanNextChannel</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a9641efc09b1d17efb39d4b6721aa31a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendProbeRequest</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a20594c5b681fbe550274912fbb02435e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beaconLost</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>ab42c157fb6f67239699b61c882432bcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendScanConfirm</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a513599ba03a5feccbdfc49660ee7c6bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendAuthenticationConfirm</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a83790c75ba51c37151a665a7668e34d3</anchor>
      <arglist>(APInfo *ap, int resultCode)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendAssociationConfirm</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a0d40c7137f59c0327c73dd2c44d380e4</anchor>
      <arglist>(APInfo *ap, int resultCode)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>disassociate</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a2f338daeb6539367af6f8dac016fbdf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendConfirm</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a81d6936dcc3f8008f171813efbfe5a07</anchor>
      <arglist>(Ieee80211PrimConfirm *confirm, int resultCode)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendManagementFrame</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>aaaba23c69e1b993ccc605e924a333d54</anchor>
      <arglist>(Ieee80211ManagementFrame *frame, const MACAddress &amp;address)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a3f7cb6b80961a684695c71e7c2ea23b6</anchor>
      <arglist>(int category, const cPolymorphic *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>statusCodeToPrimResultCode</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a71b45c56c261768a5d6579b01afecba4</anchor>
      <arglist>(int statusCode)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDataFrame</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a45ff39b56707c902f892b9cc8f85544e</anchor>
      <arglist>(Ieee80211DataFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAuthenticationFrame</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a174fdad8846354f0d03df2dbac1b4f58</anchor>
      <arglist>(Ieee80211AuthenticationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDeauthenticationFrame</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>ad8d5e0d8deaa941fcae92a7ac4ae8cff</anchor>
      <arglist>(Ieee80211DeauthenticationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAssociationRequestFrame</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>af4616df9df5bcc7d9b5e2daca9e5541f</anchor>
      <arglist>(Ieee80211AssociationRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAssociationResponseFrame</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a7dcc8e8c8add5e78d6239efb9dd7187f</anchor>
      <arglist>(Ieee80211AssociationResponseFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReassociationRequestFrame</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a520b0f373ae546a71eeb0e8ea11f4c1a</anchor>
      <arglist>(Ieee80211ReassociationRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReassociationResponseFrame</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a849900f555b5c2969577f3cf66636c46</anchor>
      <arglist>(Ieee80211ReassociationResponseFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDisassociationFrame</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a0597180cb17afb11dc0b76019e502d55</anchor>
      <arglist>(Ieee80211DisassociationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleBeaconFrame</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a22a60d07f7bae06a56150d814b8c4838</anchor>
      <arglist>(Ieee80211BeaconFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleProbeRequestFrame</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a1817df324434b1209dde010807436866</anchor>
      <arglist>(Ieee80211ProbeRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleProbeResponseFrame</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>ae1341369ebe48013198831f21846f3f7</anchor>
      <arglist>(Ieee80211ProbeResponseFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processScanCommand</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>ac75a674a65db035f5733423704966cac</anchor>
      <arglist>(Ieee80211Prim_ScanRequest *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processAuthenticateCommand</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a57796ab58d3042b914c269bd7a8c18c3</anchor>
      <arglist>(Ieee80211Prim_AuthenticateRequest *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processDeauthenticateCommand</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>aaeef4b9cecb163eeaf48c128a5e82361</anchor>
      <arglist>(Ieee80211Prim_DeauthenticateRequest *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processAssociateCommand</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>aa0ef2679c924983fe60feccb2cfab206</anchor>
      <arglist>(Ieee80211Prim_AssociateRequest *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processReassociateCommand</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a8f89cf5f8755aa90b46cf7a28c3bb4a6</anchor>
      <arglist>(Ieee80211Prim_ReassociateRequest *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processDisassociateCommand</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a15abddbedd188eef29d9855aa853175e</anchor>
      <arglist>(Ieee80211Prim_DisassociateRequest *ctrl)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NotificationBoard *</type>
      <name>nb</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a7dc1a28336264960b512061c31089933</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numChannels</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>af0606e519eff7c955775e9d00067040d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isScanning</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a946af1651690617d73e465d706e91af5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ScanningInfo</type>
      <name>scanning</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a4881cfb572a77d4e656a664d3e3eb8e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AccessPointList</type>
      <name>apList</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>ae4b473c44bb8a61ce1599e2687e8d639</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isAssociated</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a7e6e6a2f637b6770b38807a42334640e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>assocTimeoutMsg</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>ab89985b8cd0c3c38a342b14b82e5d0d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AssociatedAPInfo</type>
      <name>assocAP</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a.html</anchorfile>
      <anchor>a3622df7933a2f10ada574da5d7d6a1fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ieee80211MgmtSTA::APInfo</name>
    <filename>struct_ieee80211_mgmt_s_t_a_1_1_a_p_info.html</filename>
    <member kind="function">
      <type></type>
      <name>APInfo</name>
      <anchorfile>struct_ieee80211_mgmt_s_t_a_1_1_a_p_info.html</anchorfile>
      <anchor>a0b1567b59bed43153f0e92f672b4a859</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>channel</name>
      <anchorfile>struct_ieee80211_mgmt_s_t_a_1_1_a_p_info.html</anchorfile>
      <anchor>aa007dc4e8b13d061c4d91003cd3ad217</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MACAddress</type>
      <name>address</name>
      <anchorfile>struct_ieee80211_mgmt_s_t_a_1_1_a_p_info.html</anchorfile>
      <anchor>a7dc3ab94aac59311e5795b0cdd818b65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ssid</name>
      <anchorfile>struct_ieee80211_mgmt_s_t_a_1_1_a_p_info.html</anchorfile>
      <anchor>a2f45f90088d9c8a221b73ae77e6450a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Ieee80211SupportedRatesElement</type>
      <name>supportedRates</name>
      <anchorfile>struct_ieee80211_mgmt_s_t_a_1_1_a_p_info.html</anchorfile>
      <anchor>af35105c4ae8803561c97c81fb5b761c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>beaconInterval</name>
      <anchorfile>struct_ieee80211_mgmt_s_t_a_1_1_a_p_info.html</anchorfile>
      <anchor>a5b31929dbfb75ee3d2839821a9530418</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>rxPower</name>
      <anchorfile>struct_ieee80211_mgmt_s_t_a_1_1_a_p_info.html</anchorfile>
      <anchor>a3971f41d5b67008b6341ac8f72a80e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isAuthenticated</name>
      <anchorfile>struct_ieee80211_mgmt_s_t_a_1_1_a_p_info.html</anchorfile>
      <anchor>a62ea7d32fa65d9132ac852e98dd0af28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>authSeqExpected</name>
      <anchorfile>struct_ieee80211_mgmt_s_t_a_1_1_a_p_info.html</anchorfile>
      <anchor>ab17a4b87be321422c88f20558f154ae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>authTimeoutMsg</name>
      <anchorfile>struct_ieee80211_mgmt_s_t_a_1_1_a_p_info.html</anchorfile>
      <anchor>a7af29f11e283bb2572d6f3f0f992b037</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ieee80211MgmtSTA::AssociatedAPInfo</name>
    <filename>struct_ieee80211_mgmt_s_t_a_1_1_associated_a_p_info.html</filename>
    <base>Ieee80211MgmtSTA::APInfo</base>
    <member kind="function">
      <type></type>
      <name>AssociatedAPInfo</name>
      <anchorfile>struct_ieee80211_mgmt_s_t_a_1_1_associated_a_p_info.html</anchorfile>
      <anchor>ade5f92d07548c70f0ef718620fbbc9db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>receiveSequence</name>
      <anchorfile>struct_ieee80211_mgmt_s_t_a_1_1_associated_a_p_info.html</anchorfile>
      <anchor>abece241f69da6dcfbfed37cdf8d33e8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>beaconTimeoutMsg</name>
      <anchorfile>struct_ieee80211_mgmt_s_t_a_1_1_associated_a_p_info.html</anchorfile>
      <anchor>a9514f0220ee9d2d8faa3145cc4d6426a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ieee80211MgmtSTA::ScanningInfo</name>
    <filename>struct_ieee80211_mgmt_s_t_a_1_1_scanning_info.html</filename>
    <member kind="variable">
      <type>MACAddress</type>
      <name>bssid</name>
      <anchorfile>struct_ieee80211_mgmt_s_t_a_1_1_scanning_info.html</anchorfile>
      <anchor>a3328a2692753c064b4dbfbaf89fcee9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ssid</name>
      <anchorfile>struct_ieee80211_mgmt_s_t_a_1_1_scanning_info.html</anchorfile>
      <anchor>a7f1270f0d244f0d07159611a1b773c49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>activeScan</name>
      <anchorfile>struct_ieee80211_mgmt_s_t_a_1_1_scanning_info.html</anchorfile>
      <anchor>a4e0f1f4e02ffb10dcb6ece755fbd3d5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>probeDelay</name>
      <anchorfile>struct_ieee80211_mgmt_s_t_a_1_1_scanning_info.html</anchorfile>
      <anchor>a698bc5eb8ae1cc7b40087216b58eac34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>channelList</name>
      <anchorfile>struct_ieee80211_mgmt_s_t_a_1_1_scanning_info.html</anchorfile>
      <anchor>aa411b4ea8a1f1fc8f3299b097996aff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>currentChannelIndex</name>
      <anchorfile>struct_ieee80211_mgmt_s_t_a_1_1_scanning_info.html</anchorfile>
      <anchor>a1a6830381916790a3a227fe8e51733a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>busyChannelDetected</name>
      <anchorfile>struct_ieee80211_mgmt_s_t_a_1_1_scanning_info.html</anchorfile>
      <anchor>a03348fcbde34d220c6f8998de3bd2c39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>minChannelTime</name>
      <anchorfile>struct_ieee80211_mgmt_s_t_a_1_1_scanning_info.html</anchorfile>
      <anchor>ab4422763f4fd54e73109ccf3d742e21e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>maxChannelTime</name>
      <anchorfile>struct_ieee80211_mgmt_s_t_a_1_1_scanning_info.html</anchorfile>
      <anchor>a278ffd2d3292672e704302c65e5244aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211MgmtSTASimplified</name>
    <filename>class_ieee80211_mgmt_s_t_a_simplified.html</filename>
    <base>Ieee80211MgmtBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a_simplified.html</anchorfile>
      <anchor>a4debd8939e907e19c65a26d43f57fc14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a_simplified.html</anchorfile>
      <anchor>a3c944f518d2ec3b40f679b247eb7dda8</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimer</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a_simplified.html</anchorfile>
      <anchor>aa72b95fab51b375e20a9876973d91b3c</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMessage</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a_simplified.html</anchorfile>
      <anchor>a82cd85e5cbdf31b08ff43170430e82d5</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleCommand</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a_simplified.html</anchorfile>
      <anchor>adedc505d63d3830ff3019763d4cd3233</anchor>
      <arglist>(int msgkind, cPolymorphic *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Ieee80211DataFrame *</type>
      <name>encapsulate</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a_simplified.html</anchorfile>
      <anchor>ac8f5807953a6a322ecbfc4cb8da6183c</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a_simplified.html</anchorfile>
      <anchor>a0770681b532dd6d8d52530b5f0bbdb6f</anchor>
      <arglist>(int category, const cPolymorphic *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDataFrame</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a_simplified.html</anchorfile>
      <anchor>aa77c95ce6f3c56eddb17d6615dcb50e9</anchor>
      <arglist>(Ieee80211DataFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAuthenticationFrame</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a_simplified.html</anchorfile>
      <anchor>a7273d17f13b2f8542623f51ec4aa496d</anchor>
      <arglist>(Ieee80211AuthenticationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDeauthenticationFrame</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a_simplified.html</anchorfile>
      <anchor>afe04537f0237d8036ea2140239582d65</anchor>
      <arglist>(Ieee80211DeauthenticationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAssociationRequestFrame</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a_simplified.html</anchorfile>
      <anchor>a8617677b91ff3bdfdf39bd0780102d36</anchor>
      <arglist>(Ieee80211AssociationRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAssociationResponseFrame</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a_simplified.html</anchorfile>
      <anchor>a70f09c7275315a2d1121c57c3547d9c3</anchor>
      <arglist>(Ieee80211AssociationResponseFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReassociationRequestFrame</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a_simplified.html</anchorfile>
      <anchor>a8104ab7e23a8627519f75906ecbec284</anchor>
      <arglist>(Ieee80211ReassociationRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReassociationResponseFrame</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a_simplified.html</anchorfile>
      <anchor>abea4eb40fa05c9e1f95f506d2a4bff69</anchor>
      <arglist>(Ieee80211ReassociationResponseFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDisassociationFrame</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a_simplified.html</anchorfile>
      <anchor>a531ba6bc2f02c4441958478ce60363fe</anchor>
      <arglist>(Ieee80211DisassociationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleBeaconFrame</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a_simplified.html</anchorfile>
      <anchor>af1296ff7987cb0565a000c18a34efef3</anchor>
      <arglist>(Ieee80211BeaconFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleProbeRequestFrame</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a_simplified.html</anchorfile>
      <anchor>a99210126d48613186c58d93b234cd53b</anchor>
      <arglist>(Ieee80211ProbeRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleProbeResponseFrame</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a_simplified.html</anchorfile>
      <anchor>a41c27e5d5322c81cdeb2ec01d2946361</anchor>
      <arglist>(Ieee80211ProbeResponseFrame *frame)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>accessPointAddress</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a_simplified.html</anchorfile>
      <anchor>a6041ff29b4c4d9e0e68e44ecde85382d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>receiveSequence</name>
      <anchorfile>class_ieee80211_mgmt_s_t_a_simplified.html</anchorfile>
      <anchor>a8d7d9a5d1a0f35da41210bf694494b8f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211OneAddressFrame</name>
    <filename>class_ieee80211_one_address_frame.html</filename>
    <base>Ieee80211Frame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211OneAddressFrame</name>
      <anchorfile>class_ieee80211_one_address_frame.html</anchorfile>
      <anchor>a695b0bc9f4052b5d90fb4423693ce472</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211OneAddressFrame</name>
      <anchorfile>class_ieee80211_one_address_frame.html</anchorfile>
      <anchor>a9e1605c49037f7227062f9ee7f164090</anchor>
      <arglist>(const Ieee80211OneAddressFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211OneAddressFrame</name>
      <anchorfile>class_ieee80211_one_address_frame.html</anchorfile>
      <anchor>a30d0b56cf71a9cdef62df4d065b8c711</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211OneAddressFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_one_address_frame.html</anchorfile>
      <anchor>ac6a315f1af7f1030ef577d5702473e77</anchor>
      <arglist>(const Ieee80211OneAddressFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211OneAddressFrame *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_one_address_frame.html</anchorfile>
      <anchor>a1de8804e63a2eab9c50fb9026471a04a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_one_address_frame.html</anchorfile>
      <anchor>a6730ee1e4348b25fdf9e1c0b3fca6df0</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_one_address_frame.html</anchorfile>
      <anchor>a371f657be3232035731f7017544ad3af</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_one_address_frame.html</anchorfile>
      <anchor>a1b0aed81b0901364e69527c7718bdf87</anchor>
      <arglist>(const Ieee80211OneAddressFrame &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211Prim_AssociateConfirm</name>
    <filename>class_ieee80211_prim___associate_confirm.html</filename>
    <base>Ieee80211PrimConfirm</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_AssociateConfirm</name>
      <anchorfile>class_ieee80211_prim___associate_confirm.html</anchorfile>
      <anchor>ac0275105d7797e794bb551de561736b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_AssociateConfirm</name>
      <anchorfile>class_ieee80211_prim___associate_confirm.html</anchorfile>
      <anchor>ae949a4440f3e9bf0f3652a95c751645d</anchor>
      <arglist>(const Ieee80211Prim_AssociateConfirm &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211Prim_AssociateConfirm</name>
      <anchorfile>class_ieee80211_prim___associate_confirm.html</anchorfile>
      <anchor>a76c68ed66c449d4fb9804864bd7d8c20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211Prim_AssociateConfirm &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_prim___associate_confirm.html</anchorfile>
      <anchor>abe0767d39e2c0611b6713ce65a203eed</anchor>
      <arglist>(const Ieee80211Prim_AssociateConfirm &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211Prim_AssociateConfirm *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_prim___associate_confirm.html</anchorfile>
      <anchor>a6fab4ce17657fa83d75b9d6efd71d436</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_prim___associate_confirm.html</anchorfile>
      <anchor>a43394d58918bd5e4ba5be191e1f19fa5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_prim___associate_confirm.html</anchorfile>
      <anchor>a35db41d72081fef47492f7e89a320ac4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_prim___associate_confirm.html</anchorfile>
      <anchor>a0e1b8e17ba17af520a6d1b622c146006</anchor>
      <arglist>(const Ieee80211Prim_AssociateConfirm &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211Prim_AssociateRequest</name>
    <filename>class_ieee80211_prim___associate_request.html</filename>
    <base>Ieee80211PrimRequest</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_AssociateRequest</name>
      <anchorfile>class_ieee80211_prim___associate_request.html</anchorfile>
      <anchor>afb9e28c39c6110af056d9d7904174bc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_AssociateRequest</name>
      <anchorfile>class_ieee80211_prim___associate_request.html</anchorfile>
      <anchor>a2a44ccb5160fdcccee26b51e36bda82b</anchor>
      <arglist>(const Ieee80211Prim_AssociateRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211Prim_AssociateRequest</name>
      <anchorfile>class_ieee80211_prim___associate_request.html</anchorfile>
      <anchor>aaa8856cdf6860a627fb93cc55ee10708</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211Prim_AssociateRequest &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_prim___associate_request.html</anchorfile>
      <anchor>a9f0640c5191c35675e23de93fd637f40</anchor>
      <arglist>(const Ieee80211Prim_AssociateRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211Prim_AssociateRequest *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_prim___associate_request.html</anchorfile>
      <anchor>ab40e6e193e659be5864d38f0c22e33d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_prim___associate_request.html</anchorfile>
      <anchor>aa5a19fc6724afdafee0f7404312ef486</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_prim___associate_request.html</anchorfile>
      <anchor>a788e0916eb5aa1615eeda926a0759590</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getAddress</name>
      <anchorfile>class_ieee80211_prim___associate_request.html</anchorfile>
      <anchor>a35c80a16b5a044684255b7f6ccae63a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getAddress</name>
      <anchorfile>class_ieee80211_prim___associate_request.html</anchorfile>
      <anchor>aa0eba0c2bbdb44a81119a65ec05f257b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress</name>
      <anchorfile>class_ieee80211_prim___associate_request.html</anchorfile>
      <anchor>a56108e7c64c5d2b29edc1cd83d5e6a58</anchor>
      <arglist>(const MACAddress &amp;address_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getTimeout</name>
      <anchorfile>class_ieee80211_prim___associate_request.html</anchorfile>
      <anchor>a6bf1922ac4dd0451bc00f6ccd03b6cda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeout</name>
      <anchorfile>class_ieee80211_prim___associate_request.html</anchorfile>
      <anchor>a14b62ddb4bc3b302a1111040fd5f2f3c</anchor>
      <arglist>(simtime_t timeout_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_prim___associate_request.html</anchorfile>
      <anchor>aa085de4704d96b51e05edd3f58497979</anchor>
      <arglist>(const Ieee80211Prim_AssociateRequest &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::MACAddress</type>
      <name>address_var</name>
      <anchorfile>class_ieee80211_prim___associate_request.html</anchorfile>
      <anchor>adf899db4d2c692160b8324b2fc1ecdea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>timeout_var</name>
      <anchorfile>class_ieee80211_prim___associate_request.html</anchorfile>
      <anchor>a795c48039f8b665d6a5590488f94a102</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211Prim_AuthenticateConfirm</name>
    <filename>class_ieee80211_prim___authenticate_confirm.html</filename>
    <base>Ieee80211PrimConfirm</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_AuthenticateConfirm</name>
      <anchorfile>class_ieee80211_prim___authenticate_confirm.html</anchorfile>
      <anchor>a5dfa3ddbc5f4dd99507c40edfa143b19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_AuthenticateConfirm</name>
      <anchorfile>class_ieee80211_prim___authenticate_confirm.html</anchorfile>
      <anchor>a41d0e0ea13b22b05db044ca49f6a701f</anchor>
      <arglist>(const Ieee80211Prim_AuthenticateConfirm &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211Prim_AuthenticateConfirm</name>
      <anchorfile>class_ieee80211_prim___authenticate_confirm.html</anchorfile>
      <anchor>a552a6243ee89dda740804c191a9a7c94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211Prim_AuthenticateConfirm &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_prim___authenticate_confirm.html</anchorfile>
      <anchor>a07fa1e359917fbe23d421d94b79eb95d</anchor>
      <arglist>(const Ieee80211Prim_AuthenticateConfirm &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211Prim_AuthenticateConfirm *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_prim___authenticate_confirm.html</anchorfile>
      <anchor>a0ab23dbe9be2753b489843ff091cf820</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_prim___authenticate_confirm.html</anchorfile>
      <anchor>a4f7f31174780a2148e6541096dfd75bd</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_prim___authenticate_confirm.html</anchorfile>
      <anchor>acb1aaf299f2b028623c1a67a2df0ed2f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getAddress</name>
      <anchorfile>class_ieee80211_prim___authenticate_confirm.html</anchorfile>
      <anchor>a37aadaee19319e078de7252ad9688b9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getAddress</name>
      <anchorfile>class_ieee80211_prim___authenticate_confirm.html</anchorfile>
      <anchor>ac0c460a6b99b9ea2946b4e75646b2607</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress</name>
      <anchorfile>class_ieee80211_prim___authenticate_confirm.html</anchorfile>
      <anchor>a6644c8406e69e26403705163caa9e87e</anchor>
      <arglist>(const MACAddress &amp;address_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_prim___authenticate_confirm.html</anchorfile>
      <anchor>ad915046c20039ee2174c6352568343df</anchor>
      <arglist>(const Ieee80211Prim_AuthenticateConfirm &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::MACAddress</type>
      <name>address_var</name>
      <anchorfile>class_ieee80211_prim___authenticate_confirm.html</anchorfile>
      <anchor>aaf77be7cea0e434b1afa32e855dd3c5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211Prim_AuthenticateRequest</name>
    <filename>class_ieee80211_prim___authenticate_request.html</filename>
    <base>Ieee80211PrimRequest</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_AuthenticateRequest</name>
      <anchorfile>class_ieee80211_prim___authenticate_request.html</anchorfile>
      <anchor>aa5d97c482ac8fd42f51aaf7ac97bfd58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_AuthenticateRequest</name>
      <anchorfile>class_ieee80211_prim___authenticate_request.html</anchorfile>
      <anchor>a2c3bf246d520fe0c7aff7efad19b1a97</anchor>
      <arglist>(const Ieee80211Prim_AuthenticateRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211Prim_AuthenticateRequest</name>
      <anchorfile>class_ieee80211_prim___authenticate_request.html</anchorfile>
      <anchor>aee918abbb851dbdd6240fadbe4cfcfb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211Prim_AuthenticateRequest &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_prim___authenticate_request.html</anchorfile>
      <anchor>ab05e2135713154c34333bbb5fc10a9ee</anchor>
      <arglist>(const Ieee80211Prim_AuthenticateRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211Prim_AuthenticateRequest *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_prim___authenticate_request.html</anchorfile>
      <anchor>ad1e6ad38bff330a0e0316378026e5ca2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_prim___authenticate_request.html</anchorfile>
      <anchor>a84e4ef2dad4fcfdeda4d003e47f113c2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_prim___authenticate_request.html</anchorfile>
      <anchor>a7db3f3d3f73e59c8a3bccd2b387d8244</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getAddress</name>
      <anchorfile>class_ieee80211_prim___authenticate_request.html</anchorfile>
      <anchor>a7b9c520b749193fb1efa15848d8c583b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getAddress</name>
      <anchorfile>class_ieee80211_prim___authenticate_request.html</anchorfile>
      <anchor>ad4a80661eb50d7e73c4cfe799aeac0de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress</name>
      <anchorfile>class_ieee80211_prim___authenticate_request.html</anchorfile>
      <anchor>a5b9cb7b7381fe700fddbf7a9822de50b</anchor>
      <arglist>(const MACAddress &amp;address_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getTimeout</name>
      <anchorfile>class_ieee80211_prim___authenticate_request.html</anchorfile>
      <anchor>a0b4ee4244838b9faacbe599a9ba6af86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeout</name>
      <anchorfile>class_ieee80211_prim___authenticate_request.html</anchorfile>
      <anchor>a4dd5c74704d7f4a67eb5a9f6d0791d35</anchor>
      <arglist>(simtime_t timeout_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_prim___authenticate_request.html</anchorfile>
      <anchor>af91135f61687d9e8e3d52758678d313a</anchor>
      <arglist>(const Ieee80211Prim_AuthenticateRequest &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::MACAddress</type>
      <name>address_var</name>
      <anchorfile>class_ieee80211_prim___authenticate_request.html</anchorfile>
      <anchor>acb55acceed5ece7c511ac3c7a5a35467</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>timeout_var</name>
      <anchorfile>class_ieee80211_prim___authenticate_request.html</anchorfile>
      <anchor>a0ce85f5441b6efcf923d20e3ad27df52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211Prim_BSSDescription</name>
    <filename>class_ieee80211_prim___b_s_s_description.html</filename>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_BSSDescription</name>
      <anchorfile>class_ieee80211_prim___b_s_s_description.html</anchorfile>
      <anchor>a7e828e231b5768cbdf53af9901f04920</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_BSSDescription</name>
      <anchorfile>class_ieee80211_prim___b_s_s_description.html</anchorfile>
      <anchor>a8c9ce0fce1a3d5bcec9a6f87f32463ef</anchor>
      <arglist>(const Ieee80211Prim_BSSDescription &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211Prim_BSSDescription</name>
      <anchorfile>class_ieee80211_prim___b_s_s_description.html</anchorfile>
      <anchor>ac52ff9f1edef68ae44c690e1766934ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211Prim_BSSDescription &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_prim___b_s_s_description.html</anchorfile>
      <anchor>a087e16a7a2ac3369fbcd50ca17df34b8</anchor>
      <arglist>(const Ieee80211Prim_BSSDescription &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211Prim_BSSDescription *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_prim___b_s_s_description.html</anchorfile>
      <anchor>abcb270f96e6ae358168568e622599ff1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_prim___b_s_s_description.html</anchorfile>
      <anchor>a9c002d29cd7f65513ef6d1f732c5af96</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_prim___b_s_s_description.html</anchorfile>
      <anchor>aae56a399df5593ab2fdf9ccbb367dec2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getChannelNumber</name>
      <anchorfile>class_ieee80211_prim___b_s_s_description.html</anchorfile>
      <anchor>aa3691878ba6fff9a74169b36855cbfdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChannelNumber</name>
      <anchorfile>class_ieee80211_prim___b_s_s_description.html</anchorfile>
      <anchor>ad5fb26f27cb85448bdf5a89bf09588df</anchor>
      <arglist>(int channelNumber_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getBSSID</name>
      <anchorfile>class_ieee80211_prim___b_s_s_description.html</anchorfile>
      <anchor>ae4951ce458ffe712152fcb6aff4f05dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getBSSID</name>
      <anchorfile>class_ieee80211_prim___b_s_s_description.html</anchorfile>
      <anchor>a43939426472b100e42e0de1c9fe6d660</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBSSID</name>
      <anchorfile>class_ieee80211_prim___b_s_s_description.html</anchorfile>
      <anchor>a3f7af223e2e7c3681acc7faef5677a91</anchor>
      <arglist>(const MACAddress &amp;BSSID_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getSSID</name>
      <anchorfile>class_ieee80211_prim___b_s_s_description.html</anchorfile>
      <anchor>a22b606130c142de6982b4a283207ba02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSSID</name>
      <anchorfile>class_ieee80211_prim___b_s_s_description.html</anchorfile>
      <anchor>aae036cb176207fc69085e96ef02f3cc9</anchor>
      <arglist>(const char *SSID_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211SupportedRatesElement &amp;</type>
      <name>getSupportedRates</name>
      <anchorfile>class_ieee80211_prim___b_s_s_description.html</anchorfile>
      <anchor>a7a25b4c3f4d29675dfb230b41b766548</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211SupportedRatesElement &amp;</type>
      <name>getSupportedRates</name>
      <anchorfile>class_ieee80211_prim___b_s_s_description.html</anchorfile>
      <anchor>a2e391d6f0b19d845c9b983a7d27f649b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSupportedRates</name>
      <anchorfile>class_ieee80211_prim___b_s_s_description.html</anchorfile>
      <anchor>a400d6c5a3c78d883e467cf3f59458641</anchor>
      <arglist>(const Ieee80211SupportedRatesElement &amp;supportedRates_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getBeaconInterval</name>
      <anchorfile>class_ieee80211_prim___b_s_s_description.html</anchorfile>
      <anchor>a0673756e96cd6a0452f3dd454c272f23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBeaconInterval</name>
      <anchorfile>class_ieee80211_prim___b_s_s_description.html</anchorfile>
      <anchor>a90aa3751066930f5477d8419d62db0f6</anchor>
      <arglist>(simtime_t beaconInterval_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getRxPower</name>
      <anchorfile>class_ieee80211_prim___b_s_s_description.html</anchorfile>
      <anchor>ad6888379a3b1e345828d66b6142dd7f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRxPower</name>
      <anchorfile>class_ieee80211_prim___b_s_s_description.html</anchorfile>
      <anchor>a4fc4a89836486e282e8b4e85311a9224</anchor>
      <arglist>(double rxPower_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_prim___b_s_s_description.html</anchorfile>
      <anchor>ad40a1b3c437be8a317db50a34bd2808e</anchor>
      <arglist>(const Ieee80211Prim_BSSDescription &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>channelNumber_var</name>
      <anchorfile>class_ieee80211_prim___b_s_s_description.html</anchorfile>
      <anchor>a86f1cedcaf1e0f5ea5a9225c966b2dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::MACAddress</type>
      <name>BSSID_var</name>
      <anchorfile>class_ieee80211_prim___b_s_s_description.html</anchorfile>
      <anchor>a4091fca16c034a186bd6b69fa0dc7ff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>SSID_var</name>
      <anchorfile>class_ieee80211_prim___b_s_s_description.html</anchorfile>
      <anchor>aa3e76c3db1e97f4cd12706cd6ae1cd42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::Ieee80211SupportedRatesElement</type>
      <name>supportedRates_var</name>
      <anchorfile>class_ieee80211_prim___b_s_s_description.html</anchorfile>
      <anchor>aede804545f5fb00f0b4d0fa19219d189</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>beaconInterval_var</name>
      <anchorfile>class_ieee80211_prim___b_s_s_description.html</anchorfile>
      <anchor>a98d5e984ee6ba1dea479ad3a826b6a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rxPower_var</name>
      <anchorfile>class_ieee80211_prim___b_s_s_description.html</anchorfile>
      <anchor>a5fca9ac03f6602c517f56ac432dc4e10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211Prim_DeauthenticateRequest</name>
    <filename>class_ieee80211_prim___deauthenticate_request.html</filename>
    <base>Ieee80211PrimRequest</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_DeauthenticateRequest</name>
      <anchorfile>class_ieee80211_prim___deauthenticate_request.html</anchorfile>
      <anchor>a11ffd3152844e1c3e4d9cb19c791071c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_DeauthenticateRequest</name>
      <anchorfile>class_ieee80211_prim___deauthenticate_request.html</anchorfile>
      <anchor>a3825d348a76cae0c1e5c36ba3f3ee2f9</anchor>
      <arglist>(const Ieee80211Prim_DeauthenticateRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211Prim_DeauthenticateRequest</name>
      <anchorfile>class_ieee80211_prim___deauthenticate_request.html</anchorfile>
      <anchor>ab3dc9357515919a8b49c69dd5f70e7a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211Prim_DeauthenticateRequest &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_prim___deauthenticate_request.html</anchorfile>
      <anchor>a7e85f4758ce7886a65899d8e9bc619eb</anchor>
      <arglist>(const Ieee80211Prim_DeauthenticateRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211Prim_DeauthenticateRequest *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_prim___deauthenticate_request.html</anchorfile>
      <anchor>a682c3a24140c78cc59bda720c0709893</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_prim___deauthenticate_request.html</anchorfile>
      <anchor>a73bbeef8f681e2f96dad132f237787d5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_prim___deauthenticate_request.html</anchorfile>
      <anchor>ae4e49be55eb71c6d0ef58dba3cc82d29</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getAddress</name>
      <anchorfile>class_ieee80211_prim___deauthenticate_request.html</anchorfile>
      <anchor>a629f697c84922cfaa70bdef9ccca455c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getAddress</name>
      <anchorfile>class_ieee80211_prim___deauthenticate_request.html</anchorfile>
      <anchor>ac54bf58d2c1c3f30036d6c2bab0840f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress</name>
      <anchorfile>class_ieee80211_prim___deauthenticate_request.html</anchorfile>
      <anchor>afccf407e8698b1a351e236c8ece11c99</anchor>
      <arglist>(const MACAddress &amp;address_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getReasonCode</name>
      <anchorfile>class_ieee80211_prim___deauthenticate_request.html</anchorfile>
      <anchor>af21af01c62ac8e8e13fc1ed5ec077be4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReasonCode</name>
      <anchorfile>class_ieee80211_prim___deauthenticate_request.html</anchorfile>
      <anchor>a7211029119b273f6e1a5ab1803299e6b</anchor>
      <arglist>(int reasonCode_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_prim___deauthenticate_request.html</anchorfile>
      <anchor>ac3a0bdfeaa069c15770fea273dc74db5</anchor>
      <arglist>(const Ieee80211Prim_DeauthenticateRequest &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::MACAddress</type>
      <name>address_var</name>
      <anchorfile>class_ieee80211_prim___deauthenticate_request.html</anchorfile>
      <anchor>aaac826532e392a3ac0918385c9005389</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>reasonCode_var</name>
      <anchorfile>class_ieee80211_prim___deauthenticate_request.html</anchorfile>
      <anchor>a75511a4e5e5b96056fba01a9a348d86b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211Prim_DisassociateRequest</name>
    <filename>class_ieee80211_prim___disassociate_request.html</filename>
    <base>Ieee80211PrimRequest</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_DisassociateRequest</name>
      <anchorfile>class_ieee80211_prim___disassociate_request.html</anchorfile>
      <anchor>a076e55f3a69bc973fa4c462c0226d685</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_DisassociateRequest</name>
      <anchorfile>class_ieee80211_prim___disassociate_request.html</anchorfile>
      <anchor>ab49a5d456a78ba7a2147b7f7e1c87ed9</anchor>
      <arglist>(const Ieee80211Prim_DisassociateRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211Prim_DisassociateRequest</name>
      <anchorfile>class_ieee80211_prim___disassociate_request.html</anchorfile>
      <anchor>a64ffdcd9482d34a816c5c70ebec9fb1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211Prim_DisassociateRequest &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_prim___disassociate_request.html</anchorfile>
      <anchor>acfd47af0328938c87afe245438de748f</anchor>
      <arglist>(const Ieee80211Prim_DisassociateRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211Prim_DisassociateRequest *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_prim___disassociate_request.html</anchorfile>
      <anchor>abf20baac9a842203b3e5145a81a16680</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_prim___disassociate_request.html</anchorfile>
      <anchor>ac5e96fa89f17477a6ed4c473c8ac2a03</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_prim___disassociate_request.html</anchorfile>
      <anchor>a203acce54ae7a6170c75c80460e1fbbb</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getAddress</name>
      <anchorfile>class_ieee80211_prim___disassociate_request.html</anchorfile>
      <anchor>a8239da5e6ff7b1843482358fa6f78ede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getAddress</name>
      <anchorfile>class_ieee80211_prim___disassociate_request.html</anchorfile>
      <anchor>afdf211bd7ee97aa0ae7981e811e410e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress</name>
      <anchorfile>class_ieee80211_prim___disassociate_request.html</anchorfile>
      <anchor>a40ec65683c68e2b288a7fcdc69cf1453</anchor>
      <arglist>(const MACAddress &amp;address_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getReasonCode</name>
      <anchorfile>class_ieee80211_prim___disassociate_request.html</anchorfile>
      <anchor>a3f1a15fd54bdcb97b46eb056f77ab577</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReasonCode</name>
      <anchorfile>class_ieee80211_prim___disassociate_request.html</anchorfile>
      <anchor>a056d0a30e13bafcf966102d7e8559481</anchor>
      <arglist>(int reasonCode_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_prim___disassociate_request.html</anchorfile>
      <anchor>a714e9177d5d4a50cf931dff769a9314f</anchor>
      <arglist>(const Ieee80211Prim_DisassociateRequest &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::MACAddress</type>
      <name>address_var</name>
      <anchorfile>class_ieee80211_prim___disassociate_request.html</anchorfile>
      <anchor>a0bf248c2ea88ffcbdcc260dc363fca48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>reasonCode_var</name>
      <anchorfile>class_ieee80211_prim___disassociate_request.html</anchorfile>
      <anchor>aefe5270bff5f8cd96d1788ba5d3f5b13</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211Prim_ReassociateConfirm</name>
    <filename>class_ieee80211_prim___reassociate_confirm.html</filename>
    <base>Ieee80211Prim_AssociateConfirm</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_ReassociateConfirm</name>
      <anchorfile>class_ieee80211_prim___reassociate_confirm.html</anchorfile>
      <anchor>a841d27cbae3bad58ea5a69b89d4cc815</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_ReassociateConfirm</name>
      <anchorfile>class_ieee80211_prim___reassociate_confirm.html</anchorfile>
      <anchor>ac67019423bc3f7bf6588a756ece8f665</anchor>
      <arglist>(const Ieee80211Prim_ReassociateConfirm &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211Prim_ReassociateConfirm</name>
      <anchorfile>class_ieee80211_prim___reassociate_confirm.html</anchorfile>
      <anchor>a38104d6167be541d5061d0300168a396</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211Prim_ReassociateConfirm &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_prim___reassociate_confirm.html</anchorfile>
      <anchor>ac11249bd25f0e93f7c5d3e46e8c69f85</anchor>
      <arglist>(const Ieee80211Prim_ReassociateConfirm &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211Prim_ReassociateConfirm *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_prim___reassociate_confirm.html</anchorfile>
      <anchor>a97beee703e6a908521650d12903f633a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_prim___reassociate_confirm.html</anchorfile>
      <anchor>a74b7beabbb220908c059894781d70481</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_prim___reassociate_confirm.html</anchorfile>
      <anchor>ac621b1b520cafdbaa6a8bf60d8f54b50</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_prim___reassociate_confirm.html</anchorfile>
      <anchor>af6fe4e87fb5e0e72f7097c9f680167bb</anchor>
      <arglist>(const Ieee80211Prim_ReassociateConfirm &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211Prim_ReassociateRequest</name>
    <filename>class_ieee80211_prim___reassociate_request.html</filename>
    <base>Ieee80211Prim_AssociateRequest</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_ReassociateRequest</name>
      <anchorfile>class_ieee80211_prim___reassociate_request.html</anchorfile>
      <anchor>a518f564132317e25ca8b2cfd7b39b19a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_ReassociateRequest</name>
      <anchorfile>class_ieee80211_prim___reassociate_request.html</anchorfile>
      <anchor>a41e4e56dcb508e76c6ab880b52473a30</anchor>
      <arglist>(const Ieee80211Prim_ReassociateRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211Prim_ReassociateRequest</name>
      <anchorfile>class_ieee80211_prim___reassociate_request.html</anchorfile>
      <anchor>a708e000d47f7cd8e759d4bed691ae759</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211Prim_ReassociateRequest &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_prim___reassociate_request.html</anchorfile>
      <anchor>a1d5d6792fa37d84af9bd6022d273319c</anchor>
      <arglist>(const Ieee80211Prim_ReassociateRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211Prim_ReassociateRequest *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_prim___reassociate_request.html</anchorfile>
      <anchor>afa0f9cf1355192c0f73875a1be0ade6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_prim___reassociate_request.html</anchorfile>
      <anchor>a02b66847de2df68bc40c0017cc40dc16</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_prim___reassociate_request.html</anchorfile>
      <anchor>a0400aed5fa0f6b0959bab0cf6d84949e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_prim___reassociate_request.html</anchorfile>
      <anchor>a09578907d2ddfc6e73d420358ca67336</anchor>
      <arglist>(const Ieee80211Prim_ReassociateRequest &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211Prim_ScanConfirm</name>
    <filename>class_ieee80211_prim___scan_confirm.html</filename>
    <base>Ieee80211PrimConfirm</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_ScanConfirm</name>
      <anchorfile>class_ieee80211_prim___scan_confirm.html</anchorfile>
      <anchor>a665e8fb5355dba2effee39fcb883236f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_ScanConfirm</name>
      <anchorfile>class_ieee80211_prim___scan_confirm.html</anchorfile>
      <anchor>a80084540bf99e16fb129ea37e17cae28</anchor>
      <arglist>(const Ieee80211Prim_ScanConfirm &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211Prim_ScanConfirm</name>
      <anchorfile>class_ieee80211_prim___scan_confirm.html</anchorfile>
      <anchor>a66c530a6b548dadc64c1333a59d8a8cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211Prim_ScanConfirm &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_prim___scan_confirm.html</anchorfile>
      <anchor>a2c17ad3322b02cc79e3d80a495cc9601</anchor>
      <arglist>(const Ieee80211Prim_ScanConfirm &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211Prim_ScanConfirm *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_prim___scan_confirm.html</anchorfile>
      <anchor>a6b29e86cae41f2aa88aa9fb3569cc701</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_prim___scan_confirm.html</anchorfile>
      <anchor>aee0eacb4a8875b3397ea46313b024104</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_prim___scan_confirm.html</anchorfile>
      <anchor>a057e3cd31d57671cee2cc011c673f8ff</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBssListArraySize</name>
      <anchorfile>class_ieee80211_prim___scan_confirm.html</anchorfile>
      <anchor>ac369af2887452099ac80e2cf19a8cd10</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getBssListArraySize</name>
      <anchorfile>class_ieee80211_prim___scan_confirm.html</anchorfile>
      <anchor>a65185470bd35c76d354ac8382b7a492d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211Prim_BSSDescription &amp;</type>
      <name>getBssList</name>
      <anchorfile>class_ieee80211_prim___scan_confirm.html</anchorfile>
      <anchor>aa965cbe9804edda5c752cb3fd5933b14</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211Prim_BSSDescription &amp;</type>
      <name>getBssList</name>
      <anchorfile>class_ieee80211_prim___scan_confirm.html</anchorfile>
      <anchor>ad8536168e855562f26d7cdae5512d81d</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBssList</name>
      <anchorfile>class_ieee80211_prim___scan_confirm.html</anchorfile>
      <anchor>abc0a160022bf338994bfd1741a65c4d1</anchor>
      <arglist>(unsigned int k, const Ieee80211Prim_BSSDescription &amp;bssList_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_prim___scan_confirm.html</anchorfile>
      <anchor>a1e53fabd664939c093aad49c554c51ab</anchor>
      <arglist>(const Ieee80211Prim_ScanConfirm &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::Ieee80211Prim_BSSDescription *</type>
      <name>bssList_var</name>
      <anchorfile>class_ieee80211_prim___scan_confirm.html</anchorfile>
      <anchor>ad5ba7a41b993371768e6bdac2b30aa05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>bssList_arraysize</name>
      <anchorfile>class_ieee80211_prim___scan_confirm.html</anchorfile>
      <anchor>a227285f8ad2a75f94006df606066406f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211Prim_ScanRequest</name>
    <filename>class_ieee80211_prim___scan_request.html</filename>
    <base>Ieee80211PrimRequest</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_ScanRequest</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>a4aceadf3f50d5211e0ca13c89c76bd38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_ScanRequest</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>ac446e1f291b56efe35d57fe98b2bc8ec</anchor>
      <arglist>(const Ieee80211Prim_ScanRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211Prim_ScanRequest</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>a0d6af0c8a654662d3ee1917e27adc50e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211Prim_ScanRequest &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>a18ee8cbc42d1797c9797123b44071d54</anchor>
      <arglist>(const Ieee80211Prim_ScanRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211Prim_ScanRequest *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>a867036f63ea78f21a10f13f6b13b6b48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>aa6be1b000352d58ccb5969b4e139eb43</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>ad07b616a2c05e835a09dcd161434dd56</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getBSSType</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>aa783bf86fb9c4c595b71e2608566070d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBSSType</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>a69fdf9257a393f98bd2e71f1f115581c</anchor>
      <arglist>(int BSSType_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getBSSID</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>ac5169b433649c58d1b2ad30a56c0896f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getBSSID</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>a6ca8083e518789a548d8fc304c757659</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBSSID</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>a960a38660af8b25721971107dd2e0c20</anchor>
      <arglist>(const MACAddress &amp;BSSID_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getSSID</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>a60b3889cf345e2f7006541da057f7678</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSSID</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>a4f21e482e9126a59cd28e56e7dfbe8f0</anchor>
      <arglist>(const char *SSID_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getActiveScan</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>a61781aa61d5f8f6367fd5654faefbeb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setActiveScan</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>ad262e7b70d1f93be7987751390a6c3ab</anchor>
      <arglist>(bool activeScan_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getProbeDelay</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>a6081097f4f1b0db7030d97315744bede</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProbeDelay</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>a5c49d35039acf48eabe03c47d04ce9ef</anchor>
      <arglist>(simtime_t probeDelay_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChannelListArraySize</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>a5df5ad46a1e19934a182231f883579aa</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getChannelListArraySize</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>aab534782a8c0377b6d45d5a2b51afc71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getChannelList</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>af91b1c6e07717dd1eb90188a23021a06</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChannelList</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>ace8b1e6621e2dc78897be6c844fc614d</anchor>
      <arglist>(unsigned int k, int channelList_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getMinChannelTime</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>a21391082024b4adf670f028e57419723</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMinChannelTime</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>a28a3769286725527aefec6053326968a</anchor>
      <arglist>(simtime_t minChannelTime_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getMaxChannelTime</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>a24e6a247e5ed8e768e1d93df09d9a26f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMaxChannelTime</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>a5a7fc962d823d44e3410b319cfe2d1e8</anchor>
      <arglist>(simtime_t maxChannelTime_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>ad4068dccffe10bcbd6a17e857ff7c103</anchor>
      <arglist>(const Ieee80211Prim_ScanRequest &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>BSSType_var</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>a9fc666c514507dd21d0a7ee8c5b4af88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::MACAddress</type>
      <name>BSSID_var</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>ad26cc193cc41d2091ac535983a9766f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>SSID_var</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>a454ea70d62c1429d65f2b1b006c6806f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>activeScan_var</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>ab12ba4aba0e3d1c3d10f2282901a2a6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>probeDelay_var</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>a4310795527eb4a15620617a5f3709d0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>channelList_var</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>a09f13612b8357a3a947fe009a92a72c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>channelList_arraysize</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>adcb0be7d6e41a3ec06f1da4fa27a03df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>minChannelTime_var</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>a80507e633b9c13a335c626bcdef6c02b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>maxChannelTime_var</name>
      <anchorfile>class_ieee80211_prim___scan_request.html</anchorfile>
      <anchor>af2a4920916ec8da9284660c80bdffebf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211PrimConfirm</name>
    <filename>class_ieee80211_prim_confirm.html</filename>
    <member kind="function">
      <type></type>
      <name>Ieee80211PrimConfirm</name>
      <anchorfile>class_ieee80211_prim_confirm.html</anchorfile>
      <anchor>afba9a7ed7708c3e1ea2dea312a1b4706</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211PrimConfirm</name>
      <anchorfile>class_ieee80211_prim_confirm.html</anchorfile>
      <anchor>a151305f46ccfa87540f7dda68e13b4d6</anchor>
      <arglist>(const Ieee80211PrimConfirm &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211PrimConfirm</name>
      <anchorfile>class_ieee80211_prim_confirm.html</anchorfile>
      <anchor>a27d6570da9ac59fdfa35b3798b849309</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211PrimConfirm &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_prim_confirm.html</anchorfile>
      <anchor>a13b8989c2c5e328eb4aa16b774fed49c</anchor>
      <arglist>(const Ieee80211PrimConfirm &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211PrimConfirm *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_prim_confirm.html</anchorfile>
      <anchor>a913b238286bab7fd4d82447b546b5ab9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_prim_confirm.html</anchorfile>
      <anchor>a472139c98da3ebb579c571425802c53d</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_prim_confirm.html</anchorfile>
      <anchor>aeffc5cfda8cf2fd352cf128beae41516</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getResultCode</name>
      <anchorfile>class_ieee80211_prim_confirm.html</anchorfile>
      <anchor>a9853568a51e05a1437a6b851522f7f6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setResultCode</name>
      <anchorfile>class_ieee80211_prim_confirm.html</anchorfile>
      <anchor>a7781d6e5323abd2f2de2c3c12f8814e5</anchor>
      <arglist>(int resultCode_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_prim_confirm.html</anchorfile>
      <anchor>a20dbe1e6de2d17e524f8186b1dcb4604</anchor>
      <arglist>(const Ieee80211PrimConfirm &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>resultCode_var</name>
      <anchorfile>class_ieee80211_prim_confirm.html</anchorfile>
      <anchor>a360cead60ee1cfb2de96e93250e8fbe8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211PrimRequest</name>
    <filename>class_ieee80211_prim_request.html</filename>
    <member kind="function">
      <type></type>
      <name>Ieee80211PrimRequest</name>
      <anchorfile>class_ieee80211_prim_request.html</anchorfile>
      <anchor>a801dc70c531bb3baa825cfddd35e9a68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211PrimRequest</name>
      <anchorfile>class_ieee80211_prim_request.html</anchorfile>
      <anchor>ac7f623d402903779c5e112d1e5e0fa3f</anchor>
      <arglist>(const Ieee80211PrimRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211PrimRequest</name>
      <anchorfile>class_ieee80211_prim_request.html</anchorfile>
      <anchor>a261747d33ff2e3fc7fcb3bba794db6e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211PrimRequest &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_prim_request.html</anchorfile>
      <anchor>ab61c751257cbd8a562a1936dc562dc0f</anchor>
      <arglist>(const Ieee80211PrimRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211PrimRequest *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_prim_request.html</anchorfile>
      <anchor>a6bcb8f868831fbfd74e0e97e2e428425</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_prim_request.html</anchorfile>
      <anchor>a5a572b8ec3ca0fb4fa531a639f4e23b3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_prim_request.html</anchorfile>
      <anchor>aafb6b10eaadd5a76224e95edce7d1503</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_prim_request.html</anchorfile>
      <anchor>a2a3985169f63ecbeb376f501ae5bc82f</anchor>
      <arglist>(const Ieee80211PrimRequest &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211ProbeRequestFrame</name>
    <filename>class_ieee80211_probe_request_frame.html</filename>
    <base>Ieee80211ManagementFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211ProbeRequestFrame</name>
      <anchorfile>class_ieee80211_probe_request_frame.html</anchorfile>
      <anchor>a60ddb9d32d48740e033c8518acc14e93</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211ProbeRequestFrame</name>
      <anchorfile>class_ieee80211_probe_request_frame.html</anchorfile>
      <anchor>a887847ea4633a66ab7f17c2e0d5e6fae</anchor>
      <arglist>(const Ieee80211ProbeRequestFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211ProbeRequestFrame</name>
      <anchorfile>class_ieee80211_probe_request_frame.html</anchorfile>
      <anchor>a82acd08920b7d10494121468b220e7e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211ProbeRequestFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_probe_request_frame.html</anchorfile>
      <anchor>a033221fd786f23fbc6876de31b62a58a</anchor>
      <arglist>(const Ieee80211ProbeRequestFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211ProbeRequestFrame *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_probe_request_frame.html</anchorfile>
      <anchor>acfeb65e587bdd509390d32b66ff4263b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_probe_request_frame.html</anchorfile>
      <anchor>a0881423c19c565d08b2e4df77dfabc54</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_probe_request_frame.html</anchorfile>
      <anchor>a1289514448db0bd460c5cf471af74c65</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211ProbeRequestFrameBody &amp;</type>
      <name>getBody</name>
      <anchorfile>class_ieee80211_probe_request_frame.html</anchorfile>
      <anchor>a4180a614a453aaf510a0e49e40565b09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211ProbeRequestFrameBody &amp;</type>
      <name>getBody</name>
      <anchorfile>class_ieee80211_probe_request_frame.html</anchorfile>
      <anchor>a674fea3e8e2ee6e599d3a7fa797f9db3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBody</name>
      <anchorfile>class_ieee80211_probe_request_frame.html</anchorfile>
      <anchor>a43512e03191ae36d239d54975bc2f713</anchor>
      <arglist>(const Ieee80211ProbeRequestFrameBody &amp;body_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_probe_request_frame.html</anchorfile>
      <anchor>a40be603365c009527394b380f516b88b</anchor>
      <arglist>(const Ieee80211ProbeRequestFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::Ieee80211ProbeRequestFrameBody</type>
      <name>body_var</name>
      <anchorfile>class_ieee80211_probe_request_frame.html</anchorfile>
      <anchor>a8bb1f8b15b935a304a07bd30f84a0738</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211ProbeRequestFrameBody</name>
    <filename>class_ieee80211_probe_request_frame_body.html</filename>
    <base>Ieee80211FrameBody</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211ProbeRequestFrameBody</name>
      <anchorfile>class_ieee80211_probe_request_frame_body.html</anchorfile>
      <anchor>afddccd4e14cd1d5076be6fb754dfddfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211ProbeRequestFrameBody</name>
      <anchorfile>class_ieee80211_probe_request_frame_body.html</anchorfile>
      <anchor>ab6cbedc885d0841d9384acecf7294c66</anchor>
      <arglist>(const Ieee80211ProbeRequestFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211ProbeRequestFrameBody</name>
      <anchorfile>class_ieee80211_probe_request_frame_body.html</anchorfile>
      <anchor>a1416ebd58f365d6b26129ec3219e3d98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211ProbeRequestFrameBody &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_probe_request_frame_body.html</anchorfile>
      <anchor>a791f8bf4a9ae46423e210e9ca14e045d</anchor>
      <arglist>(const Ieee80211ProbeRequestFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211ProbeRequestFrameBody *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_probe_request_frame_body.html</anchorfile>
      <anchor>a34ddac3d9da7c514fb78f016260f1e6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_probe_request_frame_body.html</anchorfile>
      <anchor>a097a5669938b67dc0bb37fdf91e4f5af</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_probe_request_frame_body.html</anchorfile>
      <anchor>a3c6325d812f0ddf45771e0873977ee6a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getSSID</name>
      <anchorfile>class_ieee80211_probe_request_frame_body.html</anchorfile>
      <anchor>a6347fc0413e1d94ab3695d55de1b2633</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSSID</name>
      <anchorfile>class_ieee80211_probe_request_frame_body.html</anchorfile>
      <anchor>a60c3931ad2b97977dc22a91fdcc60297</anchor>
      <arglist>(const char *SSID_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211SupportedRatesElement &amp;</type>
      <name>getSupportedRates</name>
      <anchorfile>class_ieee80211_probe_request_frame_body.html</anchorfile>
      <anchor>a1a5c898519c94af2c64353eb4bdc78f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211SupportedRatesElement &amp;</type>
      <name>getSupportedRates</name>
      <anchorfile>class_ieee80211_probe_request_frame_body.html</anchorfile>
      <anchor>a5f27f53dac77aec1f47005b54ba3d51d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSupportedRates</name>
      <anchorfile>class_ieee80211_probe_request_frame_body.html</anchorfile>
      <anchor>ab56cee848ef4400874ef4949aaf670f0</anchor>
      <arglist>(const Ieee80211SupportedRatesElement &amp;supportedRates_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_probe_request_frame_body.html</anchorfile>
      <anchor>a3a6212f747b2c7d4424682dbf859c9ae</anchor>
      <arglist>(const Ieee80211ProbeRequestFrameBody &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>SSID_var</name>
      <anchorfile>class_ieee80211_probe_request_frame_body.html</anchorfile>
      <anchor>a1858913eac28a944431fc397c4e12566</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::Ieee80211SupportedRatesElement</type>
      <name>supportedRates_var</name>
      <anchorfile>class_ieee80211_probe_request_frame_body.html</anchorfile>
      <anchor>ad1750a66543af6bea50688e2c561c150</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211ProbeResponseFrame</name>
    <filename>class_ieee80211_probe_response_frame.html</filename>
    <base>Ieee80211ManagementFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211ProbeResponseFrame</name>
      <anchorfile>class_ieee80211_probe_response_frame.html</anchorfile>
      <anchor>a485c45c1c6d8bf39fe1c17c657495e33</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211ProbeResponseFrame</name>
      <anchorfile>class_ieee80211_probe_response_frame.html</anchorfile>
      <anchor>a443b2937f5122a8aea4b9946e04cbbee</anchor>
      <arglist>(const Ieee80211ProbeResponseFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211ProbeResponseFrame</name>
      <anchorfile>class_ieee80211_probe_response_frame.html</anchorfile>
      <anchor>aa736c43a53af56f5ad8ec737d76cfec9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211ProbeResponseFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_probe_response_frame.html</anchorfile>
      <anchor>adcc6638e4a20ff82991398fbdbeee212</anchor>
      <arglist>(const Ieee80211ProbeResponseFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211ProbeResponseFrame *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_probe_response_frame.html</anchorfile>
      <anchor>af262a0f6d3882ec916deec17a5ba6c53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_probe_response_frame.html</anchorfile>
      <anchor>a8025ba6ac2312e292a8fd6c3b75c5c39</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_probe_response_frame.html</anchorfile>
      <anchor>a2a75f2f288a85487862d86422c667585</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211ProbeResponseFrameBody &amp;</type>
      <name>getBody</name>
      <anchorfile>class_ieee80211_probe_response_frame.html</anchorfile>
      <anchor>a35f3b647677b1f3306bf75d4e3f999c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211ProbeResponseFrameBody &amp;</type>
      <name>getBody</name>
      <anchorfile>class_ieee80211_probe_response_frame.html</anchorfile>
      <anchor>a5150cff571ba95aafa8d7a2f4a90136c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBody</name>
      <anchorfile>class_ieee80211_probe_response_frame.html</anchorfile>
      <anchor>acd7ab38ebd7246717e0171912deddeeb</anchor>
      <arglist>(const Ieee80211ProbeResponseFrameBody &amp;body_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_probe_response_frame.html</anchorfile>
      <anchor>aecda7f60a19bc17609b987cb9a36dd6a</anchor>
      <arglist>(const Ieee80211ProbeResponseFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::Ieee80211ProbeResponseFrameBody</type>
      <name>body_var</name>
      <anchorfile>class_ieee80211_probe_response_frame.html</anchorfile>
      <anchor>af5fafbc8f068f2d6f1a47ac53c29d91f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211ProbeResponseFrameBody</name>
    <filename>class_ieee80211_probe_response_frame_body.html</filename>
    <base>Ieee80211BeaconFrameBody</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211ProbeResponseFrameBody</name>
      <anchorfile>class_ieee80211_probe_response_frame_body.html</anchorfile>
      <anchor>a8e20b44e063f32e56cb02a3a95c87dc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211ProbeResponseFrameBody</name>
      <anchorfile>class_ieee80211_probe_response_frame_body.html</anchorfile>
      <anchor>a328216418167b6e26adbe3b72db472cb</anchor>
      <arglist>(const Ieee80211ProbeResponseFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211ProbeResponseFrameBody</name>
      <anchorfile>class_ieee80211_probe_response_frame_body.html</anchorfile>
      <anchor>a2ec7926b676f293765e958cfb1cea07b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211ProbeResponseFrameBody &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_probe_response_frame_body.html</anchorfile>
      <anchor>a39449473b24ad63135a87b09cf29bf43</anchor>
      <arglist>(const Ieee80211ProbeResponseFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211ProbeResponseFrameBody *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_probe_response_frame_body.html</anchorfile>
      <anchor>ac612695ebe0ec6d23cfd3cdeb4ed1671</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_probe_response_frame_body.html</anchorfile>
      <anchor>aba0f1e8f25d4aee5fa4ee96303f24f0b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_probe_response_frame_body.html</anchorfile>
      <anchor>af50733de9c27b0379bb2f22d5e49f734</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_probe_response_frame_body.html</anchorfile>
      <anchor>a517f1710eef4733a052ccf28cf7feef7</anchor>
      <arglist>(const Ieee80211ProbeResponseFrameBody &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211Radio</name>
    <filename>class_ieee80211_radio.html</filename>
    <base>AbstractRadio</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IReceptionModel *</type>
      <name>createReceptionModel</name>
      <anchorfile>class_ieee80211_radio.html</anchorfile>
      <anchor>ac7bbaea9583465433f8c1dc17c2cf757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IRadioModel *</type>
      <name>createRadioModel</name>
      <anchorfile>class_ieee80211_radio.html</anchorfile>
      <anchor>a10bdd18bd10609839e32cdea7c41a94f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211RadioModel</name>
    <filename>class_ieee80211_radio_model.html</filename>
    <base>IRadioModel</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeFrom</name>
      <anchorfile>class_ieee80211_radio_model.html</anchorfile>
      <anchor>a51982beedcc8e5d8cd468000a0edb56e</anchor>
      <arglist>(cModule *radioModule)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>calculateDuration</name>
      <anchorfile>class_ieee80211_radio_model.html</anchorfile>
      <anchor>a705603deb14546aa86d80290642365c3</anchor>
      <arglist>(AirFrame *airframe)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isReceivedCorrectly</name>
      <anchorfile>class_ieee80211_radio_model.html</anchorfile>
      <anchor>a4c204e1ee87745839618b0ba19bff53f</anchor>
      <arglist>(AirFrame *airframe, const SnrList &amp;receivedList)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPacketOK</name>
      <anchorfile>class_ieee80211_radio_model.html</anchorfile>
      <anchor>a2edd0475f3223e179478abd46ae98a66</anchor>
      <arglist>(double snirMin, int lengthMPDU, double bitrate)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>dB2fraction</name>
      <anchorfile>class_ieee80211_radio_model.html</anchorfile>
      <anchor>ab14f527710231f7e560b6d5f371e1170</anchor>
      <arglist>(double dB)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>snirThreshold</name>
      <anchorfile>class_ieee80211_radio_model.html</anchorfile>
      <anchor>a978435d160d6381c1f2295681e673d30</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211ReassociationRequestFrame</name>
    <filename>class_ieee80211_reassociation_request_frame.html</filename>
    <base>Ieee80211ManagementFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211ReassociationRequestFrame</name>
      <anchorfile>class_ieee80211_reassociation_request_frame.html</anchorfile>
      <anchor>a521812522661eddcbec5964ef2067f57</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211ReassociationRequestFrame</name>
      <anchorfile>class_ieee80211_reassociation_request_frame.html</anchorfile>
      <anchor>a5b58361ab045545bac2faa0ae1994a8f</anchor>
      <arglist>(const Ieee80211ReassociationRequestFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211ReassociationRequestFrame</name>
      <anchorfile>class_ieee80211_reassociation_request_frame.html</anchorfile>
      <anchor>a0a52c6e52ee4e72ebece039f5d1fb5ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211ReassociationRequestFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_reassociation_request_frame.html</anchorfile>
      <anchor>ac76d301a003736ca097272e5ac920493</anchor>
      <arglist>(const Ieee80211ReassociationRequestFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211ReassociationRequestFrame *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_reassociation_request_frame.html</anchorfile>
      <anchor>a1505169e044e471c38ce458444b870b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_reassociation_request_frame.html</anchorfile>
      <anchor>a72df17381e85e6aebcc96a197a52d088</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_reassociation_request_frame.html</anchorfile>
      <anchor>a273420c2edbadfc8dc1944bcb09ce200</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211ReassociationRequestFrameBody &amp;</type>
      <name>getBody</name>
      <anchorfile>class_ieee80211_reassociation_request_frame.html</anchorfile>
      <anchor>a9edd0af4b9cf5996336088133767067b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211ReassociationRequestFrameBody &amp;</type>
      <name>getBody</name>
      <anchorfile>class_ieee80211_reassociation_request_frame.html</anchorfile>
      <anchor>a329f129111e8b8d09530bd91f9e17b85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBody</name>
      <anchorfile>class_ieee80211_reassociation_request_frame.html</anchorfile>
      <anchor>a9668d5628a46f3a9939bf178eb0bc177</anchor>
      <arglist>(const Ieee80211ReassociationRequestFrameBody &amp;body_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_reassociation_request_frame.html</anchorfile>
      <anchor>a0584aca1dc4c2d1e02eb37a0cb4bc28a</anchor>
      <arglist>(const Ieee80211ReassociationRequestFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::Ieee80211ReassociationRequestFrameBody</type>
      <name>body_var</name>
      <anchorfile>class_ieee80211_reassociation_request_frame.html</anchorfile>
      <anchor>a65420bb2788574ec89c4e4edf9defb72</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211ReassociationRequestFrameBody</name>
    <filename>class_ieee80211_reassociation_request_frame_body.html</filename>
    <base>Ieee80211AssociationRequestFrameBody</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211ReassociationRequestFrameBody</name>
      <anchorfile>class_ieee80211_reassociation_request_frame_body.html</anchorfile>
      <anchor>a5f2a7fb02c56824cb58a8c296305aa68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211ReassociationRequestFrameBody</name>
      <anchorfile>class_ieee80211_reassociation_request_frame_body.html</anchorfile>
      <anchor>a3d9ae11e60083d8ca019846fa36fd686</anchor>
      <arglist>(const Ieee80211ReassociationRequestFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211ReassociationRequestFrameBody</name>
      <anchorfile>class_ieee80211_reassociation_request_frame_body.html</anchorfile>
      <anchor>a1cef053f621abc32c6d0c7b5d3c70edf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211ReassociationRequestFrameBody &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_reassociation_request_frame_body.html</anchorfile>
      <anchor>aa9802d27dbbc75777d833c6eb41b1131</anchor>
      <arglist>(const Ieee80211ReassociationRequestFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211ReassociationRequestFrameBody *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_reassociation_request_frame_body.html</anchorfile>
      <anchor>abf0ebc93a0f5dae415d984972354a4c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_reassociation_request_frame_body.html</anchorfile>
      <anchor>a0677ff24b092d77f2d9b3bd9fd1f59ad</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_reassociation_request_frame_body.html</anchorfile>
      <anchor>a6273f36ec18f45489964d8190e5ff6f3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getCurrentAP</name>
      <anchorfile>class_ieee80211_reassociation_request_frame_body.html</anchorfile>
      <anchor>a4c2c43ca5f1341f45b6e1af61793acc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getCurrentAP</name>
      <anchorfile>class_ieee80211_reassociation_request_frame_body.html</anchorfile>
      <anchor>ace63a5270826926e210b8e9f13b62968</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentAP</name>
      <anchorfile>class_ieee80211_reassociation_request_frame_body.html</anchorfile>
      <anchor>afe3c8f27dd81bfb71f8cacfc9e7a2d62</anchor>
      <arglist>(const MACAddress &amp;currentAP_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_reassociation_request_frame_body.html</anchorfile>
      <anchor>a2d4b5f9ccbe8ec7476f3531bf7c7517c</anchor>
      <arglist>(const Ieee80211ReassociationRequestFrameBody &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::MACAddress</type>
      <name>currentAP_var</name>
      <anchorfile>class_ieee80211_reassociation_request_frame_body.html</anchorfile>
      <anchor>a76f0590980e7a0f15f639f4b387ef507</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211ReassociationResponseFrame</name>
    <filename>class_ieee80211_reassociation_response_frame.html</filename>
    <base>Ieee80211ManagementFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211ReassociationResponseFrame</name>
      <anchorfile>class_ieee80211_reassociation_response_frame.html</anchorfile>
      <anchor>a48746da60407eaafed0927cd2221d19e</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211ReassociationResponseFrame</name>
      <anchorfile>class_ieee80211_reassociation_response_frame.html</anchorfile>
      <anchor>ae08079877f717d8c68365e7d1fbc7ef3</anchor>
      <arglist>(const Ieee80211ReassociationResponseFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211ReassociationResponseFrame</name>
      <anchorfile>class_ieee80211_reassociation_response_frame.html</anchorfile>
      <anchor>a5dab37f8b563e66943032e5059737684</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211ReassociationResponseFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_reassociation_response_frame.html</anchorfile>
      <anchor>aaff3f34f5f6248bfc49e59eaf844e88c</anchor>
      <arglist>(const Ieee80211ReassociationResponseFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211ReassociationResponseFrame *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_reassociation_response_frame.html</anchorfile>
      <anchor>aa53d73b104661954035577272d5a159f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_reassociation_response_frame.html</anchorfile>
      <anchor>a5650cc4db5125c44cfa49e05ec7344c0</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_reassociation_response_frame.html</anchorfile>
      <anchor>aafe1a3abd87337f3e7fde8d90ac3fcd2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211ReassociationResponseFrameBody &amp;</type>
      <name>getBody</name>
      <anchorfile>class_ieee80211_reassociation_response_frame.html</anchorfile>
      <anchor>a3666f811e82d2053e6409caf8c871675</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211ReassociationResponseFrameBody &amp;</type>
      <name>getBody</name>
      <anchorfile>class_ieee80211_reassociation_response_frame.html</anchorfile>
      <anchor>a498bbf5012669d07b599c4fe6fcba3b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBody</name>
      <anchorfile>class_ieee80211_reassociation_response_frame.html</anchorfile>
      <anchor>af7645307824b519023087f7611377df4</anchor>
      <arglist>(const Ieee80211ReassociationResponseFrameBody &amp;body_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_reassociation_response_frame.html</anchorfile>
      <anchor>a5dd6c527ca738a91f5eb794759da0889</anchor>
      <arglist>(const Ieee80211ReassociationResponseFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::Ieee80211ReassociationResponseFrameBody</type>
      <name>body_var</name>
      <anchorfile>class_ieee80211_reassociation_response_frame.html</anchorfile>
      <anchor>acf7302d83d6f707a818f96b5771716a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211ReassociationResponseFrameBody</name>
    <filename>class_ieee80211_reassociation_response_frame_body.html</filename>
    <base>Ieee80211AssociationResponseFrameBody</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211ReassociationResponseFrameBody</name>
      <anchorfile>class_ieee80211_reassociation_response_frame_body.html</anchorfile>
      <anchor>a0d2b34f0d1434514601ec0fd9810e137</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211ReassociationResponseFrameBody</name>
      <anchorfile>class_ieee80211_reassociation_response_frame_body.html</anchorfile>
      <anchor>abb38ada85c30c7eece519fca527a0f3c</anchor>
      <arglist>(const Ieee80211ReassociationResponseFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211ReassociationResponseFrameBody</name>
      <anchorfile>class_ieee80211_reassociation_response_frame_body.html</anchorfile>
      <anchor>a1522a217c361794ea2ef095cb0dc1437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211ReassociationResponseFrameBody &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_reassociation_response_frame_body.html</anchorfile>
      <anchor>a7b8644ecc9fa5ef4e229042aaca8e0e6</anchor>
      <arglist>(const Ieee80211ReassociationResponseFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211ReassociationResponseFrameBody *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_reassociation_response_frame_body.html</anchorfile>
      <anchor>a460d1cbde33418a962ba43f4d6fb2d70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_reassociation_response_frame_body.html</anchorfile>
      <anchor>a697b5eb7a39703e0d675988f85bc7d4f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_reassociation_response_frame_body.html</anchorfile>
      <anchor>ad7677552e23a0a45536ca971fb489814</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_reassociation_response_frame_body.html</anchorfile>
      <anchor>a9a003d6adc28fa5f86a9206953094bab</anchor>
      <arglist>(const Ieee80211ReassociationResponseFrameBody &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211RTSFrame</name>
    <filename>class_ieee80211_r_t_s_frame.html</filename>
    <base>Ieee80211TwoAddressFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211RTSFrame</name>
      <anchorfile>class_ieee80211_r_t_s_frame.html</anchorfile>
      <anchor>a9bdc3a63464d7f4fad98bae5cc4c1ae4</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211RTSFrame</name>
      <anchorfile>class_ieee80211_r_t_s_frame.html</anchorfile>
      <anchor>ae462358c6f9f6493f6f6d480e8321c06</anchor>
      <arglist>(const Ieee80211RTSFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211RTSFrame</name>
      <anchorfile>class_ieee80211_r_t_s_frame.html</anchorfile>
      <anchor>ae883fc424d4f81c9b7b17f01bf4fa3ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211RTSFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_r_t_s_frame.html</anchorfile>
      <anchor>a7efbf80a6a7098fbaeb7ceda23aebdda</anchor>
      <arglist>(const Ieee80211RTSFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211RTSFrame *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_r_t_s_frame.html</anchorfile>
      <anchor>a9f6b2a0d26c0bf5e463b4b19db925e5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_r_t_s_frame.html</anchorfile>
      <anchor>a1f673627363a9268c3afdaa4b209d279</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_r_t_s_frame.html</anchorfile>
      <anchor>a35c0fdab454913ac89d530411be979cb</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_r_t_s_frame.html</anchorfile>
      <anchor>a17265d55d2de659887cef32b10fad9f2</anchor>
      <arglist>(const Ieee80211RTSFrame &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ieee80211SupportedRatesElement</name>
    <filename>struct_ieee80211_supported_rates_element.html</filename>
    <member kind="function">
      <type></type>
      <name>Ieee80211SupportedRatesElement</name>
      <anchorfile>struct_ieee80211_supported_rates_element.html</anchorfile>
      <anchor>a767c3a750c2c025e41188e7a0684288f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>numRates</name>
      <anchorfile>struct_ieee80211_supported_rates_element.html</anchorfile>
      <anchor>a4ae94cef8d2ece7edc4a7f4135e32a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>rate</name>
      <anchorfile>struct_ieee80211_supported_rates_element.html</anchorfile>
      <anchor>a0533133bb47dc508511f93cbc0472154</anchor>
      <arglist>[8]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211TwoAddressFrame</name>
    <filename>class_ieee80211_two_address_frame.html</filename>
    <base>Ieee80211OneAddressFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211TwoAddressFrame</name>
      <anchorfile>class_ieee80211_two_address_frame.html</anchorfile>
      <anchor>af38fa35092e7030e651c290305860d3c</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211TwoAddressFrame</name>
      <anchorfile>class_ieee80211_two_address_frame.html</anchorfile>
      <anchor>a020858377599fc448aed07d4d00b42b8</anchor>
      <arglist>(const Ieee80211TwoAddressFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211TwoAddressFrame</name>
      <anchorfile>class_ieee80211_two_address_frame.html</anchorfile>
      <anchor>ad98f3b590b633c14a46326b533b646b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211TwoAddressFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee80211_two_address_frame.html</anchorfile>
      <anchor>abe82586d7c95d58ec749d89e8b55a0c4</anchor>
      <arglist>(const Ieee80211TwoAddressFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211TwoAddressFrame *</type>
      <name>dup</name>
      <anchorfile>class_ieee80211_two_address_frame.html</anchorfile>
      <anchor>a1dde0db7bce8605570fb53003b905380</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee80211_two_address_frame.html</anchorfile>
      <anchor>a765e8e7f0fb623b9703fc04175d506f8</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee80211_two_address_frame.html</anchorfile>
      <anchor>a7fed02055fa4d88929aab8baa5a27b8e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getTransmitterAddress</name>
      <anchorfile>class_ieee80211_two_address_frame.html</anchorfile>
      <anchor>a88c59cc71e76df61f0418642f8381ee9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getTransmitterAddress</name>
      <anchorfile>class_ieee80211_two_address_frame.html</anchorfile>
      <anchor>a78cccc4db835ee775b0b09065ef14dbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransmitterAddress</name>
      <anchorfile>class_ieee80211_two_address_frame.html</anchorfile>
      <anchor>a9c5466afdb111a865c5efdaaf613ec8e</anchor>
      <arglist>(const MACAddress &amp;transmitterAddress_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee80211_two_address_frame.html</anchorfile>
      <anchor>abec478f2aeb5163183393b9c1398ad90</anchor>
      <arglist>(const Ieee80211TwoAddressFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::MACAddress</type>
      <name>transmitterAddress_var</name>
      <anchorfile>class_ieee80211_two_address_frame.html</anchorfile>
      <anchor>a99b1d259bb64d993fc0f1126f1f4e314</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee802Ctrl</name>
    <filename>class_ieee802_ctrl.html</filename>
    <member kind="function">
      <type></type>
      <name>Ieee802Ctrl</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>af5d37e5f3c6d15b85dafb052c21c9584</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee802Ctrl</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>a1c66aae5edeef265a930acd1ac102ef3</anchor>
      <arglist>(const Ieee802Ctrl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee802Ctrl</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>a54b8fae8a3829d0e9bdd5b1c5f51183e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee802Ctrl &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>a76b0b42248e21b902082a104264c2989</anchor>
      <arglist>(const Ieee802Ctrl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee802Ctrl *</type>
      <name>dup</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>a0714f4640930e36065d8efc0646b0642</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>a4347558e8921fcd65a751d816a28561c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>a167a04fcd88cd244103faec293f7953e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getSrc</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>a80d343029d4dc57b48cfd862cb30076b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getSrc</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>ab7ceb42dc26311192810c08f7acf2de1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrc</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>af2f0192e42798fb58699eebeb4c180a3</anchor>
      <arglist>(const MACAddress &amp;src_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getDest</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>a44abf8e022b465968d9d0aa6bd08d626</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getDest</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>a34d96129d80ca82076ffe855e5e2e1a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDest</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>a1ac387654df27a3dd2713ab8f36ecb50</anchor>
      <arglist>(const MACAddress &amp;dest_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getEtherType</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>aeacba74b1541b3a70d431f55e9d06527</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEtherType</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>a8cace6d05bc318fc00d8677ef088685d</anchor>
      <arglist>(int etherType_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSsap</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>a8385d62c15dc1c68bb28912facfbf160</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSsap</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>a0fde83c8a0af63976cb59669d6077954</anchor>
      <arglist>(int ssap_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDsap</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>a3d75f0d0d35dcc8de8ff592782e8df2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDsap</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>a1864b1ee42c616c674f8fbf057b80883</anchor>
      <arglist>(int dsap_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPauseUnits</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>a4cd747730768887886211c6e36997f23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPauseUnits</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>aaf89ad70497ef2c006210ab655335a12</anchor>
      <arglist>(int pauseUnits_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getInputPort</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>adff2ede77281115d2800c5d163e15a45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInputPort</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>ac24915311044f63e44364a1a6d1587fd</anchor>
      <arglist>(int inputPort_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>ab5934cfbe31cd69c7058be1edf86d88a</anchor>
      <arglist>(const Ieee802Ctrl &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::MACAddress</type>
      <name>src_var</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>a0822897eefe9481cc074f210bb409403</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::MACAddress</type>
      <name>dest_var</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>addf55b8505f93e9c793347b92a06678c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>etherType_var</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>a7be0651c8b99652c7f0600237026b4c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ssap_var</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>a7ef207acf84c88f02d2d5a9af8760a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dsap_var</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>a72862b53dd06bdf68450ada84216b0f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>pauseUnits_var</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>a90773631ce4ba87fe8567bdabd27061c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>inputPort_var</name>
      <anchorfile>class_ieee802_ctrl.html</anchorfile>
      <anchor>ab39ad2f3e6f75ab207a10a2a0fc2e28f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IInterfaceTable</name>
    <filename>class_i_interface_table.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IInterfaceTable</name>
      <anchorfile>class_i_interface_table.html</anchorfile>
      <anchor>aab67ba76dcd0160c1766dc8450d41c2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getFullPath</name>
      <anchorfile>class_i_interface_table.html</anchorfile>
      <anchor>a1047517c24c981f2069367ca576a9c81</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addInterface</name>
      <anchorfile>class_i_interface_table.html</anchorfile>
      <anchor>a2159ab6dc917bd6f1b2061980bbdf107</anchor>
      <arglist>(InterfaceEntry *entry, cModule *ifmod)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deleteInterface</name>
      <anchorfile>class_i_interface_table.html</anchorfile>
      <anchor>a229a92e5d530127efb262e8fe7acfdf9</anchor>
      <arglist>(InterfaceEntry *entry)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumInterfaces</name>
      <anchorfile>class_i_interface_table.html</anchorfile>
      <anchor>a2b0ce46cd92da6f64fc363410dc71904</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual InterfaceEntry *</type>
      <name>getInterface</name>
      <anchorfile>class_i_interface_table.html</anchorfile>
      <anchor>a19ce4ca3b47b52b8e2b67c25806c4b49</anchor>
      <arglist>(int pos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceById</name>
      <anchorfile>class_i_interface_table.html</anchorfile>
      <anchor>a92764d620c345b7261de20e9ee5247d7</anchor>
      <arglist>(int id)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceByNodeOutputGateId</name>
      <anchorfile>class_i_interface_table.html</anchorfile>
      <anchor>a31ab0c95a4bf741f1f8aa03e1cf76986</anchor>
      <arglist>(int id)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceByNodeInputGateId</name>
      <anchorfile>class_i_interface_table.html</anchorfile>
      <anchor>a60257f3b30cedc18a80835d5be8305d9</anchor>
      <arglist>(int id)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceByNetworkLayerGateIndex</name>
      <anchorfile>class_i_interface_table.html</anchorfile>
      <anchor>a8d10b748bc5429c706fab120c719e335</anchor>
      <arglist>(int index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceByName</name>
      <anchorfile>class_i_interface_table.html</anchorfile>
      <anchor>a8ad86ee823d6200b4f558383b39af658</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual InterfaceEntry *</type>
      <name>getFirstLoopbackInterface</name>
      <anchorfile>class_i_interface_table.html</anchorfile>
      <anchor>ad9b040947200941201b8c82d35c7abee</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>interfaceChanged</name>
      <anchorfile>class_i_interface_table.html</anchorfile>
      <anchor>ad8ce8de50598e7ac988f4dc3a2ed976f</anchor>
      <arglist>(InterfaceEntry *entry, int category)=0</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>InterfaceEntry</name>
      <anchorfile>class_i_interface_table.html</anchorfile>
      <anchor>a927bba568218c52cc2ec3574098d91c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IModulation</name>
    <filename>class_i_modulation.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IModulation</name>
      <anchorfile>class_i_modulation.html</anchorfile>
      <anchor>aab4cfb2328f2474139883aa3d0985a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>class_i_modulation.html</anchorfile>
      <anchor>aea1aa920e079ec78d885fbaae1a68310</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>calculateBER</name>
      <anchorfile>class_i_modulation.html</anchorfile>
      <anchor>acd0eccece6e135ca26523f932858e9b1</anchor>
      <arglist>(double snir, double bandwidth, double bitrate)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>in_addr</name>
    <filename>structin__addr.html</filename>
    <member kind="variable">
      <type>in_addr_t</type>
      <name>s_addr</name>
      <anchorfile>structin__addr.html</anchorfile>
      <anchor>a3b6ef12385f913cc23a199205d9bf858</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>init_ack_chunk</name>
    <filename>structinit__ack__chunk.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>structinit__ack__chunk.html</anchorfile>
      <anchor>abed2fa13caf1966bb5b5fff2b5055da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>flags</name>
      <anchorfile>structinit__ack__chunk.html</anchorfile>
      <anchor>a5e865cc49a83f89a8ff8326659b34957</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>structinit__ack__chunk.html</anchorfile>
      <anchor>a86107cf32ccbc2b10c490afcbae9deac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>initiate_tag</name>
      <anchorfile>structinit__ack__chunk.html</anchorfile>
      <anchor>a9b62b8b3bb59c9b8978f7a40fb225368</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>a_rwnd</name>
      <anchorfile>structinit__ack__chunk.html</anchorfile>
      <anchor>abdde2152d6f4413a182b435cb6e22d46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>mos</name>
      <anchorfile>structinit__ack__chunk.html</anchorfile>
      <anchor>accd2571dcce6d1445440ebf88d0f0829</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>mis</name>
      <anchorfile>structinit__ack__chunk.html</anchorfile>
      <anchor>a32efe381ff5bd562c2c3da616544f8c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>initial_tsn</name>
      <anchorfile>structinit__ack__chunk.html</anchorfile>
      <anchor>a3dc9fd67977045a4944c2cde3f73c767</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>parameter</name>
      <anchorfile>structinit__ack__chunk.html</anchorfile>
      <anchor>a591a1eeaf0a5cb6694e4fc1eb8ef3d84</anchor>
      <arglist>[0]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>init_chunk</name>
    <filename>structinit__chunk.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>structinit__chunk.html</anchorfile>
      <anchor>a4fb3ba9913bd49198bbbf3046bc77dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>flags</name>
      <anchorfile>structinit__chunk.html</anchorfile>
      <anchor>a4c8fb8b487b9f0e443dab81eb3f8fa9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>structinit__chunk.html</anchorfile>
      <anchor>a14ff57851057d2d81de8f60871cb2146</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>initiate_tag</name>
      <anchorfile>structinit__chunk.html</anchorfile>
      <anchor>a31d1b212fc1f94c540db0d6bd085b6f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>a_rwnd</name>
      <anchorfile>structinit__chunk.html</anchorfile>
      <anchor>a6ba602fe0af994fcfe16a68c0d528759</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>mos</name>
      <anchorfile>structinit__chunk.html</anchorfile>
      <anchor>a6bb5fd91d1b063ee7b59736aec13ca7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>mis</name>
      <anchorfile>structinit__chunk.html</anchorfile>
      <anchor>ae42ac259bf38e3717bbddcd5a880b3cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>initial_tsn</name>
      <anchorfile>structinit__chunk.html</anchorfile>
      <anchor>ad525a15969411b377d2790e357b8c2a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>parameter</name>
      <anchorfile>structinit__chunk.html</anchorfile>
      <anchor>a9ed09eaf52959207d67cee763991f541</anchor>
      <arglist>[0]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>init_cookie_parameter</name>
    <filename>structinit__cookie__parameter.html</filename>
    <member kind="variable">
      <type>unsigned short</type>
      <name>type</name>
      <anchorfile>structinit__cookie__parameter.html</anchorfile>
      <anchor>ac74377b244d59f5e9a96b8a78ab8bc92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>structinit__cookie__parameter.html</anchorfile>
      <anchor>a1efe9e246dea1356496a0b49ce6b9846</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>creationTime</name>
      <anchorfile>structinit__cookie__parameter.html</anchorfile>
      <anchor>a6ab263c9eb97e46f38dc5dc5370f3288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>localTag</name>
      <anchorfile>structinit__cookie__parameter.html</anchorfile>
      <anchor>a8f160ac01fc96bb13e761d4c75e325db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>peerTag</name>
      <anchorfile>structinit__cookie__parameter.html</anchorfile>
      <anchor>abbd0e04446ba751e1bdfdcf56142b5a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>localTieTag</name>
      <anchorfile>structinit__cookie__parameter.html</anchorfile>
      <anchor>a281822dcb20e1a742cad85bf8c0adf6e</anchor>
      <arglist>[32]</arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>peerTieTag</name>
      <anchorfile>structinit__cookie__parameter.html</anchorfile>
      <anchor>a52f4aed9c4dd37d6a814539f8623e897</anchor>
      <arglist>[32]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>init_ipv4_address_parameter</name>
    <filename>structinit__ipv4__address__parameter.html</filename>
    <member kind="variable">
      <type>unsigned short</type>
      <name>type</name>
      <anchorfile>structinit__ipv4__address__parameter.html</anchorfile>
      <anchor>a5ce4a7ab843e9c99ae42a20a840a4225</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>structinit__ipv4__address__parameter.html</anchorfile>
      <anchor>afcb39ae910c8c1d1ab23b7eac1ba3cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>address</name>
      <anchorfile>structinit__ipv4__address__parameter.html</anchorfile>
      <anchor>a2144163223093ea19d5bcf12c54056ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>init_ipv6_address_parameter</name>
    <filename>structinit__ipv6__address__parameter.html</filename>
    <member kind="variable">
      <type>unsigned short</type>
      <name>type</name>
      <anchorfile>structinit__ipv6__address__parameter.html</anchorfile>
      <anchor>ae59788cba1ecab6f27717467b7d43960</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>structinit__ipv6__address__parameter.html</anchorfile>
      <anchor>ac8b6ac55fc74db8c15c3741b02cc8881</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>address</name>
      <anchorfile>structinit__ipv6__address__parameter.html</anchorfile>
      <anchor>ad001b25736133dcedff8f0530427382f</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>INotifiable</name>
    <filename>class_i_notifiable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~INotifiable</name>
      <anchorfile>class_i_notifiable.html</anchorfile>
      <anchor>a630a42fe08a648562d4abc52b20e8f48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchorfile>class_i_notifiable.html</anchorfile>
      <anchor>a67d757190e1128eaec8f0a8e51ed38f6</anchor>
      <arglist>(int category, const cPolymorphic *details)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterfaceEntry</name>
    <filename>class_interface_entry.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInterfaceTable</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a533ed5c9d20dfcc39c2ce7d3355c35d0</anchor>
      <arglist>(IInterfaceTable *t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInterfaceId</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a7dd74863d391501ca83301e1f82111a6</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterfaceEntry</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a581c1060ba3b1b9e1e2d5e4ae29e7250</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InterfaceEntry</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>aa191a6283b9c11a93f1ee9df73ac9f27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a2bdadf6c4364f396229335b31c2c6274</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a5f092ea2814641a8dae2b6865d542132</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IInterfaceTable *</type>
      <name>getInterfaceTable</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a33a11be3f630c1c014de8899d1e7d328</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInterfaceId</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>adc901fa42c37ce16b5c0785da81106ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNetworkLayerGateIndex</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a315657b6b5281241a69bed8e1171ef6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNodeOutputGateId</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a28c151905c57d6d19ecb026367f93278</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNodeInputGateId</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>aec952d16865a101d35452733206ada9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPeerNamId</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>ac84f7ce25867c64837b84bf2ac120a0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMTU</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>adbe3ede6fb4652fbfc4abbe2c924cc3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDown</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a6bcecaaa87b5da264fd47e1500572dff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBroadcast</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>aab3bcbc4bda7e33993c2fe3f97aaaf10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMulticast</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a275db86c899f3278865c47004500588f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPointToPoint</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a91ff5ecd3f8a0e38a09f40694b760a65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLoopback</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a0ee93e88273f61390d1293dae55004d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDatarate</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a54591c28cfc7a3ccbf8025ff4bb4f889</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MACAddress &amp;</type>
      <name>getMacAddress</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>af8004a12e9aac171699ff1f7f08ee4c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const InterfaceToken &amp;</type>
      <name>getInterfaceToken</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a1196c8e3f1a10a26778296af4c14a4bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>af9ca0c7af3a0f45e7d7102e6cc2b089e</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNetworkLayerGateIndex</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a345db5dd6e926e5abe485b6e751cdf70</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNodeOutputGateId</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a52ab396f1f1d41b94905cfc5d96e944a</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNodeInputGateId</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a9da2bee4914c0e598ed96075ab625851</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPeerNamId</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>ab2642147de209c738f171c8ae05dd132</anchor>
      <arglist>(int ni)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMtu</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>aaebcf5970e29877b0a4b68ddaaaf540f</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDown</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>ae52fbe187fb5e61c02141ea66d1aaea0</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBroadcast</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a6f9c79da187d1d56c028b616f3be28fe</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMulticast</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a0b9fca7071b37185a18b6693c3502f69</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPointToPoint</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>af207b6ea20ecd9bedd4acfae50a3500f</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLoopback</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a305e66c0b05a5fa813db3b4f24e2b009</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDatarate</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a0c784bb130d1005066361255d282def0</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMACAddress</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>ac10c228cc65a2c799c798ca75de593dc</anchor>
      <arglist>(const MACAddress &amp;addr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInterfaceToken</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a7fad57b268a57abe1de80d30299d4c45</anchor>
      <arglist>(const InterfaceToken &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>IPv4InterfaceData *</type>
      <name>ipv4Data</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>ad47857e772397cc2d00de3a8cf464993</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPv6InterfaceData *</type>
      <name>ipv6Data</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>aed2588713b620093ada1ebfeb85fdbfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>InterfaceProtocolData *</type>
      <name>getProtocol3Data</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>ae703b63892a20505f13154a8df3f4dc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>InterfaceProtocolData *</type>
      <name>getProtocol4Data</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>ac323e77bb81bbdc32e241741e6fd333b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIPv4Data</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a7b2e8a8e6ee3bab717b90a2068f550f1</anchor>
      <arglist>(IPv4InterfaceData *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIPv6Data</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a1a2550df394a766847d0ad89aa1a9349</anchor>
      <arglist>(IPv6InterfaceData *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProtocol3Data</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>aecea8acf2ef4b0f4d23e3841c9ee9ae7</anchor>
      <arglist>(InterfaceProtocolData *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProtocol4Data</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a19b4214a8d4beb029bebf11465caedef</anchor>
      <arglist>(InterfaceProtocolData *p)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>configChanged</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a6a27dc382d42ec003395be35cfa06f6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>stateChanged</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a7725dc2b018b0abb88869bbcc6d6a122</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>changed</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a2d12bc7879a5de0b373ce2c7ec581a21</anchor>
      <arglist>(int category)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IInterfaceTable *</type>
      <name>ownerp</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a6289a92de460fb4428e7a74cd101d8f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>interfaceId</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>ada612a44cae21cc624e97917869b9de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nwLayerGateIndex</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a7e298a31165012a9bfdf6f6deb8b258f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nodeOutputGateId</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a499654dd92449cd6ca9b60971d57b1da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nodeInputGateId</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a0ca83d1b82869a65d7feb23b2f8434c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>peernamid</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>ac49c4af2bbecbf586a12e4a2bff7e163</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mtu</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a20e755e0dda30412a913cee45ae1fa16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>down</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a2fbdce90dcbd45421e20e7611635119f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>broadcast</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a41eb1e90b71f2c4bbfe176275ded187b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>multicast</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>acdf3591512b266243b741abd8d53253d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>pointToPoint</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a1e7d91c0717974254d5013a64b237a4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>loopback</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a3fdb2607c57f9801282f8aacf4d9c4be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>datarate</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a79fe97f955e5976834fd2e79b7a450fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>macAddr</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a1b147c7d4618223d25a2965eb56bbc7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterfaceToken</type>
      <name>token</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>ac131fdac2f8d3891c54440420959e3f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv4InterfaceData *</type>
      <name>ipv4data</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a36efe5a5310cc4ab8905c70deefeca83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv6InterfaceData *</type>
      <name>ipv6data</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a885d1c26c9feac85c72502e07e61814b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterfaceProtocolData *</type>
      <name>protocol3data</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>aaf92c0f281789b22731e956a08b64746</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterfaceProtocolData *</type>
      <name>protocol4data</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a782cab8a587cf1010acd9e352f8e2e1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>InterfaceEntry</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a89450780d72b516c206102521f585c25</anchor>
      <arglist>(const InterfaceEntry &amp;obj)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>InterfaceEntry &amp;</type>
      <name>operator=</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a8fec34c1b8e153cf247aa70295f98755</anchor>
      <arglist>(const InterfaceEntry &amp;obj)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>InterfaceProtocolData</name>
      <anchorfile>class_interface_entry.html</anchorfile>
      <anchor>a4828b5783f9df3cc0d1cad83fff4b3a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterfaceProtocolData</name>
    <filename>class_interface_protocol_data.html</filename>
    <member kind="function">
      <type></type>
      <name>InterfaceProtocolData</name>
      <anchorfile>class_interface_protocol_data.html</anchorfile>
      <anchor>ab6febaeabba6e3f7ed92da228d8a036c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>InterfaceEntry *</type>
      <name>getInterfaceEntry</name>
      <anchorfile>class_interface_protocol_data.html</anchorfile>
      <anchor>abdbf6a78e60579afda4a33ee6dff9c2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>changed</name>
      <anchorfile>class_interface_protocol_data.html</anchorfile>
      <anchor>ab816750e6501a173b9142125eb2e5cba</anchor>
      <arglist>(int category)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterfaceEntry *</type>
      <name>ownerp</name>
      <anchorfile>class_interface_protocol_data.html</anchorfile>
      <anchor>a612e477f2f733a5c4903572d7449913f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>InterfaceEntry</name>
      <anchorfile>class_interface_protocol_data.html</anchorfile>
      <anchor>a927bba568218c52cc2ec3574098d91c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterfaceTable</name>
    <filename>class_interface_table.html</filename>
    <base>IInterfaceTable</base>
    <base protection="protected">INotifiable</base>
    <member kind="function">
      <type></type>
      <name>InterfaceTable</name>
      <anchorfile>class_interface_table.html</anchorfile>
      <anchor>acdc576cd5a79ac52810ef94fb5b02f8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InterfaceTable</name>
      <anchorfile>class_interface_table.html</anchorfile>
      <anchor>ad3ff50794df60447ba15026ae82464e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getFullPath</name>
      <anchorfile>class_interface_table.html</anchorfile>
      <anchor>abde330e4adcc5a7495f89b8cd6154275</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchorfile>class_interface_table.html</anchorfile>
      <anchor>a6bd59099de1b3cf19df5038b83ec75b9</anchor>
      <arglist>(int category, const cPolymorphic *details)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addInterface</name>
      <anchorfile>class_interface_table.html</anchorfile>
      <anchor>ae67777f04021431cc1d15ae200920836</anchor>
      <arglist>(InterfaceEntry *entry, cModule *ifmod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteInterface</name>
      <anchorfile>class_interface_table.html</anchorfile>
      <anchor>a59bf4ac426a9fd86c5ce4cb2c9fcc16e</anchor>
      <arglist>(InterfaceEntry *entry)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumInterfaces</name>
      <anchorfile>class_interface_table.html</anchorfile>
      <anchor>aa7bbc08564b199d7820f9fb5dafedead</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InterfaceEntry *</type>
      <name>getInterface</name>
      <anchorfile>class_interface_table.html</anchorfile>
      <anchor>a20068628e72377ed78735e6b008a0a9f</anchor>
      <arglist>(int pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceById</name>
      <anchorfile>class_interface_table.html</anchorfile>
      <anchor>a3acb58a75de2e7d443c6abd0e7bd2548</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceByNodeOutputGateId</name>
      <anchorfile>class_interface_table.html</anchorfile>
      <anchor>a281b09bc65fc43109563bff6d9e55995</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceByNodeInputGateId</name>
      <anchorfile>class_interface_table.html</anchorfile>
      <anchor>ad6eb1529b3d8ed007feea079e1f5d9cd</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceByNetworkLayerGateIndex</name>
      <anchorfile>class_interface_table.html</anchorfile>
      <anchor>abc0aa1cd6740d6808c09c3969969bd6f</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceByName</name>
      <anchorfile>class_interface_table.html</anchorfile>
      <anchor>a3f953c2e608d84f14cfcaaf32ff6cbe1</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InterfaceEntry *</type>
      <name>getFirstLoopbackInterface</name>
      <anchorfile>class_interface_table.html</anchorfile>
      <anchor>a60849d96d27149120445ee5429462d91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; InterfaceEntry * &gt;</type>
      <name>InterfaceVector</name>
      <anchorfile>class_interface_table.html</anchorfile>
      <anchor>a3ffd914a1c868644a125750bf7bea75c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDisplayString</name>
      <anchorfile>class_interface_table.html</anchorfile>
      <anchor>a84ad7ffc48e1d42ca93284fe033823b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>discoverConnectingGates</name>
      <anchorfile>class_interface_table.html</anchorfile>
      <anchor>ae2f1d4bb08e61dfa31c908b2c9337d11</anchor>
      <arglist>(InterfaceEntry *entry, cModule *ifmod)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>interfaceChanged</name>
      <anchorfile>class_interface_table.html</anchorfile>
      <anchor>a56f4588cd3260e1ba58b9af6b812d6ae</anchor>
      <arglist>(InterfaceEntry *entry, int category)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>invalidateTmpInterfaceList</name>
      <anchorfile>class_interface_table.html</anchorfile>
      <anchor>ad5da237cf1d0ab4de1ead24a6fa930f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_interface_table.html</anchorfile>
      <anchor>a9f964712f929db684d0c6e5febc658f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_interface_table.html</anchorfile>
      <anchor>ab92373cbd67155557293fbccc2ac1466</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_interface_table.html</anchorfile>
      <anchor>a101a52971a1de7df6479a3412ec5940c</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NotificationBoard *</type>
      <name>nb</name>
      <anchorfile>class_interface_table.html</anchorfile>
      <anchor>a4a813da979ea8934dd9d1bf7f82831b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterfaceVector</type>
      <name>idToInterface</name>
      <anchorfile>class_interface_table.html</anchorfile>
      <anchor>a770ff6852b4d38adf4796786d9d46c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>tmpNumInterfaces</name>
      <anchorfile>class_interface_table.html</anchorfile>
      <anchor>a735aed31ccdb2616a012c3a36ae812a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterfaceEntry **</type>
      <name>tmpInterfaceList</name>
      <anchorfile>class_interface_table.html</anchorfile>
      <anchor>a386b4b375178b5cbb5de18cdcb74042b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterfaceTableAccess</name>
    <filename>class_interface_table_access.html</filename>
    <base>ModuleAccess&lt; IInterfaceTable &gt;</base>
    <member kind="function">
      <type></type>
      <name>InterfaceTableAccess</name>
      <anchorfile>class_interface_table_access.html</anchorfile>
      <anchor>a071f5029937a73b2d6d020a3c1cfda8a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterfaceToken</name>
    <filename>class_interface_token.html</filename>
    <member kind="function">
      <type></type>
      <name>InterfaceToken</name>
      <anchorfile>class_interface_token.html</anchorfile>
      <anchor>a299d35f211e3485f693c01f4191221e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterfaceToken</name>
      <anchorfile>class_interface_token.html</anchorfile>
      <anchor>a6b1fc3ab7dc16086965a68804e94b6c4</anchor>
      <arglist>(uint32 low, uint32 normal, int len)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterfaceToken</name>
      <anchorfile>class_interface_token.html</anchorfile>
      <anchor>a8bda27a885a24df72b3f86dcc17c3753</anchor>
      <arglist>(const InterfaceToken &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>class_interface_token.html</anchorfile>
      <anchor>a50c20e9e0985ef2345ac6e4823d80516</anchor>
      <arglist>(const InterfaceToken &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>class_interface_token.html</anchorfile>
      <anchor>ac24d3ff83613e4a7721526553053c312</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>low</name>
      <anchorfile>class_interface_token.html</anchorfile>
      <anchor>a1a2804e3d0693eb983c850e10f910f54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>normal</name>
      <anchorfile>class_interface_token.html</anchorfile>
      <anchor>af90ce6bfecdaf8a2220c1d4394ce6e6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32</type>
      <name>_normal</name>
      <anchorfile>class_interface_token.html</anchorfile>
      <anchor>ad7d009144b8efcefe17d6ad07fa7e9c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32</type>
      <name>_low</name>
      <anchorfile>class_interface_token.html</anchorfile>
      <anchor>a821f753130406eee86bfe81fe641580e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>short</type>
      <name>_len</name>
      <anchorfile>class_interface_token.html</anchorfile>
      <anchor>a3fb86a477d90952847338c60fb168388</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IP</name>
    <filename>class_i_p.html</filename>
    <base>QueueBase</base>
    <member kind="function">
      <type></type>
      <name>IP</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>ad69b5bf1da25bbb6f7674eeae80e4058</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual InterfaceEntry *</type>
      <name>getSourceInterfaceFrom</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>a1ee2cea2056af30073e8b91419e4fcb3</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDisplayString</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>a475059bb23e5ba0b9a8741e366bbbc7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IPDatagram *</type>
      <name>encapsulate</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>a1c303190cf71119fc450adf292fa0499</anchor>
      <arglist>(cPacket *transportPacket, InterfaceEntry *&amp;destIE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IPDatagram *</type>
      <name>encapsulate</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>a88e5a732377a9667715f34898c3ae1a0</anchor>
      <arglist>(cPacket *transportPacket, InterfaceEntry *&amp;destIE, IPControlInfo *controlInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IPDatagram *</type>
      <name>createIPDatagram</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>a4834481c507f4c4402a7f1817f0b2938</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handlePacketFromNetwork</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>af966188ae30eea7c74b2d437fe483b28</anchor>
      <arglist>(IPDatagram *datagram)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessageFromHL</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>a7a267b88ac8aa0408a139523dd6f95fc</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleARP</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>aa16a20ee988fddee0149aeb269e33073</anchor>
      <arglist>(ARPPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReceivedICMP</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>a2be4056a37dff5d5c34a0ccf8a757982</anchor>
      <arglist>(ICMPMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>routePacket</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>a7e1adac4e4511b4c50d0b53da47716de</anchor>
      <arglist>(IPDatagram *datagram, InterfaceEntry *destIE, bool fromHL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>routeMulticastPacket</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>aa58de5c51c75d9a18f2c25a0760cc87d</anchor>
      <arglist>(IPDatagram *datagram, InterfaceEntry *destIE, InterfaceEntry *fromIE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>reassembleAndDeliver</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>aa3eb6e2e689675f87ff8066a78395c32</anchor>
      <arglist>(IPDatagram *datagram)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>decapsulateIP</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>a9fc86ce488ebd78b8cb7e896f1fb4ccc</anchor>
      <arglist>(IPDatagram *datagram)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fragmentAndSend</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>a87edb37d4677c7a53013acc6b6fd1240</anchor>
      <arglist>(IPDatagram *datagram, InterfaceEntry *ie, IPAddress nextHopAddr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDatagramToOutput</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>a38f36717af904b4c395b5403b66d053c</anchor>
      <arglist>(IPDatagram *datagram, InterfaceEntry *ie, IPAddress nextHopAddr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>aa669fbf50980f8d76a059acf195b34b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>endService</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>a20844562a376712c09a38552e631cea7</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IRoutingTable *</type>
      <name>rt</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>afbc499a556f716c2086df9f856c756b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IInterfaceTable *</type>
      <name>ift</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>a6403a5e98714e0982d94a0217422ada5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ICMPAccess</type>
      <name>icmpAccess</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>a06b273ceaefeadc08ae16e8c0f5c6608</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cGate *</type>
      <name>queueOutGate</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>aa67e9cc3d5276de23fae82fbf52c1609</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>defaultTimeToLive</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>ab2388bf57cd695c340f1e5bb0be97592</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>defaultMCTimeToLive</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>ad3c81f7ff0268ea7a073e52492d3aa91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>fragmentTimeoutTime</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>a3aeab0d480c50f73ded7261d0834cbc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>curFragmentId</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>a454f8960103e187845ef41e35c5f30de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPFragBuf</type>
      <name>fragbuf</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>ad5ac0f64da53c30448645eab408e2c72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastCheckTime</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>a2e380a046fa372e37e56b991c44856d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProtocolMapping</type>
      <name>mapping</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>a328f80e4bf00b82ffe7b1f49c36df18b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numMulticast</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>aaff32e8756556b471d8f13fabfc2c17e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numLocalDeliver</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>acd8c241e1b862d34f153a87145c3fd2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numDropped</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>a2862fbba53f14090b32b48269ae331c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numUnroutable</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>a9d4bc1e5d2e0e3d634e05400f97b34b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numForwarded</name>
      <anchorfile>class_i_p.html</anchorfile>
      <anchor>af1ccc54cd91da3d8e3b0cf62858cb576</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ip</name>
    <filename>structip.html</filename>
    <member kind="variable">
      <type>u_char</type>
      <name>ip_hl</name>
      <anchorfile>structip.html</anchorfile>
      <anchor>a735917e7ba8e3512f790e748558ba0ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ip_v</name>
      <anchorfile>structip.html</anchorfile>
      <anchor>ab74e6295152f54fb6789cf3e879e2e49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ip_tos</name>
      <anchorfile>structip.html</anchorfile>
      <anchor>a6bb0ce0b741d5362c1ffb59de45c002f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>ip_len</name>
      <anchorfile>structip.html</anchorfile>
      <anchor>a9b922c0c4825305ad111de9a1d490999</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>ip_id</name>
      <anchorfile>structip.html</anchorfile>
      <anchor>a39ffb0f3d854db34ce84722763494e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>ip_off</name>
      <anchorfile>structip.html</anchorfile>
      <anchor>aff8779cf5afee1aba77287abc6b3e647</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ip_ttl</name>
      <anchorfile>structip.html</anchorfile>
      <anchor>af6da26caa84ccb1a03aaa1c4b908eb6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ip_p</name>
      <anchorfile>structip.html</anchorfile>
      <anchor>a13e417b652ed826ff0c5cbdcddbfbfa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>ip_sum</name>
      <anchorfile>structip.html</anchorfile>
      <anchor>a834452d6936e01a21447abeb037d87ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct in_addr ip_src</type>
      <name>ip_dst</name>
      <anchorfile>structip.html</anchorfile>
      <anchor>a68892eac9dc7a7e27aef51358f93324f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ip_timestamp</name>
    <filename>structip__timestamp.html</filename>
    <class kind="union">ip_timestamp::ipt_timestamp</class>
    <member kind="variable">
      <type>u_char</type>
      <name>ipt_code</name>
      <anchorfile>structip__timestamp.html</anchorfile>
      <anchor>acef74409bb1cd69f42fd01ba477e84fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ipt_len</name>
      <anchorfile>structip__timestamp.html</anchorfile>
      <anchor>aaa11624ff6570272524d53d862437cc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ipt_ptr</name>
      <anchorfile>structip__timestamp.html</anchorfile>
      <anchor>aa1f551b443486c3ff9637e3ba7c99b34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ipt_flg</name>
      <anchorfile>structip__timestamp.html</anchorfile>
      <anchor>a07a852aa3d67f9369f358ce832b1b270</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ipt_oflw</name>
      <anchorfile>structip__timestamp.html</anchorfile>
      <anchor>af00cb31df56ab314a380f4b57a42af94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>union ip_timestamp::ipt_timestamp</type>
      <name>ipt_timestamp</name>
      <anchorfile>structip__timestamp.html</anchorfile>
      <anchor>a73e357acc8191ebf842bb45a9ea0deca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>ip_timestamp::ipt_timestamp</name>
    <filename>unionip__timestamp_1_1ipt__timestamp.html</filename>
    <class kind="struct">ip_timestamp::ipt_timestamp::ipt_ta</class>
    <member kind="variable">
      <type>n_long</type>
      <name>ipt_time</name>
      <anchorfile>unionip__timestamp_1_1ipt__timestamp.html</anchorfile>
      <anchor>a49ffe32d1958eb5fcf88cc03569effc9</anchor>
      <arglist>[1]</arglist>
    </member>
    <member kind="variable">
      <type>struct ip_timestamp::ipt_timestamp::ipt_ta</type>
      <name>ipt_ta</name>
      <anchorfile>unionip__timestamp_1_1ipt__timestamp.html</anchorfile>
      <anchor>a627c2e3284ca1b541b8b0fdf0c2c5e3d</anchor>
      <arglist>[1]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ip_timestamp::ipt_timestamp::ipt_ta</name>
    <filename>structip__timestamp_1_1ipt__timestamp_1_1ipt__ta.html</filename>
    <member kind="variable">
      <type>struct in_addr</type>
      <name>ipt_addr</name>
      <anchorfile>structip__timestamp_1_1ipt__timestamp_1_1ipt__ta.html</anchorfile>
      <anchor>a8ec80581dfc8435e6a746cdb528f7208</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_long</type>
      <name>ipt_time</name>
      <anchorfile>structip__timestamp_1_1ipt__timestamp_1_1ipt__ta.html</anchorfile>
      <anchor>a4a029c5c4b19e3510ce44fe88fb1c754</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPAddress</name>
    <filename>class_i_p_address.html</filename>
    <member kind="function">
      <type>IPAddress &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>a631683abde52aff4b3dd94a4defdb4cf</anchor>
      <arglist>(const IPAddress &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnspecified</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>a7fb3c274d7a8600be890f83c028d5f96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>a878a77f5c6d6542fbd6bd12fa376a2d4</anchor>
      <arglist>(const IPAddress &amp;toCmp) const </arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>doAnd</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>ace57fe1098707f2d72d8554a486f3192</anchor>
      <arglist>(const IPAddress &amp;ip) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>a50f58febbf2ded78b9f6e32e579f5d2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getInt</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>a807ca46964a8403cf0c70f0772179524</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDByte</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>a868b69cd9b763ad8ad73a5bafa14b866</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getIPClass</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>ab46640e305047a62d89f4f4cd55cda60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMulticast</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>a9b6b5a118e8e1f6f83f2ccffd5a72125</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLinkLocalMulticast</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>a7ddbca4a29446d59f67614742296a3a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getNetwork</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>af25fd620884949d6df6030e996ff189b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getNetworkMask</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>a3ec6972662238953d5704539601e9ecc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNetwork</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>ad6e9cd9d7d4a03f7b11adbef3c465afd</anchor>
      <arglist>(const IPAddress &amp;toCmp) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>prefixMatches</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>aedd7377a261c477938810b12ad214bbe</anchor>
      <arglist>(const IPAddress &amp;to_cmp, int numbits) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumMatchingPrefixBits</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>a12437008ca75e0ea5f33989df033fcbb</anchor>
      <arglist>(const IPAddress &amp;to_cmp) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNetmaskLength</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>abf9da0dfc5c11a7b09260060207b0fc9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>aad6a42cd48640227098bfb0010bb02a8</anchor>
      <arglist>(const IPAddress &amp;addr1) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>aa87f89ae7eee6bbdfc5a981ea17fb54e</anchor>
      <arglist>(const IPAddress &amp;addr1) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>aebfa43b0a149df2f6046256dfa3e69f8</anchor>
      <arglist>(const IPAddress &amp;addr1) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPAddress</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>a6089825af3b03060f80282d0dcca1582</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPAddress</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>a1213da19d1b1fcdbc721f18b81b24226</anchor>
      <arglist>(uint32 ip)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPAddress</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>ae21cf129a4eb5b7980700705a5fba979</anchor>
      <arglist>(int i0, int i1, int i2, int i3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPAddress</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>a8e046f04b99a9b6ec05e6f5dd1a6a2c0</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPAddress</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>a12f93650068d5e1a11efc0cdfdfcdeaf</anchor>
      <arglist>(const IPAddress &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IPAddress</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>ad1fd6513a5a1fc304ca30da84c6495fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>a51b624c86fbf645cf5be93b7c56b8b07</anchor>
      <arglist>(uint32 ip)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>ad94a0ad49b4a3c57af4bff353d626922</anchor>
      <arglist>(int i0, int i1, int i2, int i3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>a3d63984645d77666b2103c204dfd167b</anchor>
      <arglist>(const char *t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>maskedAddrAreEqual</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>af256bd4f9f4aa628cc56d377cd4d3020</anchor>
      <arglist>(const IPAddress &amp;addr1, const IPAddress &amp;addr2, const IPAddress &amp;netmask)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isWellFormed</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>aef98cde22c954db3cd6ff62cd0d878bc</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPAddress</type>
      <name>UNSPECIFIED_ADDRESS</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>adf0c14fe4820be16bec3929a9c019648</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPAddress</type>
      <name>LOOPBACK_ADDRESS</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>aee51aae522173d734b951daf03bbb38f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPAddress</type>
      <name>LOOPBACK_NETMASK</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>a2d8d2e6423c6345010dc89fa05edd5c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPAddress</type>
      <name>ALLONES_ADDRESS</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>ae7549d97f4e0996c1274b0c25849b88f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPAddress</type>
      <name>ALL_HOSTS_MCAST</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>a8721eeb0c6197516faa3f0b267664985</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPAddress</type>
      <name>ALL_ROUTERS_MCAST</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>a06a37c2c04f547c86017875d353ea3eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPAddress</type>
      <name>ALL_DVMRP_ROUTERS_MCAST</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>a23410c85eecd1eac9c44e6d269b76f10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPAddress</type>
      <name>ALL_OSPF_ROUTERS_MCAST</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>aeae5e2facc14e6bf4803da40336b25ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPAddress</type>
      <name>ALL_OSPF_DESIGNATED_ROUTERS_MCAST</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>a57f51ca02045b5692c71ba9099f50dec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>keepFirstBits</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>a5097d5019af16d4b6729b0027d0394e1</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>parseIPAddress</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>a521a8bb0da87311f7cb42ac9e8725aaa</anchor>
      <arglist>(const char *text, unsigned char tobytes[])</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>addr</name>
      <anchorfile>class_i_p_address.html</anchorfile>
      <anchor>a1b9e95cb4534a20d6a370067cdf6a1f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPAddressResolver</name>
    <filename>class_i_p_address_resolver.html</filename>
    <member kind="enumvalue">
      <name>ADDR_PREFER_IPv4</name>
      <anchorfile>class_i_p_address_resolver.html</anchorfile>
      <anchor>ad70ba3a799148d04d7306dc9a4796f4baf764b84aa7cb88db54ab75f6dd932e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADDR_PREFER_IPv6</name>
      <anchorfile>class_i_p_address_resolver.html</anchorfile>
      <anchor>ad70ba3a799148d04d7306dc9a4796f4ba465e122405339545c4029974d3ac5ab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADDR_IPv4</name>
      <anchorfile>class_i_p_address_resolver.html</anchorfile>
      <anchor>ad70ba3a799148d04d7306dc9a4796f4ba3fb79de6bf067f4083b7d0565ec1c92f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADDR_IPv6</name>
      <anchorfile>class_i_p_address_resolver.html</anchorfile>
      <anchor>ad70ba3a799148d04d7306dc9a4796f4ba9dfb7596d13df73e473701235114e44f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPAddressResolver</name>
      <anchorfile>class_i_p_address_resolver.html</anchorfile>
      <anchor>aff705caa22b31d95eb8a030d391e5752</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPAddressResolver</name>
      <anchorfile>class_i_p_address_resolver.html</anchorfile>
      <anchor>a62de8f65225f5985868f135545f9973f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress</type>
      <name>resolve</name>
      <anchorfile>class_i_p_address_resolver.html</anchorfile>
      <anchor>a7d2ced93d5db2fca43c46b26d25d2e69</anchor>
      <arglist>(const char *str, int addrType=ADDR_PREFER_IPv6)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tryResolve</name>
      <anchorfile>class_i_p_address_resolver.html</anchorfile>
      <anchor>ac876b7ea04f2fa286519d74b2a230112</anchor>
      <arglist>(const char *str, IPvXAddress &amp;result, int addrType=ADDR_PREFER_IPv6)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress</type>
      <name>addressOf</name>
      <anchorfile>class_i_p_address_resolver.html</anchorfile>
      <anchor>a629ff9a84de69b6c2bce7d01ffbb0e6f</anchor>
      <arglist>(cModule *host, int addrType=ADDR_PREFER_IPv6)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress</type>
      <name>addressOf</name>
      <anchorfile>class_i_p_address_resolver.html</anchorfile>
      <anchor>a6d136c2d91bca1118f66032ae77c495c</anchor>
      <arglist>(cModule *host, const char *ifname, int addrType=ADDR_PREFER_IPv6)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress</type>
      <name>routerIdOf</name>
      <anchorfile>class_i_p_address_resolver.html</anchorfile>
      <anchor>accc06371fb44cb96001c3a33204101bc</anchor>
      <arglist>(cModule *host)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress</type>
      <name>getAddressFrom</name>
      <anchorfile>class_i_p_address_resolver.html</anchorfile>
      <anchor>a1d13df7e29856d99df000243346e12eb</anchor>
      <arglist>(IInterfaceTable *ift, int addrType=ADDR_PREFER_IPv6)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress</type>
      <name>getAddressFrom</name>
      <anchorfile>class_i_p_address_resolver.html</anchorfile>
      <anchor>a6e863aea16ebe8a7e68f85fde14d153c</anchor>
      <arglist>(InterfaceEntry *ie, int addrType=ADDR_PREFER_IPv6)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IInterfaceTable *</type>
      <name>interfaceTableOf</name>
      <anchorfile>class_i_p_address_resolver.html</anchorfile>
      <anchor>a9ebedf66882a5a01adda849e87268ad0</anchor>
      <arglist>(cModule *host)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IRoutingTable *</type>
      <name>routingTableOf</name>
      <anchorfile>class_i_p_address_resolver.html</anchorfile>
      <anchor>a8724bc1f66420a3b511fe9958bbe05d0</anchor>
      <arglist>(cModule *host)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RoutingTable6 *</type>
      <name>routingTable6Of</name>
      <anchorfile>class_i_p_address_resolver.html</anchorfile>
      <anchor>aa507c73e22be842f37ec1cac33fdd184</anchor>
      <arglist>(cModule *host)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NotificationBoard *</type>
      <name>notificationBoardOf</name>
      <anchorfile>class_i_p_address_resolver.html</anchorfile>
      <anchor>ac5d73de625075aaafc42ba76e6f0dd21</anchor>
      <arglist>(cModule *host)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IInterfaceTable *</type>
      <name>findInterfaceTableOf</name>
      <anchorfile>class_i_p_address_resolver.html</anchorfile>
      <anchor>a06b1d14fb0666280dfd67beff84a0fd9</anchor>
      <arglist>(cModule *host)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IRoutingTable *</type>
      <name>findRoutingTableOf</name>
      <anchorfile>class_i_p_address_resolver.html</anchorfile>
      <anchor>a736d37bf6d05fb602e04fa4407e09b00</anchor>
      <arglist>(cModule *host)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RoutingTable6 *</type>
      <name>findRoutingTable6Of</name>
      <anchorfile>class_i_p_address_resolver.html</anchorfile>
      <anchor>a2058bf5de71b4d5a52f2136ac948f463</anchor>
      <arglist>(cModule *host)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NotificationBoard *</type>
      <name>findNotificationBoardOf</name>
      <anchorfile>class_i_p_address_resolver.html</anchorfile>
      <anchor>a050c454c8e7e3b9481525091c9085a40</anchor>
      <arglist>(cModule *host)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IPAddress</type>
      <name>getIPv4AddressFrom</name>
      <anchorfile>class_i_p_address_resolver.html</anchorfile>
      <anchor>a96495ab0fcdc57eaa0331910fd1e583e</anchor>
      <arglist>(IInterfaceTable *ift)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IPv6Address</type>
      <name>getIPv6AddressFrom</name>
      <anchorfile>class_i_p_address_resolver.html</anchorfile>
      <anchor>a49b942a27fcdce64e39b345dc922a9f6</anchor>
      <arglist>(IInterfaceTable *ift)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IPv6Address</type>
      <name>getInterfaceIPv6Address</name>
      <anchorfile>class_i_p_address_resolver.html</anchorfile>
      <anchor>af5148cd5afd4ec22844fbd2aa48ff9e6</anchor>
      <arglist>(InterfaceEntry *ie)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPassiveQueue</name>
    <filename>class_i_passive_queue.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPassiveQueue</name>
      <anchorfile>class_i_passive_queue.html</anchorfile>
      <anchor>a9aeb2828ecdaf81d667c38c73267e864</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>requestPacket</name>
      <anchorfile>class_i_passive_queue.html</anchorfile>
      <anchor>af28ddf4ff33afab50f9d34d1b24e2f6d</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPControlInfo</name>
    <filename>class_i_p_control_info.html</filename>
    <base>IPControlInfo_Base</base>
    <member kind="function">
      <type></type>
      <name>IPControlInfo</name>
      <anchorfile>class_i_p_control_info.html</anchorfile>
      <anchor>a8e5b697edbd5b70c68f32e7fdf503443</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPControlInfo</name>
      <anchorfile>class_i_p_control_info.html</anchorfile>
      <anchor>a875ea81245dcebc245b2a5152a5bf2f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPControlInfo</name>
      <anchorfile>class_i_p_control_info.html</anchorfile>
      <anchor>a378e2f398155b8a7614852a4b8bb7b12</anchor>
      <arglist>(const IPControlInfo &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>IPControlInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_p_control_info.html</anchorfile>
      <anchor>ade5f22a533fb48364c38b5c3a2d929ab</anchor>
      <arglist>(const IPControlInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOrigDatagram</name>
      <anchorfile>class_i_p_control_info.html</anchorfile>
      <anchor>aac185d0cf1f020006ad5566fc39f54cf</anchor>
      <arglist>(IPDatagram *d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPDatagram *</type>
      <name>getOrigDatagram</name>
      <anchorfile>class_i_p_control_info.html</anchorfile>
      <anchor>a756e092b8906680c41d6fa7b52c98f54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPDatagram *</type>
      <name>removeOrigDatagram</name>
      <anchorfile>class_i_p_control_info.html</anchorfile>
      <anchor>a15838ba067f5c6ffd1e0a67114b4ddf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPDatagram *</type>
      <name>dgram</name>
      <anchorfile>class_i_p_control_info.html</anchorfile>
      <anchor>a2f021957b8806c1ded716c13b9801aaf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPControlInfo_Base</name>
    <filename>class_i_p_control_info___base.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPControlInfo_Base</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>a35f38635cda308c79538e46a9a623b26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPControlInfo_Base *</type>
      <name>dup</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>a22cff4ca05e3e93783181171ace0b5ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>a787cf0fb7396d00cc54c3657280e983d</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>aec2915018615d6f8bfcc44ad13bea838</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getDestAddr</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>a7bf28cf9cabb8990038a769ed578aa13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getDestAddr</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>ad20a4963c0cbeb9e37a7d4ea227fb520</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestAddr</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>a135b0ce268713460864e7291dbe6eb5c</anchor>
      <arglist>(const IPAddress &amp;destAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getSrcAddr</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>abce308b6991a47be70ecb4aca43acbcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getSrcAddr</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>a914577a675786f89593497804530d086</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcAddr</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>a8e6ca2ce04f482ba99ac4064f83a414d</anchor>
      <arglist>(const IPAddress &amp;srcAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getInterfaceId</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>a515a4dec5db0e383f24b7b02edc1cc4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInterfaceId</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>ad2c753e259f7539febeef85ab51e8580</anchor>
      <arglist>(int interfaceId_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getProtocol</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>abc3583742a6c5d439252c4b4432e6b6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProtocol</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>ac2a2013d2125ebfcbdd6ea9943eabd41</anchor>
      <arglist>(short protocol_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDiffServCodePoint</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>ab76e77441295feb27793ccf61e2bb1b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDiffServCodePoint</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>a6b397d2566b8c1edd55e190e2153e6b1</anchor>
      <arglist>(unsigned char diffServCodePoint_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getTimeToLive</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>a641a4542ecbde8d8f7594f4f8e59a024</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeToLive</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>a7b9cc1f1f4af955a350af4380d3fab40</anchor>
      <arglist>(short timeToLive_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getDontFragment</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>a1248859c2fd9d1f25deaaceb0978b073</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDontFragment</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>adc42945b111cd16cc1dfc9ae68abfbdb</anchor>
      <arglist>(bool dontFragment_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>ae40c6f695050133a91075521a4d7fb43</anchor>
      <arglist>(const IPControlInfo_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IPControlInfo_Base</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>a93dbdbf1d3d33a661f9286e1268a63ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IPControlInfo_Base</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>ab718b68a75ed47ee7ff156996b94e99d</anchor>
      <arglist>(const IPControlInfo_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IPControlInfo_Base &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>a3cb804b9b40636c63233e5ea4d4da261</anchor>
      <arglist>(const IPControlInfo_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>destAddr_var</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>ab629cf9fee6b4effce73d85c4775d484</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>srcAddr_var</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>a7a10546db851142f4becf04d5d7ddeda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>interfaceId_var</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>a37bfe3245fc12725d3d5549c16ae0859</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>protocol_var</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>ab01dbc462bbad8d0dec4aba5ebaedd5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>diffServCodePoint_var</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>a8251fc08464703edec4d13abcbceee11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>timeToLive_var</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>a5bf4192afa61c4d66fba54b984b42d0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dontFragment_var</name>
      <anchorfile>class_i_p_control_info___base.html</anchorfile>
      <anchor>ad789704a474151a380118e12e5fc3f44</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPDatagram</name>
    <filename>class_i_p_datagram.html</filename>
    <member kind="function">
      <type></type>
      <name>IPDatagram</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>aaa7937bcf7ff906c0a3b0e16eb04ecf7</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPDatagram</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>aab8761bc3618b940d3ee562f3792f3c6</anchor>
      <arglist>(const IPDatagram &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPDatagram</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a8a71868f2eccf0f583e5f15e140509f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPDatagram &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a8da6a55284fc303f0b3e29b58d319540</anchor>
      <arglist>(const IPDatagram &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPDatagram *</type>
      <name>dup</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>aad7b64959b4b9b49fa4b8a055617ef26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>aa3f5e8717089d7357952169b3a30a76f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a6dc0dd5ed0eaf157942a04b8e2502aba</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getVersion</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a5cd5b51d3ea7d588141f246143a1aa1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVersion</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a87b26a6a200d81397a6fff2f218538a5</anchor>
      <arglist>(short version_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getHeaderLength</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a0100f48fac56d2120992e17aa4d2bd94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHeaderLength</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a030d27dbe06f95e05ba9cacf39227c23</anchor>
      <arglist>(short headerLength_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getSrcAddress</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>ab024d29cffd3dbb1ba4d34fe64794cdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getSrcAddress</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a0bb50c931e94719bfc57a5cfb14f9c37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcAddress</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a73da24a23269e5d5023a4d739ad55c47</anchor>
      <arglist>(const IPAddress &amp;srcAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getDestAddress</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>afe5a14d5aefc5cc9e0ffeedb31a62d1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getDestAddress</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>ad1c29fc4433f4f9ba7d84d2c65f731e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestAddress</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a4a7dfd213cd9ca8769135dcd9c65808e</anchor>
      <arglist>(const IPAddress &amp;destAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTransportProtocol</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>acbe285538d27d18ab788c63399e81947</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransportProtocol</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a87b22d642646ba206ffa995067284667</anchor>
      <arglist>(int transportProtocol_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getTimeToLive</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a23537d19dc4d62f3473ec50c935158c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeToLive</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a33da9af7835675a51e1e0d838c4bf031</anchor>
      <arglist>(short timeToLive_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getIdentification</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a5cf746f10a37ea9791ba7af0d7ac395d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIdentification</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>ae50a335d132bfcd971ff65be5225a05a</anchor>
      <arglist>(int identification_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getMoreFragments</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a620a5d1cd681589c8c7491e8390c026f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMoreFragments</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>ac9bca138d1e854270e0459b00d142a2d</anchor>
      <arglist>(bool moreFragments_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getDontFragment</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a84f43430cf9f9ace8ca43727ae66d971</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDontFragment</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a4546716967bcd0466f9560f65f66408f</anchor>
      <arglist>(bool dontFragment_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getFragmentOffset</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>ae3a3aea8384750c538e9bebebbebb5d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFragmentOffset</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>ae44502948183315ba3a1527d8336a510</anchor>
      <arglist>(int fragmentOffset_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDiffServCodePoint</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a8db0b28c795d85734f1cfb9af7759100</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDiffServCodePoint</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a6da921922310d303616c9222ebe0d586</anchor>
      <arglist>(unsigned char diffServCodePoint_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getOptionCode</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>aed92b347081e7caacc43cf94c704bcfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOptionCode</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>ac05e4a90ca4ea00e57603f9578d60074</anchor>
      <arglist>(int optionCode_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPRecordRouteOption &amp;</type>
      <name>getRecordRoute</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a22522e802ef6f94b4ecb1c8df98d9691</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPRecordRouteOption &amp;</type>
      <name>getRecordRoute</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a154d8aedc2e6703d21ccda08c41f7b5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRecordRoute</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a57ae847dca60f4c2f5abcb8a5f59d601</anchor>
      <arglist>(const IPRecordRouteOption &amp;recordRoute_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPTimestampOption &amp;</type>
      <name>getTimestampOption</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a9216a57f57f7a70ab9b1a3a1408cd8ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPTimestampOption &amp;</type>
      <name>getTimestampOption</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>aea1d1794548146fc20a93f7fd5a42eb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimestampOption</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a0fd8099f6d625d2f6c1c920cd864c58b</anchor>
      <arglist>(const IPTimestampOption &amp;timestampOption_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPSourceRoutingOption &amp;</type>
      <name>getSourceRoutingOption</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>af50450ef572652cc1e505b14159834a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPSourceRoutingOption &amp;</type>
      <name>getSourceRoutingOption</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a147a2c0c469d4fac39b0f08853056b11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSourceRoutingOption</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a04dfa99ca9c0a9fa9f8dbff4262ccde9</anchor>
      <arglist>(const IPSourceRoutingOption &amp;sourceRoutingOption_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>aec6ee4725131536c5ad11fef079fc821</anchor>
      <arglist>(const IPDatagram &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>version_var</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>aa7e261c218b94d3170d9001a11b5f91c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>headerLength_var</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>ac417c962170e25d3c95df37e5922a0f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>srcAddress_var</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a3d31b30a756883c9dcb19419d9f5b4e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>destAddress_var</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a8f6e70789adefd9dd17af9a3bec07f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>transportProtocol_var</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a2003b654284ac321a0726cb49e83b2fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>timeToLive_var</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a463b6bd422615aaec0bdf8292600995d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>identification_var</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a2427f6afa56a2085cd2e2b49d89aeb48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>moreFragments_var</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>aeb5cacb8b667b1bc013f502ecc5ad00b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dontFragment_var</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a53b8b1f51f3e49729046ce01a7c2036e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>fragmentOffset_var</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a52c85bb3f25edf37070e7d26a66d2767</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>diffServCodePoint_var</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>ad18069c6fd01b47557c038580067d722</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>optionCode_var</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a55742264df9607442cb5fe622e073d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPRecordRouteOption</type>
      <name>recordRoute_var</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a85c68efde17026277bea42613bfb2732</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPTimestampOption</type>
      <name>timestampOption_var</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>ae26e7cdb1e51245977da597fa5195a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPSourceRoutingOption</type>
      <name>sourceRoutingOption_var</name>
      <anchorfile>class_i_p_datagram.html</anchorfile>
      <anchor>a7f7308642429abf6828bd72ca729bc53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPFragBuf</name>
    <filename>class_i_p_frag_buf.html</filename>
    <class kind="struct">IPFragBuf::DatagramBuffer</class>
    <class kind="struct">IPFragBuf::Key</class>
    <member kind="function">
      <type></type>
      <name>IPFragBuf</name>
      <anchorfile>class_i_p_frag_buf.html</anchorfile>
      <anchor>a1d5c7d18f22b68d42ce3d15d6e491d40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IPFragBuf</name>
      <anchorfile>class_i_p_frag_buf.html</anchorfile>
      <anchor>a0860714dc2ff94d3cfab43f93cd99b15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>class_i_p_frag_buf.html</anchorfile>
      <anchor>a8b14b7396af897ba524b9dd12b3fbb62</anchor>
      <arglist>(ICMP *icmp)</arglist>
    </member>
    <member kind="function">
      <type>IPDatagram *</type>
      <name>addFragment</name>
      <anchorfile>class_i_p_frag_buf.html</anchorfile>
      <anchor>ac588f7690cdfece4dee27548089ca8d5</anchor>
      <arglist>(IPDatagram *datagram, simtime_t now)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>purgeStaleFragments</name>
      <anchorfile>class_i_p_frag_buf.html</anchorfile>
      <anchor>afada1c8ed38a25d92af117281cc29087</anchor>
      <arglist>(simtime_t lastupdate)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; Key, DatagramBuffer &gt;</type>
      <name>Buffers</name>
      <anchorfile>class_i_p_frag_buf.html</anchorfile>
      <anchor>a807e978041805370492e9370c5dae429</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Buffers</type>
      <name>bufs</name>
      <anchorfile>class_i_p_frag_buf.html</anchorfile>
      <anchor>a875b19947209541943b77d4be36557e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ICMP *</type>
      <name>icmpModule</name>
      <anchorfile>class_i_p_frag_buf.html</anchorfile>
      <anchor>add5816e38f7a95150afe13e956859746</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPFragBuf::DatagramBuffer</name>
    <filename>struct_i_p_frag_buf_1_1_datagram_buffer.html</filename>
    <member kind="variable">
      <type>ReassemblyBuffer</type>
      <name>buf</name>
      <anchorfile>struct_i_p_frag_buf_1_1_datagram_buffer.html</anchorfile>
      <anchor>ae630183b02cbd243113d4590cb23d524</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPDatagram *</type>
      <name>datagram</name>
      <anchorfile>struct_i_p_frag_buf_1_1_datagram_buffer.html</anchorfile>
      <anchor>a02bc81644f4834fca96305ebc1a58e78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>lastupdate</name>
      <anchorfile>struct_i_p_frag_buf_1_1_datagram_buffer.html</anchorfile>
      <anchor>a7b5e98c35daaf5817e1d1ed64e86da43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPFragBuf::Key</name>
    <filename>struct_i_p_frag_buf_1_1_key.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>struct_i_p_frag_buf_1_1_key.html</anchorfile>
      <anchor>a366c86a2e931fcbc4899cacdbfac48c2</anchor>
      <arglist>(const Key &amp;b) const </arglist>
    </member>
    <member kind="variable">
      <type>ushort</type>
      <name>id</name>
      <anchorfile>struct_i_p_frag_buf_1_1_key.html</anchorfile>
      <anchor>a2b313fb7cc79cbcbef7c4196abde2e60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>src</name>
      <anchorfile>struct_i_p_frag_buf_1_1_key.html</anchorfile>
      <anchor>a34e1a14ebe3d82308fc42322912ccfb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>dest</name>
      <anchorfile>struct_i_p_frag_buf_1_1_key.html</anchorfile>
      <anchor>a516a19bb952f2d0e471d75759f722448</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPRecordRouteOption</name>
    <filename>class_i_p_record_route_option.html</filename>
    <member kind="function">
      <type></type>
      <name>IPRecordRouteOption</name>
      <anchorfile>class_i_p_record_route_option.html</anchorfile>
      <anchor>a3a01860e24dc331f6c6dec9c8000f782</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPRecordRouteOption</name>
      <anchorfile>class_i_p_record_route_option.html</anchorfile>
      <anchor>ac9738348f7ea52445b08a58668338915</anchor>
      <arglist>(const IPRecordRouteOption &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPRecordRouteOption</name>
      <anchorfile>class_i_p_record_route_option.html</anchorfile>
      <anchor>a7c0577683c304494f8d3efc6be1586eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPRecordRouteOption &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_p_record_route_option.html</anchorfile>
      <anchor>aa7aeee60002e232dd14b605c6ca87af0</anchor>
      <arglist>(const IPRecordRouteOption &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPRecordRouteOption *</type>
      <name>dup</name>
      <anchorfile>class_i_p_record_route_option.html</anchorfile>
      <anchor>a6a19975ee51df0d1216dbd35c5b8440b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_p_record_route_option.html</anchorfile>
      <anchor>a78ada5881685bb3283c2ecb126b5a07a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_p_record_route_option.html</anchorfile>
      <anchor>af1d5cba489bb8d8d67bc78934ebbb965</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getRecordAddressArraySize</name>
      <anchorfile>class_i_p_record_route_option.html</anchorfile>
      <anchor>aee83ebe714b896208ea383b640e52d9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getRecordAddress</name>
      <anchorfile>class_i_p_record_route_option.html</anchorfile>
      <anchor>a6851442e790505787b404c325cec2f0e</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getRecordAddress</name>
      <anchorfile>class_i_p_record_route_option.html</anchorfile>
      <anchor>a2ae832df80dc5ea65889eb2e993d4636</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRecordAddress</name>
      <anchorfile>class_i_p_record_route_option.html</anchorfile>
      <anchor>ad713d1bac63f1dc83bb8fde99ea811f9</anchor>
      <arglist>(unsigned int k, const IPAddress &amp;recordAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getNextAddressPtr</name>
      <anchorfile>class_i_p_record_route_option.html</anchorfile>
      <anchor>a8e646656c83418433b7f274f86555fef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNextAddressPtr</name>
      <anchorfile>class_i_p_record_route_option.html</anchorfile>
      <anchor>a31832d0e9da78e763b60d7c3797fddad</anchor>
      <arglist>(short nextAddressPtr_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_p_record_route_option.html</anchorfile>
      <anchor>a236bec906565db21ca2c90b612a62798</anchor>
      <arglist>(const IPRecordRouteOption &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>recordAddress_var</name>
      <anchorfile>class_i_p_record_route_option.html</anchorfile>
      <anchor>a3b18ea6488eb2ce654d2ea1114f29878</anchor>
      <arglist>[MAX_IPADDR_OPTION_ENTRIES]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>nextAddressPtr_var</name>
      <anchorfile>class_i_p_record_route_option.html</anchorfile>
      <anchor>a8c7e8242490ead019b7a8324a7d1da2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPRoute</name>
    <filename>class_i_p_route.html</filename>
    <member kind="enumeration">
      <name>RouteType</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>affdd22b24049e9d8d991b955a973d32e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIRECT</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>affdd22b24049e9d8d991b955a973d32eab46216a10952298ab9565997122d7225</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REMOTE</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>affdd22b24049e9d8d991b955a973d32ea7e558ac291a7e5173702d655d80e627c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>RouteSource</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>a8b19adf2d204de05cc8fdee67a270bc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MANUAL</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>a8b19adf2d204de05cc8fdee67a270bc6a504efea5aa79d898637d8be7a2c495ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IFACENETMASK</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>a8b19adf2d204de05cc8fdee67a270bc6a139cee28f42352771095a7db2de0b950</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RIP</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>a8b19adf2d204de05cc8fdee67a270bc6aa56c6e4ec8e910af1d341086c7daf092</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OSPF</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>a8b19adf2d204de05cc8fdee67a270bc6a2078753c4e756298431cc93e731c75b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BGP</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>a8b19adf2d204de05cc8fdee67a270bc6a4945eb6ebef5f1f9254f61cbdc93c415</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZEBRA</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>a8b19adf2d204de05cc8fdee67a270bc6a48e8100d6d47e22db2d8c974f773dd2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPRoute</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>af727c8f433018386b412de44f6b483b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPRoute</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>a4d74bf3e6e1a652b7903fa40f43fb23f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>a25fe6f145527f0119fa2719dc0c85a3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>af25d49ba64cebda570528bf025577a0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHost</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>af706d909f82600db0ff2191540131b91</anchor>
      <arglist>(IPAddress host)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNetmask</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>a8fd0ecc3020120431bae84d2eae7cc6a</anchor>
      <arglist>(IPAddress netmask)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGateway</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>aae76b34aab79a69caca7e19ad8f39f3f</anchor>
      <arglist>(IPAddress gateway)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInterface</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>a5111618dad4786d4fda4f770aacc5e41</anchor>
      <arglist>(InterfaceEntry *interfacePtr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setType</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>a545b92b4bd15e1dad59afba65344c6f1</anchor>
      <arglist>(RouteType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSource</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>a9e1a72084dc1acc1b429bbd8c4e72a32</anchor>
      <arglist>(RouteSource source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMetric</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>ae0d4294f3ad0d91b283f5da2b183335f</anchor>
      <arglist>(int metric)</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getHost</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>a07adcdcc04cb4d50f12f060c7206b73e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getNetmask</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>ad69bc8024a13bf6ec528e9afdf1aa7e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getGateway</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>aa1aa349eb850c0d9acb3f01ba0ee61d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>InterfaceEntry *</type>
      <name>getInterface</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>a1b01dfecb70fc9384695ce312dcab0a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getInterfaceName</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>a38dbdda8865be4489c587ee841e878ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RouteType</type>
      <name>getType</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>ae1e091d2b6a8492e36c3b7bac483e7af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RouteSource</type>
      <name>getSource</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>a31ed6dc28d4c3d3ec5a84fe87709ade5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMetric</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>aad5dba2f1d6ca6c2a9fff9db497391c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>host</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>adecfa89b59d560d315b189b727756944</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>netmask</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>a1d65733aeb95192a3ee30906c4d24751</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>gateway</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>a3f1704f44bad416e9821380b439b9d13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterfaceEntry *</type>
      <name>interfacePtr</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>a7cc4e815f703fda9a86e20a101b41310</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RouteType</type>
      <name>type</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>a3a3074769d5fca71c7679a9866619f35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RouteSource</type>
      <name>source</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>aa64c3c35306ce3e61f480542a023967a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>metric</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>ab5f45010a078aaf8f199388bf184f252</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>IPRoute</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>a875de335620963a831e2cb1561a6b858</anchor>
      <arglist>(const IPRoute &amp;obj)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>IPRoute &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_p_route.html</anchorfile>
      <anchor>a8206e1209c2234be0710c24388c37fc0</anchor>
      <arglist>(const IPRoute &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPRoutingDecision</name>
    <filename>class_i_p_routing_decision.html</filename>
    <member kind="function">
      <type></type>
      <name>IPRoutingDecision</name>
      <anchorfile>class_i_p_routing_decision.html</anchorfile>
      <anchor>a5b47adcc3f3aef54353c4a1a2c8898b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPRoutingDecision</name>
      <anchorfile>class_i_p_routing_decision.html</anchorfile>
      <anchor>a1f852c319e367c9a9e3d725a919601eb</anchor>
      <arglist>(const IPRoutingDecision &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPRoutingDecision</name>
      <anchorfile>class_i_p_routing_decision.html</anchorfile>
      <anchor>a53aabf9b6c0ffa0308ebcbdaf3260686</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPRoutingDecision &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_p_routing_decision.html</anchorfile>
      <anchor>ae8c7cefabbad5a76776b5587feea947e</anchor>
      <arglist>(const IPRoutingDecision &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPRoutingDecision *</type>
      <name>dup</name>
      <anchorfile>class_i_p_routing_decision.html</anchorfile>
      <anchor>a13e564349795c17e04fba598450f8a83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_p_routing_decision.html</anchorfile>
      <anchor>a3c922456850bdcd4eb8f86b28cabed13</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_p_routing_decision.html</anchorfile>
      <anchor>a7790e066211fd1a945374700c3f6c155</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getInterfaceId</name>
      <anchorfile>class_i_p_routing_decision.html</anchorfile>
      <anchor>a93d56054398ef2c4b5499a3b2ba81287</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInterfaceId</name>
      <anchorfile>class_i_p_routing_decision.html</anchorfile>
      <anchor>a2940f797dad9b18594d5ea9d334c6b29</anchor>
      <arglist>(int interfaceId_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getNextHopAddr</name>
      <anchorfile>class_i_p_routing_decision.html</anchorfile>
      <anchor>ac5772176ce5eff94bcbbdd70822a8985</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getNextHopAddr</name>
      <anchorfile>class_i_p_routing_decision.html</anchorfile>
      <anchor>a1477e5c39bc905f237161a4cefee1fb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNextHopAddr</name>
      <anchorfile>class_i_p_routing_decision.html</anchorfile>
      <anchor>aea5d998bf3689e1087ad86bd3c439392</anchor>
      <arglist>(const IPAddress &amp;nextHopAddr_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_p_routing_decision.html</anchorfile>
      <anchor>ab121ca0bd3754022a628e5d30299dcfc</anchor>
      <arglist>(const IPRoutingDecision &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>interfaceId_var</name>
      <anchorfile>class_i_p_routing_decision.html</anchorfile>
      <anchor>aad9264c4cf3e3a1d85c9c1c567acea85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>nextHopAddr_var</name>
      <anchorfile>class_i_p_routing_decision.html</anchorfile>
      <anchor>aa7ac6f538375a3ce5dd26288ed110ef1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPSerializer</name>
    <filename>class_i_p_serializer.html</filename>
    <member kind="function">
      <type></type>
      <name>IPSerializer</name>
      <anchorfile>class_i_p_serializer.html</anchorfile>
      <anchor>a1eb9ffe3e2f0ec578a5e775c97b95b8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>serialize</name>
      <anchorfile>class_i_p_serializer.html</anchorfile>
      <anchor>a92c164748ccd3346e0f6c156f56b0887</anchor>
      <arglist>(const IPDatagram *dgram, unsigned char *buf, unsigned int bufsize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>class_i_p_serializer.html</anchorfile>
      <anchor>a1d1662f970e5537475f840bd228b413b</anchor>
      <arglist>(const unsigned char *buf, unsigned int bufsize, IPDatagram *dest)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPSourceRoutingOption</name>
    <filename>class_i_p_source_routing_option.html</filename>
    <member kind="function">
      <type></type>
      <name>IPSourceRoutingOption</name>
      <anchorfile>class_i_p_source_routing_option.html</anchorfile>
      <anchor>af4f92ebb0c220465e4df859241420962</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPSourceRoutingOption</name>
      <anchorfile>class_i_p_source_routing_option.html</anchorfile>
      <anchor>a82c394a2d0af993efff48d8a01f59a9b</anchor>
      <arglist>(const IPSourceRoutingOption &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPSourceRoutingOption</name>
      <anchorfile>class_i_p_source_routing_option.html</anchorfile>
      <anchor>a10c7b3e399b21443e6126fb330cb6e69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPSourceRoutingOption &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_p_source_routing_option.html</anchorfile>
      <anchor>a9ed1c853b16c4c4d9555ff9fc1b11232</anchor>
      <arglist>(const IPSourceRoutingOption &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPSourceRoutingOption *</type>
      <name>dup</name>
      <anchorfile>class_i_p_source_routing_option.html</anchorfile>
      <anchor>a83e5e0783896a517e1e67d90bbdd9664</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_p_source_routing_option.html</anchorfile>
      <anchor>aed202a99ca3dacd6c27cfe2a5718b6a1</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_p_source_routing_option.html</anchorfile>
      <anchor>a86529f660c5d1413e0aa114afe37d084</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getRecordAddressArraySize</name>
      <anchorfile>class_i_p_source_routing_option.html</anchorfile>
      <anchor>a247aa2c8e006489ff1213385b21db571</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getRecordAddress</name>
      <anchorfile>class_i_p_source_routing_option.html</anchorfile>
      <anchor>ab9ee776a9df4446b4d58056469cce736</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getRecordAddress</name>
      <anchorfile>class_i_p_source_routing_option.html</anchorfile>
      <anchor>ada50fd254412f453f9b27b2a72963f24</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRecordAddress</name>
      <anchorfile>class_i_p_source_routing_option.html</anchorfile>
      <anchor>ac0e7b0a0e5b4c8433c488697626bebba</anchor>
      <arglist>(unsigned int k, const IPAddress &amp;recordAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getNextAddressPtr</name>
      <anchorfile>class_i_p_source_routing_option.html</anchorfile>
      <anchor>a23f83c763b33b3330c596edd21628659</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNextAddressPtr</name>
      <anchorfile>class_i_p_source_routing_option.html</anchorfile>
      <anchor>ae8d2eab53faab2c6ed3fc679a04da810</anchor>
      <arglist>(short nextAddressPtr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getLastAddressPtr</name>
      <anchorfile>class_i_p_source_routing_option.html</anchorfile>
      <anchor>a374ff2f71b07201cb4500ece7dabf5b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLastAddressPtr</name>
      <anchorfile>class_i_p_source_routing_option.html</anchorfile>
      <anchor>a0058d3b86082c010141b9c7d4c914a3c</anchor>
      <arglist>(short lastAddressPtr_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_p_source_routing_option.html</anchorfile>
      <anchor>ad7ae498518137d98440126d71e18e32b</anchor>
      <arglist>(const IPSourceRoutingOption &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>recordAddress_var</name>
      <anchorfile>class_i_p_source_routing_option.html</anchorfile>
      <anchor>a77afcfdf2b6719882479b0b6229c8d0b</anchor>
      <arglist>[MAX_IPADDR_OPTION_ENTRIES]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>nextAddressPtr_var</name>
      <anchorfile>class_i_p_source_routing_option.html</anchorfile>
      <anchor>a691a1f33caaa7c505770e99c2b77f68d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>lastAddressPtr_var</name>
      <anchorfile>class_i_p_source_routing_option.html</anchorfile>
      <anchor>a68ad0b8611adf8881abf3c7380398163</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPTimestampOption</name>
    <filename>class_i_p_timestamp_option.html</filename>
    <member kind="function">
      <type></type>
      <name>IPTimestampOption</name>
      <anchorfile>class_i_p_timestamp_option.html</anchorfile>
      <anchor>a0116c424805da73b6a7b5fb1d5f48e79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPTimestampOption</name>
      <anchorfile>class_i_p_timestamp_option.html</anchorfile>
      <anchor>a113bc3137f3dae4b7619103c221b31d8</anchor>
      <arglist>(const IPTimestampOption &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPTimestampOption</name>
      <anchorfile>class_i_p_timestamp_option.html</anchorfile>
      <anchor>a2706ddbf22d8ea6b89e6c561027a1d26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPTimestampOption &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_p_timestamp_option.html</anchorfile>
      <anchor>aa9e0ee4d9113fb4c7270303a841b632d</anchor>
      <arglist>(const IPTimestampOption &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPTimestampOption *</type>
      <name>dup</name>
      <anchorfile>class_i_p_timestamp_option.html</anchorfile>
      <anchor>ab750cd99c12d026b7b7ec823b04ef246</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_p_timestamp_option.html</anchorfile>
      <anchor>a8d3cfbabb604fe591bb27b3e20ec9513</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_p_timestamp_option.html</anchorfile>
      <anchor>a54da675a849049fc7402bf87b21ec4b9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getFlag</name>
      <anchorfile>class_i_p_timestamp_option.html</anchorfile>
      <anchor>a82fb19f605cfdb8862dff350e6107983</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFlag</name>
      <anchorfile>class_i_p_timestamp_option.html</anchorfile>
      <anchor>a821f5373609195d3119e1074308939d6</anchor>
      <arglist>(int flag_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getOverflow</name>
      <anchorfile>class_i_p_timestamp_option.html</anchorfile>
      <anchor>a0f8794545f77ba95e558e648b5772e3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOverflow</name>
      <anchorfile>class_i_p_timestamp_option.html</anchorfile>
      <anchor>af4a8d5fc13af7e732415f2aae54e5e1f</anchor>
      <arglist>(short overflow_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getNextAddressPtr</name>
      <anchorfile>class_i_p_timestamp_option.html</anchorfile>
      <anchor>a30aa2bde415291fe66bd4c4e3fd74aaa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNextAddressPtr</name>
      <anchorfile>class_i_p_timestamp_option.html</anchorfile>
      <anchor>a0f10f8118dc164f24256deb58203c91a</anchor>
      <arglist>(short nextAddressPtr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getRecordAddressArraySize</name>
      <anchorfile>class_i_p_timestamp_option.html</anchorfile>
      <anchor>a0cdaceb3e4cf41fe010bff08839c032d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getRecordAddress</name>
      <anchorfile>class_i_p_timestamp_option.html</anchorfile>
      <anchor>a5f71a0790a078ec8e1441edb2a0a7f00</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getRecordAddress</name>
      <anchorfile>class_i_p_timestamp_option.html</anchorfile>
      <anchor>a4cb6b2ec97dff2c9035010b3e59c3682</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRecordAddress</name>
      <anchorfile>class_i_p_timestamp_option.html</anchorfile>
      <anchor>a67ddde8338a5ef8fa2f72a65c1ff3fb8</anchor>
      <arglist>(unsigned int k, const IPAddress &amp;recordAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getRecordTimestampArraySize</name>
      <anchorfile>class_i_p_timestamp_option.html</anchorfile>
      <anchor>a130e35d2c5210736ea3437564addca30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getRecordTimestamp</name>
      <anchorfile>class_i_p_timestamp_option.html</anchorfile>
      <anchor>abfac241fcb5a4ddb0bcaf4e8c58c0cb6</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRecordTimestamp</name>
      <anchorfile>class_i_p_timestamp_option.html</anchorfile>
      <anchor>a6e60c7f10750a6e0b62fa2c5d2fd9c9f</anchor>
      <arglist>(unsigned int k, simtime_t recordTimestamp_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_p_timestamp_option.html</anchorfile>
      <anchor>a5f17441b141b62c4d88dae188e9582f0</anchor>
      <arglist>(const IPTimestampOption &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>flag_var</name>
      <anchorfile>class_i_p_timestamp_option.html</anchorfile>
      <anchor>a3f1f9df577aa193fb93197013cbe223b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>overflow_var</name>
      <anchorfile>class_i_p_timestamp_option.html</anchorfile>
      <anchor>ab3cd88ea58a62ed760d4b32463855f90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>nextAddressPtr_var</name>
      <anchorfile>class_i_p_timestamp_option.html</anchorfile>
      <anchor>a29ce1f0159b6f048428e5c0854b4d739</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>recordAddress_var</name>
      <anchorfile>class_i_p_timestamp_option.html</anchorfile>
      <anchor>ab18a65c63a9ac7ff8bda00105b5ba993</anchor>
      <arglist>[MAX_TIMESTAMP_OPTION_ENTRIES]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>recordTimestamp_var</name>
      <anchorfile>class_i_p_timestamp_option.html</anchorfile>
      <anchor>a015a1c2b559486b89a5c66e8324d08de</anchor>
      <arglist>[MAX_IPADDR_OPTION_ENTRIES]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPTrafGen</name>
    <filename>class_i_p_traf_gen.html</filename>
    <base>IPTrafSink</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IPvXAddress</type>
      <name>chooseDestAddr</name>
      <anchorfile>class_i_p_traf_gen.html</anchorfile>
      <anchor>a716871d5e067398bf7e43f7e2c5cdc2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendPacket</name>
      <anchorfile>class_i_p_traf_gen.html</anchorfile>
      <anchor>ae5e0ff98c204f5a1cf91d21e41ba2384</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_i_p_traf_gen.html</anchorfile>
      <anchor>abfc2235dd14990bc3a4dac46ebc12f5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_i_p_traf_gen.html</anchorfile>
      <anchor>a7abc90073c9870cec44d27b51cd9fad7</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_i_p_traf_gen.html</anchorfile>
      <anchor>ae12bff4d109f45122686074a7a889723</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>nodeName</name>
      <anchorfile>class_i_p_traf_gen.html</anchorfile>
      <anchor>a911e292731ecd63e2253f10161df815a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>protocol</name>
      <anchorfile>class_i_p_traf_gen.html</anchorfile>
      <anchor>a120d439d5e8600fec957ecfcb625516a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>msgByteLength</name>
      <anchorfile>class_i_p_traf_gen.html</anchorfile>
      <anchor>af592493e65cbc37c80e1a540b9b17c65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numPackets</name>
      <anchorfile>class_i_p_traf_gen.html</anchorfile>
      <anchor>a8acb50cfc1282923b2ced13d3ac993c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IPvXAddress &gt;</type>
      <name>destAddresses</name>
      <anchorfile>class_i_p_traf_gen.html</anchorfile>
      <anchor>a8c807e159ee1d78d823639e4dc6286ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numSent</name>
      <anchorfile>class_i_p_traf_gen.html</anchorfile>
      <anchor>a6bf7d9e834f7283d26289e7f9741449d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static int</type>
      <name>counter</name>
      <anchorfile>class_i_p_traf_gen.html</anchorfile>
      <anchor>ab8ac11d8cd4bcb1c1379d3555adb3789</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPTrafSink</name>
    <filename>class_i_p_traf_sink.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>printPacket</name>
      <anchorfile>class_i_p_traf_sink.html</anchorfile>
      <anchor>ae9fd82145b2b5a0b44a1676f4903b865</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPacket</name>
      <anchorfile>class_i_p_traf_sink.html</anchorfile>
      <anchor>a22c0515ba0bb000ee7a0f2a70510e9b2</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_i_p_traf_sink.html</anchorfile>
      <anchor>a0ed5171aaf98e2d08b385edbcd8f130d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_i_p_traf_sink.html</anchorfile>
      <anchor>a1a969e59bb76ab6c25a1277a473c74a1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numReceived</name>
      <anchorfile>class_i_p_traf_sink.html</anchorfile>
      <anchor>a97c4079b0d38885ec149ab468f999033</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv4InterfaceData</name>
    <filename>class_i_pv4_interface_data.html</filename>
    <base>InterfaceProtocolData</base>
    <member kind="typedef">
      <type>std::vector&lt; IPAddress &gt;</type>
      <name>IPAddressVector</name>
      <anchorfile>class_i_pv4_interface_data.html</anchorfile>
      <anchor>a9de10f3747920bc1c859f11e46a40aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv4InterfaceData</name>
      <anchorfile>class_i_pv4_interface_data.html</anchorfile>
      <anchor>a17082c9e07c91a4db33555fa09d84724</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv4InterfaceData</name>
      <anchorfile>class_i_pv4_interface_data.html</anchorfile>
      <anchor>a78ba683e92acec7b2a0f94f24a17593d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>class_i_pv4_interface_data.html</anchorfile>
      <anchor>a648f66b50587d2e304c8f2bca25f5bea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>class_i_pv4_interface_data.html</anchorfile>
      <anchor>a939ac478d6d15052f1f1b35cd58d7cb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getIPAddress</name>
      <anchorfile>class_i_pv4_interface_data.html</anchorfile>
      <anchor>aec8ebefd03acad479ac89d31d7228331</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getNetmask</name>
      <anchorfile>class_i_pv4_interface_data.html</anchorfile>
      <anchor>adcd91eac3ced30ab46a8ad5d481dbb58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMetric</name>
      <anchorfile>class_i_pv4_interface_data.html</anchorfile>
      <anchor>aac9f062b0ffa8b944b4c65eecbf5251c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IPAddressVector &amp;</type>
      <name>getMulticastGroups</name>
      <anchorfile>class_i_pv4_interface_data.html</anchorfile>
      <anchor>acd5bb7625e8978e62244d39d5d03f1cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMemberOfMulticastGroup</name>
      <anchorfile>class_i_pv4_interface_data.html</anchorfile>
      <anchor>af8dbb723c4d3d718ff378e5bf6c208e5</anchor>
      <arglist>(const IPAddress &amp;multicastAddress) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIPAddress</name>
      <anchorfile>class_i_pv4_interface_data.html</anchorfile>
      <anchor>a01673d0a7c6f0a3a3daddc83eb4c8aaa</anchor>
      <arglist>(IPAddress a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNetmask</name>
      <anchorfile>class_i_pv4_interface_data.html</anchorfile>
      <anchor>a70c7c157df5ca84e6dd72fd38d630a95</anchor>
      <arglist>(IPAddress m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMetric</name>
      <anchorfile>class_i_pv4_interface_data.html</anchorfile>
      <anchor>a05354e589ed8f221d74f81f276fb158e</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMulticastGroups</name>
      <anchorfile>class_i_pv4_interface_data.html</anchorfile>
      <anchor>af15165ccca3e66009644651a1ddd5c3e</anchor>
      <arglist>(const IPAddressVector &amp;v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>changed1</name>
      <anchorfile>class_i_pv4_interface_data.html</anchorfile>
      <anchor>a35cd1557f7ae356c474c13b9cc9411f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>inetAddr</name>
      <anchorfile>class_i_pv4_interface_data.html</anchorfile>
      <anchor>a47df4e186915ce7d7a428c904ef05251</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>netmask</name>
      <anchorfile>class_i_pv4_interface_data.html</anchorfile>
      <anchor>a5e91928a3d0ea1da8ef129d86610bfa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>metric</name>
      <anchorfile>class_i_pv4_interface_data.html</anchorfile>
      <anchor>a8a3884bc42fd3f82b8549b0275515caa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddressVector</type>
      <name>multicastGroups</name>
      <anchorfile>class_i_pv4_interface_data.html</anchorfile>
      <anchor>a4f1e8a8930086cc6c67ebadf627ade21</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>IPv4InterfaceData</name>
      <anchorfile>class_i_pv4_interface_data.html</anchorfile>
      <anchor>a14dee029343dbb47cb8f1a95d31f0fe8</anchor>
      <arglist>(const IPv4InterfaceData &amp;obj)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>IPv4InterfaceData &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_pv4_interface_data.html</anchorfile>
      <anchor>ae539e43ded359765ff4e9008d956fcb9</anchor>
      <arglist>(const IPv4InterfaceData &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6</name>
    <filename>class_i_pv6.html</filename>
    <base>QueueBase</base>
    <member kind="function">
      <type></type>
      <name>IPv6</name>
      <anchorfile>class_i_pv6.html</anchorfile>
      <anchor>afa4c6d6174f6efe890e6455e80c4373a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual InterfaceEntry *</type>
      <name>getSourceInterfaceFrom</name>
      <anchorfile>class_i_pv6.html</anchorfile>
      <anchor>a1264485b45281cf51e54aa6db4790072</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDisplayString</name>
      <anchorfile>class_i_pv6.html</anchorfile>
      <anchor>a477638c781f9e8d5b5722684359ef03f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IPv6Datagram *</type>
      <name>encapsulate</name>
      <anchorfile>class_i_pv6.html</anchorfile>
      <anchor>a77767db740051bc4aa5bd83b0cb078af</anchor>
      <arglist>(cPacket *transportPacket, InterfaceEntry *&amp;destIE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDatagramFromNetwork</name>
      <anchorfile>class_i_pv6.html</anchorfile>
      <anchor>ad512d80b98cc6a39cef47df5e679992c</anchor>
      <arglist>(IPv6Datagram *datagram)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessageFromHL</name>
      <anchorfile>class_i_pv6.html</anchorfile>
      <anchor>a7268e90e7ca92566bd209fdc00c090b6</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReceivedICMP</name>
      <anchorfile>class_i_pv6.html</anchorfile>
      <anchor>a8cc520cdb18b01334b04f2cd1268e370</anchor>
      <arglist>(ICMPv6Message *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fragmentAndRoute</name>
      <anchorfile>class_i_pv6.html</anchorfile>
      <anchor>a6bc7266ec57dc06de697562a5dcb9393</anchor>
      <arglist>(IPv6Datagram *datagram, InterfaceEntry *destIE=NULL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>routePacket</name>
      <anchorfile>class_i_pv6.html</anchorfile>
      <anchor>a33a99910431c17c57350ee894d9024e3</anchor>
      <arglist>(IPv6Datagram *datagram, InterfaceEntry *destIE, bool fromHL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>routeMulticastPacket</name>
      <anchorfile>class_i_pv6.html</anchorfile>
      <anchor>a41b8debbd2e25288671df769adb5d332</anchor>
      <arglist>(IPv6Datagram *datagram, InterfaceEntry *destIE, InterfaceEntry *fromIE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>isLocalAddress</name>
      <anchorfile>class_i_pv6.html</anchorfile>
      <anchor>a350ba82e187cad4313bea8e3bb5b4838</anchor>
      <arglist>(IPv6Datagram *datagram)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>decapsulate</name>
      <anchorfile>class_i_pv6.html</anchorfile>
      <anchor>af2e604305a9ff165129097c1cad62cb2</anchor>
      <arglist>(IPv6Datagram *datagram)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDatagramToOutput</name>
      <anchorfile>class_i_pv6.html</anchorfile>
      <anchor>a69b2be6aa31f567a504fc693a6a3c35e</anchor>
      <arglist>(IPv6Datagram *datagram, InterfaceEntry *ie, const MACAddress &amp;macAddr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_i_pv6.html</anchorfile>
      <anchor>a0efd6df6b67596cbf2fd0ed55cbe3b23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>endService</name>
      <anchorfile>class_i_pv6.html</anchorfile>
      <anchor>a4276e6135044f1b9f165ea8011040773</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IInterfaceTable *</type>
      <name>ift</name>
      <anchorfile>class_i_pv6.html</anchorfile>
      <anchor>a37ecb4fa0819c900cda91aafccf65984</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RoutingTable6 *</type>
      <name>rt</name>
      <anchorfile>class_i_pv6.html</anchorfile>
      <anchor>a73e92e962bcbd04ba0ea9ed4f8a4d4d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv6NeighbourDiscovery *</type>
      <name>nd</name>
      <anchorfile>class_i_pv6.html</anchorfile>
      <anchor>aced880e3fd1e6a51dbe3059e61655c5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ICMPv6 *</type>
      <name>icmp</name>
      <anchorfile>class_i_pv6.html</anchorfile>
      <anchor>a1f8a4682e5fbb085d113f3510d7f1c70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>curFragmentId</name>
      <anchorfile>class_i_pv6.html</anchorfile>
      <anchor>ab75def425a1fd61f881cd7232ca2c2e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv6FragBuf</type>
      <name>fragbuf</name>
      <anchorfile>class_i_pv6.html</anchorfile>
      <anchor>a0a166facf83745ebeac2d6afe8c804ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastCheckTime</name>
      <anchorfile>class_i_pv6.html</anchorfile>
      <anchor>a97e5efda0e71a87c0bbe75c1cc35ea7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProtocolMapping</type>
      <name>mapping</name>
      <anchorfile>class_i_pv6.html</anchorfile>
      <anchor>a1aba1acaafd79119c157bf8d9974979f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numMulticast</name>
      <anchorfile>class_i_pv6.html</anchorfile>
      <anchor>a553979ff6e4c9a408ab16462760cf59d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numLocalDeliver</name>
      <anchorfile>class_i_pv6.html</anchorfile>
      <anchor>a113ab197d6f585edd16ea021718d718f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numDropped</name>
      <anchorfile>class_i_pv6.html</anchorfile>
      <anchor>a48dd791376fb6ab1f9a819c067c92b5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numUnroutable</name>
      <anchorfile>class_i_pv6.html</anchorfile>
      <anchor>a6bbf6fb4fe90e967f0c2bac636dfceef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numForwarded</name>
      <anchorfile>class_i_pv6.html</anchorfile>
      <anchor>adff2dce8ef8518fa3621409103faf416</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6Address</name>
    <filename>class_i_pv6_address.html</filename>
    <member kind="enumeration">
      <name>Scope</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a228f9d2016a079d8680e6b93a4ce9778</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNSPECIFIED</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a228f9d2016a079d8680e6b93a4ce9778a18f474c2588cd71fbef3f07006390d7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOOPBACK</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a228f9d2016a079d8680e6b93a4ce9778a1830f008cbc09668fcf3a690e87e36c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MULTICAST</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a228f9d2016a079d8680e6b93a4ce9778a6e491ccbff7af76fe596036bea18978c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a228f9d2016a079d8680e6b93a4ce9778adcb14b74e4d4aa375dd4db23d19d3332</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SITE</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a228f9d2016a079d8680e6b93a4ce9778a20a0ca2d5505df212033e9c628657578</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GLOBAL</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a228f9d2016a079d8680e6b93a4ce9778a1afdb7b7efb0d8d1139ee2cf34077b93</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6Address</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a091e827de954eb1c395c906569805ede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6Address</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a759252c8a76d51c4d835f6d17fddf1e5</anchor>
      <arglist>(uint32 segment0, uint32 segment1, uint32 segment2, uint32 segment3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6Address</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>afce30159a58e16ff4a44ea68a7cd5b1a</anchor>
      <arglist>(const char *addr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a6a4baa0e807853164ae2146fbe99134d</anchor>
      <arglist>(const IPv6Address &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a77c16012f92cc1f501374fe32d433da6</anchor>
      <arglist>(const IPv6Address &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a5281130f1fea745ffb389db767d90ba9</anchor>
      <arglist>(const IPv6Address &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a2588e38727135e7b3603deb147109fc4</anchor>
      <arglist>(const IPv6Address &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a85e0ff7346a455454c337959e7f2ca26</anchor>
      <arglist>(const IPv6Address &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryParse</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a384e495d87184ff4306da4328707c32c</anchor>
      <arglist>(const char *addr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryParseAddrWithPrefix</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a55ffa37e2140d970b86e62d03b973ea2</anchor>
      <arglist>(const char *addr, int &amp;prefixLen)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a5560a79b66ee963af78b0a1dde71ce99</anchor>
      <arglist>(const char *addr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a7c42fb066db81588a439aed1de5e4b3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a0f96b12576a58d7d7276646bc2336be7</anchor>
      <arglist>(uint32 d0, uint32 d1, uint32 d2, uint32 d3)</arglist>
    </member>
    <member kind="function">
      <type>uint32 *</type>
      <name>words</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a36c9b020f0c21f5d2289466bdab62716</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const uint32 *</type>
      <name>words</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a4702667a0a119fff6899ae7e7c27e822</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scope</type>
      <name>getScope</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a7b47fefdfe99444721197fad4aa8de31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPv6Address</type>
      <name>getPrefix</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>afb604314abc5c3a3118e8c93d17e9201</anchor>
      <arglist>(int prefixLength) const </arglist>
    </member>
    <member kind="function">
      <type>IPv6Address</type>
      <name>getSuffix</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>aa982a6215bc1044af2072330500b6e33</anchor>
      <arglist>(int prefixLength) const </arglist>
    </member>
    <member kind="function">
      <type>const IPv6Address &amp;</type>
      <name>setPrefix</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a6820830388fdffcd01de42d2f9fe2762</anchor>
      <arglist>(const IPv6Address &amp;fromAddr, int prefixLength)</arglist>
    </member>
    <member kind="function">
      <type>const IPv6Address &amp;</type>
      <name>setSuffix</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>aef3dea13d2ff3c826e853cbecd25c413</anchor>
      <arglist>(const IPv6Address &amp;fromAddr, int prefixLength)</arglist>
    </member>
    <member kind="function">
      <type>IPv6Address</type>
      <name>formSolicitedNodeMulticastAddress</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>ab135c68c866eb93e17b4a8b070abf750</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPv6Address</type>
      <name>formSubnetRouterAnycastAddress</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a8b6563e274a116dd7108a300062399a2</anchor>
      <arglist>(int prefixLength) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matches</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a4d9102b52fcf98d1945c75a098bc678a</anchor>
      <arglist>(const IPv6Address &amp;prefix, int prefixLength) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnspecified</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>af526cffcc3a4aa5bb96d307de6e8d448</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMulticast</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a3c3bb6898821e044b12cf31911c90201</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnicast</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a052b40d4f11c907cfacd29462dd5e385</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLoopback</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a2a07372674c8a12ad46111be1fe1134e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLinkLocal</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a304edc5014ff3c991ae531aca21d2260</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSiteLocal</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a6848bd7b576ddd4b1445aad775ba09a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGlobal</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>aa2c2499a9e2ca1fd41b615d38654d8aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMulticastScope</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a38e774ffade5ca58c1191f743eaa0aca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>scopeName</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a7b5960c4ebf464e4c94cbe20556bb5ee</anchor>
      <arglist>(Scope s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>constructMask</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a0bcf37e66a36c5023d76050572a34fda</anchor>
      <arglist>(int prefixLength, uint32 *mask)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IPv6Address</type>
      <name>formLinkLocalAddress</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>aa8a3ef9e930a6703ea9cbde5a3ecaaca</anchor>
      <arglist>(const InterfaceToken &amp;ident)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPv6Address</type>
      <name>UNSPECIFIED_ADDRESS</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a0c1e137cb3b1470ec6b8d9a95e03dbe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPv6Address</type>
      <name>LOOPBACK_ADDRESS</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a0ca201480138fbe7578ff598baade998</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPv6Address</type>
      <name>ALL_NODES_1</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>affc233fad6ef60e013d37bd105a7d2fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPv6Address</type>
      <name>ALL_NODES_2</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>af71ff608917fe0fc14baf50d11815aeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPv6Address</type>
      <name>ALL_ROUTERS_1</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a6b3ccf4a474ef48fb87935d5d4f92c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPv6Address</type>
      <name>ALL_ROUTERS_2</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a3550339d4b3388eb3891c4744dca2aa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPv6Address</type>
      <name>ALL_ROUTERS_5</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>ae88319a24467c2ed45c6ef94c1105007</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPv6Address</type>
      <name>SOLICITED_NODE_PREFIX</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>a05683ca5f1a158a96c9a319314cb47bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPv6Address</type>
      <name>LINKLOCAL_PREFIX</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>ac34c13834df9731ffbdc909f98228df7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>doTryParse</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>ad96c293a63f814c05c360b46ad0f3e5b</anchor>
      <arglist>(const char *&amp;addr)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32</type>
      <name>d</name>
      <anchorfile>class_i_pv6_address.html</anchorfile>
      <anchor>aed8026051a70e4822bc40792f32351b0</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6AuthenticationHeader</name>
    <filename>class_i_pv6_authentication_header.html</filename>
    <base>IPv6ExtensionHeader</base>
    <member kind="function">
      <type></type>
      <name>IPv6AuthenticationHeader</name>
      <anchorfile>class_i_pv6_authentication_header.html</anchorfile>
      <anchor>ac346fe18e61f43ddff6b9af4492f14ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6AuthenticationHeader</name>
      <anchorfile>class_i_pv6_authentication_header.html</anchorfile>
      <anchor>a477036b0900b557c6b84a05dbbba973c</anchor>
      <arglist>(const IPv6AuthenticationHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6AuthenticationHeader</name>
      <anchorfile>class_i_pv6_authentication_header.html</anchorfile>
      <anchor>af44760fb5181b370c9e81d41b4e3a451</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPv6AuthenticationHeader &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_pv6_authentication_header.html</anchorfile>
      <anchor>ad33a3881045127295f85b1a14129fa40</anchor>
      <arglist>(const IPv6AuthenticationHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6AuthenticationHeader *</type>
      <name>dup</name>
      <anchorfile>class_i_pv6_authentication_header.html</anchorfile>
      <anchor>a84fcdb68405d599932d1a06cbe4d74c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_pv6_authentication_header.html</anchorfile>
      <anchor>af7844b115bfff8e60195c799f93af9d9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_pv6_authentication_header.html</anchorfile>
      <anchor>a830590e7f410bf44d69899e7fa5d91ec</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_pv6_authentication_header.html</anchorfile>
      <anchor>a711ec8325f8bd895334a240b7074b778</anchor>
      <arglist>(const IPv6AuthenticationHeader &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6ControlInfo</name>
    <filename>class_i_pv6_control_info.html</filename>
    <base>IPv6ControlInfo_Base</base>
    <member kind="function">
      <type></type>
      <name>IPv6ControlInfo</name>
      <anchorfile>class_i_pv6_control_info.html</anchorfile>
      <anchor>aa81240d82f83854783aca3534ef45682</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6ControlInfo</name>
      <anchorfile>class_i_pv6_control_info.html</anchorfile>
      <anchor>ac39f863caff01b2bb7b02cb74d8bdef5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6ControlInfo</name>
      <anchorfile>class_i_pv6_control_info.html</anchorfile>
      <anchor>af1ccfd7521552c72c314f08bf37695b9</anchor>
      <arglist>(const IPv6ControlInfo &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>IPv6ControlInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_pv6_control_info.html</anchorfile>
      <anchor>ad9a39bdf603b9b9ffb6d625f03b8d382</anchor>
      <arglist>(const IPv6ControlInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOrigDatagram</name>
      <anchorfile>class_i_pv6_control_info.html</anchorfile>
      <anchor>a00c040fcb7b5ff8b8a36cb8fbd405383</anchor>
      <arglist>(IPv6Datagram *d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6Datagram *</type>
      <name>getOrigDatagram</name>
      <anchorfile>class_i_pv6_control_info.html</anchorfile>
      <anchor>a8d8e46b9c684ec01e4fc4750a66509c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6Datagram *</type>
      <name>removeOrigDatagram</name>
      <anchorfile>class_i_pv6_control_info.html</anchorfile>
      <anchor>acd5e1deff05d96a52a3f7369270eb019</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv6Datagram *</type>
      <name>dgram</name>
      <anchorfile>class_i_pv6_control_info.html</anchorfile>
      <anchor>a651b1e1789c79ce6467104238eff50bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6ControlInfo_Base</name>
    <filename>class_i_pv6_control_info___base.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6ControlInfo_Base</name>
      <anchorfile>class_i_pv6_control_info___base.html</anchorfile>
      <anchor>aa343dd36558585a7ba31a8ddb3b3ba07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6ControlInfo_Base *</type>
      <name>dup</name>
      <anchorfile>class_i_pv6_control_info___base.html</anchorfile>
      <anchor>a663b4b6915a6bc639d601b816a66ec28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_pv6_control_info___base.html</anchorfile>
      <anchor>a119ae6f5b7a95e95057733f6cf189833</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_pv6_control_info___base.html</anchorfile>
      <anchor>a6e64893a803a9e03bea18ddf04e83a85</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getProtocol</name>
      <anchorfile>class_i_pv6_control_info___base.html</anchorfile>
      <anchor>a6ddd9db30da22159c80f34a5512f9833</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProtocol</name>
      <anchorfile>class_i_pv6_control_info___base.html</anchorfile>
      <anchor>a1d7bdca688829aec49c5ba5bcbbad43a</anchor>
      <arglist>(int protocol_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6Address &amp;</type>
      <name>getDestAddr</name>
      <anchorfile>class_i_pv6_control_info___base.html</anchorfile>
      <anchor>abd1d2c1cca62a40e351304d8584b4fd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv6Address &amp;</type>
      <name>getDestAddr</name>
      <anchorfile>class_i_pv6_control_info___base.html</anchorfile>
      <anchor>a42f94661b71dc7da8b78fa9c88781173</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestAddr</name>
      <anchorfile>class_i_pv6_control_info___base.html</anchorfile>
      <anchor>a33ad14801b514f598753f68ece7ccc27</anchor>
      <arglist>(const IPv6Address &amp;destAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6Address &amp;</type>
      <name>getSrcAddr</name>
      <anchorfile>class_i_pv6_control_info___base.html</anchorfile>
      <anchor>a8980bdcd6051ae3fe071bf2c18a0215e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv6Address &amp;</type>
      <name>getSrcAddr</name>
      <anchorfile>class_i_pv6_control_info___base.html</anchorfile>
      <anchor>a101ef3f1e232e16a72b4d08dc035abe2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcAddr</name>
      <anchorfile>class_i_pv6_control_info___base.html</anchorfile>
      <anchor>ae038bde950f03730e1765a4f037c9c17</anchor>
      <arglist>(const IPv6Address &amp;srcAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getHopLimit</name>
      <anchorfile>class_i_pv6_control_info___base.html</anchorfile>
      <anchor>a2eea197980c0c35518b3285ab9c123da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHopLimit</name>
      <anchorfile>class_i_pv6_control_info___base.html</anchorfile>
      <anchor>a1914e0065fc12407b7154ecab5a60e66</anchor>
      <arglist>(short hopLimit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getInterfaceId</name>
      <anchorfile>class_i_pv6_control_info___base.html</anchorfile>
      <anchor>a74046fa005d98f0c304eb39eb28a1ec3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInterfaceId</name>
      <anchorfile>class_i_pv6_control_info___base.html</anchorfile>
      <anchor>acd34348fa8a834c536b5122c2efb9eb2</anchor>
      <arglist>(int interfaceId_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_pv6_control_info___base.html</anchorfile>
      <anchor>a1252cfc083041699fd8c19897d71f674</anchor>
      <arglist>(const IPv6ControlInfo_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IPv6ControlInfo_Base</name>
      <anchorfile>class_i_pv6_control_info___base.html</anchorfile>
      <anchor>ad45da85c75fcdccebd263c736ca7554e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IPv6ControlInfo_Base</name>
      <anchorfile>class_i_pv6_control_info___base.html</anchorfile>
      <anchor>a1c7ed56786f244447c994ce77bd6a2ba</anchor>
      <arglist>(const IPv6ControlInfo_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IPv6ControlInfo_Base &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_pv6_control_info___base.html</anchorfile>
      <anchor>aa2dab8310917cf4f2e01fe05056489f9</anchor>
      <arglist>(const IPv6ControlInfo_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>protocol_var</name>
      <anchorfile>class_i_pv6_control_info___base.html</anchorfile>
      <anchor>a9864523f8ba46b6ab19479f18dbb7c21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPv6Address</type>
      <name>destAddr_var</name>
      <anchorfile>class_i_pv6_control_info___base.html</anchorfile>
      <anchor>a4ca2df1e71bcd5f92fb78e5af0477603</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPv6Address</type>
      <name>srcAddr_var</name>
      <anchorfile>class_i_pv6_control_info___base.html</anchorfile>
      <anchor>a777ee42c5b2a6bd4f6a36ee9a1c5e1cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>hopLimit_var</name>
      <anchorfile>class_i_pv6_control_info___base.html</anchorfile>
      <anchor>a821d7a72a22a8610c5f811536b8523c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>interfaceId_var</name>
      <anchorfile>class_i_pv6_control_info___base.html</anchorfile>
      <anchor>ad5f714d52207d584c832fd62a8547e2b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6Datagram</name>
    <filename>class_i_pv6_datagram.html</filename>
    <base>IPv6Datagram_Base</base>
    <member kind="function">
      <type></type>
      <name>IPv6Datagram</name>
      <anchorfile>class_i_pv6_datagram.html</anchorfile>
      <anchor>a72f90d8c52aa3ab1791594d4e8ca853d</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6Datagram</name>
      <anchorfile>class_i_pv6_datagram.html</anchorfile>
      <anchor>abac5b5f9f6cab881819314ae72a75bf3</anchor>
      <arglist>(const IPv6Datagram &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>IPv6Datagram &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_pv6_datagram.html</anchorfile>
      <anchor>a1b17a2a6e78bd09c14ee14f2b8f134a2</anchor>
      <arglist>(const IPv6Datagram &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6Datagram *</type>
      <name>dup</name>
      <anchorfile>class_i_pv6_datagram.html</anchorfile>
      <anchor>a75ed977234f31b060443effdf0328d6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExtensionHeaderArraySize</name>
      <anchorfile>class_i_pv6_datagram.html</anchorfile>
      <anchor>ad2b30f573c4c33400add3daca7de11ef</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExtensionHeader</name>
      <anchorfile>class_i_pv6_datagram.html</anchorfile>
      <anchor>a3a79381d2bd11f733724a4698a1c5fa5</anchor>
      <arglist>(unsigned int k, const IPv6ExtensionHeaderPtr &amp;extensionHeader_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getExtensionHeaderArraySize</name>
      <anchorfile>class_i_pv6_datagram.html</anchorfile>
      <anchor>a0048ad6c0e0c6e522a3fe0f7889d4208</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6ExtensionHeaderPtr &amp;</type>
      <name>getExtensionHeader</name>
      <anchorfile>class_i_pv6_datagram.html</anchorfile>
      <anchor>a7bbe21086bff37a24ea83af66d027ce6</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addExtensionHeader</name>
      <anchorfile>class_i_pv6_datagram.html</anchorfile>
      <anchor>a35eed0fdc3508385464c044ba4cf08c7</anchor>
      <arglist>(IPv6ExtensionHeader *eh, int atPos=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>calculateHeaderByteLength</name>
      <anchorfile>class_i_pv6_datagram.html</anchorfile>
      <anchor>a7c12eea2642c4f2530778573b7e5068f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; IPv6ExtensionHeader * &gt;</type>
      <name>ExtensionHeaders</name>
      <anchorfile>class_i_pv6_datagram.html</anchorfile>
      <anchor>a58355a800caeaf50387c320449931915</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExtensionHeaders</type>
      <name>extensionHeaders</name>
      <anchorfile>class_i_pv6_datagram.html</anchorfile>
      <anchor>ab71ee476618e4ba072da182ce2922c38</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6Datagram_Base</name>
    <filename>class_i_pv6_datagram___base.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6Datagram_Base</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>aa9af114e1b2d16fe528574ec0c42069c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6Datagram_Base *</type>
      <name>dup</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>a6c3b834b77b08f755cb73e8836d3538d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>a2ee4ef004eb2fe9eda7947c544121005</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>a340596304f36c0ddcd31b475fbd131df</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6Address &amp;</type>
      <name>getSrcAddress</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>aa9bdf8fb570741abc6a1611e204b7140</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv6Address &amp;</type>
      <name>getSrcAddress</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>aa839baa3fa7f1229e7e45032960e7d92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcAddress</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>af569fde42e3f249a964937e5df718f09</anchor>
      <arglist>(const IPv6Address &amp;srcAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6Address &amp;</type>
      <name>getDestAddress</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>ae8dcba44d11a32fef197cc663b026f05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv6Address &amp;</type>
      <name>getDestAddress</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>a9aef42b6035bcdbe10ca2d4fb684ea45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestAddress</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>ac011b324cd051a1dfd6c87ef44c1941f</anchor>
      <arglist>(const IPv6Address &amp;destAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getTrafficClass</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>a7b3f51662ab66941182f9cf0e9c8ce6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTrafficClass</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>a7629a006c024b6f488eaa3bfe415b480</anchor>
      <arglist>(unsigned int trafficClass_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getFlowLabel</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>afb2f9ce64ad2e4ccf717c76dc9eae8ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFlowLabel</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>a20c5a513f5bec0c1c6c1b7aed24c8bd4</anchor>
      <arglist>(unsigned int flowLabel_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getHopLimit</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>ad177ab2d5a086315b4f1e6ba3b02b75d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHopLimit</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>a67c14e023030be1ee86a83880e75e72c</anchor>
      <arglist>(short hopLimit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTransportProtocol</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>a59e20ccfddf021658a4e9d2bb4733437</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransportProtocol</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>a7e62966ed13bbe5ba9eaa8e9050c7a44</anchor>
      <arglist>(int transportProtocol_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExtensionHeaderArraySize</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>af1f333ce5c492370dda9a5d2432933e5</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getExtensionHeaderArraySize</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>a5b8614ed488c1f4550c0810d759f46b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6ExtensionHeaderPtr &amp;</type>
      <name>getExtensionHeader</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>aab7eb9bbb723c5b899d69fbca5ce13aa</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv6ExtensionHeaderPtr &amp;</type>
      <name>getExtensionHeader</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>abe74550ce37c14722a61b7dbff6ae614</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExtensionHeader</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>a11690a140858233c2f553882cfc33c0f</anchor>
      <arglist>(unsigned int k, const IPv6ExtensionHeaderPtr &amp;extensionHeader_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>a96b0af54ec9429e819a8609875fd1ba5</anchor>
      <arglist>(const IPv6Datagram_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IPv6Datagram_Base</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>a26eb9932c3cade22c89be2a0e2379c07</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IPv6Datagram_Base</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>a9c71c7b1ab5d29fb7e1c08ca81c465f8</anchor>
      <arglist>(const IPv6Datagram_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IPv6Datagram_Base &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>ae7cb7a4b6b4893d9ecdb5a7c714c7ef8</anchor>
      <arglist>(const IPv6Datagram_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPv6Address</type>
      <name>srcAddress_var</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>a65fac3bcfb2c0700a685e39060658306</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPv6Address</type>
      <name>destAddress_var</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>a61bf12c05768a4d1c32c1d8840e2586e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>trafficClass_var</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>ae9dc2f2a28c05f3f03f9dee06bd4aecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>flowLabel_var</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>a2a0f78b6c43f8ec5209e8be5efc3dc02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>hopLimit_var</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>a544c68f0480d648ff97548859edda4bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>transportProtocol_var</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>abb5a9275cf7bf927be7bdad21f4105ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPv6ExtensionHeaderPtr *</type>
      <name>extensionHeader_var</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>a87acf71fc6003cfbef9426ce3fbe098d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>extensionHeader_arraysize</name>
      <anchorfile>class_i_pv6_datagram___base.html</anchorfile>
      <anchor>a6baefc51a4febf3c77e26d34d0e92b6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6DestinationOptionsHeader</name>
    <filename>class_i_pv6_destination_options_header.html</filename>
    <base>IPv6ExtensionHeader</base>
    <member kind="function">
      <type></type>
      <name>IPv6DestinationOptionsHeader</name>
      <anchorfile>class_i_pv6_destination_options_header.html</anchorfile>
      <anchor>abed3256aeb7f466414fd43d2ef49b577</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6DestinationOptionsHeader</name>
      <anchorfile>class_i_pv6_destination_options_header.html</anchorfile>
      <anchor>aa8ed1d985aed4179ae00f5453a195779</anchor>
      <arglist>(const IPv6DestinationOptionsHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6DestinationOptionsHeader</name>
      <anchorfile>class_i_pv6_destination_options_header.html</anchorfile>
      <anchor>a0b0d44aa9bbc6f3ed0a1c77987fd5f07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPv6DestinationOptionsHeader &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_pv6_destination_options_header.html</anchorfile>
      <anchor>af7b7b57ffe0e02d027fffdeef1265ad5</anchor>
      <arglist>(const IPv6DestinationOptionsHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6DestinationOptionsHeader *</type>
      <name>dup</name>
      <anchorfile>class_i_pv6_destination_options_header.html</anchorfile>
      <anchor>a3d01ece0630a8ae083e36632818952a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_pv6_destination_options_header.html</anchorfile>
      <anchor>af993872ca31afd83b70547f02de48c61</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_pv6_destination_options_header.html</anchorfile>
      <anchor>a9476cb55f91b619cdd0ee3488276457c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_pv6_destination_options_header.html</anchorfile>
      <anchor>a43fd0446c3b714791e9df45c98e1079c</anchor>
      <arglist>(const IPv6DestinationOptionsHeader &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6EncapsulatingSecurityPayloadHeader</name>
    <filename>class_i_pv6_encapsulating_security_payload_header.html</filename>
    <base>IPv6ExtensionHeader</base>
    <member kind="function">
      <type></type>
      <name>IPv6EncapsulatingSecurityPayloadHeader</name>
      <anchorfile>class_i_pv6_encapsulating_security_payload_header.html</anchorfile>
      <anchor>a393c93fe4af8cdf107f02fb1551b3524</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6EncapsulatingSecurityPayloadHeader</name>
      <anchorfile>class_i_pv6_encapsulating_security_payload_header.html</anchorfile>
      <anchor>a9a6d11a8be2de1f4517359da0a581fb4</anchor>
      <arglist>(const IPv6EncapsulatingSecurityPayloadHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6EncapsulatingSecurityPayloadHeader</name>
      <anchorfile>class_i_pv6_encapsulating_security_payload_header.html</anchorfile>
      <anchor>ab8eff1b0689b0819ef62432d38b5e59b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPv6EncapsulatingSecurityPayloadHeader &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_pv6_encapsulating_security_payload_header.html</anchorfile>
      <anchor>a45ce2a30ad8e90752da8e7a460c18f8a</anchor>
      <arglist>(const IPv6EncapsulatingSecurityPayloadHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6EncapsulatingSecurityPayloadHeader *</type>
      <name>dup</name>
      <anchorfile>class_i_pv6_encapsulating_security_payload_header.html</anchorfile>
      <anchor>ad4871320fc0f33a1a2684f9cec28dd6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_pv6_encapsulating_security_payload_header.html</anchorfile>
      <anchor>ae2e9e1b693b83ffb9dc39efc70a8d687</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_pv6_encapsulating_security_payload_header.html</anchorfile>
      <anchor>a732bcc6bf530bf098960fed154609d68</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_pv6_encapsulating_security_payload_header.html</anchorfile>
      <anchor>a1fd966741b65f0d57b3aaf055ff0ce80</anchor>
      <arglist>(const IPv6EncapsulatingSecurityPayloadHeader &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6ErrorHandling</name>
    <filename>class_i_pv6_error_handling.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_i_pv6_error_handling.html</anchorfile>
      <anchor>a6bd5c3479675f5cd04d66ea30bc2d993</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_i_pv6_error_handling.html</anchorfile>
      <anchor>aa14e19d88fe0a3f7668002f211367ec7</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>displayType1Msg</name>
      <anchorfile>class_i_pv6_error_handling.html</anchorfile>
      <anchor>a84225f24fa74180ff315b6c661afc7c6</anchor>
      <arglist>(int code)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>displayType2Msg</name>
      <anchorfile>class_i_pv6_error_handling.html</anchorfile>
      <anchor>a8fbd250c0b95e3cc26e8543e34a301e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>displayType3Msg</name>
      <anchorfile>class_i_pv6_error_handling.html</anchorfile>
      <anchor>a676276c21195b8522882c84e6728e389</anchor>
      <arglist>(int code)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>displayType4Msg</name>
      <anchorfile>class_i_pv6_error_handling.html</anchorfile>
      <anchor>a9b448b402d4a6ea959c0a9c9da9f2826</anchor>
      <arglist>(int code)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6ExtensionHeader</name>
    <filename>class_i_pv6_extension_header.html</filename>
    <base>IPv6ExtensionHeader_Base</base>
    <member kind="function">
      <type></type>
      <name>IPv6ExtensionHeader</name>
      <anchorfile>class_i_pv6_extension_header.html</anchorfile>
      <anchor>ac8c81209273b2fc64a9bd8e7a0dba175</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6ExtensionHeader</name>
      <anchorfile>class_i_pv6_extension_header.html</anchorfile>
      <anchor>ae17c2f3c4a4c9604a14d58868ad4eacf</anchor>
      <arglist>(const IPv6ExtensionHeader &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>IPv6ExtensionHeader &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_pv6_extension_header.html</anchorfile>
      <anchor>ae2d871386f1b839b9c7cd3f796c6a0d0</anchor>
      <arglist>(const IPv6ExtensionHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6ExtensionHeader *</type>
      <name>dup</name>
      <anchorfile>class_i_pv6_extension_header.html</anchorfile>
      <anchor>af7b86511049aa37740060c0e095dbeb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPProtocolId</type>
      <name>getExtensionType</name>
      <anchorfile>class_i_pv6_extension_header.html</anchorfile>
      <anchor>a3647a005fae757817965df76574da51d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getByteLength</name>
      <anchorfile>class_i_pv6_extension_header.html</anchorfile>
      <anchor>a57cafd9d8b890dc8eb645bb71176e9ed</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6ExtensionHeader_Base</name>
    <filename>class_i_pv6_extension_header___base.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6ExtensionHeader_Base</name>
      <anchorfile>class_i_pv6_extension_header___base.html</anchorfile>
      <anchor>add9556b5aba592ecab60898a71dfc58a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6ExtensionHeader_Base *</type>
      <name>dup</name>
      <anchorfile>class_i_pv6_extension_header___base.html</anchorfile>
      <anchor>a8d3ee57ca043616bd28d735deb6dd2fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_pv6_extension_header___base.html</anchorfile>
      <anchor>a6d83ba0be8774d681d9aa65f84a15920</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_pv6_extension_header___base.html</anchorfile>
      <anchor>af72edfae1f99e0304990836b1e761fa8</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_pv6_extension_header___base.html</anchorfile>
      <anchor>af90e694ced64e667f4609d154823fc63</anchor>
      <arglist>(const IPv6ExtensionHeader_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IPv6ExtensionHeader_Base</name>
      <anchorfile>class_i_pv6_extension_header___base.html</anchorfile>
      <anchor>a957dfd7ce5c4a18fff776ba3427171a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IPv6ExtensionHeader_Base</name>
      <anchorfile>class_i_pv6_extension_header___base.html</anchorfile>
      <anchor>a00bfeef301b579038015212ce27329ee</anchor>
      <arglist>(const IPv6ExtensionHeader_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IPv6ExtensionHeader_Base &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_pv6_extension_header___base.html</anchorfile>
      <anchor>a397136d91142edce0b27433d6d3f97d4</anchor>
      <arglist>(const IPv6ExtensionHeader_Base &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6FragBuf</name>
    <filename>class_i_pv6_frag_buf.html</filename>
    <class kind="struct">IPv6FragBuf::DatagramBuffer</class>
    <class kind="struct">IPv6FragBuf::Key</class>
    <member kind="function">
      <type></type>
      <name>IPv6FragBuf</name>
      <anchorfile>class_i_pv6_frag_buf.html</anchorfile>
      <anchor>ae5bfc416e675d4711e81929b7545e7f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IPv6FragBuf</name>
      <anchorfile>class_i_pv6_frag_buf.html</anchorfile>
      <anchor>a8d71eb0719b4db249aeef7f5caa68747</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>class_i_pv6_frag_buf.html</anchorfile>
      <anchor>a5e003a9464934dcccfb1dbaedab07b8b</anchor>
      <arglist>(ICMPv6 *icmp)</arglist>
    </member>
    <member kind="function">
      <type>IPv6Datagram *</type>
      <name>addFragment</name>
      <anchorfile>class_i_pv6_frag_buf.html</anchorfile>
      <anchor>a41bf08bb1a8c81ea15a456b484a0cce5</anchor>
      <arglist>(IPv6Datagram *datagram, IPv6FragmentHeader *fh, simtime_t now)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>purgeStaleFragments</name>
      <anchorfile>class_i_pv6_frag_buf.html</anchorfile>
      <anchor>a49592f256181720463304a701cc6010f</anchor>
      <arglist>(simtime_t lastupdate)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; Key, DatagramBuffer &gt;</type>
      <name>Buffers</name>
      <anchorfile>class_i_pv6_frag_buf.html</anchorfile>
      <anchor>a21b8e22690c3d40deb7bf9a55b5b7b38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Buffers</type>
      <name>bufs</name>
      <anchorfile>class_i_pv6_frag_buf.html</anchorfile>
      <anchor>a054db87616c86c5e180b47d661767172</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ICMPv6 *</type>
      <name>icmpModule</name>
      <anchorfile>class_i_pv6_frag_buf.html</anchorfile>
      <anchor>abace170e35b4f517fc3feda4975516e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPv6FragBuf::DatagramBuffer</name>
    <filename>struct_i_pv6_frag_buf_1_1_datagram_buffer.html</filename>
    <member kind="variable">
      <type>ReassemblyBuffer</type>
      <name>buf</name>
      <anchorfile>struct_i_pv6_frag_buf_1_1_datagram_buffer.html</anchorfile>
      <anchor>ae0358920e0d43347727201163d269e8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPv6Datagram *</type>
      <name>datagram</name>
      <anchorfile>struct_i_pv6_frag_buf_1_1_datagram_buffer.html</anchorfile>
      <anchor>a6e56c72c04361af0d27a45b8ae0f1ba9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>lastupdate</name>
      <anchorfile>struct_i_pv6_frag_buf_1_1_datagram_buffer.html</anchorfile>
      <anchor>a9d9dd6d665620757a7187e041bf5f489</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPv6FragBuf::Key</name>
    <filename>struct_i_pv6_frag_buf_1_1_key.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>struct_i_pv6_frag_buf_1_1_key.html</anchorfile>
      <anchor>a9752fe9f4b355141fdef026bae9232a1</anchor>
      <arglist>(const Key &amp;b) const </arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>id</name>
      <anchorfile>struct_i_pv6_frag_buf_1_1_key.html</anchorfile>
      <anchor>a716a64c5784e53200ee5e5910e33add1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPv6Address</type>
      <name>src</name>
      <anchorfile>struct_i_pv6_frag_buf_1_1_key.html</anchorfile>
      <anchor>a32ad4bcb1df1b5964d05e692fa936440</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPv6Address</type>
      <name>dest</name>
      <anchorfile>struct_i_pv6_frag_buf_1_1_key.html</anchorfile>
      <anchor>aa4b8ff8a3865144c9b8032404aeb666f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6FragmentHeader</name>
    <filename>class_i_pv6_fragment_header.html</filename>
    <base>IPv6ExtensionHeader</base>
    <member kind="function">
      <type></type>
      <name>IPv6FragmentHeader</name>
      <anchorfile>class_i_pv6_fragment_header.html</anchorfile>
      <anchor>ad367f814e3d1b1cc77a938ba12d2f80f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6FragmentHeader</name>
      <anchorfile>class_i_pv6_fragment_header.html</anchorfile>
      <anchor>a921c6def159c650696b941a7a884be9d</anchor>
      <arglist>(const IPv6FragmentHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6FragmentHeader</name>
      <anchorfile>class_i_pv6_fragment_header.html</anchorfile>
      <anchor>af31e517e964b936839f74fa23e106b8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPv6FragmentHeader &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_pv6_fragment_header.html</anchorfile>
      <anchor>aef738f3bfafd08b233383d9f1bf07f24</anchor>
      <arglist>(const IPv6FragmentHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6FragmentHeader *</type>
      <name>dup</name>
      <anchorfile>class_i_pv6_fragment_header.html</anchorfile>
      <anchor>acc0b989f4a10503e09ea349ba0dae333</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_pv6_fragment_header.html</anchorfile>
      <anchor>ac1870596e252781c517b8e7d529448ef</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_pv6_fragment_header.html</anchorfile>
      <anchor>a0e01e521d421997dcc93979a265eb24b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getFragmentOffset</name>
      <anchorfile>class_i_pv6_fragment_header.html</anchorfile>
      <anchor>a92cf182cc83bc3c1357e69b01932af20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFragmentOffset</name>
      <anchorfile>class_i_pv6_fragment_header.html</anchorfile>
      <anchor>a675e60c4df976c838f5abb31f011f571</anchor>
      <arglist>(unsigned short fragmentOffset_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getIdentification</name>
      <anchorfile>class_i_pv6_fragment_header.html</anchorfile>
      <anchor>a386232c05da08ca0b97e961419874bd8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIdentification</name>
      <anchorfile>class_i_pv6_fragment_header.html</anchorfile>
      <anchor>a696376ff0ae6e5aaa2168b4c2b7f1a58</anchor>
      <arglist>(unsigned int identification_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getMoreFragments</name>
      <anchorfile>class_i_pv6_fragment_header.html</anchorfile>
      <anchor>a3c7479e0969d0a5fd07635f86d0b4b8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMoreFragments</name>
      <anchorfile>class_i_pv6_fragment_header.html</anchorfile>
      <anchor>a6763773ff8f179186abbdadf7965c962</anchor>
      <arglist>(bool moreFragments_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_pv6_fragment_header.html</anchorfile>
      <anchor>a8a1b3a2b6044b78e66a810eead077e85</anchor>
      <arglist>(const IPv6FragmentHeader &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>fragmentOffset_var</name>
      <anchorfile>class_i_pv6_fragment_header.html</anchorfile>
      <anchor>a249672d9cfb9ba497d3c49f39341c435</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>identification_var</name>
      <anchorfile>class_i_pv6_fragment_header.html</anchorfile>
      <anchor>a9facf139f874ff71bfea7e40a0db4be4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>moreFragments_var</name>
      <anchorfile>class_i_pv6_fragment_header.html</anchorfile>
      <anchor>a94a34822d136616c9275ddcce31a2534</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6HopByHopOptionsHeader</name>
    <filename>class_i_pv6_hop_by_hop_options_header.html</filename>
    <base>IPv6ExtensionHeader</base>
    <member kind="function">
      <type></type>
      <name>IPv6HopByHopOptionsHeader</name>
      <anchorfile>class_i_pv6_hop_by_hop_options_header.html</anchorfile>
      <anchor>a8b9048279b7fe6d038645c5efb10877f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6HopByHopOptionsHeader</name>
      <anchorfile>class_i_pv6_hop_by_hop_options_header.html</anchorfile>
      <anchor>a24a70d3ecf76511540cdc5f1d678a6d5</anchor>
      <arglist>(const IPv6HopByHopOptionsHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6HopByHopOptionsHeader</name>
      <anchorfile>class_i_pv6_hop_by_hop_options_header.html</anchorfile>
      <anchor>a5832e4ceb6603bb1d6ac9056162d2946</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPv6HopByHopOptionsHeader &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_pv6_hop_by_hop_options_header.html</anchorfile>
      <anchor>a9bc35e61e33e78cb64c5e7fe7b02dad6</anchor>
      <arglist>(const IPv6HopByHopOptionsHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6HopByHopOptionsHeader *</type>
      <name>dup</name>
      <anchorfile>class_i_pv6_hop_by_hop_options_header.html</anchorfile>
      <anchor>a4f4d3d13914930d899dd2dfba1a222c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_pv6_hop_by_hop_options_header.html</anchorfile>
      <anchor>af8c37d58cd19bbed6bf0ddd10decf3b3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_pv6_hop_by_hop_options_header.html</anchorfile>
      <anchor>a3236218a9a908bf2fc35246344a0b314</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_pv6_hop_by_hop_options_header.html</anchorfile>
      <anchor>a84aa5c8c2e5aaf426e9b74afb5f646bd</anchor>
      <arglist>(const IPv6HopByHopOptionsHeader &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6InterfaceData</name>
    <filename>class_i_pv6_interface_data.html</filename>
    <base>InterfaceProtocolData</base>
    <class kind="struct">IPv6InterfaceData::AddressData</class>
    <class kind="struct">IPv6InterfaceData::AdvPrefix</class>
    <class kind="struct">IPv6InterfaceData::HostConstants</class>
    <class kind="struct">IPv6InterfaceData::HostVariables</class>
    <class kind="struct">IPv6InterfaceData::NodeConstants</class>
    <class kind="struct">IPv6InterfaceData::NodeVariables</class>
    <class kind="struct">IPv6InterfaceData::RouterConstants</class>
    <class kind="struct">IPv6InterfaceData::RouterVariables</class>
    <member kind="function">
      <type></type>
      <name>IPv6InterfaceData</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a7b9f9cf5fe2617add34e1406f171e1c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6InterfaceData</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>ae0d2a53cf50794283b553cd028a3ca7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a62ef23ac89f9dad49b264162d4490d2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>detailedInfo</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a911ada1d93f16fdff25a2296d63f8907</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assignAddress</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a715b339dc41612149940ed0607af1535</anchor>
      <arglist>(const IPv6Address &amp;addr, bool tentative, simtime_t expiryTime, simtime_t prefExpiryTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateMatchingAddressExpiryTimes</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>aa16680b4dda7cfea9db4180b8926aafc</anchor>
      <arglist>(const IPv6Address &amp;prefix, int length, simtime_t expiryTime=0, simtime_t prefExpiryTime=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumAddresses</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>ae4fe7ab839b3c7f08226eed79f224103</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IPv6Address &amp;</type>
      <name>getAddress</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a908a45071d8685ebbb01f73bb086525b</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTentativeAddress</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a90fa17dc7efaa7170176e853cf32dfed</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAddress</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>af4856e5c4da3563e03fbc388db63ba8a</anchor>
      <arglist>(const IPv6Address &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matchesSolicitedNodeMulticastAddress</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>af4999b8a05ad79d0f97920b1d8a5cadd</anchor>
      <arglist>(const IPv6Address &amp;solNodeAddr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTentativeAddress</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a79cd84045961b7a2071c14e5e989baf6</anchor>
      <arglist>(const IPv6Address &amp;addr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>permanentlyAssign</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>aa80a8f0b2706a8622bab6b3ff61959ff</anchor>
      <arglist>(const IPv6Address &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>const IPv6Address &amp;</type>
      <name>getPreferredAddress</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a56f3fe4007e3df66dc88edd008f059b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IPv6Address &amp;</type>
      <name>getLinkLocalAddress</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a3b9fa2d8e186014cf9c758e45b5a56df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeAddress</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a437e44ce15e213a4ab3a09d69e0e39e1</anchor>
      <arglist>(const IPv6Address &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>_getMaxInitialRtrAdvertInterval</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a8588d9959f5ae174058183b0355a4d39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>_getMaxInitialRtrAdvertisements</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a4e7715a7d677ef59b7f2d61f6560de9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>_getMaxFinalRtrAdvertisements</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>ab8f5e55016efe3afd5a9b3a4e365593f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>_getMinDelayBetweenRAs</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a7b66a233bdbc5d336168ad38d495915c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>_getMaxRADelayTime</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a3049d46330724fba44165a5c6edf9801</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_setMaxInitialRtrAdvertInterval</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>affc5778a9388c960fe82497faed41e88</anchor>
      <arglist>(simtime_t d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_setMaxInitialRtrAdvertisements</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>ac1c629489cf43d906d89605f2ee3a7d9</anchor>
      <arglist>(uint d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_setMaxFinalRtrAdvertisements</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a9f9aff317334ff212a12b09427c7538a</anchor>
      <arglist>(uint d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_setMinDelayBetweenRAs</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a3b8daed09b620b7e9aede7d182629dfa</anchor>
      <arglist>(simtime_t d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_setMaxRADelayTime</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>aeb1d443fa795c1b964b7b77c0ebc59a3</anchor>
      <arglist>(simtime_t d)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>_getMaxRtrSolicitationDelay</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a517877f2a3d3d2ce80f08931a3b640ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>_getRtrSolicitationInterval</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>adf35c471f2a5fb67e59838754318a88e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>_getMaxRtrSolicitations</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a1a792673e93983d3d713738d2cce056a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_setMaxRtrSolicitationDelay</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a9573348d13f5cb31ecb6fce6e592e59b</anchor>
      <arglist>(simtime_t d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_setRtrSolicitationInterval</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a61f38f2ed11509791d2b5852085d2b8f</anchor>
      <arglist>(simtime_t d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_setMaxRtrSolicitations</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a7208bcdbd3872b80afecd752b4730770</anchor>
      <arglist>(uint d)</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>_getMaxMulticastSolicit</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>ab51df9712e16cb8bd1b0e12c58def7fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>_getMaxUnicastSolicit</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>af9eb8f221b38bd240ac1dcbf5b3917b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>_getMaxAnycastDelayTime</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>ad8bf3cf94afdb6ecca4d2109e944e0dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>_getMaxNeighbourAdvertisement</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a4b812ab8712ca0bb4683fba75d960695</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>_getReachableTime</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>ad383bc920fcd091c25c907478c1fd38e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>_getRetransTimer</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a089952430501d3e7a4f82481caf8be61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>_getDelayFirstProbeTime</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>ae2912d96f0836d18a8d5e869692c0189</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>_getMinRandomFactor</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>aca30a7ae2e7103501f3cdb975915e583</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>_getMaxRandomFactor</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>ab267510ba51a3a0f365a7730342251b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_setMaxMulticastSolicit</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a5e6d79f79269c18dd49ee856c6a273bb</anchor>
      <arglist>(uint d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_setMaxUnicastSolicit</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a6c7d113944566aa3d279e119577859cc</anchor>
      <arglist>(uint d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_setMaxAnycastDelayTime</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a6b0c7eb4ce81a7daf47e15671ebaa1d5</anchor>
      <arglist>(simtime_t d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_setMaxNeighbourAdvertisement</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>ab674deff3cd1229b8198925a64d63ba8</anchor>
      <arglist>(uint d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_setReachableTime</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a893d55e9ba85255b96e58bb448ff0190</anchor>
      <arglist>(simtime_t d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_setRetransTimer</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>aad31f4f86138dee65d8ad2e67e714289</anchor>
      <arglist>(simtime_t d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_setDelayFirstProbeTime</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>ae7a477f3072f069ead51e328eede5c02</anchor>
      <arglist>(simtime_t d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_setMinRandomFactor</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>ae2a884312a9985d5485631021773a4fb</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_setMaxRandomFactor</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a2b01bb9b46f5c199c117164c8699a392</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dupAddrDetectTransmits</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>af03b9246192fb2b01aaf7ff71f199429</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDupAddrDetectTransmits</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a613e9657975cd8f3c0e7e1e0f433e803</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>getLinkMTU</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>acbe15c3188a5aa9a670f6b43629753e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>getCurHopLimit</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a0e1178ac1f306ba2fcedf6e8feb0037a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>getBaseReachableTime</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a69b7f58dc3254e5f34f9722bae97b11f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getReachableTime</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>afe19d3650ea8762180d97b18d5b3c131</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>getRetransTimer</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>adac5ea11fce0cf45232ba3e4cd620368</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLinkMTU</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>ab04fe5f61223e8b1b69f1e027dd204f4</anchor>
      <arglist>(uint d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurHopLimit</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a1ea2f32f4ae7ebbfa060ea5af5b7c603</anchor>
      <arglist>(short d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBaseReachableTime</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>ae4305f5d17e9073b911ab750b3a4fb78</anchor>
      <arglist>(uint d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReachableTime</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>aa9a9bd84379adbe33bb06319f8e1e807</anchor>
      <arglist>(simtime_t d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRetransTimer</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>ae017519c2fb2144ad9e5827f12cb4740</anchor>
      <arglist>(uint d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAdvSendAdvertisements</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a3e629909076b47fa0886f83fbb7af09a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getMaxRtrAdvInterval</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a05d2457e8285b73350353863e796954b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getMinRtrAdvInterval</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a85b20115f117fb1038b72abf4ff27c51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAdvManagedFlag</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>acfc46f745ef81823d100eb3a7963a7df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAdvOtherConfigFlag</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a23b961a46f005c62250e29b4aa8565b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAdvLinkMTU</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>aa87caa67ed723589df2b9537bd379555</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAdvReachableTime</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a77d36585d5bdead9eef1e6d8234c3b9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAdvRetransTimer</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a2ee4d58abfaeece4ac3280bb775384bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>getAdvCurHopLimit</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a699fda5180c5b917e2263d2c9deb134c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getAdvDefaultLifetime</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a746f7532e0326a7d38c0b97811027a0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAdvSendAdvertisements</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a18958f1a76719473e9e2a0099032075f</anchor>
      <arglist>(bool d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMaxRtrAdvInterval</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>aab5cb9dbc801e930e6791b0cf9d21f89</anchor>
      <arglist>(simtime_t d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMinRtrAdvInterval</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>ae9ac588d242336be0e425145b6e15b8a</anchor>
      <arglist>(simtime_t d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAdvManagedFlag</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>ae1ea46844efd6acc62d5ea8a3ee73e4b</anchor>
      <arglist>(bool d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAdvOtherConfigFlag</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>acee465627641465489b09729b244113d</anchor>
      <arglist>(bool d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAdvLinkMTU</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>add02fa5dd018cd3e7eadec8b9d121e96</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAdvReachableTime</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a8519c56ed1914393af617db31e1b3ce4</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAdvRetransTimer</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>af49ddaf403de9dda7019bcdd12572d24</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAdvCurHopLimit</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>aa67d808850d9dce8eb90221931c562c5</anchor>
      <arglist>(short d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAdvDefaultLifetime</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a3e972282b5d5f3f49a7b71d2c8a97ea5</anchor>
      <arglist>(simtime_t d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addAdvPrefix</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>ac746c3ceb962985e4b6fb17364294e46</anchor>
      <arglist>(const AdvPrefix &amp;advPrefix)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumAdvPrefixes</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a1d84187cfbe9e91f7af79927c813f61c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AdvPrefix &amp;</type>
      <name>getAdvPrefix</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a90da8f012bd443c75e6e742bcf6f7d38</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAdvPrefix</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>ac2019a5236ec436e651749d7dd606da6</anchor>
      <arglist>(int i, const AdvPrefix &amp;advPrefix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeAdvPrefix</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>ad6ab006f857271af09529908e8b30e50</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>generateReachableTime</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a923ed5aa070331f87ff6a541387b046a</anchor>
      <arglist>(double MIN_RANDOM_FACTOR, double MAX_RANDOM_FACTOR, uint baseReachableTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>generateReachableTime</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>ac3d50428d2a67dd2af993ed511cbb34b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>RouterConstants</type>
      <name>routerConstants</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>ade7006e5d8993779eed6687d0e1a36d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HostConstants</type>
      <name>hostConstants</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a544cd7bde98f4327ae246a5f9034ce03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NodeConstants</type>
      <name>nodeConstants</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>ae12360f5c96b5625a133b7deb40506c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; AddressData &gt;</type>
      <name>AddressDataVector</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a0c6b22afbd87b48e6a34a73509f36bbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; AdvPrefix &gt;</type>
      <name>AdvPrefixList</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a5bd3ab222991f42720219cf5d3465311</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>findAddress</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a630bb376ea9083270af8c972f2119bef</anchor>
      <arglist>(const IPv6Address &amp;addr) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>choosePreferredAddress</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>ac52d535d5a69f85e82169a4430d93c9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>changed1</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a1a7aa1636c3ea81966921fbbc89a2b4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>addrLess</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>ab222ed1d1ae8dcc45a13d8be4d775c9e</anchor>
      <arglist>(const AddressData &amp;a, const AddressData &amp;b)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AddressDataVector</type>
      <name>addresses</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a1424f90ef631691a127cd261f7a30a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv6Address</type>
      <name>preferredAddr</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a51c199bb0a77c330de12e9a11987bfe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>preferredAddrExpiryTime</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a5b434735c115fad2ff3ac12bc83e0b2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeVariables</type>
      <name>nodeVars</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>aeccb17de93c1f0e9918bea697c506df1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HostVariables</type>
      <name>hostVars</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>ab76b41eef2f6b1d4ae46181a9102c3c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RouterVariables</type>
      <name>rtrVars</name>
      <anchorfile>class_i_pv6_interface_data.html</anchorfile>
      <anchor>a028dbd52736d9b88c70b3e7eb4e07060</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPv6InterfaceData::AddressData</name>
    <filename>struct_i_pv6_interface_data_1_1_address_data.html</filename>
    <member kind="variable">
      <type>IPv6Address</type>
      <name>address</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_address_data.html</anchorfile>
      <anchor>a24c1cbae987268bc8c3d0ad26d89e0a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>tentative</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_address_data.html</anchorfile>
      <anchor>adf03cb9d3c5604d79a84010137df65c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>expiryTime</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_address_data.html</anchorfile>
      <anchor>a3bdd385bdddd9ce756f0f66d886db84e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>prefExpiryTime</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_address_data.html</anchorfile>
      <anchor>aea7e8d5f0187d201ba1dc06d42518a78</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPv6InterfaceData::AdvPrefix</name>
    <filename>struct_i_pv6_interface_data_1_1_adv_prefix.html</filename>
    <member kind="variable">
      <type>IPv6Address</type>
      <name>prefix</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_adv_prefix.html</anchorfile>
      <anchor>a8dbd979f7860762721b55d4793629258</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>prefixLength</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_adv_prefix.html</anchorfile>
      <anchor>a8e68016dcc5cb215199e7f61402f854b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>advValidLifetime</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_adv_prefix.html</anchorfile>
      <anchor>a8a0703cb25c21fb9db5e7a4408e40680</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>advOnLinkFlag</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_adv_prefix.html</anchorfile>
      <anchor>a9c2fa49f3db59393e76c08e022c4e12c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>advPreferredLifetime</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_adv_prefix.html</anchorfile>
      <anchor>a0df07072856386db3465443deffacd6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>advAutonomousFlag</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_adv_prefix.html</anchorfile>
      <anchor>ac593127a85f0ced6a4f8d9c0aee2184d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPv6InterfaceData::HostConstants</name>
    <filename>struct_i_pv6_interface_data_1_1_host_constants.html</filename>
    <member kind="variable">
      <type>simtime_t</type>
      <name>maxRtrSolicitationDelay</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_host_constants.html</anchorfile>
      <anchor>a68fdcb5962201c78d92fdeae720162a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>rtrSolicitationInterval</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_host_constants.html</anchorfile>
      <anchor>a8ff46db385a74e79873ba54566981434</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>maxRtrSolicitations</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_host_constants.html</anchorfile>
      <anchor>a28d73773cca113b162d00f427703ce0d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPv6InterfaceData::HostVariables</name>
    <filename>struct_i_pv6_interface_data_1_1_host_variables.html</filename>
    <member kind="variable">
      <type>uint</type>
      <name>linkMTU</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_host_variables.html</anchorfile>
      <anchor>aef57f26d1a998ce69fd079a5e9c10418</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>curHopLimit</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_host_variables.html</anchorfile>
      <anchor>abf74228e3e07ad759fb432d82c7f5686</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint</type>
      <name>baseReachableTime</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_host_variables.html</anchorfile>
      <anchor>ac7d027da3efe4e6c3b46c6118054674a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>reachableTime</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_host_variables.html</anchorfile>
      <anchor>a0b000870b19d2fbf5f2954e8076e54aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint</type>
      <name>retransTimer</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_host_variables.html</anchorfile>
      <anchor>a26b5114e9941885ee48b53d25f817eb6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPv6InterfaceData::NodeConstants</name>
    <filename>struct_i_pv6_interface_data_1_1_node_constants.html</filename>
    <member kind="variable">
      <type>uint</type>
      <name>maxMulticastSolicit</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_node_constants.html</anchorfile>
      <anchor>ad7680713389e1eb7ea32cae3926e1aa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint</type>
      <name>maxUnicastSolicit</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_node_constants.html</anchorfile>
      <anchor>ae759848b870f04ef4c2934a25f8a9052</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>maxAnycastDelayTime</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_node_constants.html</anchorfile>
      <anchor>a6a2847d5bb8799e0797b52b82f16dc38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint</type>
      <name>maxNeighbourAdvertisement</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_node_constants.html</anchorfile>
      <anchor>a8808a99ca97f855cb437b8393253b392</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>reachableTime</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_node_constants.html</anchorfile>
      <anchor>aefc8889027628f734dc2cc3a853f52c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>retransTimer</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_node_constants.html</anchorfile>
      <anchor>a4aafd9c823aa14cbbddfab3522394109</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>delayFirstProbeTime</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_node_constants.html</anchorfile>
      <anchor>a1970fbe47f627139cd31324948b111ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>minRandomFactor</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_node_constants.html</anchorfile>
      <anchor>aae2d60a0fea2633d552775c282baa8da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxRandomFactor</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_node_constants.html</anchorfile>
      <anchor>a8af95cded39efe3dfa393535390ddec2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPv6InterfaceData::NodeVariables</name>
    <filename>struct_i_pv6_interface_data_1_1_node_variables.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>dupAddrDetectTransmits</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_node_variables.html</anchorfile>
      <anchor>a11212e703b5efa812080a0f0b7320c6e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPv6InterfaceData::RouterConstants</name>
    <filename>struct_i_pv6_interface_data_1_1_router_constants.html</filename>
    <member kind="variable">
      <type>simtime_t</type>
      <name>maxInitialRtrAdvertInterval</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_router_constants.html</anchorfile>
      <anchor>a6ece40623bed64026cdd470d1d5d773c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint</type>
      <name>maxInitialRtrAdvertisements</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_router_constants.html</anchorfile>
      <anchor>a92787eccac285a5cc7943cdaf202efaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint</type>
      <name>maxFinalRtrAdvertisements</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_router_constants.html</anchorfile>
      <anchor>a465e10ad6b15f0c7c518330ac9d92657</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>minDelayBetweenRAs</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_router_constants.html</anchorfile>
      <anchor>a6e0b4395f122714cb337fa86ccfde3a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>maxRADelayTime</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_router_constants.html</anchorfile>
      <anchor>ac0ce6e88ee224128577b933db89bd0b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPv6InterfaceData::RouterVariables</name>
    <filename>struct_i_pv6_interface_data_1_1_router_variables.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>advSendAdvertisements</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_router_variables.html</anchorfile>
      <anchor>a60aee6820de8f99673a5256c71622cf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>maxRtrAdvInterval</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_router_variables.html</anchorfile>
      <anchor>a401cc0d652b0a941accbe97267e77c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>minRtrAdvInterval</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_router_variables.html</anchorfile>
      <anchor>a891bfc602a6b5cf6f2b3bfc30d02f880</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>advManagedFlag</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_router_variables.html</anchorfile>
      <anchor>a25029f63b9e35bb72c3c87af6fd474f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>advOtherConfigFlag</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_router_variables.html</anchorfile>
      <anchor>a1bbbccee68bc83fdd292e81ee7e7a3a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>advLinkMTU</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_router_variables.html</anchorfile>
      <anchor>ab4c7375ade239e5b6a63c92ae5d853ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>advReachableTime</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_router_variables.html</anchorfile>
      <anchor>ab0be30ab20ed2f3b56512fb1f638d98e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>advRetransTimer</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_router_variables.html</anchorfile>
      <anchor>aab0ef6489fac1b8eb7726b5efeb8c5ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>advCurHopLimit</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_router_variables.html</anchorfile>
      <anchor>a455c81f2122f873520d2e581bf15c91c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>advDefaultLifetime</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_router_variables.html</anchorfile>
      <anchor>a1f5959b2997c2f33356d92232f867ee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdvPrefixList</type>
      <name>advPrefixList</name>
      <anchorfile>struct_i_pv6_interface_data_1_1_router_variables.html</anchorfile>
      <anchor>a7a6e56c729a9ecf1aee93106bfb245ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6NDMessage</name>
    <filename>class_i_pv6_n_d_message.html</filename>
    <base>ICMPv6Message</base>
    <member kind="function">
      <type></type>
      <name>IPv6NDMessage</name>
      <anchorfile>class_i_pv6_n_d_message.html</anchorfile>
      <anchor>aa715fc723c9339e5fea3b807f85d9f5e</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6NDMessage</name>
      <anchorfile>class_i_pv6_n_d_message.html</anchorfile>
      <anchor>a2b69fb112f23f800be884d65983124c5</anchor>
      <arglist>(const IPv6NDMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6NDMessage</name>
      <anchorfile>class_i_pv6_n_d_message.html</anchorfile>
      <anchor>aba7664d3b91ce00943872d90e256eed9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPv6NDMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_pv6_n_d_message.html</anchorfile>
      <anchor>a6984a27280f06bd025f8d02134eda3e1</anchor>
      <arglist>(const IPv6NDMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6NDMessage *</type>
      <name>dup</name>
      <anchorfile>class_i_pv6_n_d_message.html</anchorfile>
      <anchor>a489dc4dd2a7072ceb9ddff61eae7af4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_pv6_n_d_message.html</anchorfile>
      <anchor>a7bcc2ee1849c6335fb1e93afd3cd93ea</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_pv6_n_d_message.html</anchorfile>
      <anchor>aafcf311847293582ed965e083d34524d</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCode</name>
      <anchorfile>class_i_pv6_n_d_message.html</anchorfile>
      <anchor>ace6fdf7f4c486ae17415d189828370b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCode</name>
      <anchorfile>class_i_pv6_n_d_message.html</anchorfile>
      <anchor>a4f3a77f2ede35511c34b66c22747d078</anchor>
      <arglist>(int code_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_pv6_n_d_message.html</anchorfile>
      <anchor>a80edef17920c4b80e0857878704657d3</anchor>
      <arglist>(const IPv6NDMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>code_var</name>
      <anchorfile>class_i_pv6_n_d_message.html</anchorfile>
      <anchor>af84e2593b6468d869754ffa279492231</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6NDPrefixInformation</name>
    <filename>class_i_pv6_n_d_prefix_information.html</filename>
    <member kind="function">
      <type></type>
      <name>IPv6NDPrefixInformation</name>
      <anchorfile>class_i_pv6_n_d_prefix_information.html</anchorfile>
      <anchor>a1c4ab90d2761e4792923b25f8d6d0736</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6NDPrefixInformation</name>
      <anchorfile>class_i_pv6_n_d_prefix_information.html</anchorfile>
      <anchor>a9d64b18eb36c4bccb4bd1d03d85ce4a9</anchor>
      <arglist>(const IPv6NDPrefixInformation &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6NDPrefixInformation</name>
      <anchorfile>class_i_pv6_n_d_prefix_information.html</anchorfile>
      <anchor>a17dcc9065f93a9a52676b3831ccc3f50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPv6NDPrefixInformation &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_pv6_n_d_prefix_information.html</anchorfile>
      <anchor>a3c2249311d9a964e649da524f4f1d75a</anchor>
      <arglist>(const IPv6NDPrefixInformation &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6NDPrefixInformation *</type>
      <name>dup</name>
      <anchorfile>class_i_pv6_n_d_prefix_information.html</anchorfile>
      <anchor>a85e4e5eb9fc4ad5b44112c026231ce61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_pv6_n_d_prefix_information.html</anchorfile>
      <anchor>ad465a2e96a3a9bbfd1201fc1d1029109</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_pv6_n_d_prefix_information.html</anchorfile>
      <anchor>a58f3a5ad2989eab11c99fbea55ae9444</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getPrefixLength</name>
      <anchorfile>class_i_pv6_n_d_prefix_information.html</anchorfile>
      <anchor>a6660082e882c5e64e664b352d2fe31d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPrefixLength</name>
      <anchorfile>class_i_pv6_n_d_prefix_information.html</anchorfile>
      <anchor>a4d76e035c7e2c841a01df0b98dd86500</anchor>
      <arglist>(unsigned int prefixLength_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getOnlinkFlag</name>
      <anchorfile>class_i_pv6_n_d_prefix_information.html</anchorfile>
      <anchor>a62f9e56892d77b017288a1461d8edba1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOnlinkFlag</name>
      <anchorfile>class_i_pv6_n_d_prefix_information.html</anchorfile>
      <anchor>aa80e788d0e61e52b008e4f283d4a6fe6</anchor>
      <arglist>(bool onlinkFlag_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getAutoAddressConfFlag</name>
      <anchorfile>class_i_pv6_n_d_prefix_information.html</anchorfile>
      <anchor>a8d2e5ddefb6960d75a594dad8574c1c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAutoAddressConfFlag</name>
      <anchorfile>class_i_pv6_n_d_prefix_information.html</anchorfile>
      <anchor>a5247c9a5baf068373af1fb9b50962de2</anchor>
      <arglist>(bool autoAddressConfFlag_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getValidLifetime</name>
      <anchorfile>class_i_pv6_n_d_prefix_information.html</anchorfile>
      <anchor>a93e32dbccf0d60cff0269f4450d6323e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValidLifetime</name>
      <anchorfile>class_i_pv6_n_d_prefix_information.html</anchorfile>
      <anchor>a696a7ab600d90af60d406fdad76ffd62</anchor>
      <arglist>(unsigned int validLifetime_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getPreferredLifetime</name>
      <anchorfile>class_i_pv6_n_d_prefix_information.html</anchorfile>
      <anchor>a4bbcfaafccb44d3e136cd17627f46641</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPreferredLifetime</name>
      <anchorfile>class_i_pv6_n_d_prefix_information.html</anchorfile>
      <anchor>ac8080f673ec16809812d35641f41d2ce</anchor>
      <arglist>(unsigned int preferredLifetime_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6Address &amp;</type>
      <name>getPrefix</name>
      <anchorfile>class_i_pv6_n_d_prefix_information.html</anchorfile>
      <anchor>a769743b8ab554bc69cc0830652aa5c1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv6Address &amp;</type>
      <name>getPrefix</name>
      <anchorfile>class_i_pv6_n_d_prefix_information.html</anchorfile>
      <anchor>ab28bf9f262b8a4c21a29d4b6ab5a9682</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPrefix</name>
      <anchorfile>class_i_pv6_n_d_prefix_information.html</anchorfile>
      <anchor>a893113243b4b0e77907820eee3cf88e2</anchor>
      <arglist>(const IPv6Address &amp;prefix_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_pv6_n_d_prefix_information.html</anchorfile>
      <anchor>a6479c457df819f13d609283454fc6cc1</anchor>
      <arglist>(const IPv6NDPrefixInformation &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>prefixLength_var</name>
      <anchorfile>class_i_pv6_n_d_prefix_information.html</anchorfile>
      <anchor>a638ebb456f843b5a7d15d31fd28defbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>onlinkFlag_var</name>
      <anchorfile>class_i_pv6_n_d_prefix_information.html</anchorfile>
      <anchor>a76f21803772dbd66980b469ba05f3c87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>autoAddressConfFlag_var</name>
      <anchorfile>class_i_pv6_n_d_prefix_information.html</anchorfile>
      <anchor>a0b3afb937700ccb26ee19833c9be0065</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>validLifetime_var</name>
      <anchorfile>class_i_pv6_n_d_prefix_information.html</anchorfile>
      <anchor>a3b32dc365d1ae8b5ab1c06ad973a6758</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>preferredLifetime_var</name>
      <anchorfile>class_i_pv6_n_d_prefix_information.html</anchorfile>
      <anchor>ac43d47e5d52a9ad28fe4eaad9197aa09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPv6Address</type>
      <name>prefix_var</name>
      <anchorfile>class_i_pv6_n_d_prefix_information.html</anchorfile>
      <anchor>ae7d27d8f1abe543db2213a4812099f1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6NeighbourAdvertisement</name>
    <filename>class_i_pv6_neighbour_advertisement.html</filename>
    <base>IPv6NDMessage</base>
    <member kind="function">
      <type></type>
      <name>IPv6NeighbourAdvertisement</name>
      <anchorfile>class_i_pv6_neighbour_advertisement.html</anchorfile>
      <anchor>a26d5e786aaac4787568fc8eb5e7c7a8f</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6NeighbourAdvertisement</name>
      <anchorfile>class_i_pv6_neighbour_advertisement.html</anchorfile>
      <anchor>a5a7855b10c9a2d558e33294f8538b02b</anchor>
      <arglist>(const IPv6NeighbourAdvertisement &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6NeighbourAdvertisement</name>
      <anchorfile>class_i_pv6_neighbour_advertisement.html</anchorfile>
      <anchor>a0f32b63bc810ab5c925afdf7636e8c8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPv6NeighbourAdvertisement &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_pv6_neighbour_advertisement.html</anchorfile>
      <anchor>a5d44fdc37e3bce823fe71d7ebc4c25d4</anchor>
      <arglist>(const IPv6NeighbourAdvertisement &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6NeighbourAdvertisement *</type>
      <name>dup</name>
      <anchorfile>class_i_pv6_neighbour_advertisement.html</anchorfile>
      <anchor>a1d47e286ee957ea3bb4e39ecef1942a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_pv6_neighbour_advertisement.html</anchorfile>
      <anchor>a9f1bb656679dac90cf2fa724cbbda81b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_pv6_neighbour_advertisement.html</anchorfile>
      <anchor>a12cb338a6e2cb8d9d268544b3b363126</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRouterFlag</name>
      <anchorfile>class_i_pv6_neighbour_advertisement.html</anchorfile>
      <anchor>a88ac570e8f5e77f9a37f7f1ac545a0dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRouterFlag</name>
      <anchorfile>class_i_pv6_neighbour_advertisement.html</anchorfile>
      <anchor>af2e814ed9bc9dae603efef13d94afbca</anchor>
      <arglist>(bool routerFlag_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getSolicitedFlag</name>
      <anchorfile>class_i_pv6_neighbour_advertisement.html</anchorfile>
      <anchor>a930381145de395cf787734ae40ea7361</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSolicitedFlag</name>
      <anchorfile>class_i_pv6_neighbour_advertisement.html</anchorfile>
      <anchor>a639b85fb52531eef528448f5ea53a7b3</anchor>
      <arglist>(bool solicitedFlag_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getOverrideFlag</name>
      <anchorfile>class_i_pv6_neighbour_advertisement.html</anchorfile>
      <anchor>a6cb96afeb88e2c5dcfed94d1992916df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOverrideFlag</name>
      <anchorfile>class_i_pv6_neighbour_advertisement.html</anchorfile>
      <anchor>aaa9727d70111bdd604790662d8cf329c</anchor>
      <arglist>(bool overrideFlag_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6Address &amp;</type>
      <name>getTargetAddress</name>
      <anchorfile>class_i_pv6_neighbour_advertisement.html</anchorfile>
      <anchor>ab4ced614f69b3cf120dbb835fbd7c11b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv6Address &amp;</type>
      <name>getTargetAddress</name>
      <anchorfile>class_i_pv6_neighbour_advertisement.html</anchorfile>
      <anchor>aeb7752c75b6cb519513c6f72c080c387</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetAddress</name>
      <anchorfile>class_i_pv6_neighbour_advertisement.html</anchorfile>
      <anchor>a600badcf3c7b5692f8c880e4e744c742</anchor>
      <arglist>(const IPv6Address &amp;targetAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getTargetLinkLayerAddress</name>
      <anchorfile>class_i_pv6_neighbour_advertisement.html</anchorfile>
      <anchor>a30d4ff1f627fd97932c2ee4d9c435f8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getTargetLinkLayerAddress</name>
      <anchorfile>class_i_pv6_neighbour_advertisement.html</anchorfile>
      <anchor>acccb2107fc09d309fb460536e611bb6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetLinkLayerAddress</name>
      <anchorfile>class_i_pv6_neighbour_advertisement.html</anchorfile>
      <anchor>aa130a85bfaa5d5e3138160f583a1c816</anchor>
      <arglist>(const MACAddress &amp;targetLinkLayerAddress_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_pv6_neighbour_advertisement.html</anchorfile>
      <anchor>a4d377bb0b41b43b8a0910d57c32dda6f</anchor>
      <arglist>(const IPv6NeighbourAdvertisement &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>routerFlag_var</name>
      <anchorfile>class_i_pv6_neighbour_advertisement.html</anchorfile>
      <anchor>afa46dcee604bdccb902b486597e7908d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>solicitedFlag_var</name>
      <anchorfile>class_i_pv6_neighbour_advertisement.html</anchorfile>
      <anchor>ac14ee52c26d6bbcadd8a05c8479b3c72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>overrideFlag_var</name>
      <anchorfile>class_i_pv6_neighbour_advertisement.html</anchorfile>
      <anchor>aa1280da9382158978d4725042c9023d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPv6Address</type>
      <name>targetAddress_var</name>
      <anchorfile>class_i_pv6_neighbour_advertisement.html</anchorfile>
      <anchor>aeff008a6a9892790b069ca6f11a6e67b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::MACAddress</type>
      <name>targetLinkLayerAddress_var</name>
      <anchorfile>class_i_pv6_neighbour_advertisement.html</anchorfile>
      <anchor>ab4390684890efb940a213f207f6bd481</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6NeighbourCache</name>
    <filename>class_i_pv6_neighbour_cache.html</filename>
    <class kind="struct">IPv6NeighbourCache::Key</class>
    <class kind="struct">IPv6NeighbourCache::Neighbour</class>
    <member kind="enumeration">
      <name>ReachabilityState</name>
      <anchorfile>class_i_pv6_neighbour_cache.html</anchorfile>
      <anchor>ae3981577e32da8a5d021f5440573a2a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INCOMPLETE</name>
      <anchorfile>class_i_pv6_neighbour_cache.html</anchorfile>
      <anchor>ae3981577e32da8a5d021f5440573a2a1ac2cfd6c9d21c7d34d2f6f53d6cfe6638</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REACHABLE</name>
      <anchorfile>class_i_pv6_neighbour_cache.html</anchorfile>
      <anchor>ae3981577e32da8a5d021f5440573a2a1a537cfe5cd6d576deab91b256b6da873a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STALE</name>
      <anchorfile>class_i_pv6_neighbour_cache.html</anchorfile>
      <anchor>ae3981577e32da8a5d021f5440573a2a1a115199155dd43585124db1d8f471025b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DELAY</name>
      <anchorfile>class_i_pv6_neighbour_cache.html</anchorfile>
      <anchor>ae3981577e32da8a5d021f5440573a2a1a815cc3dd5d8b220495a69641b00f5bdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROBE</name>
      <anchorfile>class_i_pv6_neighbour_cache.html</anchorfile>
      <anchor>ae3981577e32da8a5d021f5440573a2a1a8fdd2d1853264aa8f5479ebfa6502054</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; cMessage * &gt;</type>
      <name>MsgPtrVector</name>
      <anchorfile>class_i_pv6_neighbour_cache.html</anchorfile>
      <anchor>aa30dee396d7870c179503c85b3a1bfc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; Key, Neighbour &gt;</type>
      <name>NeighbourMap</name>
      <anchorfile>class_i_pv6_neighbour_cache.html</anchorfile>
      <anchor>abf885cc0639c2328134f0f54b2b11b8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NeighbourMap::iterator</type>
      <name>iterator</name>
      <anchorfile>class_i_pv6_neighbour_cache.html</anchorfile>
      <anchor>ab1cc9b2e581aa3e334f0c38874505f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6NeighbourCache</name>
      <anchorfile>class_i_pv6_neighbour_cache.html</anchorfile>
      <anchor>acb722f249c66333d11a01ed5e6adbf80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6NeighbourCache</name>
      <anchorfile>class_i_pv6_neighbour_cache.html</anchorfile>
      <anchor>ac6b776151b885f7510efceb087502490</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Neighbour *</type>
      <name>lookup</name>
      <anchorfile>class_i_pv6_neighbour_cache.html</anchorfile>
      <anchor>af88ebc30d5f18f0a628ead79f1fc3cb9</anchor>
      <arglist>(const IPv6Address &amp;addr, int interfaceID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Key *</type>
      <name>lookupKeyAddr</name>
      <anchorfile>class_i_pv6_neighbour_cache.html</anchorfile>
      <anchor>aa4dfbe1efd18d170311a52b91284f4ca</anchor>
      <arglist>(Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>class_i_pv6_neighbour_cache.html</anchorfile>
      <anchor>aba15c06ac0746775e6740c727033f37b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>class_i_pv6_neighbour_cache.html</anchorfile>
      <anchor>a4dc511141fb8fa7cab64d60fc8ee7ab5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Neighbour *</type>
      <name>addNeighbour</name>
      <anchorfile>class_i_pv6_neighbour_cache.html</anchorfile>
      <anchor>ab0751209af2b66c4171f92ba6ed7eee1</anchor>
      <arglist>(const IPv6Address &amp;addr, int interfaceID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Neighbour *</type>
      <name>addNeighbour</name>
      <anchorfile>class_i_pv6_neighbour_cache.html</anchorfile>
      <anchor>ac9a032698bb687e8d5fec8a05aed0f77</anchor>
      <arglist>(const IPv6Address &amp;addr, int interfaceID, MACAddress macAddress)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Neighbour *</type>
      <name>addRouter</name>
      <anchorfile>class_i_pv6_neighbour_cache.html</anchorfile>
      <anchor>a13016f349669033902152b07d1e466aa</anchor>
      <arglist>(const IPv6Address &amp;addr, int interfaceID, simtime_t expiryTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Neighbour *</type>
      <name>addRouter</name>
      <anchorfile>class_i_pv6_neighbour_cache.html</anchorfile>
      <anchor>ac21a58d5e6d5fd6b4d0e84eaf427022c</anchor>
      <arglist>(const IPv6Address &amp;addr, int interfaceID, MACAddress macAddress, simtime_t expiryTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>remove</name>
      <anchorfile>class_i_pv6_neighbour_cache.html</anchorfile>
      <anchor>a877bc367ca422baabc22199c5036df83</anchor>
      <arglist>(const IPv6Address &amp;addr, int interfaceID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>remove</name>
      <anchorfile>class_i_pv6_neighbour_cache.html</anchorfile>
      <anchor>ab717015df164ed4fc3a07441229c80b6</anchor>
      <arglist>(NeighbourMap::iterator it)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>stateName</name>
      <anchorfile>class_i_pv6_neighbour_cache.html</anchorfile>
      <anchor>a8fdb7fe401256bb765860586e1952c67</anchor>
      <arglist>(ReachabilityState state)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NeighbourMap</type>
      <name>neighbourMap</name>
      <anchorfile>class_i_pv6_neighbour_cache.html</anchorfile>
      <anchor>a559e914b0ec8aaa691d6dd02a55141e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPv6NeighbourCache::Key</name>
    <filename>struct_i_pv6_neighbour_cache_1_1_key.html</filename>
    <member kind="function">
      <type></type>
      <name>Key</name>
      <anchorfile>struct_i_pv6_neighbour_cache_1_1_key.html</anchorfile>
      <anchor>ad987ed27530a636e5614b7863d1c29c7</anchor>
      <arglist>(IPv6Address addr, int ifaceID)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>struct_i_pv6_neighbour_cache_1_1_key.html</anchorfile>
      <anchor>ace698856e001b95ed1207082dd4745d3</anchor>
      <arglist>(const Key &amp;b) const </arglist>
    </member>
    <member kind="variable">
      <type>IPv6Address</type>
      <name>address</name>
      <anchorfile>struct_i_pv6_neighbour_cache_1_1_key.html</anchorfile>
      <anchor>af3baf750992d5cad3bb0938cbaf95257</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>interfaceID</name>
      <anchorfile>struct_i_pv6_neighbour_cache_1_1_key.html</anchorfile>
      <anchor>af99582398661d84c3eef7ceee40662c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPv6NeighbourCache::Neighbour</name>
    <filename>struct_i_pv6_neighbour_cache_1_1_neighbour.html</filename>
    <member kind="variable">
      <type>const Key *</type>
      <name>nceKey</name>
      <anchorfile>struct_i_pv6_neighbour_cache_1_1_neighbour.html</anchorfile>
      <anchor>ad5af58880fcaf23480829713c6842037</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MACAddress</type>
      <name>macAddress</name>
      <anchorfile>struct_i_pv6_neighbour_cache_1_1_neighbour.html</anchorfile>
      <anchor>a3b51b5802cd50245bc2cdbbca1069dd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isRouter</name>
      <anchorfile>struct_i_pv6_neighbour_cache_1_1_neighbour.html</anchorfile>
      <anchor>af5203d6dd6d97a8b2baf782f44f8206f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isDefaultRouter</name>
      <anchorfile>struct_i_pv6_neighbour_cache_1_1_neighbour.html</anchorfile>
      <anchor>a31b674d52931bf8b67f682de45b9b906</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ReachabilityState</type>
      <name>reachabilityState</name>
      <anchorfile>struct_i_pv6_neighbour_cache_1_1_neighbour.html</anchorfile>
      <anchor>a0895435c223a2d4f67f02c3c614afbb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>reachabilityExpires</name>
      <anchorfile>struct_i_pv6_neighbour_cache_1_1_neighbour.html</anchorfile>
      <anchor>ad89a5f7ec5a7834e440c4437d108687a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>numProbesSent</name>
      <anchorfile>struct_i_pv6_neighbour_cache_1_1_neighbour.html</anchorfile>
      <anchor>a1a6d7fbd0ecd5d2e43ceb60939dbc3ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>nudTimeoutEvent</name>
      <anchorfile>struct_i_pv6_neighbour_cache_1_1_neighbour.html</anchorfile>
      <anchor>a861411e349fda127a4b66659f155659f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numOfARNSSent</name>
      <anchorfile>struct_i_pv6_neighbour_cache_1_1_neighbour.html</anchorfile>
      <anchor>ab4848023dcb9e2d1aa8102765c108460</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>arTimer</name>
      <anchorfile>struct_i_pv6_neighbour_cache_1_1_neighbour.html</anchorfile>
      <anchor>a85eabb9c45740ac29550eb11cb03cdb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MsgPtrVector</type>
      <name>pendingPackets</name>
      <anchorfile>struct_i_pv6_neighbour_cache_1_1_neighbour.html</anchorfile>
      <anchor>a45509a54cbc46748b289b9207c53334f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPv6Address</type>
      <name>nsSrcAddr</name>
      <anchorfile>struct_i_pv6_neighbour_cache_1_1_neighbour.html</anchorfile>
      <anchor>a8026da6f848b5bca4b37f970a848888e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>routerExpiryTime</name>
      <anchorfile>struct_i_pv6_neighbour_cache_1_1_neighbour.html</anchorfile>
      <anchor>a3022db1f1bf49b5aa5a2b484a90305f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6NeighbourDiscovery</name>
    <filename>class_i_pv6_neighbour_discovery.html</filename>
    <class kind="struct">IPv6NeighbourDiscovery::AdvIfEntry</class>
    <class kind="struct">IPv6NeighbourDiscovery::DADEntry</class>
    <class kind="struct">IPv6NeighbourDiscovery::RDEntry</class>
    <member kind="typedef">
      <type>std::vector&lt; cMessage * &gt;</type>
      <name>MsgPtrVector</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a0e2372b38f3787dd836bcee6b77eb268</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IPv6NeighbourCache::Key</type>
      <name>Key</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a747705ed3b49881e2d144e2d9f0c8044</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IPv6NeighbourCache::Neighbour</type>
      <name>Neighbour</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a13e99f7e1505dd01abbf03066e61384c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6NeighbourDiscovery</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a108dde1213dc58b6575583eed36cb92b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6NeighbourDiscovery</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>ae7aa7f945013733ec4aebbc290afcb42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MACAddress &amp;</type>
      <name>resolveNeighbour</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a567588762bff7af739e72916df55aebc</anchor>
      <arglist>(const IPv6Address &amp;nextHop, int interfaceId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reachabilityConfirmed</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>abcd9999f935e23b593499f8d23a970bf</anchor>
      <arglist>(const IPv6Address &amp;neighbour, int interfaceId)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::set&lt; cMessage * &gt;</type>
      <name>RATimerList</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>af7b0af85c2810acc01d715305818f59b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::set&lt; DADEntry * &gt;</type>
      <name>DADList</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a516186e680ba4eaf87de697019421987</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::set&lt; RDEntry * &gt;</type>
      <name>RDList</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a99d6acdeeccceb22d5b199a46c1a0e78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::set&lt; AdvIfEntry * &gt;</type>
      <name>AdvIfList</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a74d1e81840eb6742f1f595691e43ac29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a878f457b650d3fbdf047dd220f8f2d88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a6855729184a9f8c2e0072f6773f5e96c</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>ad90a981569779940aaffe6df55b6285b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processNDMessage</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a7662f293fab21a873bb22edab70de5ce</anchor>
      <arglist>(ICMPv6Message *msg, IPv6ControlInfo *ctrlInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a9c9fcb239e93ed948efb3a946379a3d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processIPv6Datagram</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>ade69131623bc5b13205ced3ff54a16d3</anchor>
      <arglist>(IPv6Datagram *datagram)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IPv6NeighbourDiscovery::AdvIfEntry *</type>
      <name>fetchAdvIfEntry</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a44d5adf445298a56e275377d70d620ef</anchor>
      <arglist>(InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IPv6NeighbourDiscovery::RDEntry *</type>
      <name>fetchRDEntry</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>ab83db378f6596fd37ab6657b13707aa4</anchor>
      <arglist>(InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IPv6Address</type>
      <name>determineNextHop</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a4bddad274cd8eb1472d37ddcd559c629</anchor>
      <arglist>(const IPv6Address &amp;destAddr, int &amp;outIfID)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initiateNeighbourUnreachabilityDetection</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a9f14cc2bfe0cce622308be4388b3b397</anchor>
      <arglist>(Neighbour *neighbour)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processNUDTimeout</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a623b4069795d46d2b421d5aee4f1eb59</anchor>
      <arglist>(cMessage *timeoutMsg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IPv6Address</type>
      <name>selectDefaultRouter</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a9f6c83de24b3e270c3843cc213b5250a</anchor>
      <arglist>(int &amp;outIfID)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>timeoutPrefixEntry</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a0e59b5c2995f7bdec6b6a67e60a1e675</anchor>
      <arglist>(const IPv6Address &amp;destPrefix, int prefixLength)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>timeoutDefaultRouter</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a303391440ad2004ff69cfc5e4cf7504a</anchor>
      <arglist>(const IPv6Address &amp;addr, int interfaceID)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initiateAddressResolution</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a6afff1bf1db0e7b69f3f6782a87b5b82</anchor>
      <arglist>(const IPv6Address &amp;dgSrcAddr, Neighbour *nce)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processARTimeout</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a61e880bea24c63e2661d2722077ac172</anchor>
      <arglist>(cMessage *arTimeoutMsg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>dropQueuedPacketsAwaitingAR</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a888724269369dc1aa87aa73586216b8c</anchor>
      <arglist>(Neighbour *nce)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendPacketToIPv6Module</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a58642b1dc383266b43abc6d6e4a74e5e</anchor>
      <arglist>(cMessage *msg, const IPv6Address &amp;destAddr, const IPv6Address &amp;srcAddr, int interfaceId)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendQueuedPacketsToIPv6Module</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a6cc2bafedafa13f79df2410b6617ff4b</anchor>
      <arglist>(Neighbour *nce)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initiateDAD</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>aab8e413cb12b66797d5e497f9fe6fddd</anchor>
      <arglist>(const IPv6Address &amp;tentativeAddr, InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processDADTimeout</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a13117cd0ac035e0a0fd198d872b209c3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>assignLinkLocalAddress</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a5438ceb3077ec49d9b393136a9a5e768</anchor>
      <arglist>(cMessage *timerMsg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IPv6RouterSolicitation *</type>
      <name>createAndSendRSPacket</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a75431d6a5076b17ae0630f2fc4aa441a</anchor>
      <arglist>(InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initiateRouterDiscovery</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a53cb1f954b65272ad826f3daaec29136</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>cancelRouterDiscovery</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a01e12e84e38baf2539a8335f8f01abc6</anchor>
      <arglist>(InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processRDTimeout</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a860a64e4fbb311fef343ec7044c0a10b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processRSPacket</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>ac6f2316e1a19d2816bab83e96d11ef57</anchor>
      <arglist>(IPv6RouterSolicitation *rs, IPv6ControlInfo *rsCtrlInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>validateRSPacket</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a09f8b6d13b8546d9c3d735589df9e37f</anchor>
      <arglist>(IPv6RouterSolicitation *rs, IPv6ControlInfo *rsCtrlInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IPv6RouterAdvertisement *</type>
      <name>createAndSendRAPacket</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a50d09a125fd3477828643875b72573ec</anchor>
      <arglist>(const IPv6Address &amp;destAddr, InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processRAPacket</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a4482770f35807ddc238a9259e85752e3</anchor>
      <arglist>(IPv6RouterAdvertisement *ra, IPv6ControlInfo *raCtrlInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processRAForRouterUpdates</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a41da6658d387e46e3e656d4704bf908f</anchor>
      <arglist>(IPv6RouterAdvertisement *ra, IPv6ControlInfo *raCtrlInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processRAPrefixInfo</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a5acf0814f6ca500c38d87763c0a5aef7</anchor>
      <arglist>(IPv6RouterAdvertisement *ra, InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processRAPrefixInfoForAddrAutoConf</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>ae187033477823763f0fc0063353821f6</anchor>
      <arglist>(IPv6NDPrefixInformation &amp;prefixInfo, InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>createRATimer</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a6e0f7e782e7b912a683c653b30e7b957</anchor>
      <arglist>(InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>resetRATimer</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>acd79bbeb030e0105e39d63cab1cee297</anchor>
      <arglist>(InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendPeriodicRA</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a7ab6b1fc3d01da2bc31d772a31013e08</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendSolicitedRA</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a32ed95da45989efe4509946492299d34</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>validateRAPacket</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a902261563ea0bd130700a148a062781c</anchor>
      <arglist>(IPv6RouterAdvertisement *ra, IPv6ControlInfo *raCtrlInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IPv6NeighbourSolicitation *</type>
      <name>createAndSendNSPacket</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>aedad2b550812f9be54ab691296e5876d</anchor>
      <arglist>(const IPv6Address &amp;nsTargetAddr, const IPv6Address &amp;dgDestAddr, const IPv6Address &amp;dgSrcAddr, InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processNSPacket</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a8d7676502f17ed01eb095afadab7bb33</anchor>
      <arglist>(IPv6NeighbourSolicitation *ns, IPv6ControlInfo *naCtrlInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>validateNSPacket</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a72d9ee3401361c560c47f5172c05c1a4</anchor>
      <arglist>(IPv6NeighbourSolicitation *ns, IPv6ControlInfo *nsCtrlInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processNSForTentativeAddress</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a1d21eff02fed770d1bf56dbb995c3db9</anchor>
      <arglist>(IPv6NeighbourSolicitation *ns, IPv6ControlInfo *ctrlInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processNSForNonTentativeAddress</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>abccb93f2300252252370c5cfab5017c6</anchor>
      <arglist>(IPv6NeighbourSolicitation *ns, IPv6ControlInfo *ctrlInfo, InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processNSWithSpecifiedSrcAddr</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a8106a5866c58a9c6372c741a15ce943b</anchor>
      <arglist>(IPv6NeighbourSolicitation *ns, IPv6ControlInfo *ctrlInfo, InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendSolicitedNA</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>ac2a5f2e2cbd6845ecd10038fce448ead</anchor>
      <arglist>(IPv6NeighbourSolicitation *ns, IPv6ControlInfo *nsCtrlInfo, InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendUnsolicitedNA</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a30bc9cd2bec93e40e238fe91b573ca9f</anchor>
      <arglist>(InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processNAPacket</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a348ba5dd9e93f4640d465a74b8a73d53</anchor>
      <arglist>(IPv6NeighbourAdvertisement *na, IPv6ControlInfo *naCtrlInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>validateNAPacket</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a8f18a6e238820911ee6253f12b766fad</anchor>
      <arglist>(IPv6NeighbourAdvertisement *na, IPv6ControlInfo *naCtrlInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processNAForIncompleteNCEState</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a093219842e9055dc413f8f6d401001ee</anchor>
      <arglist>(IPv6NeighbourAdvertisement *na, IPv6NeighbourCache::Neighbour *nce)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processNAForOtherNCEStates</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a58a8a7aaf00643c4eb0044cc1380413b</anchor>
      <arglist>(IPv6NeighbourAdvertisement *na, IPv6NeighbourCache::Neighbour *nce)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IPv6Redirect *</type>
      <name>createAndSendRedirectPacket</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a96fb67a2da25bbcd4b18a21a1d597fa6</anchor>
      <arglist>(InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processRedirectPacket</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>ab95f9c30abcda08c3b762d191df4a3ae</anchor>
      <arglist>(IPv6Redirect *redirect, IPv6ControlInfo *ctrlInfo)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cQueue</type>
      <name>pendingQueue</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a8cebccf199f96d0903c4663b203199ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IInterfaceTable *</type>
      <name>ift</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a4b4f35b761b93c397e2a5a36c1e08d38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RoutingTable6 *</type>
      <name>rt6</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a0f6a26512cd490f5a09e9bd7ec3bf61f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ICMPv6 *</type>
      <name>icmpv6</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a78cfa038ef771566c18a2eec28fd740b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv6NeighbourCache</type>
      <name>neighbourCache</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a2034aa8fe938bda7f5e032d95892cf84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RATimerList</type>
      <name>raTimerList</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>ad8d41d97624aa9ba4878adea476018d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DADList</type>
      <name>dadList</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a750d70366700481befd66c567d420a7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RDList</type>
      <name>rdList</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a7f075a086f580756337ef6f59223727c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AdvIfList</type>
      <name>advIfList</name>
      <anchorfile>class_i_pv6_neighbour_discovery.html</anchorfile>
      <anchor>a868ef2afa69950bd536b1fb5cd10569a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPv6NeighbourDiscovery::AdvIfEntry</name>
    <filename>struct_i_pv6_neighbour_discovery_1_1_adv_if_entry.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>interfaceId</name>
      <anchorfile>struct_i_pv6_neighbour_discovery_1_1_adv_if_entry.html</anchorfile>
      <anchor>add4908c7a6062a8b45b9efed8f0ec50a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numRASent</name>
      <anchorfile>struct_i_pv6_neighbour_discovery_1_1_adv_if_entry.html</anchorfile>
      <anchor>a478292e0775ffdfc89f2d639d0bb63ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>nextScheduledRATime</name>
      <anchorfile>struct_i_pv6_neighbour_discovery_1_1_adv_if_entry.html</anchorfile>
      <anchor>aeb98e40a6b5b92f461b45d275fff8bdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>raTimeoutMsg</name>
      <anchorfile>struct_i_pv6_neighbour_discovery_1_1_adv_if_entry.html</anchorfile>
      <anchor>a682ed2d1646de93e97622d886979a97d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPv6NeighbourDiscovery::DADEntry</name>
    <filename>struct_i_pv6_neighbour_discovery_1_1_d_a_d_entry.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>interfaceId</name>
      <anchorfile>struct_i_pv6_neighbour_discovery_1_1_d_a_d_entry.html</anchorfile>
      <anchor>a1f540a80228c9ddcfeae1468801b4475</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPv6Address</type>
      <name>address</name>
      <anchorfile>struct_i_pv6_neighbour_discovery_1_1_d_a_d_entry.html</anchorfile>
      <anchor>a4588701a8afa5f50d31020926a24fb93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numNSSent</name>
      <anchorfile>struct_i_pv6_neighbour_discovery_1_1_d_a_d_entry.html</anchorfile>
      <anchor>aaa0078a29c8410eee550d3b412e13781</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>timeoutMsg</name>
      <anchorfile>struct_i_pv6_neighbour_discovery_1_1_d_a_d_entry.html</anchorfile>
      <anchor>a3f9f53fe75ff18357e8f9dcc0632ee2c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPv6NeighbourDiscovery::RDEntry</name>
    <filename>struct_i_pv6_neighbour_discovery_1_1_r_d_entry.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>interfaceId</name>
      <anchorfile>struct_i_pv6_neighbour_discovery_1_1_r_d_entry.html</anchorfile>
      <anchor>addcde7923e87e15ef8abd44ee4cb99d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numRSSent</name>
      <anchorfile>struct_i_pv6_neighbour_discovery_1_1_r_d_entry.html</anchorfile>
      <anchor>a4866f6d9017dfac28f5e81a7c361151b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>timeoutMsg</name>
      <anchorfile>struct_i_pv6_neighbour_discovery_1_1_r_d_entry.html</anchorfile>
      <anchor>a2fc4d020f4c3c49eb4793a0d3e01ea78</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6NeighbourDiscoveryAccess</name>
    <filename>class_i_pv6_neighbour_discovery_access.html</filename>
    <base>ModuleAccess&lt; IPv6NeighbourDiscovery &gt;</base>
    <member kind="function">
      <type></type>
      <name>IPv6NeighbourDiscoveryAccess</name>
      <anchorfile>class_i_pv6_neighbour_discovery_access.html</anchorfile>
      <anchor>aff4013b5ab04305373a1e04fd238380a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6NeighbourSolicitation</name>
    <filename>class_i_pv6_neighbour_solicitation.html</filename>
    <base>IPv6NDMessage</base>
    <member kind="function">
      <type></type>
      <name>IPv6NeighbourSolicitation</name>
      <anchorfile>class_i_pv6_neighbour_solicitation.html</anchorfile>
      <anchor>a736e7f7f81a20144be04e7470109caa7</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6NeighbourSolicitation</name>
      <anchorfile>class_i_pv6_neighbour_solicitation.html</anchorfile>
      <anchor>af995f939acc0655c3c1f6e1f71c409e2</anchor>
      <arglist>(const IPv6NeighbourSolicitation &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6NeighbourSolicitation</name>
      <anchorfile>class_i_pv6_neighbour_solicitation.html</anchorfile>
      <anchor>ab2398b0b069c7d25dc636643250c2985</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPv6NeighbourSolicitation &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_pv6_neighbour_solicitation.html</anchorfile>
      <anchor>a28803f2b055de1b035283ffbf8f8f790</anchor>
      <arglist>(const IPv6NeighbourSolicitation &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6NeighbourSolicitation *</type>
      <name>dup</name>
      <anchorfile>class_i_pv6_neighbour_solicitation.html</anchorfile>
      <anchor>a1b57f5e9fab002037e5562257c1a7e1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_pv6_neighbour_solicitation.html</anchorfile>
      <anchor>a4e02f65f8760eab509a5813f8c07a433</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_pv6_neighbour_solicitation.html</anchorfile>
      <anchor>a3645ceac2f80e6b46b05cfbb171c0a6e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6Address &amp;</type>
      <name>getTargetAddress</name>
      <anchorfile>class_i_pv6_neighbour_solicitation.html</anchorfile>
      <anchor>aa8758b1539001a247c925ead4856ec69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv6Address &amp;</type>
      <name>getTargetAddress</name>
      <anchorfile>class_i_pv6_neighbour_solicitation.html</anchorfile>
      <anchor>af4d76b228ded63ab15a4e482fbd38525</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetAddress</name>
      <anchorfile>class_i_pv6_neighbour_solicitation.html</anchorfile>
      <anchor>ae7df5ea2fe82b146a2e98875a9eb1b59</anchor>
      <arglist>(const IPv6Address &amp;targetAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getSourceLinkLayerAddress</name>
      <anchorfile>class_i_pv6_neighbour_solicitation.html</anchorfile>
      <anchor>ade4c8874a206e1696e204264db63d415</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getSourceLinkLayerAddress</name>
      <anchorfile>class_i_pv6_neighbour_solicitation.html</anchorfile>
      <anchor>aa92e98762c2387dc14ec6bd862fbfbef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSourceLinkLayerAddress</name>
      <anchorfile>class_i_pv6_neighbour_solicitation.html</anchorfile>
      <anchor>a29d46c0498c045342b1ade643485ace4</anchor>
      <arglist>(const MACAddress &amp;sourceLinkLayerAddress_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_pv6_neighbour_solicitation.html</anchorfile>
      <anchor>aa51d185d296a9cca5c8fd9bacb8ba1b6</anchor>
      <arglist>(const IPv6NeighbourSolicitation &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPv6Address</type>
      <name>targetAddress_var</name>
      <anchorfile>class_i_pv6_neighbour_solicitation.html</anchorfile>
      <anchor>a210fb3ab850342412c0c44a9b164da04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::MACAddress</type>
      <name>sourceLinkLayerAddress_var</name>
      <anchorfile>class_i_pv6_neighbour_solicitation.html</anchorfile>
      <anchor>adc35e066a627c97cd73d60ca73fd2f68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6Redirect</name>
    <filename>class_i_pv6_redirect.html</filename>
    <base>IPv6NDMessage</base>
    <member kind="function">
      <type></type>
      <name>IPv6Redirect</name>
      <anchorfile>class_i_pv6_redirect.html</anchorfile>
      <anchor>a3b86769539cce65859ceb1a793e31bee</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6Redirect</name>
      <anchorfile>class_i_pv6_redirect.html</anchorfile>
      <anchor>a68a035fbcc151db43481e0605ca84602</anchor>
      <arglist>(const IPv6Redirect &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6Redirect</name>
      <anchorfile>class_i_pv6_redirect.html</anchorfile>
      <anchor>a613e7621699c7ab888a7bd4fef64c339</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPv6Redirect &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_pv6_redirect.html</anchorfile>
      <anchor>a1247d6c1022ccab723797f184067b528</anchor>
      <arglist>(const IPv6Redirect &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6Redirect *</type>
      <name>dup</name>
      <anchorfile>class_i_pv6_redirect.html</anchorfile>
      <anchor>ad729dfb3cfef20682579c2056ec8f3cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_pv6_redirect.html</anchorfile>
      <anchor>a9a86976af8693159279facea3a13ae41</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_pv6_redirect.html</anchorfile>
      <anchor>a214ec0a36da9eea300a89812cdab01ae</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6Address &amp;</type>
      <name>getTargetAddress</name>
      <anchorfile>class_i_pv6_redirect.html</anchorfile>
      <anchor>abb02c3892f73bd9bec0a57f9c839ab19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv6Address &amp;</type>
      <name>getTargetAddress</name>
      <anchorfile>class_i_pv6_redirect.html</anchorfile>
      <anchor>a01c55cdbe43d3523ebca24d8755b8169</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetAddress</name>
      <anchorfile>class_i_pv6_redirect.html</anchorfile>
      <anchor>a514c2d8a3fc54904f80322863b1ab590</anchor>
      <arglist>(const IPv6Address &amp;targetAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6Address &amp;</type>
      <name>getDestinationAddress</name>
      <anchorfile>class_i_pv6_redirect.html</anchorfile>
      <anchor>a786a7735f06ed73eeb90776ea962c74b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv6Address &amp;</type>
      <name>getDestinationAddress</name>
      <anchorfile>class_i_pv6_redirect.html</anchorfile>
      <anchor>a1a5e643aa0d22ad5aa60533a5d79735a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestinationAddress</name>
      <anchorfile>class_i_pv6_redirect.html</anchorfile>
      <anchor>aa36e0b1c96017d5f958eea93926cee00</anchor>
      <arglist>(const IPv6Address &amp;destinationAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getTargetLinkLayerAddress</name>
      <anchorfile>class_i_pv6_redirect.html</anchorfile>
      <anchor>a5b137567866a7f466420021270f2f865</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getTargetLinkLayerAddress</name>
      <anchorfile>class_i_pv6_redirect.html</anchorfile>
      <anchor>aa6c68b9c822390f7541f82f487732ebc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetLinkLayerAddress</name>
      <anchorfile>class_i_pv6_redirect.html</anchorfile>
      <anchor>af19834189bf40cedd92010aa4057d8b4</anchor>
      <arglist>(const MACAddress &amp;targetLinkLayerAddress_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_pv6_redirect.html</anchorfile>
      <anchor>a0492827ef23a0957708bdd22b3a4004d</anchor>
      <arglist>(const IPv6Redirect &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPv6Address</type>
      <name>targetAddress_var</name>
      <anchorfile>class_i_pv6_redirect.html</anchorfile>
      <anchor>a694a24a693298470559fdbbb115704ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPv6Address</type>
      <name>destinationAddress_var</name>
      <anchorfile>class_i_pv6_redirect.html</anchorfile>
      <anchor>a24910e48ec5b43b0fcfa07ac6ea6946f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::MACAddress</type>
      <name>targetLinkLayerAddress_var</name>
      <anchorfile>class_i_pv6_redirect.html</anchorfile>
      <anchor>a0b898974d8da7da1e8be87284e300d9a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6Route</name>
    <filename>class_i_pv6_route.html</filename>
    <member kind="enumeration">
      <name>RouteSrc</name>
      <anchorfile>class_i_pv6_route.html</anchorfile>
      <anchor>a4eac9172e292e624476a22b74478e087</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FROM_RA</name>
      <anchorfile>class_i_pv6_route.html</anchorfile>
      <anchor>a4eac9172e292e624476a22b74478e087a7e360222defd4f4a1af6d1e70442a5c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OWN_ADV_PREFIX</name>
      <anchorfile>class_i_pv6_route.html</anchorfile>
      <anchor>a4eac9172e292e624476a22b74478e087ad46ec93945a0a1b07a9097be97e56c1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATIC</name>
      <anchorfile>class_i_pv6_route.html</anchorfile>
      <anchor>a4eac9172e292e624476a22b74478e087a97c5ec5cf895578cbd6247a8bba80638</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROUTING_PROT</name>
      <anchorfile>class_i_pv6_route.html</anchorfile>
      <anchor>a4eac9172e292e624476a22b74478e087aa0040039d1490c0b7bdd8602269a894b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6Route</name>
      <anchorfile>class_i_pv6_route.html</anchorfile>
      <anchor>a886925daa6e3e09f70f0d36cbc0eecad</anchor>
      <arglist>(IPv6Address destPrefix, int length, RouteSrc src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>class_i_pv6_route.html</anchorfile>
      <anchor>a053f47911aa83ef42ca2c311de042668</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>class_i_pv6_route.html</anchorfile>
      <anchor>a3ce3743d70064f9aa26e6e105ee16591</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInterfaceId</name>
      <anchorfile>class_i_pv6_route.html</anchorfile>
      <anchor>a7619951592a3ab6f32eb8b5c1beaf864</anchor>
      <arglist>(int interfaceId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNextHop</name>
      <anchorfile>class_i_pv6_route.html</anchorfile>
      <anchor>aafb5f10807c0d3d563c3459d99faf109</anchor>
      <arglist>(const IPv6Address &amp;nextHop)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExpiryTime</name>
      <anchorfile>class_i_pv6_route.html</anchorfile>
      <anchor>a946095196f3826b1c3a3390245dcda05</anchor>
      <arglist>(simtime_t expiryTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMetric</name>
      <anchorfile>class_i_pv6_route.html</anchorfile>
      <anchor>a04c4ec94dbc0fa34799091a3fa7a0e8d</anchor>
      <arglist>(int metric)</arglist>
    </member>
    <member kind="function">
      <type>const IPv6Address &amp;</type>
      <name>getDestPrefix</name>
      <anchorfile>class_i_pv6_route.html</anchorfile>
      <anchor>ae9158919076e311164f7a1a265ce834d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPrefixLength</name>
      <anchorfile>class_i_pv6_route.html</anchorfile>
      <anchor>af9fbb20e012a32c3511e426b4d939457</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RouteSrc</type>
      <name>getSrc</name>
      <anchorfile>class_i_pv6_route.html</anchorfile>
      <anchor>ac5098952cb1e2a9f2cf12bd0b8b0887d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInterfaceId</name>
      <anchorfile>class_i_pv6_route.html</anchorfile>
      <anchor>adbdd6910c92deca3571fa8e5cd27baf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IPv6Address &amp;</type>
      <name>getNextHop</name>
      <anchorfile>class_i_pv6_route.html</anchorfile>
      <anchor>abdc06722ce1f1af7236ee2c37fcfa132</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getExpiryTime</name>
      <anchorfile>class_i_pv6_route.html</anchorfile>
      <anchor>a71218ba7da774a43d6b0ea1ceb54a302</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMetric</name>
      <anchorfile>class_i_pv6_route.html</anchorfile>
      <anchor>ab62f850b1e21b95cbd200f2d3099fb7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>routeSrcName</name>
      <anchorfile>class_i_pv6_route.html</anchorfile>
      <anchor>a41807fc19f1505666482891fa94e9f5f</anchor>
      <arglist>(RouteSrc src)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv6Address</type>
      <name>_destPrefix</name>
      <anchorfile>class_i_pv6_route.html</anchorfile>
      <anchor>a4be1afc2e7823644f3f9324dd533db97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>_length</name>
      <anchorfile>class_i_pv6_route.html</anchorfile>
      <anchor>a9f97bb95aab1659be65abd0c96daaddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RouteSrc</type>
      <name>_src</name>
      <anchorfile>class_i_pv6_route.html</anchorfile>
      <anchor>a8d14b8a494751e471063dfe281018614</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_interfaceID</name>
      <anchorfile>class_i_pv6_route.html</anchorfile>
      <anchor>ad68b7a8230d296b7469d5003beb3d842</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv6Address</type>
      <name>_nextHop</name>
      <anchorfile>class_i_pv6_route.html</anchorfile>
      <anchor>a24399e1f23ea0d0c1358e5b2106eec9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>_expiryTime</name>
      <anchorfile>class_i_pv6_route.html</anchorfile>
      <anchor>aa2ca9fe6ab089db341211213c349eacb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_metric</name>
      <anchorfile>class_i_pv6_route.html</anchorfile>
      <anchor>a3a722031794a3e185a19457240bec68e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6RouterAdvertisement</name>
    <filename>class_i_pv6_router_advertisement.html</filename>
    <base>IPv6NDMessage</base>
    <member kind="function">
      <type></type>
      <name>IPv6RouterAdvertisement</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>a86d069ff9c1f71cad3c799e380e6f3a8</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6RouterAdvertisement</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>ad09cc0b7a34f786de6bd1f272d95d43a</anchor>
      <arglist>(const IPv6RouterAdvertisement &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6RouterAdvertisement</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>a3863931565332b32bd334108c59354bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPv6RouterAdvertisement &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>a4e0df13baa46c703f105085b274cb2b6</anchor>
      <arglist>(const IPv6RouterAdvertisement &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6RouterAdvertisement *</type>
      <name>dup</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>acaf91f55f8ad806e9bbf3da33bc79572</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>a561fcbd1605054a72c5cc7c5d950c024</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>a671fbab976b0e59c11f07e4f8000faf6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getCurHopLimit</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>a0a81a0acaac716d216feb8f859d199a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurHopLimit</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>a690d16d4ba2c5e6da777e622ed1931a2</anchor>
      <arglist>(unsigned int curHopLimit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getManagedAddrConfFlag</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>a88d733e46afafa6eb12ce16224f8df28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setManagedAddrConfFlag</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>adf52056f68e2055290b2f678d6b31bc8</anchor>
      <arglist>(bool managedAddrConfFlag_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getOtherStatefulConfFlag</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>a098290fcbe5a59d460da9442ca3fd9ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOtherStatefulConfFlag</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>ab93a8be65953973cd6069d13aec96a0d</anchor>
      <arglist>(bool otherStatefulConfFlag_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getRouterLifetime</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>a8792d1615047ca1fbaa446c1a8316f9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRouterLifetime</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>a39678dc04c24a484eeb5b3a9f91aea4a</anchor>
      <arglist>(unsigned short routerLifetime_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getReachableTime</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>acfc4519404fc893bc99e7f0d9e1d531e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReachableTime</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>a0261460d90e4cef93a11e8cb8c291fff</anchor>
      <arglist>(unsigned int reachableTime_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getRetransTimer</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>a7478bb558c46dec7f012860622cff7e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRetransTimer</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>a73bd2bd3a22da52c5cd402bc7cde633a</anchor>
      <arglist>(unsigned int retransTimer_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getSourceLinkLayerAddress</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>a705aaac520402119b8aa6e9efc5ceb64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getSourceLinkLayerAddress</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>a4d750ec673e2258080b3f3187569ae2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSourceLinkLayerAddress</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>afa5cca482035adcba5c7753268b58aed</anchor>
      <arglist>(const MACAddress &amp;sourceLinkLayerAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getMTU</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>ac81af8393ce5a310e51a126d37a50751</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMTU</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>a989958494a623baccd85bb50dc85f1b3</anchor>
      <arglist>(unsigned int MTU_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPrefixInformationArraySize</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>ac53dcafff08880c29972a9e97cc190a1</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getPrefixInformationArraySize</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>a5189c47459ce2df26c6067b00bf6a670</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6NDPrefixInformation &amp;</type>
      <name>getPrefixInformation</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>ab0392fb8b0189220ef2c47c8fa3dc898</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv6NDPrefixInformation &amp;</type>
      <name>getPrefixInformation</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>ac490d0b9a91d92c3141cd279c3d28e26</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPrefixInformation</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>a5b27daa3e1f7131ce8bd378737a8edcb</anchor>
      <arglist>(unsigned int k, const IPv6NDPrefixInformation &amp;prefixInformation_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>a9337052abbc3d84ffebd42be67f9b07e</anchor>
      <arglist>(const IPv6RouterAdvertisement &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>curHopLimit_var</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>af69507905f8a1f42751ed69de159e9c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>managedAddrConfFlag_var</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>a78369ca6604fd260a6a998b88f752ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>otherStatefulConfFlag_var</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>acc49b5c3d38ff111947bbd975648ce59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>routerLifetime_var</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>ab61bc29bb2ea463dcd3f63a9faa370c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>reachableTime_var</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>a585a75e34eafbeef400b34774457cca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>retransTimer_var</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>a56503fb2e993da3b4d9b28cd4332e7b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::MACAddress</type>
      <name>sourceLinkLayerAddress_var</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>aa694178ead18c5fb3e690cc897fc33a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>MTU_var</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>ad9437145f53db858ed47089456dc392d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPv6NDPrefixInformation *</type>
      <name>prefixInformation_var</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>a9bc06127e9e6d652d4a133171f8377b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>prefixInformation_arraysize</name>
      <anchorfile>class_i_pv6_router_advertisement.html</anchorfile>
      <anchor>aa5c244c998ffc96093cd140e8022d6bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6RouterSolicitation</name>
    <filename>class_i_pv6_router_solicitation.html</filename>
    <base>IPv6NDMessage</base>
    <member kind="function">
      <type></type>
      <name>IPv6RouterSolicitation</name>
      <anchorfile>class_i_pv6_router_solicitation.html</anchorfile>
      <anchor>a3984acc0b7d571a8d40de479f0071304</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6RouterSolicitation</name>
      <anchorfile>class_i_pv6_router_solicitation.html</anchorfile>
      <anchor>af0b3b60a4d24b056c5527ccb4b05c505</anchor>
      <arglist>(const IPv6RouterSolicitation &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6RouterSolicitation</name>
      <anchorfile>class_i_pv6_router_solicitation.html</anchorfile>
      <anchor>a3b9bf762c36693766df8a20a02aee710</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPv6RouterSolicitation &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_pv6_router_solicitation.html</anchorfile>
      <anchor>abce86347504012b67f3952db9daf372a</anchor>
      <arglist>(const IPv6RouterSolicitation &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6RouterSolicitation *</type>
      <name>dup</name>
      <anchorfile>class_i_pv6_router_solicitation.html</anchorfile>
      <anchor>a1a54b49fff7508de7dfc522767f0f5eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_pv6_router_solicitation.html</anchorfile>
      <anchor>adde19a9b85f249305477eaad34f2a780</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_pv6_router_solicitation.html</anchorfile>
      <anchor>ab66152a68a0243762f43ecf3eb993610</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getSourceLinkLayerAddress</name>
      <anchorfile>class_i_pv6_router_solicitation.html</anchorfile>
      <anchor>ac27e5211d09ebbfe316b4c2b28e3a232</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getSourceLinkLayerAddress</name>
      <anchorfile>class_i_pv6_router_solicitation.html</anchorfile>
      <anchor>ae49e18cd377db437560af51c888cf0f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSourceLinkLayerAddress</name>
      <anchorfile>class_i_pv6_router_solicitation.html</anchorfile>
      <anchor>a53efefd655588f25b5a50f304e2404c1</anchor>
      <arglist>(const MACAddress &amp;sourceLinkLayerAddress_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_pv6_router_solicitation.html</anchorfile>
      <anchor>a4c21e6dfc7a720a3193c45f8b89f0bb4</anchor>
      <arglist>(const IPv6RouterSolicitation &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::MACAddress</type>
      <name>sourceLinkLayerAddress_var</name>
      <anchorfile>class_i_pv6_router_solicitation.html</anchorfile>
      <anchor>af18edbdf16155621e402ff24cd4abc39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6RoutingHeader</name>
    <filename>class_i_pv6_routing_header.html</filename>
    <base>IPv6ExtensionHeader</base>
    <member kind="function">
      <type></type>
      <name>IPv6RoutingHeader</name>
      <anchorfile>class_i_pv6_routing_header.html</anchorfile>
      <anchor>a3740a370e3207a9b4dde909b5f2aff35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6RoutingHeader</name>
      <anchorfile>class_i_pv6_routing_header.html</anchorfile>
      <anchor>a328c0030706b4531a11c32883f5244f1</anchor>
      <arglist>(const IPv6RoutingHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6RoutingHeader</name>
      <anchorfile>class_i_pv6_routing_header.html</anchorfile>
      <anchor>a87dca1af18d72ca2cae47a371fc0c7aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPv6RoutingHeader &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_pv6_routing_header.html</anchorfile>
      <anchor>ad180272480a3fd463a296e61f5fb6050</anchor>
      <arglist>(const IPv6RoutingHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6RoutingHeader *</type>
      <name>dup</name>
      <anchorfile>class_i_pv6_routing_header.html</anchorfile>
      <anchor>ae42cceab19359c882d64e6081dbe43bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_i_pv6_routing_header.html</anchorfile>
      <anchor>afb185d31a5d79293d8707e8cc41c32c4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_i_pv6_routing_header.html</anchorfile>
      <anchor>aa4c48e558aebd235c2e378d1981c520a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getRoutingType</name>
      <anchorfile>class_i_pv6_routing_header.html</anchorfile>
      <anchor>adad48c1876278f3d36d2f6b9108bae92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRoutingType</name>
      <anchorfile>class_i_pv6_routing_header.html</anchorfile>
      <anchor>a52b51b6281b91bf7893c623e65250390</anchor>
      <arglist>(unsigned char routingType_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getSegmentsLeft</name>
      <anchorfile>class_i_pv6_routing_header.html</anchorfile>
      <anchor>aa42933731b2d4f82132fc228f6d2c00d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSegmentsLeft</name>
      <anchorfile>class_i_pv6_routing_header.html</anchorfile>
      <anchor>a877eca814ad3764cbbffb400ecbfb3b2</anchor>
      <arglist>(unsigned char segmentsLeft_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddressArraySize</name>
      <anchorfile>class_i_pv6_routing_header.html</anchorfile>
      <anchor>ac8120b3c173802fea5bed93ef26e4baf</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getAddressArraySize</name>
      <anchorfile>class_i_pv6_routing_header.html</anchorfile>
      <anchor>ad2ff41b0ceece5d3aa29f7574bfdf196</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6Address &amp;</type>
      <name>getAddress</name>
      <anchorfile>class_i_pv6_routing_header.html</anchorfile>
      <anchor>acc9f123fce42037b23c4da364f070069</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv6Address &amp;</type>
      <name>getAddress</name>
      <anchorfile>class_i_pv6_routing_header.html</anchorfile>
      <anchor>acd280617b1acb3aebc1234d660d4865b</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress</name>
      <anchorfile>class_i_pv6_routing_header.html</anchorfile>
      <anchor>a308f0d19b1f6a5bc5e6a36f00a2e64b9</anchor>
      <arglist>(unsigned int k, const IPv6Address &amp;address_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_pv6_routing_header.html</anchorfile>
      <anchor>acf7f3d5663bcd7b681676d8f183b0f64</anchor>
      <arglist>(const IPv6RoutingHeader &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>routingType_var</name>
      <anchorfile>class_i_pv6_routing_header.html</anchorfile>
      <anchor>a68e04380b2c1ff6ad0bc91db1b9ddc10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>segmentsLeft_var</name>
      <anchorfile>class_i_pv6_routing_header.html</anchorfile>
      <anchor>af430098b70f6ea64b379c00d6d11c84f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPv6Address *</type>
      <name>address_var</name>
      <anchorfile>class_i_pv6_routing_header.html</anchorfile>
      <anchor>aaf6b6eab1b095a98624324d38bb15dfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>address_arraysize</name>
      <anchorfile>class_i_pv6_routing_header.html</anchorfile>
      <anchor>a71f5e0a1e48002be8c77e9e8fc4896b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPvXAddress</name>
    <filename>class_i_pv_x_address.html</filename>
    <member kind="function">
      <type></type>
      <name>IPvXAddress</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>a20d85e85455dd516985a99a85e7dc95d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPvXAddress</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>a8ae48997256c49d724be368c7993c6de</anchor>
      <arglist>(const IPAddress &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPvXAddress</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>ac6f4c883196bdfa47a8f77d71e29a250</anchor>
      <arglist>(const IPv6Address &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPvXAddress</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>acbebd511b800c83d1b55dafd268b251f</anchor>
      <arglist>(const char *addr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPvXAddress</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>af25da8af66aadbf80995e6b008e21230</anchor>
      <arglist>(const IPvXAddress &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IPvXAddress</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>a0dced498065e684694bc45f9afecc515</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIPv6</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>a43ef7d0a976817991cfd41d09435225d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>get4</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>a00acd2be0fc0f254afb2eb7540a4ea6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPv6Address</type>
      <name>get6</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>a733678e1e28f88c954cfce854af576c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>a723c95dd39fbdc72118f03eb386086fb</anchor>
      <arglist>(const IPAddress &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>a177c5cb3ea7a552b1ad6c22d0e7d49d7</anchor>
      <arglist>(const IPv6Address &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>a785e98e72006740824dca5f4a65e170c</anchor>
      <arglist>(const IPvXAddress &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>aec27897844a28d4b925b8a499ca632ea</anchor>
      <arglist>(const char *addr)</arglist>
    </member>
    <member kind="function">
      <type>IPvXAddress &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>ac4bbbb66e34d003291ee950492e02b1e</anchor>
      <arglist>(const IPAddress &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>IPvXAddress &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>a805aa25f6c94c8cc3741f255e6d13f7b</anchor>
      <arglist>(const IPv6Address &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>IPvXAddress &amp;</type>
      <name>operator=</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>ab54157d69d0f88a28d8d230b58ff1581</anchor>
      <arglist>(const IPvXAddress &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryParse</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>ace8753204de3512c43c812e744098709</anchor>
      <arglist>(const char *addr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>a27e3ec9ec324d86c1874a03db4788a92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnspecified</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>aa3534408a9aa5e4cb3fc141597d0ed1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wordCount</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>aaac624284694bf83bdb12d55a018525e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const uint32 *</type>
      <name>words</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>ad335c80d952217df6b4d7b711c17aaa1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>a20fc3414f445a4e8896761e85a54a107</anchor>
      <arglist>(const IPAddress &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>a36d55e706dccf5e1c9fa63e64be31bf4</anchor>
      <arglist>(const IPv6Address &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>ac3395b087d85465628db7a506931870a</anchor>
      <arglist>(const IPvXAddress &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>ab51c3f3c704ec31feb810cd56c0250be</anchor>
      <arglist>(const IPAddress &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>adb7c31cb7225fd55bc98b1134766e6b1</anchor>
      <arglist>(const IPAddress &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>afdbcc530c75fd6c5519f83665745f0d9</anchor>
      <arglist>(const IPv6Address &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>a116da72223c17ba0cc7325f9586c7997</anchor>
      <arglist>(const IPv6Address &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>ab9ba217568c9e7f9ddd28b74c1f2f85a</anchor>
      <arglist>(const IPvXAddress &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>a6906d63d7f66b6b49969e803dfd38654</anchor>
      <arglist>(const IPvXAddress &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>a730c74e6cc4422b8274077256330c009</anchor>
      <arglist>(const IPvXAddress &amp;addr) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>d</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>a385ae987e7e488225e0524f35ae69fab</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isv6</name>
      <anchorfile>class_i_pv_x_address.html</anchorfile>
      <anchor>aa79f2abb477473f9d3ca71c9b2e8f58e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IQoSClassifier</name>
    <filename>class_i_qo_s_classifier.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumQueues</name>
      <anchorfile>class_i_qo_s_classifier.html</anchorfile>
      <anchor>aff6a55703d5a30ac614c0556634b8f85</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>classifyPacket</name>
      <anchorfile>class_i_qo_s_classifier.html</anchorfile>
      <anchor>a0803b87c5c372f68188ba108b03e410c</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IRadioModel</name>
    <filename>class_i_radio_model.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initializeFrom</name>
      <anchorfile>class_i_radio_model.html</anchorfile>
      <anchor>a77a41286d82a93c67d1b834e4236f0d3</anchor>
      <arglist>(cModule *radioModule)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IRadioModel</name>
      <anchorfile>class_i_radio_model.html</anchorfile>
      <anchor>aae11487a0415a6332f0cdf84d08fbc8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>calculateDuration</name>
      <anchorfile>class_i_radio_model.html</anchorfile>
      <anchor>af8aff6a5a5c7b81321818141c7d97b95</anchor>
      <arglist>(AirFrame *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isReceivedCorrectly</name>
      <anchorfile>class_i_radio_model.html</anchorfile>
      <anchor>a107eaa67a662f3dce05eb691dae90f84</anchor>
      <arglist>(AirFrame *airframe, const SnrList &amp;receivedList)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IReceptionModel</name>
    <filename>class_i_reception_model.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initializeFrom</name>
      <anchorfile>class_i_reception_model.html</anchorfile>
      <anchor>a054edd0e5822f95dff9501b96802d2ab</anchor>
      <arglist>(cModule *radioModule)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>calculateReceivedPower</name>
      <anchorfile>class_i_reception_model.html</anchorfile>
      <anchor>a4c62c5996f5afac48e0f0a88bdeed308</anchor>
      <arglist>(double pSend, double carrierFrequency, double distance)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IReceptionModel</name>
      <anchorfile>class_i_reception_model.html</anchorfile>
      <anchor>a3847fb348f7542afc8f20b0d249220b0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IRoutingTable</name>
    <filename>class_i_routing_table.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IRoutingTable</name>
      <anchorfile>class_i_routing_table.html</anchorfile>
      <anchor>a13e1d3b9f16cbce1e9063940c47bce5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>printRoutingTable</name>
      <anchorfile>class_i_routing_table.html</anchorfile>
      <anchor>ad0a94f80bbc274a87d236154052302e0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isIPForwardingEnabled</name>
      <anchorfile>class_i_routing_table.html</anchorfile>
      <anchor>a0f834149cc44f331983bcfc31e35cbf7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IPAddress</type>
      <name>getRouterId</name>
      <anchorfile>class_i_routing_table.html</anchorfile>
      <anchor>a64a9a5b1414f4da0b7b0a3e079091f62</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setRouterId</name>
      <anchorfile>class_i_routing_table.html</anchorfile>
      <anchor>ac149330686356f6ed5992ce014598f24</anchor>
      <arglist>(IPAddress a)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>configureInterfaceForIPv4</name>
      <anchorfile>class_i_routing_table.html</anchorfile>
      <anchor>a8c72322818d3cfc903c4c630dcd400c7</anchor>
      <arglist>(InterfaceEntry *ie)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceByAddress</name>
      <anchorfile>class_i_routing_table.html</anchorfile>
      <anchor>a57e790dfac86432f349e15116e5961d1</anchor>
      <arglist>(const IPAddress &amp;address) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isLocalAddress</name>
      <anchorfile>class_i_routing_table.html</anchorfile>
      <anchor>a3dad8d703bfa05731c44b3b2f0bb4ae5</anchor>
      <arglist>(const IPAddress &amp;dest) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const IPRoute *</type>
      <name>findBestMatchingRoute</name>
      <anchorfile>class_i_routing_table.html</anchorfile>
      <anchor>ab4c55c3aa659327fcb1319a34421f03a</anchor>
      <arglist>(const IPAddress &amp;dest) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceForDestAddr</name>
      <anchorfile>class_i_routing_table.html</anchorfile>
      <anchor>a0dda4a87779a949284ccead75001fa30</anchor>
      <arglist>(const IPAddress &amp;dest) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IPAddress</type>
      <name>getGatewayForDestAddr</name>
      <anchorfile>class_i_routing_table.html</anchorfile>
      <anchor>a71faece4a2646efe9296f8c20159a3ce</anchor>
      <arglist>(const IPAddress &amp;dest) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isLocalMulticastAddress</name>
      <anchorfile>class_i_routing_table.html</anchorfile>
      <anchor>a4e1eac72fd6f6b8b18fc68d1b759b557</anchor>
      <arglist>(const IPAddress &amp;dest) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MulticastRoutes</type>
      <name>getMulticastRoutesFor</name>
      <anchorfile>class_i_routing_table.html</anchorfile>
      <anchor>ad18a5ecff6a0e6e8ec1c56f54c8be2fb</anchor>
      <arglist>(const IPAddress &amp;dest) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumRoutes</name>
      <anchorfile>class_i_routing_table.html</anchorfile>
      <anchor>ada2fac98d1d1c80c291be239b075c63b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const IPRoute *</type>
      <name>getRoute</name>
      <anchorfile>class_i_routing_table.html</anchorfile>
      <anchor>a89f3eb433e309043cde517238eef5214</anchor>
      <arglist>(int k) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const IPRoute *</type>
      <name>findRoute</name>
      <anchorfile>class_i_routing_table.html</anchorfile>
      <anchor>a5dee5d086b80f1841227ad3705690179</anchor>
      <arglist>(const IPAddress &amp;target, const IPAddress &amp;netmask, const IPAddress &amp;gw, int metric=0, const char *dev=NULL) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const IPRoute *</type>
      <name>getDefaultRoute</name>
      <anchorfile>class_i_routing_table.html</anchorfile>
      <anchor>acad7b7a99d46371be9f1f180442d6de2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addRoute</name>
      <anchorfile>class_i_routing_table.html</anchorfile>
      <anchor>af423d065165da4a55e86385efe1f69d1</anchor>
      <arglist>(const IPRoute *entry)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>deleteRoute</name>
      <anchorfile>class_i_routing_table.html</anchorfile>
      <anchor>adc051b6287f397968f83aff251794cc8</anchor>
      <arglist>(const IPRoute *entry)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; IPAddress &gt;</type>
      <name>gatherAddresses</name>
      <anchorfile>class_i_routing_table.html</anchorfile>
      <anchor>a590d86464b65bae8320ff74a94537e04</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IRSVPClassifier</name>
    <filename>class_i_r_s_v_p_classifier.html</filename>
    <base>IClassifier</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IRSVPClassifier</name>
      <anchorfile>class_i_r_s_v_p_classifier.html</anchorfile>
      <anchor>a5c0ec39b36250e988c52d3380452e1f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>class_i_r_s_v_p_classifier.html</anchorfile>
      <anchor>a4351df463434c522af578c9a66bac594</anchor>
      <arglist>(const SessionObj_t &amp;session, const SenderTemplateObj_t &amp;sender, int inLabel)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IScriptable</name>
    <filename>class_i_scriptable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IScriptable</name>
      <anchorfile>class_i_scriptable.html</anchorfile>
      <anchor>aae4e051eb0e1467181677bb7e90d21af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>processCommand</name>
      <anchorfile>class_i_scriptable.html</anchorfile>
      <anchor>a8bb88a1ef72797e9e9c9f30f72f9dafe</anchor>
      <arglist>(const cXMLElement &amp;node)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Join</name>
    <filename>class_join.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_join.html</anchorfile>
      <anchor>ad5887c046bb9d0e41a530edbc7279fe7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_join.html</anchorfile>
      <anchor>a9962024bc1122683372137f338b8d2f9</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cGate *</type>
      <name>outg</name>
      <anchorfile>class_join.html</anchorfile>
      <anchor>a9d6d52def7737a7136098c39fe9bed20</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LabelOp</name>
    <filename>struct_label_op.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>label</name>
      <anchorfile>struct_label_op.html</anchorfile>
      <anchor>a80b1880188a87fb773e25cce4b7e3119</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>optcode</name>
      <anchorfile>struct_label_op.html</anchorfile>
      <anchor>a600bcf4f3fffd52d81b9bb0d414a48f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LabelRequestObj_t</name>
    <filename>struct_label_request_obj__t.html</filename>
    <member kind="function">
      <type></type>
      <name>LabelRequestObj_t</name>
      <anchorfile>struct_label_request_obj__t.html</anchorfile>
      <anchor>a8d1af88fafba94f5f627bfd14e565746</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>prot</name>
      <anchorfile>struct_label_request_obj__t.html</anchorfile>
      <anchor>a01312957fdbc7e5c7aed228e8317c4ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LDP</name>
    <filename>class_l_d_p.html</filename>
    <base>TCPSocket::CallbackInterface</base>
    <base>IClassifier</base>
    <base>INotifiable</base>
    <class kind="struct">LDP::fec_bind_t</class>
    <class kind="struct">LDP::fec_t</class>
    <class kind="struct">LDP::peer_info</class>
    <class kind="struct">LDP::pending_req_t</class>
    <member kind="typedef">
      <type>std::vector&lt; fec_t &gt;</type>
      <name>FecVector</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a8885142cabdbcdfb12cb843004e106b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; fec_bind_t &gt;</type>
      <name>FecBindVector</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>ac4dfef44f74ce936740e748b38e3fbb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; pending_req_t &gt;</type>
      <name>PendingVector</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a6760a0b95012016f5c82715e458bdc86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; peer_info &gt;</type>
      <name>PeerVector</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>aac430f243de69caa1cc37820afd1e9bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDP</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>adbf35af62eaaade603f94900fda0b1a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LDP</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>ab28df2db356d20638408f1021df8b410</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IPAddress</type>
      <name>locateNextHop</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>adc10a0f7fdde1daef9a2b236fdd5de00</anchor>
      <arglist>(IPAddress dest)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IPAddress</type>
      <name>findPeerAddrFromInterface</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a057c06f71b085683639b467bd47b4abd</anchor>
      <arglist>(std::string interfaceName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>findInterfaceFromPeerAddr</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>ab124d80cf623c4a5d4551075612b1243</anchor>
      <arglist>(IPAddress peerIP)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>findPeer</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>aaf2b4ec7ae7b2006fccd8d208dfbb471</anchor>
      <arglist>(IPAddress peerAddr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPSocket *</type>
      <name>getPeerSocket</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a37df6239993d84988793c63eaf8f1940</anchor>
      <arglist>(IPAddress peerAddr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPSocket *</type>
      <name>findPeerSocket</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a43170c3c37870c56f321b8a2e24ec420</anchor>
      <arglist>(IPAddress peerAddr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToPeer</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a05a988b6638a853db0ea2fe3cdef0f12</anchor>
      <arglist>(IPAddress dest, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FecVector::iterator</type>
      <name>findFecEntry</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>ab4e2317f84829818f0e37149da27853c</anchor>
      <arglist>(FecVector &amp;fecs, IPAddress addr, int length)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FecBindVector::iterator</type>
      <name>findFecEntry</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a3f922572f5c41fd96b2cbf7944526baa</anchor>
      <arglist>(FecBindVector &amp;fecs, int fecid, IPAddress peer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendMappingRequest</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a27a71323af2adb9a34afc88393757312</anchor>
      <arglist>(IPAddress dest, IPAddress addr, int length)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendMapping</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a3aade2e69231697175fe874a2ef9d2b2</anchor>
      <arglist>(int type, IPAddress dest, int label, IPAddress addr, int length)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendNotify</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a266295145a120bfc4392554603e3a15a</anchor>
      <arglist>(int status, IPAddress dest, IPAddress addr, int length)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>rebuildFecList</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a4f61fee380b47683aef8f450b4704940</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFecList</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a33bd46c81cf3f06f6f082c9d67ff58c5</anchor>
      <arglist>(IPAddress nextHop)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFecListEntry</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a9ebd9c14dc3c8b3818252dad37dcc5a5</anchor>
      <arglist>(fec_t oldItem)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>announceLinkChange</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a62f103f31701a61dd42b6814770245fe</anchor>
      <arglist>(int tedlinkindex)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>ad7c6de4d194eef082693fe60ae841419</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a62dffe5f68da37887959520d2d9c8aa9</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a68767ac9540ebd2165892d2a2a7c7fbb</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendHelloTo</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>af8f8d5cf6344ca5fa0c0ee4656f60f89</anchor>
      <arglist>(IPAddress dest)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>openTCPConnectionToPeer</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a3a85856691c0af7af8d927f80a4e3eca</anchor>
      <arglist>(int peerIndex)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processLDPHello</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a129493952b252d5c5d426c4056197a4f</anchor>
      <arglist>(LDPHello *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processHelloTimeout</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>aa11dcfcdebea0304d26343746d28eb6c</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processMessageFromTCP</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>ae2a3dbb01c3f0c5b317271bb50abd98f</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processLDPPacketFromTCP</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>ac330a2d78f69dddd1eb1f9479cb16709</anchor>
      <arglist>(LDPPacket *ldpPacket)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processLABEL_MAPPING</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>ad4960396a93e0b4b3b71f9cd16c2a9b7</anchor>
      <arglist>(LDPLabelMapping *packet)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processLABEL_REQUEST</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a8bbf321fe7b9eb4c2ebbc06a2a12c8d4</anchor>
      <arglist>(LDPLabelRequest *packet)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processLABEL_RELEASE</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a266cf0a6e2fe508f383e88a640697afd</anchor>
      <arglist>(LDPLabelMapping *packet)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processLABEL_WITHDRAW</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a615dc36ac669f35619acc9d4a7f35d2b</anchor>
      <arglist>(LDPLabelMapping *packet)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processNOTIFICATION</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>aba440f5b0dc9e2ee2a8360388a8503bc</anchor>
      <arglist>(LDPNotify *packet)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>lookupLabel</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a32c1d82d8c9a523a4c1e09858f14d315</anchor>
      <arglist>(IPDatagram *ipdatagram, LabelOpVector &amp;outLabel, std::string &amp;outInterface, int &amp;color)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a075009e8998b02f670d1439c33863e90</anchor>
      <arglist>(int category, const cPolymorphic *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketEstablished</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a014504d9ed3ccbb4a0366e95870eea56</anchor>
      <arglist>(int connId, void *yourPtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketDataArrived</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a7a960a6e6fdddbf58e4978ed432e63de</anchor>
      <arglist>(int connId, void *yourPtr, cPacket *msg, bool urgent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketPeerClosed</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a8b0190937343b4847d6cbc830f15b2ca</anchor>
      <arglist>(int connId, void *yourPtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketClosed</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a11b3f4de91cc4a962ec28a94c4c7c6cb</anchor>
      <arglist>(int connId, void *yourPtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketFailure</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a9e552b940ba57ad9e27d5cbeb31befa2</anchor>
      <arglist>(int connId, void *yourPtr, int code)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketStatusArrived</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>af37813ef12cecdb4c52ead27c251c23f</anchor>
      <arglist>(int connId, void *yourPtr, TCPStatusInfo *status)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>holdTime</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>adc72dc310e10bc94348b8ba0441730bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>helloInterval</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a64dabef28e6cf564b2cdfa47f11e31d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FecVector</type>
      <name>fecList</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a9e200f70feb90376616a54cc2f097495</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FecBindVector</type>
      <name>fecUp</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a4a68ff892f3bf90bf48be17ab784ab68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FecBindVector</type>
      <name>fecDown</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>ae1b59d4f467febb09406e13f610f7c7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PendingVector</type>
      <name>pending</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a057aa332bfc1ddcbc2d66e73de161af9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PeerVector</type>
      <name>myPeers</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>ac6b7a183f4c0b9b0ee62844602c81234</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IInterfaceTable *</type>
      <name>ift</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>ae0de7c03b5ac9168386ed3cd6f920c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IRoutingTable *</type>
      <name>rt</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a7eb3dc232661ebe9a2dcaf681f219aae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LIBTable *</type>
      <name>lt</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>ad01cfb57e93718e4bcb371baa1b40b2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TED *</type>
      <name>tedmod</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a0acc2a4c56957b0b30f0e8a6b2c2075f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NotificationBoard *</type>
      <name>nb</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a6cd3cdeb303dcbcd51acecae0615ffbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UDPSocket</type>
      <name>udpSocket</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a70faa45ced5c6b6f18c5015bae134956</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPSocket</type>
      <name>serverSocket</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>ae42af8d69e1e21c9dc7ac7f6fe7a35bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPSocketMap</type>
      <name>socketMap</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a168d3444b4455a308d211a24b089b5a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>sendHelloMsg</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>a326553c22a6176ba6ee7afcb4647815e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxFecid</name>
      <anchorfile>class_l_d_p.html</anchorfile>
      <anchor>aa95d15f32ce708d1cc9817586ad05857</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LDP::fec_bind_t</name>
    <filename>struct_l_d_p_1_1fec__bind__t.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>fecid</name>
      <anchorfile>struct_l_d_p_1_1fec__bind__t.html</anchorfile>
      <anchor>a641b231f6ae1b8ad59c76872031fe86c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>peer</name>
      <anchorfile>struct_l_d_p_1_1fec__bind__t.html</anchorfile>
      <anchor>a50a515dc50f5f76e99efccaa2145a14b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>label</name>
      <anchorfile>struct_l_d_p_1_1fec__bind__t.html</anchorfile>
      <anchor>a539f7f3b600b0ab7184622a5f1361f77</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LDP::fec_t</name>
    <filename>struct_l_d_p_1_1fec__t.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>fecid</name>
      <anchorfile>struct_l_d_p_1_1fec__t.html</anchorfile>
      <anchor>afc947259edf916031b6a940e0cd64ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>addr</name>
      <anchorfile>struct_l_d_p_1_1fec__t.html</anchorfile>
      <anchor>a56c9f3a1e36f0a59c7e624cf5c3592dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>length</name>
      <anchorfile>struct_l_d_p_1_1fec__t.html</anchorfile>
      <anchor>a61ca593ecfffd6a5a13466623d3f8ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>nextHop</name>
      <anchorfile>struct_l_d_p_1_1fec__t.html</anchorfile>
      <anchor>a1a70d4a30cc8629549ffe3948c90f750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LDP::peer_info</name>
    <filename>struct_l_d_p_1_1peer__info.html</filename>
    <member kind="variable">
      <type>IPAddress</type>
      <name>peerIP</name>
      <anchorfile>struct_l_d_p_1_1peer__info.html</anchorfile>
      <anchor>adf670ca2b190150e7b557fd830c74054</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>activeRole</name>
      <anchorfile>struct_l_d_p_1_1peer__info.html</anchorfile>
      <anchor>a4606158df7b7582064c78e9372bdc353</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TCPSocket *</type>
      <name>socket</name>
      <anchorfile>struct_l_d_p_1_1peer__info.html</anchorfile>
      <anchor>a52a748a6dc9b4d6ab9262305b8a60964</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>linkInterface</name>
      <anchorfile>struct_l_d_p_1_1peer__info.html</anchorfile>
      <anchor>abff497458c90c3d73c3080622c6b5adf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>timeout</name>
      <anchorfile>struct_l_d_p_1_1peer__info.html</anchorfile>
      <anchor>a62967702478b92e023d7878be08c1208</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LDP::pending_req_t</name>
    <filename>struct_l_d_p_1_1pending__req__t.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>fecid</name>
      <anchorfile>struct_l_d_p_1_1pending__req__t.html</anchorfile>
      <anchor>ac9e70bc554d3e6126af229f19a097db6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>peer</name>
      <anchorfile>struct_l_d_p_1_1pending__req__t.html</anchorfile>
      <anchor>a25aacccb518de6def2bce4ca8c01d930</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LDPAddress</name>
    <filename>class_l_d_p_address.html</filename>
    <base>LDPPacket</base>
    <member kind="function">
      <type></type>
      <name>LDPAddress</name>
      <anchorfile>class_l_d_p_address.html</anchorfile>
      <anchor>aee72669f94c4d61d00139469c1742ef1</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDPAddress</name>
      <anchorfile>class_l_d_p_address.html</anchorfile>
      <anchor>aad301d1b774c8e56d19fe2cecdfd2ec1</anchor>
      <arglist>(const LDPAddress &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LDPAddress</name>
      <anchorfile>class_l_d_p_address.html</anchorfile>
      <anchor>a0abd673720472059a543b53b4a8a9ac4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LDPAddress &amp;</type>
      <name>operator=</name>
      <anchorfile>class_l_d_p_address.html</anchorfile>
      <anchor>a474402200a26b8378ce2922a12e02624</anchor>
      <arglist>(const LDPAddress &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LDPAddress *</type>
      <name>dup</name>
      <anchorfile>class_l_d_p_address.html</anchorfile>
      <anchor>ac565d827d946ad82dba623a6b13f7daf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_l_d_p_address.html</anchorfile>
      <anchor>af2232c51e18a28da22ca46b826e8be7b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_l_d_p_address.html</anchorfile>
      <anchor>a4d1231fd1adfe6109a164c07b4875fe4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getIsWithdraw</name>
      <anchorfile>class_l_d_p_address.html</anchorfile>
      <anchor>aee4db65a0b0059bb2396132bd302d4d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsWithdraw</name>
      <anchorfile>class_l_d_p_address.html</anchorfile>
      <anchor>aa2aa64134c2257be4776ec7075cf3dfe</anchor>
      <arglist>(bool isWithdraw_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFamily</name>
      <anchorfile>class_l_d_p_address.html</anchorfile>
      <anchor>a67ac2af60472db880048c257e5b5f8f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFamily</name>
      <anchorfile>class_l_d_p_address.html</anchorfile>
      <anchor>a05e18e3aed49944009a38c235944603c</anchor>
      <arglist>(const char *family_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddressesArraySize</name>
      <anchorfile>class_l_d_p_address.html</anchorfile>
      <anchor>a6a9de6aa1831e64a36cb58f9f5709cdd</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getAddressesArraySize</name>
      <anchorfile>class_l_d_p_address.html</anchorfile>
      <anchor>aabc779b3a60d77491e89f71d5af5ec3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAddresses</name>
      <anchorfile>class_l_d_p_address.html</anchorfile>
      <anchor>a7831a7b7e31fb978ab85d657ccdccdc2</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddresses</name>
      <anchorfile>class_l_d_p_address.html</anchorfile>
      <anchor>a45471b30a069309c544df22bec374dab</anchor>
      <arglist>(unsigned int k, const char *addresses_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_l_d_p_address.html</anchorfile>
      <anchor>ad4ddbf5b82cef58b789fa96cc164cbd4</anchor>
      <arglist>(const LDPAddress &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isWithdraw_var</name>
      <anchorfile>class_l_d_p_address.html</anchorfile>
      <anchor>ab09248909272dc0cdd7a182cfe1a8eeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>family_var</name>
      <anchorfile>class_l_d_p_address.html</anchorfile>
      <anchor>a352951d90ab1322f49d758b56a9940ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string *</type>
      <name>addresses_var</name>
      <anchorfile>class_l_d_p_address.html</anchorfile>
      <anchor>a422f04d2ec326eba4d34f6593e5ef92d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>addresses_arraysize</name>
      <anchorfile>class_l_d_p_address.html</anchorfile>
      <anchor>a533b4392794885b5759895196e8ed8bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LDPHello</name>
    <filename>class_l_d_p_hello.html</filename>
    <base>LDPPacket</base>
    <member kind="function">
      <type></type>
      <name>LDPHello</name>
      <anchorfile>class_l_d_p_hello.html</anchorfile>
      <anchor>aff6d808975c07c34d6cb554f84609cf9</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDPHello</name>
      <anchorfile>class_l_d_p_hello.html</anchorfile>
      <anchor>acffd71fc45476768505382d0d923dc2b</anchor>
      <arglist>(const LDPHello &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LDPHello</name>
      <anchorfile>class_l_d_p_hello.html</anchorfile>
      <anchor>a62fc0cf8e6383df84d6be9267651481c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LDPHello &amp;</type>
      <name>operator=</name>
      <anchorfile>class_l_d_p_hello.html</anchorfile>
      <anchor>a0afbe92fca1ba4d5ffdce6d15b0dbd80</anchor>
      <arglist>(const LDPHello &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LDPHello *</type>
      <name>dup</name>
      <anchorfile>class_l_d_p_hello.html</anchorfile>
      <anchor>a81f86aa15e3b4e9630626a2c35ce052e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_l_d_p_hello.html</anchorfile>
      <anchor>a9849770eaa172c1874d476d967d8d5c0</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_l_d_p_hello.html</anchorfile>
      <anchor>a7dcf941fd6cb1dde1fa094c88835c634</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getHoldTime</name>
      <anchorfile>class_l_d_p_hello.html</anchorfile>
      <anchor>a7c2ad04a59bdf8a45391fd7ce405da56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHoldTime</name>
      <anchorfile>class_l_d_p_hello.html</anchorfile>
      <anchor>afb78fc31757757eca4fe225c2ff59650</anchor>
      <arglist>(double holdTime_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getTbit</name>
      <anchorfile>class_l_d_p_hello.html</anchorfile>
      <anchor>ac66d889132ba710d199fe0604301ac6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTbit</name>
      <anchorfile>class_l_d_p_hello.html</anchorfile>
      <anchor>a11c120f9e393b058120d0a820b9cf700</anchor>
      <arglist>(bool tbit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRbit</name>
      <anchorfile>class_l_d_p_hello.html</anchorfile>
      <anchor>a3badd0bc272618ca1e970d830fb340f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRbit</name>
      <anchorfile>class_l_d_p_hello.html</anchorfile>
      <anchor>a8613bef352d9cd00d2356529e083fce0</anchor>
      <arglist>(bool rbit_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_l_d_p_hello.html</anchorfile>
      <anchor>abd33ec1df2950e50c8bd225178c8a0ee</anchor>
      <arglist>(const LDPHello &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>holdTime_var</name>
      <anchorfile>class_l_d_p_hello.html</anchorfile>
      <anchor>a393da0bd21c0ef5d7e549f83277e343b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>tbit_var</name>
      <anchorfile>class_l_d_p_hello.html</anchorfile>
      <anchor>a675cf0e7e4e336229098b0b91cc36c81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>rbit_var</name>
      <anchorfile>class_l_d_p_hello.html</anchorfile>
      <anchor>a366e3100c0c56e02b20cca8d39c33ee4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LDPIni</name>
    <filename>class_l_d_p_ini.html</filename>
    <base>LDPPacket</base>
    <member kind="function">
      <type></type>
      <name>LDPIni</name>
      <anchorfile>class_l_d_p_ini.html</anchorfile>
      <anchor>aadd9c0b7d1e52bc35a0719ba267888b8</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDPIni</name>
      <anchorfile>class_l_d_p_ini.html</anchorfile>
      <anchor>a12c29a88b7d1022ab442a2d75010733f</anchor>
      <arglist>(const LDPIni &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LDPIni</name>
      <anchorfile>class_l_d_p_ini.html</anchorfile>
      <anchor>a6bef5518a388af7d7c4982bac4bb5fb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LDPIni &amp;</type>
      <name>operator=</name>
      <anchorfile>class_l_d_p_ini.html</anchorfile>
      <anchor>af12288859e6351896881467785e49a44</anchor>
      <arglist>(const LDPIni &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LDPIni *</type>
      <name>dup</name>
      <anchorfile>class_l_d_p_ini.html</anchorfile>
      <anchor>a9df069c6b172c7d259a52085e33bd0c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_l_d_p_ini.html</anchorfile>
      <anchor>a03a49b2764991d0c438e0137f5dfb552</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_l_d_p_ini.html</anchorfile>
      <anchor>a3e51a6895816405d611151392e740e10</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getKeepAliveTime</name>
      <anchorfile>class_l_d_p_ini.html</anchorfile>
      <anchor>ad37054bf2e87d5794104942977ae44e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKeepAliveTime</name>
      <anchorfile>class_l_d_p_ini.html</anchorfile>
      <anchor>a05ae98238254aef823968df50a3f1e68</anchor>
      <arglist>(double keepAliveTime_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getAbit</name>
      <anchorfile>class_l_d_p_ini.html</anchorfile>
      <anchor>ad9b540b5833e980860cccda438099b7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAbit</name>
      <anchorfile>class_l_d_p_ini.html</anchorfile>
      <anchor>a26769ceddbd613bd40486753fc07e482</anchor>
      <arglist>(bool abit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getDbit</name>
      <anchorfile>class_l_d_p_ini.html</anchorfile>
      <anchor>a52b45e419ec5c42afdf1a286ba829f27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDbit</name>
      <anchorfile>class_l_d_p_ini.html</anchorfile>
      <anchor>ab183088e909ac304d8b6b1c462aeb9a1</anchor>
      <arglist>(bool dbit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPvLim</name>
      <anchorfile>class_l_d_p_ini.html</anchorfile>
      <anchor>a4a4b7d3d4aab014127ebf8b812d82aad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPvLim</name>
      <anchorfile>class_l_d_p_ini.html</anchorfile>
      <anchor>acb7f9166705d7703ba0960d38a3f33ae</anchor>
      <arglist>(int pvLim_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getReceiverLDPIdentifier</name>
      <anchorfile>class_l_d_p_ini.html</anchorfile>
      <anchor>aa00c0e69c14dc8a5ddbc2dbfc83b5dfd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReceiverLDPIdentifier</name>
      <anchorfile>class_l_d_p_ini.html</anchorfile>
      <anchor>a2e9d5f5bd1213de0a2dd95dd04a25654</anchor>
      <arglist>(const char *receiverLDPIdentifier_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_l_d_p_ini.html</anchorfile>
      <anchor>a3e5ce661258ba9ecf0dd0d6d6fa9fc15</anchor>
      <arglist>(const LDPIni &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>keepAliveTime_var</name>
      <anchorfile>class_l_d_p_ini.html</anchorfile>
      <anchor>a15674991263f5f96ddee4fa642e554d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>abit_var</name>
      <anchorfile>class_l_d_p_ini.html</anchorfile>
      <anchor>abff1faac2c6d47b24d75075c5da2ef74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dbit_var</name>
      <anchorfile>class_l_d_p_ini.html</anchorfile>
      <anchor>a5f0bcb4c7caa26ab0e33bb0e4adeee63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>pvLim_var</name>
      <anchorfile>class_l_d_p_ini.html</anchorfile>
      <anchor>a9d06f86e42577b232155227b08064726</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>receiverLDPIdentifier_var</name>
      <anchorfile>class_l_d_p_ini.html</anchorfile>
      <anchor>aa70e1d4c10b1a1a1063de1793ce1da76</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LDPLabelMapping</name>
    <filename>class_l_d_p_label_mapping.html</filename>
    <base>LDPPacket</base>
    <member kind="function">
      <type></type>
      <name>LDPLabelMapping</name>
      <anchorfile>class_l_d_p_label_mapping.html</anchorfile>
      <anchor>a7b3e2595c2376780cf86c8a04febb0e6</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDPLabelMapping</name>
      <anchorfile>class_l_d_p_label_mapping.html</anchorfile>
      <anchor>a0cecffa9cd7a9425bfd5494d4427182e</anchor>
      <arglist>(const LDPLabelMapping &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LDPLabelMapping</name>
      <anchorfile>class_l_d_p_label_mapping.html</anchorfile>
      <anchor>aeb5519e398b3e2f7b26308fd6013d7fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LDPLabelMapping &amp;</type>
      <name>operator=</name>
      <anchorfile>class_l_d_p_label_mapping.html</anchorfile>
      <anchor>a670d4ad93f780e72cc9c65391a4fd9fc</anchor>
      <arglist>(const LDPLabelMapping &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LDPLabelMapping *</type>
      <name>dup</name>
      <anchorfile>class_l_d_p_label_mapping.html</anchorfile>
      <anchor>a588390712144b8a442aef82bfc0ea972</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_l_d_p_label_mapping.html</anchorfile>
      <anchor>a5310b6b05a9a545c28c66063fbec1332</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_l_d_p_label_mapping.html</anchorfile>
      <anchor>aa15c6200233e530f091160ea7cc8dfa5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FEC_TLV &amp;</type>
      <name>getFec</name>
      <anchorfile>class_l_d_p_label_mapping.html</anchorfile>
      <anchor>ab4363c064c8a65a3a5eec995462bff66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const FEC_TLV &amp;</type>
      <name>getFec</name>
      <anchorfile>class_l_d_p_label_mapping.html</anchorfile>
      <anchor>aa896f59b9c985d6ccd196fce7e031e99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFec</name>
      <anchorfile>class_l_d_p_label_mapping.html</anchorfile>
      <anchor>ad6c52260c835742b29e1db97c75601a1</anchor>
      <arglist>(const FEC_TLV &amp;fec_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getLabel</name>
      <anchorfile>class_l_d_p_label_mapping.html</anchorfile>
      <anchor>a948b6496f30a911cb48ae3dc744f676f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLabel</name>
      <anchorfile>class_l_d_p_label_mapping.html</anchorfile>
      <anchor>a0a642386c4f2a9c0b95057f1771a6bc9</anchor>
      <arglist>(int label_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_l_d_p_label_mapping.html</anchorfile>
      <anchor>a64db52077b798de8a80ae99d8dbb0ff1</anchor>
      <arglist>(const LDPLabelMapping &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::FEC_TLV</type>
      <name>fec_var</name>
      <anchorfile>class_l_d_p_label_mapping.html</anchorfile>
      <anchor>acc8d3688b055d982f9db6a1f38b8f4e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>label_var</name>
      <anchorfile>class_l_d_p_label_mapping.html</anchorfile>
      <anchor>a187be839d247726264f48e83c5498d24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LDPLabelRequest</name>
    <filename>class_l_d_p_label_request.html</filename>
    <base>LDPPacket</base>
    <member kind="function">
      <type></type>
      <name>LDPLabelRequest</name>
      <anchorfile>class_l_d_p_label_request.html</anchorfile>
      <anchor>a390d8fc10f5c8b4db46b5160cba6e8bc</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDPLabelRequest</name>
      <anchorfile>class_l_d_p_label_request.html</anchorfile>
      <anchor>a9f24c4b68375ea2d65f624b21be5c048</anchor>
      <arglist>(const LDPLabelRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LDPLabelRequest</name>
      <anchorfile>class_l_d_p_label_request.html</anchorfile>
      <anchor>a321a3bd83bf1afe69d3005f2bd9d204c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LDPLabelRequest &amp;</type>
      <name>operator=</name>
      <anchorfile>class_l_d_p_label_request.html</anchorfile>
      <anchor>ab67432fb1b1db69c0a6944780f5e3339</anchor>
      <arglist>(const LDPLabelRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LDPLabelRequest *</type>
      <name>dup</name>
      <anchorfile>class_l_d_p_label_request.html</anchorfile>
      <anchor>a635a047aef3dac3aec3fad20cfccf810</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_l_d_p_label_request.html</anchorfile>
      <anchor>abba8e408419c5a95a1d0bc2406035d4b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_l_d_p_label_request.html</anchorfile>
      <anchor>a8ed55cf555a95c19d40269013fdcb63a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FEC_TLV &amp;</type>
      <name>getFec</name>
      <anchorfile>class_l_d_p_label_request.html</anchorfile>
      <anchor>aa7f29cdcd7e83e8c5e684495a9fcf4c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const FEC_TLV &amp;</type>
      <name>getFec</name>
      <anchorfile>class_l_d_p_label_request.html</anchorfile>
      <anchor>a17d396f457b532cbf2957b78247fcb5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFec</name>
      <anchorfile>class_l_d_p_label_request.html</anchorfile>
      <anchor>ac96bd58a753d16999dcd22152ced455a</anchor>
      <arglist>(const FEC_TLV &amp;fec_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_l_d_p_label_request.html</anchorfile>
      <anchor>a913596408ce64f88726ac6342c6989fb</anchor>
      <arglist>(const LDPLabelRequest &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::FEC_TLV</type>
      <name>fec_var</name>
      <anchorfile>class_l_d_p_label_request.html</anchorfile>
      <anchor>a90e6bf3a905db3c063c37ddd9c2a86de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LDPNotify</name>
    <filename>class_l_d_p_notify.html</filename>
    <base>LDPPacket</base>
    <member kind="function">
      <type></type>
      <name>LDPNotify</name>
      <anchorfile>class_l_d_p_notify.html</anchorfile>
      <anchor>a4260e788127ee5d69bf5d21376ae5515</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDPNotify</name>
      <anchorfile>class_l_d_p_notify.html</anchorfile>
      <anchor>a4788f7bc1e328d650d282f903c7da109</anchor>
      <arglist>(const LDPNotify &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LDPNotify</name>
      <anchorfile>class_l_d_p_notify.html</anchorfile>
      <anchor>aff22c0adcc80cc455e95b76982a48518</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LDPNotify &amp;</type>
      <name>operator=</name>
      <anchorfile>class_l_d_p_notify.html</anchorfile>
      <anchor>a1b6bc3b68dac95eeb355c134a506b5b0</anchor>
      <arglist>(const LDPNotify &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LDPNotify *</type>
      <name>dup</name>
      <anchorfile>class_l_d_p_notify.html</anchorfile>
      <anchor>a7b36d4478e0ab818acc802b961b81c43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_l_d_p_notify.html</anchorfile>
      <anchor>aed436f1b92715a168a3d65b39fbea0b0</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_l_d_p_notify.html</anchorfile>
      <anchor>a708a27c5a599d1279e270171692a7a53</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getStatus</name>
      <anchorfile>class_l_d_p_notify.html</anchorfile>
      <anchor>af64186cdd2b7e4182809cfbb4b97641d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStatus</name>
      <anchorfile>class_l_d_p_notify.html</anchorfile>
      <anchor>a2299d011d7a82f9782b3815cc12f54f4</anchor>
      <arglist>(int status_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FEC_TLV &amp;</type>
      <name>getFec</name>
      <anchorfile>class_l_d_p_notify.html</anchorfile>
      <anchor>ada26aa7a219c92a899d538164510c331</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const FEC_TLV &amp;</type>
      <name>getFec</name>
      <anchorfile>class_l_d_p_notify.html</anchorfile>
      <anchor>adb7f83f75c910ceb60b8df2d0e4d72fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFec</name>
      <anchorfile>class_l_d_p_notify.html</anchorfile>
      <anchor>a9d5316c4f517facddf7888475ebaeae5</anchor>
      <arglist>(const FEC_TLV &amp;fec_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_l_d_p_notify.html</anchorfile>
      <anchor>aa954ce474f474332ec78c49bf9ea0359</anchor>
      <arglist>(const LDPNotify &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>status_var</name>
      <anchorfile>class_l_d_p_notify.html</anchorfile>
      <anchor>acd780cd1ac31647ebfa520e6c9c5bf87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::FEC_TLV</type>
      <name>fec_var</name>
      <anchorfile>class_l_d_p_notify.html</anchorfile>
      <anchor>afb03da2d0d49a56808673e445bf9a304</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LDPPacket</name>
    <filename>class_l_d_p_packet.html</filename>
    <member kind="function">
      <type></type>
      <name>LDPPacket</name>
      <anchorfile>class_l_d_p_packet.html</anchorfile>
      <anchor>a82a1972ded16ac137a3053c1cff77b5b</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDPPacket</name>
      <anchorfile>class_l_d_p_packet.html</anchorfile>
      <anchor>a8fad63fcbfa782b593bf32a35548cf05</anchor>
      <arglist>(const LDPPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LDPPacket</name>
      <anchorfile>class_l_d_p_packet.html</anchorfile>
      <anchor>a6936e542482d2e8b1d2684c9d29b2449</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LDPPacket &amp;</type>
      <name>operator=</name>
      <anchorfile>class_l_d_p_packet.html</anchorfile>
      <anchor>ae643b6736af4ab42e26378d776dfcdfc</anchor>
      <arglist>(const LDPPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LDPPacket *</type>
      <name>dup</name>
      <anchorfile>class_l_d_p_packet.html</anchorfile>
      <anchor>a249a888586404f1969e2994f81fa1f8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_l_d_p_packet.html</anchorfile>
      <anchor>a0b9edd60ff046d38b967d6cda0730c1c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_l_d_p_packet.html</anchorfile>
      <anchor>a616d08aea050237decbc1bb580d96c0a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getType</name>
      <anchorfile>class_l_d_p_packet.html</anchorfile>
      <anchor>ace0e4e87ace7cdcbfc4468e464db4f69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>class_l_d_p_packet.html</anchorfile>
      <anchor>a484a59e3cb14cb70dac6cbdf22f1fb9d</anchor>
      <arglist>(int type_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getSenderAddress</name>
      <anchorfile>class_l_d_p_packet.html</anchorfile>
      <anchor>a5969f516c19ff0d0c6b4ce6429e49f76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getSenderAddress</name>
      <anchorfile>class_l_d_p_packet.html</anchorfile>
      <anchor>afc94141de8c721088a37ece4219ef1df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSenderAddress</name>
      <anchorfile>class_l_d_p_packet.html</anchorfile>
      <anchor>ada5cc01f46a8d1285399bc4b84fb1006</anchor>
      <arglist>(const IPAddress &amp;senderAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getReceiverAddress</name>
      <anchorfile>class_l_d_p_packet.html</anchorfile>
      <anchor>aa0610b69027c3363a986c06601facabc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getReceiverAddress</name>
      <anchorfile>class_l_d_p_packet.html</anchorfile>
      <anchor>aafe6906d9397585d2cd20c7a40506ea2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReceiverAddress</name>
      <anchorfile>class_l_d_p_packet.html</anchorfile>
      <anchor>a4d67b67f693a22a8bdfa4ffdd6f0f07d</anchor>
      <arglist>(const IPAddress &amp;receiverAddress_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_l_d_p_packet.html</anchorfile>
      <anchor>ae45f6bab20f3c596db20842399bdf724</anchor>
      <arglist>(const LDPPacket &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>type_var</name>
      <anchorfile>class_l_d_p_packet.html</anchorfile>
      <anchor>a0898c8b5d2f937ab54c1d6a1847cffd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>senderAddress_var</name>
      <anchorfile>class_l_d_p_packet.html</anchorfile>
      <anchor>a33739cbbe617709b28d09383fef507ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>receiverAddress_var</name>
      <anchorfile>class_l_d_p_packet.html</anchorfile>
      <anchor>ac09225125c8813fd70d2eef06d2e0f57</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LIBTable</name>
    <filename>class_l_i_b_table.html</filename>
    <class kind="struct">LIBTable::LIBEntry</class>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>resolveLabel</name>
      <anchorfile>class_l_i_b_table.html</anchorfile>
      <anchor>acb0eeffccd645fbd9e0d104fa1f45a41</anchor>
      <arglist>(std::string inInterface, int inLabel, LabelOpVector &amp;outLabel, std::string &amp;outInterface, int &amp;color)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>installLibEntry</name>
      <anchorfile>class_l_i_b_table.html</anchorfile>
      <anchor>a6599a694b9035a18dbc01bd0c52b54f7</anchor>
      <arglist>(int inLabel, std::string inInterface, const LabelOpVector &amp;outLabel, std::string outInterface, int color)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeLibEntry</name>
      <anchorfile>class_l_i_b_table.html</anchorfile>
      <anchor>aeaf750f1e663ddd1a5a6e76406ad8a14</anchor>
      <arglist>(int inLabel)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LabelOpVector</type>
      <name>pushLabel</name>
      <anchorfile>class_l_i_b_table.html</anchorfile>
      <anchor>ac2df27758d1ee76e52d22d3ced09bbbd</anchor>
      <arglist>(int label)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LabelOpVector</type>
      <name>swapLabel</name>
      <anchorfile>class_l_i_b_table.html</anchorfile>
      <anchor>adc5fdcd5d807e663b467ff91e719873f</anchor>
      <arglist>(int label)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LabelOpVector</type>
      <name>popLabel</name>
      <anchorfile>class_l_i_b_table.html</anchorfile>
      <anchor>ad7eebe93833f85b136e60bc6ac30941e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_l_i_b_table.html</anchorfile>
      <anchor>a15aecc8b9f008f1b3ee813c242f06888</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_l_i_b_table.html</anchorfile>
      <anchor>a357a38ae995c9486090f36bf9540eee9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_l_i_b_table.html</anchorfile>
      <anchor>ab8f7135d320e2192112f2e399cd00055</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>readTableFromXML</name>
      <anchorfile>class_l_i_b_table.html</anchorfile>
      <anchor>a72b4393947461d08acba099091748064</anchor>
      <arglist>(const cXMLElement *libtable)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>routerId</name>
      <anchorfile>class_l_i_b_table.html</anchorfile>
      <anchor>af0fe8b89692f7c65b45869f98ac59ad7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxLabel</name>
      <anchorfile>class_l_i_b_table.html</anchorfile>
      <anchor>a846acf80e159ab9869d421718cc3ba02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; LIBEntry &gt;</type>
      <name>lib</name>
      <anchorfile>class_l_i_b_table.html</anchorfile>
      <anchor>a7ee1753ddcdd5111ff02a763f46924df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LIBTable::LIBEntry</name>
    <filename>struct_l_i_b_table_1_1_l_i_b_entry.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>inLabel</name>
      <anchorfile>struct_l_i_b_table_1_1_l_i_b_entry.html</anchorfile>
      <anchor>ae2fbd591dc5959f3ee023f25b89834b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>inInterface</name>
      <anchorfile>struct_l_i_b_table_1_1_l_i_b_entry.html</anchorfile>
      <anchor>ab549a3e31a4e2e51e0e182609068425f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LabelOpVector</type>
      <name>outLabel</name>
      <anchorfile>struct_l_i_b_table_1_1_l_i_b_entry.html</anchorfile>
      <anchor>adab2a7f810c4620b26e80a2dcac678e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>outInterface</name>
      <anchorfile>struct_l_i_b_table_1_1_l_i_b_entry.html</anchorfile>
      <anchor>a584b79a3c5c7c155c9b57b8482db6643</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>color</name>
      <anchorfile>struct_l_i_b_table_1_1_l_i_b_entry.html</anchorfile>
      <anchor>abeb8ec84752baa934ab01a4241e35f46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LIBTableAccess</name>
    <filename>class_l_i_b_table_access.html</filename>
    <base>ModuleAccess&lt; LIBTable &gt;</base>
    <member kind="function">
      <type></type>
      <name>LIBTableAccess</name>
      <anchorfile>class_l_i_b_table_access.html</anchorfile>
      <anchor>a94823a8555e61842cd26105fb0c3ae87</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinearMobility</name>
    <filename>class_linear_mobility.html</filename>
    <base>BasicMobility</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_linear_mobility.html</anchorfile>
      <anchor>a62140715094683043b6991fa3de8db4f</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_linear_mobility.html</anchorfile>
      <anchor>abbb8ec23b5505323f1d6ac0773235b59</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>class_linear_mobility.html</anchorfile>
      <anchor>a144bed62ee46f5204c47fd84658e45d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speed</name>
      <anchorfile>class_linear_mobility.html</anchorfile>
      <anchor>a3125832e7a9d193f3795097d1a0f3ed7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>angle</name>
      <anchorfile>class_linear_mobility.html</anchorfile>
      <anchor>aecacb8d29b3fd3f4cf85722abc9a3491</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>acceleration</name>
      <anchorfile>class_linear_mobility.html</anchorfile>
      <anchor>aadef59efc17d450a0fa214321b84f90e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>updateInterval</name>
      <anchorfile>class_linear_mobility.html</anchorfile>
      <anchor>a200d127229168a2e562ff7ea55d7d80c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>stationary</name>
      <anchorfile>class_linear_mobility.html</anchorfile>
      <anchor>aff66ce903f574561a72f6c985cc316d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LineSegmentsMobilityBase</name>
    <filename>class_line_segments_mobility_base.html</filename>
    <base>BasicMobility</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_line_segments_mobility_base.html</anchorfile>
      <anchor>a6a21e6d443656a45c5929d4b51ce3bce</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_line_segments_mobility_base.html</anchorfile>
      <anchor>afdc2cc87420812a5f24be6df868a667e</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginNextMove</name>
      <anchorfile>class_line_segments_mobility_base.html</anchorfile>
      <anchor>aa41f2b6ff6946938226f7a54a4c8fa26</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchorfile>class_line_segments_mobility_base.html</anchorfile>
      <anchor>ae9b65139861752e826e50eb23cd5a470</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>class_line_segments_mobility_base.html</anchorfile>
      <anchor>a91679201c96a6d27f0467e5a718264f7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>updateInterval</name>
      <anchorfile>class_line_segments_mobility_base.html</anchorfile>
      <anchor>ae3861a25e0556dccb3a3c7e17c1c06fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>targetTime</name>
      <anchorfile>class_line_segments_mobility_base.html</anchorfile>
      <anchor>ae532cb827c80ea05796c6706dda421aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>targetPos</name>
      <anchorfile>class_line_segments_mobility_base.html</anchorfile>
      <anchor>acc2b14ca70a4318da1cc96893c39265c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>step</name>
      <anchorfile>class_line_segments_mobility_base.html</anchorfile>
      <anchor>a39685badba4258cb733b94bb5139f667</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>stationary</name>
      <anchorfile>class_line_segments_mobility_base.html</anchorfile>
      <anchor>ae9cc00fab855c2df3b9dc3a545a7239c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Link</name>
    <filename>class_link.html</filename>
    <member kind="function">
      <type></type>
      <name>Link</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>a1918a8473cee40bbed17b8e926cb85d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Link</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>a87b874d9542a5e41641059241d33eddf</anchor>
      <arglist>(const Link &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Link</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>a0eb3b488dc57006d2b0af69ea45c80f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Link &amp;</type>
      <name>operator=</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>a8f3dc5af949884ef7122df8e7659e8f5</anchor>
      <arglist>(const Link &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Link *</type>
      <name>dup</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>aed4a58f8850b06316f824fc84b05ed65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>a5355daf8e4ae772b893c63ef9a1015f3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>a1951f494d2926a95ff4db8926bf33a3f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getLinkID</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>a7a066e39e8525fd0961629a3fa1953af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getLinkID</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>ad61cbc8e20c5ad99504b4652e22c72d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLinkID</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>a4f4d64f43cc24735ea3d899a4421cfc1</anchor>
      <arglist>(const IPAddress &amp;linkID_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>getLinkData</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>a12a8fd313e13f9bcdd588b1992b0c08a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLinkData</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>ada3c5e9db6b2236f7fce70375990f1a8</anchor>
      <arglist>(unsigned long linkData_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getType</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>aaa965c3ed01f358c7c328a361db3900c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>a1e07d90f55e71228ffdd67ef136fb784</anchor>
      <arglist>(unsigned char type_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getNumberOfTOS</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>a7d8a7c45c75188bd49a1a6b4880fb11f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumberOfTOS</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>a764806973ae0dd1b99fba65c943eed9c</anchor>
      <arglist>(unsigned char numberOfTOS_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>getLinkCost</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>a2805093b3a4c1122c97de738811ee76c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLinkCost</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>a6eb9c5ffb0ee66e4a491bf90a571b7c5</anchor>
      <arglist>(unsigned long linkCost_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTosDataArraySize</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>a0ca072643a7a5d59790f271cc1d075f9</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getTosDataArraySize</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>acba4593e39ddf1deef479469b0ac54d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TOSData &amp;</type>
      <name>getTosData</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>a0be1dcf9558b224370ab2653583770e9</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TOSData &amp;</type>
      <name>getTosData</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>a7c72ce1711933d7e93825ac1cd3c07d9</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTosData</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>add05d3d1492f49701c9689a17340292f</anchor>
      <arglist>(unsigned int k, const TOSData &amp;tosData_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>adaee58b9d77d3157057d50b1d83a7180</anchor>
      <arglist>(const Link &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>linkID_var</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>a8d85aa77c24be17c868f46c46fafd140</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>linkData_var</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>ac5852793596f35f40a408ffa158d3971</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>type_var</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>a53fcbf98418edca2d5dbf21c86a51e59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>numberOfTOS_var</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>a3ae033d8977027865bb6a3cec308173c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>linkCost_var</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>a45b1a940ab7fd197ca1f772216cd72c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::TOSData *</type>
      <name>tosData_var</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>a7d7cb53e0f517c5b45caeea79d49d0d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>tosData_arraysize</name>
      <anchorfile>class_link.html</anchorfile>
      <anchor>a1a64331954837bc333a449b132cfd220</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinkStateMsg</name>
    <filename>class_link_state_msg.html</filename>
    <member kind="function">
      <type></type>
      <name>LinkStateMsg</name>
      <anchorfile>class_link_state_msg.html</anchorfile>
      <anchor>a5423a1c4d5a86db5e282fe8dff9bcea2</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinkStateMsg</name>
      <anchorfile>class_link_state_msg.html</anchorfile>
      <anchor>a045888caef1514c90dfb071db8555897</anchor>
      <arglist>(const LinkStateMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinkStateMsg</name>
      <anchorfile>class_link_state_msg.html</anchorfile>
      <anchor>aca5050d2f0ac5a7ce55b670b66906bcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LinkStateMsg &amp;</type>
      <name>operator=</name>
      <anchorfile>class_link_state_msg.html</anchorfile>
      <anchor>ab9ce810e3271d74f731a03a05f32f706</anchor>
      <arglist>(const LinkStateMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LinkStateMsg *</type>
      <name>dup</name>
      <anchorfile>class_link_state_msg.html</anchorfile>
      <anchor>aebb0bbfcf3f98e44ba6269a518e30fc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_link_state_msg.html</anchorfile>
      <anchor>a3a72902614306f7836ddad109c41d2b0</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_link_state_msg.html</anchorfile>
      <anchor>a3a8de19f1ba2f9a04bce1d96164b079c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLinkInfoArraySize</name>
      <anchorfile>class_link_state_msg.html</anchorfile>
      <anchor>a74d25091044afe00d9dc464a6f9cd573</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getLinkInfoArraySize</name>
      <anchorfile>class_link_state_msg.html</anchorfile>
      <anchor>a0bdb4a8e13e87aa454a2ed3615af77bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TELinkStateInfo &amp;</type>
      <name>getLinkInfo</name>
      <anchorfile>class_link_state_msg.html</anchorfile>
      <anchor>a21190a7154d125e4d2fa776e6e94a5c0</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TELinkStateInfo &amp;</type>
      <name>getLinkInfo</name>
      <anchorfile>class_link_state_msg.html</anchorfile>
      <anchor>ae41fdc894dd7190f3420b532f1c490e4</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLinkInfo</name>
      <anchorfile>class_link_state_msg.html</anchorfile>
      <anchor>a4973069ad40fc4d9db8052bdab882aea</anchor>
      <arglist>(unsigned int k, const TELinkStateInfo &amp;linkInfo_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRequest</name>
      <anchorfile>class_link_state_msg.html</anchorfile>
      <anchor>afe68941bb7e0526af03eb9be759c1f4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRequest</name>
      <anchorfile>class_link_state_msg.html</anchorfile>
      <anchor>a182b89a703dddfa86c267755334f3e5e</anchor>
      <arglist>(bool request_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommand</name>
      <anchorfile>class_link_state_msg.html</anchorfile>
      <anchor>a7486b0273bbf302e80cd4b9e24fd93a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchorfile>class_link_state_msg.html</anchorfile>
      <anchor>a33feef5d6d5fa1fd0835dc7df2668477</anchor>
      <arglist>(int command_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_link_state_msg.html</anchorfile>
      <anchor>adf08052fe53b1d3f2c28b33754d139df</anchor>
      <arglist>(const LinkStateMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::TELinkStateInfo *</type>
      <name>linkInfo_var</name>
      <anchorfile>class_link_state_msg.html</anchorfile>
      <anchor>aff1b774b9afa94a1c514169c922fb0c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>linkInfo_arraysize</name>
      <anchorfile>class_link_state_msg.html</anchorfile>
      <anchor>a151dab4832e95f278b79832661552cc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>request_var</name>
      <anchorfile>class_link_state_msg.html</anchorfile>
      <anchor>aa27b8f12ba022d041b031d7afe7263a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>command_var</name>
      <anchorfile>class_link_state_msg.html</anchorfile>
      <anchor>a3f963ac1a41315ddec3a2aa5e3b10adc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinkStateRouting</name>
    <filename>class_link_state_routing.html</filename>
    <base>INotifiable</base>
    <member kind="function">
      <type></type>
      <name>LinkStateRouting</name>
      <anchorfile>class_link_state_routing.html</anchorfile>
      <anchor>aeb64ae785f533259fd8da162400b2ad7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinkStateRouting</name>
      <anchorfile>class_link_state_routing.html</anchorfile>
      <anchor>ae5d2a91a4ec28e5f75a17a1de6804716</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_link_state_routing.html</anchorfile>
      <anchor>a0271766286d9fb98a38ee53c6eee8be3</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_link_state_routing.html</anchorfile>
      <anchor>a8486f04ef005b1ec004b0418db4fc9d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_link_state_routing.html</anchorfile>
      <anchor>adcd65572bd812c97222dfd25dc9de1a9</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processLINK_STATE_MESSAGE</name>
      <anchorfile>class_link_state_routing.html</anchorfile>
      <anchor>a9326b19a88da1ba1af639fe6a820fb36</anchor>
      <arglist>(LinkStateMsg *msg, IPAddress sender)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchorfile>class_link_state_routing.html</anchorfile>
      <anchor>a4192929ab1fa083342047b67401d3006</anchor>
      <arglist>(int category, const cPolymorphic *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToPeers</name>
      <anchorfile>class_link_state_routing.html</anchorfile>
      <anchor>abe98db23137657d430814f3dbaadfe91</anchor>
      <arglist>(const std::vector&lt; TELinkStateInfo &gt; &amp;list, bool req, IPAddress exceptPeer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToPeer</name>
      <anchorfile>class_link_state_routing.html</anchorfile>
      <anchor>a76bb6a317013baecf987bcfafa1aec90</anchor>
      <arglist>(IPAddress peer, const std::vector&lt; TELinkStateInfo &gt; &amp;list, bool req)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToIP</name>
      <anchorfile>class_link_state_routing.html</anchorfile>
      <anchor>a82cb1475d7be4ebdb12e22f4a98e4db5</anchor>
      <arglist>(LinkStateMsg *msg, IPAddress destAddr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TED *</type>
      <name>tedmod</name>
      <anchorfile>class_link_state_routing.html</anchorfile>
      <anchor>ab491ddada5bdd6864e72e5b86f883b39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>announceMsg</name>
      <anchorfile>class_link_state_routing.html</anchorfile>
      <anchor>a039b54b4e936d3c3279e3f67ef996b80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>routerId</name>
      <anchorfile>class_link_state_routing.html</anchorfile>
      <anchor>ad5deb130d86431a6aafd04836f9f7fd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddressVector</type>
      <name>peerIfAddrs</name>
      <anchorfile>class_link_state_routing.html</anchorfile>
      <anchor>aa33c276e3e041c1b357a2b8542f1ab5f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LSAProcessingMarker</name>
    <filename>class_l_s_a_processing_marker.html</filename>
    <member kind="function">
      <type></type>
      <name>LSAProcessingMarker</name>
      <anchorfile>class_l_s_a_processing_marker.html</anchorfile>
      <anchor>a2c6604aaa34857f74589fb524df82190</anchor>
      <arglist>(unsigned int counter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LSAProcessingMarker</name>
      <anchorfile>class_l_s_a_processing_marker.html</anchorfile>
      <anchor>af72d80d2871771cef8125f05abc12864</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>index</name>
      <anchorfile>class_l_s_a_processing_marker.html</anchorfile>
      <anchor>a728c343db32e3f2bfa2731598e1782d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LSARequest</name>
    <filename>struct_l_s_a_request.html</filename>
    <member kind="function">
      <type></type>
      <name>LSARequest</name>
      <anchorfile>struct_l_s_a_request.html</anchorfile>
      <anchor>a4399a2aa4181f1275ff802860177040e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>lsType</name>
      <anchorfile>struct_l_s_a_request.html</anchorfile>
      <anchor>a0b47e91096b8c5d6074e3c6eb555a058</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>linkStateID</name>
      <anchorfile>struct_l_s_a_request.html</anchorfile>
      <anchor>a74fe12f2ba677b23a4f846ab98ec1cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::IPAddress</type>
      <name>advertisingRouter</name>
      <anchorfile>struct_l_s_a_request.html</anchorfile>
      <anchor>ac23bad9dba358597c60ea4a1d6d61ed1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Mac80211</name>
    <filename>class_mac80211.html</filename>
    <base>WirelessMacBase</base>
    <base>INotifiable</base>
    <member kind="function">
      <type></type>
      <name>Mac80211</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a8b1273f60ad9725e9d657c729740899a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Mac80211</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a7b58cb4d498feea3ea287b72de4b7313</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>afff07fb51cb6f8d89794b31e57a70d82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>ab81dae24d79c2ef010301e2c219966c1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>registerInterface</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>ae3078154ed54cde61d44b7bd227b75be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a45135e1a304c496b8c51fef88145e7c0</anchor>
      <arglist>(int category, const cPolymorphic *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a990af33f857669759da0cbeebd1c2431</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>ad7bce39f2c4cc648b6571ae5bc622103</anchor>
      <arglist>(cPacket *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleCommand</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>aa2fe838bd226e9efb04477d87d3fbfab</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>aba69300333bac6d93a3a28224037aade</anchor>
      <arglist>(cPacket *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEndContentionTimer</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a0a87fa1791117ef1dd1841ba217e4245</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMsgNotForMe</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a50acb267ae4092cea8399a10d10aab37</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMsgForMe</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>aa0b767642d86d3b66f1d3258065fe5ae</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleBroadcastMsg</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>adfcf8b7a5e1db233a1bd717cecaf49bd</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEndTransmissionTimer</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>ac6e3ffa0213257e6f4336295bc6c52b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEndSifsTimer</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a7d36a55827a7ea91b2539c86d79349af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimeoutTimer</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>ab5fcba8c7a3878ac59195a483ba35a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleNavTimer</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a23a142d65d7a0dcba4a60c0f509ab5b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRTSframe</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a98ad0d3935d620b33302e5230b395685</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDATAframe</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>ab0844f9dbcece750c9a58ca9f0a73fe1</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleACKframe</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a50cb85360462eb7d256ec8a0b493ca44</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleCTSframe</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>ae1e17af7dddc261d7947d48a1f4d0e21</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDATAframe</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a0bc84e36d3aaf65af29a5aded9d0ef50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendACKframe</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a1c404a5176db493c2fefb71537783607</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendCTSframe</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a1fd59a589e53facb68c13be84521a49e</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendRTSframe</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a3104750758ab171b20ffcfeae0079a78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendBROADCASTframe</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a26b30d048980b56d79c04e859bfce009</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Mac80211Pkt *</type>
      <name>encapsMsg</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a008b57947b7d9287bb34b1e67094ebb8</anchor>
      <arglist>(cPacket *netw)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>decapsulateAndSendUp</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a5c369fe6fc9f0d0b491d242810714b2c</anchor>
      <arglist>(Mac80211Pkt *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Mac80211Pkt *</type>
      <name>buildDATAframe</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a7945493d4537fd28f78d4b2daca8ff57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Mac80211Pkt *</type>
      <name>buildACKframe</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a1103d3632c895143607133688783042f</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Mac80211Pkt *</type>
      <name>buildCTSframe</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a4ad0c06b8940a8fc5463d29d8fda423d</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Mac80211Pkt *</type>
      <name>buildRTSframe</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a94fc835cfeeacad4375aa46f0facb915</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Mac80211Pkt *</type>
      <name>buildBROADCASTframe</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>aa6aae4c20516ad33fb889336d27e8dab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginNewCycle</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>ab3030c86acac78401f877a61cefcdad6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>computeBackoff</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a897651c7f7dd8d9ed2f583db0e4550e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>computeContentionWindow</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a2eaddea39a3799f7c2de9e62cef339cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>testMaxAttempts</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a72e78257babff863ca8749b2bb1a97f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>computeTimeout</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a106323e58027710125c0963c5cda3a88</anchor>
      <arglist>(_802_11frameType type, simtime_t last_frame_duration)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>computePacketDuration</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a0ddb885ea2fc455ad3076a9b9327147a</anchor>
      <arglist>(int bits)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setState</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a9fc6eb078e53740d354f8ea7b9d94713</anchor>
      <arglist>(State state)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const char *</type>
      <name>stateName</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>ade8a90e665191333e610b60bad4a32a1</anchor>
      <arglist>(State state)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const char *</type>
      <name>timerTypeName</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a5f781f421a39d163f2baed01473801f8</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const char *</type>
      <name>pktTypeName</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a7e80a017fe350632553db643c0033acc</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>myMacAddr</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a575be19d3e428551aa4e3ecfb48fcf49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>timeout</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a2d31f97b0662b8e37f090c3b996cec82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>nav</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a35efb0198d0085a341aba515bec9146f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>contention</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>aea1b09528a5051a1d08ec029177b8ef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endTransmission</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>abe4522bcfe2b0a6d4275fe2be9226142</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endSifs</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>acbbc0f188ff710bbf60a5b64f2ce4dd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>EIFS</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>aba0a45a5ae60f3330f57655096b1364e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>BW</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a8aa2e915f41c451a2c83de8aab09594c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>State</type>
      <name>state</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a56fa75f3eb056ae29b1a4b8da0035d8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RadioState::State</type>
      <name>radioState</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a1c357b92c014552612da4d21f2d1387b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxQueueSize</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a9df7f8967859f0870597e866677c8af5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>nextIsBroadcast</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a5d8e9b53c8d6cb0116feed506d843e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MacPktList</type>
      <name>fromUpperLayer</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a969e8e3a592dffccea28596c61b2af50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>retryCounter</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a2e6f9111bcd385f606abf94da7e8b44e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>tryWithoutBackoff</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>aa04ef4245cd9721019b4e0b2d3164ec2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>rtsCts</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>ad0d07dd20d64f623bba85ab34a708d34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>delta</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>ab9f0ea820748af6d640569fc76f39659</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a126c9db5a54bafa6ad74eb3ee24bd936</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>broadcastBackoff</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>afa01e3d776f586cab65b6cf45eac59d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>timerType</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a381307739876ed0d015352b95bd93186</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIMEOUT</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a381307739876ed0d015352b95bd93186a317269d758fc1f055750d43926abbb2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NAV</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a381307739876ed0d015352b95bd93186ad2d7f908db1dc3ed72e451dad336d654</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONTENTION</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a381307739876ed0d015352b95bd93186ab091712e64b8b82a904b5819b44c0ce2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>END_TRANSMISSION</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a381307739876ed0d015352b95bd93186a6aa35f51fc3714f21930242d9a802471</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>END_SIFS</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a381307739876ed0d015352b95bd93186ae116234508b0af14c6e33ff5627eef0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>State</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a7ff0b8b49d1a93feae6f808caf5fe447</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WFDATA</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a7ff0b8b49d1a93feae6f808caf5fe447abe0abc1112335ff66c1eef6bd95371e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QUIET</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a7ff0b8b49d1a93feae6f808caf5fe447a4cfe7a25808b0e110d662483abec7256</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IDLE</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a7ff0b8b49d1a93feae6f808caf5fe447a8904ce43407ca530f7fe83d63c558e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONTEND</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a7ff0b8b49d1a93feae6f808caf5fe447ae138f38743ca77f1300a24d4d79786fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WFCTS</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a7ff0b8b49d1a93feae6f808caf5fe447accc67a0993941984c4f6b49c633c2ad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WFACK</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a7ff0b8b49d1a93feae6f808caf5fe447a50a717bfadf9a3fdd634d77950607278</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUSY</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a7ff0b8b49d1a93feae6f808caf5fe447aa1070f3c837e8dc4d7890536f7cfbaf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::list&lt; Mac80211Pkt * &gt;</type>
      <name>MacPktList</name>
      <anchorfile>class_mac80211.html</anchorfile>
      <anchor>a565ab82077f95d80ec44a4a4fed08ab9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Mac80211Pkt</name>
    <filename>class_mac80211_pkt.html</filename>
    <base>MacPkt</base>
    <member kind="function">
      <type></type>
      <name>Mac80211Pkt</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>acb1acab70511a8f72c91126f9fdfc208</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mac80211Pkt</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>abe7c0c369090d23061c5cf2f37acc209</anchor>
      <arglist>(const Mac80211Pkt &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Mac80211Pkt</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>ae9e07f9d3a3a0cfa7baf6bf8e28f65d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Mac80211Pkt &amp;</type>
      <name>operator=</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>ad331807f8af5caaffb5b5907bb11eeaf</anchor>
      <arglist>(const Mac80211Pkt &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mac80211Pkt *</type>
      <name>dup</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>a776e1a1cbb1ffe3ab3de3021c98dcf73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>a1144a74898858f49dad6127b7e8be378</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>aaad500fa35ddd6977afa79bb7be354e3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getAddress3</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>a23a4ef5064f02ab3baeb6c981112bd62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress3</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>a3d8f2a284302fc582b579d24e7b049a5</anchor>
      <arglist>(int address3_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getAddress4</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>adc552c838cf52c72aaff37535e8201cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress4</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>a4974080b0ef69df4abdcd6c63786f861</anchor>
      <arglist>(int address4_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getDuration</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>a09e39966710115add8cdc1b774313570</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDuration</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>ac410385ac1024afcd8a410fdec169748</anchor>
      <arglist>(simtime_t duration_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getFragmentation</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>a22e372ef8e329454b1cd5efcd87bb379</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFragmentation</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>a40f140d8d125c68d654420b4fd591d16</anchor>
      <arglist>(int fragmentation_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getInformationDS</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>a0fe52502bb84646b6b8847502654565e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInformationDS</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>a5f13ec65184a72d6f7bc9fc10efd5d72</anchor>
      <arglist>(int informationDS_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSequenceControl</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>ae7d0482b082ff80790aefcf31fd59654</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSequenceControl</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>abaf46c49d42edb1f64e29db53a9b8c7e</anchor>
      <arglist>(int sequenceControl_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>ac28b8ac3d496ad7e1b880ccda716d5cc</anchor>
      <arglist>(const Mac80211Pkt &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>address3_var</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>af7f74328cdd7f690d057fa3f5e9a733f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>address4_var</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>ac2a02bf19c58439b1424760faa4f8418</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>duration_var</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>a915c6675d8a8ea72deea2192b3c51172</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>fragmentation_var</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>a64030e6443cf9d6e4aad55cc32ab89da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>informationDS_var</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>ad84dd60877536e0c74274979ab20c868</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sequenceControl_var</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>a2aedb86f996b4a010e796041b8b45d65</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MACAddress</name>
    <filename>class_m_a_c_address.html</filename>
    <member kind="function">
      <type></type>
      <name>MACAddress</name>
      <anchorfile>class_m_a_c_address.html</anchorfile>
      <anchor>a155b01d9d9c04fbe13ea9b821519b571</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MACAddress</name>
      <anchorfile>class_m_a_c_address.html</anchorfile>
      <anchor>a46d88d3231c166f8f6305e181e62a02e</anchor>
      <arglist>(const char *hexstr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MACAddress</name>
      <anchorfile>class_m_a_c_address.html</anchorfile>
      <anchor>a9ab1361f2773c6840f8fc96f73000b20</anchor>
      <arglist>(const MACAddress &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>MACAddress &amp;</type>
      <name>operator=</name>
      <anchorfile>class_m_a_c_address.html</anchorfile>
      <anchor>a8a70204a1ca30ff64a7acf36e8fa1ed4</anchor>
      <arglist>(const MACAddress &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getAddressSize</name>
      <anchorfile>class_m_a_c_address.html</anchorfile>
      <anchor>a5f94a6533e6b7854c43c0a562622156a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>getAddressByte</name>
      <anchorfile>class_m_a_c_address.html</anchorfile>
      <anchor>ac6db3e8b6dd37f0a93d89367fefb9d27</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAddressByte</name>
      <anchorfile>class_m_a_c_address.html</anchorfile>
      <anchor>a58b9995961b675dc92e06e769c01565c</anchor>
      <arglist>(unsigned int k, unsigned char addrbyte)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryParse</name>
      <anchorfile>class_m_a_c_address.html</anchorfile>
      <anchor>a4e4d6d6314b17e0b7c76356db6b7e794</anchor>
      <arglist>(const char *hexstr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAddress</name>
      <anchorfile>class_m_a_c_address.html</anchorfile>
      <anchor>a8098d36b9f4a40ef61e1a3cb62cb27dd</anchor>
      <arglist>(const char *hexstr)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char *</type>
      <name>getAddressBytes</name>
      <anchorfile>class_m_a_c_address.html</anchorfile>
      <anchor>a13c0320b453dd1f0cb462cb8cbe0067a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAddressBytes</name>
      <anchorfile>class_m_a_c_address.html</anchorfile>
      <anchor>a6804ca5591fc6eeb256cc487805a0927</anchor>
      <arglist>(unsigned char *addrbytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBroadcast</name>
      <anchorfile>class_m_a_c_address.html</anchorfile>
      <anchor>a38c4ea471051c76e593f2c6b0340b1fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBroadcast</name>
      <anchorfile>class_m_a_c_address.html</anchorfile>
      <anchor>aa65a288ef8fe0e08e66912ffda5e3706</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMulticast</name>
      <anchorfile>class_m_a_c_address.html</anchorfile>
      <anchor>aec80ce7ee8f529716e4b9354e93ca3c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnspecified</name>
      <anchorfile>class_m_a_c_address.html</anchorfile>
      <anchor>ae41af013d782b46483e7d0c84f0ed107</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>class_m_a_c_address.html</anchorfile>
      <anchor>a5eed6450abcdd795b2a3d59828a29802</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>class_m_a_c_address.html</anchorfile>
      <anchor>a2d1669ce517436105cd75faed677a303</anchor>
      <arglist>(const MACAddress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_m_a_c_address.html</anchorfile>
      <anchor>af52a8fbbad1c1d4fa4c4c4689911698d</anchor>
      <arglist>(const MACAddress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>class_m_a_c_address.html</anchorfile>
      <anchor>a931bca85d72f853c0a5bda55edd85365</anchor>
      <arglist>(const MACAddress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareTo</name>
      <anchorfile>class_m_a_c_address.html</anchorfile>
      <anchor>a606bb3ec3982d81913c464c18f34db6f</anchor>
      <arglist>(const MACAddress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>InterfaceToken</type>
      <name>formInterfaceIdentifier</name>
      <anchorfile>class_m_a_c_address.html</anchorfile>
      <anchor>af646c7d6a3dbe4a94465fd3ec144f08f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MACAddress</type>
      <name>generateAutoAddress</name>
      <anchorfile>class_m_a_c_address.html</anchorfile>
      <anchor>a020d8e71aa50506e2b29a15833fedfd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const MACAddress</type>
      <name>UNSPECIFIED_ADDRESS</name>
      <anchorfile>class_m_a_c_address.html</anchorfile>
      <anchor>a9083fdb636ab09f77e7af806f2d471b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const MACAddress</type>
      <name>BROADCAST_ADDRESS</name>
      <anchorfile>class_m_a_c_address.html</anchorfile>
      <anchor>a64288e3935e32fec17884c040cf2d2e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned char</type>
      <name>address</name>
      <anchorfile>class_m_a_c_address.html</anchorfile>
      <anchor>a6e7bca777fbc64772a1a065fa9906caa</anchor>
      <arglist>[6]</arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static unsigned int</type>
      <name>autoAddressCtr</name>
      <anchorfile>class_m_a_c_address.html</anchorfile>
      <anchor>a061dad67b44a20a397f0ea3b23666747</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MacPkt</name>
    <filename>class_mac_pkt.html</filename>
    <member kind="function">
      <type></type>
      <name>MacPkt</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>a1f24bd362499c0ebe6528eff055ca57c</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MacPkt</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>adc3e316e7e97db79eb6f1a3772b9ef7d</anchor>
      <arglist>(const MacPkt &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MacPkt</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>aee59ef903831b032bb47e54f34466c4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MacPkt &amp;</type>
      <name>operator=</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>a681e8e899f966bbf57abc045ea336d04</anchor>
      <arglist>(const MacPkt &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MacPkt *</type>
      <name>dup</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>aa69f340785a86e94ab9f0a50d3877819</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>aef7e817d2be4e94a533a89e5b6d78c59</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>aa028fb1b5ccd6142b2078843531e48d9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getDestAddr</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>a4be021c42528e2ce233fc55d4c625df2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getDestAddr</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>aafa752a296f96a8674601c9a6b67f14f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestAddr</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>af609a2487833119cf327886ef6a59bb5</anchor>
      <arglist>(const MACAddress &amp;destAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getSrcAddr</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>a9e164ec2891b32433e33b052c5c1babc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getSrcAddr</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>a6fc04baea93fcccbc904fd1ffb815c71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcAddr</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>a836e58e0ceb5fada634e306e4047d9c3</anchor>
      <arglist>(const MACAddress &amp;srcAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getChannelId</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>a361e991df712143994ed1055a76599db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChannelId</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>a257296fbb5ce0733cef54aedf3aabe9c</anchor>
      <arglist>(int channelId_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>ab0f0ba5f0db2897fc765c2e36c52eb06</anchor>
      <arglist>(const MacPkt &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::MACAddress</type>
      <name>destAddr_var</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>ae36a4d82ade9006a653f70ec7bd09205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::MACAddress</type>
      <name>srcAddr_var</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>a1f26ef373f833586630e4275bea66182</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>channelId_var</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>a75724c7d4c5684d4497a33b4f53d990c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MACRelayUnitBase</name>
    <filename>class_m_a_c_relay_unit_base.html</filename>
    <class kind="struct">MACRelayUnitBase::AddressEntry</class>
    <class kind="struct">MACRelayUnitBase::MAC_compare</class>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; MACAddress, AddressEntry, MAC_compare &gt;</type>
      <name>AddressTable</name>
      <anchorfile>class_m_a_c_relay_unit_base.html</anchorfile>
      <anchor>aba0ef6cb1cfc665e82cae1ce9ce38e08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_m_a_c_relay_unit_base.html</anchorfile>
      <anchor>a4d846b323795bae6fbb578f8b07982cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAndDispatchFrame</name>
      <anchorfile>class_m_a_c_relay_unit_base.html</anchorfile>
      <anchor>af0313770e0f6ada1e12f503f115a9537</anchor>
      <arglist>(EtherFrame *frame, int inputport)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>broadcastFrame</name>
      <anchorfile>class_m_a_c_relay_unit_base.html</anchorfile>
      <anchor>aec41b3b98d4b6fd91d39b835f1d2dd26</anchor>
      <arglist>(EtherFrame *frame, int inputport)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>readAddressTable</name>
      <anchorfile>class_m_a_c_relay_unit_base.html</anchorfile>
      <anchor>a5feb1553da835940e10de0fcff65e0d5</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateTableWithAddress</name>
      <anchorfile>class_m_a_c_relay_unit_base.html</anchorfile>
      <anchor>a91c365b7d80f253fae163a7de85e6713</anchor>
      <arglist>(MACAddress &amp;address, int portno)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>getPortForAddress</name>
      <anchorfile>class_m_a_c_relay_unit_base.html</anchorfile>
      <anchor>a79df0c78620422a3bf7946c012b87312</anchor>
      <arglist>(MACAddress &amp;address)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>printAddressTable</name>
      <anchorfile>class_m_a_c_relay_unit_base.html</anchorfile>
      <anchor>a121d2226709a72f763eeec35365b079e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeAgedEntriesFromTable</name>
      <anchorfile>class_m_a_c_relay_unit_base.html</anchorfile>
      <anchor>a4cb990caa576a010563dec91488e64a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeOldestTableEntry</name>
      <anchorfile>class_m_a_c_relay_unit_base.html</anchorfile>
      <anchor>ad7882f6da0afcdf78c481fca302b8d23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendPauseFrame</name>
      <anchorfile>class_m_a_c_relay_unit_base.html</anchorfile>
      <anchor>acd1663a5228e6a1437a1db2f1f5fc548</anchor>
      <arglist>(int portno, int pauseUnits)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numPorts</name>
      <anchorfile>class_m_a_c_relay_unit_base.html</anchorfile>
      <anchor>ad9f25627cc52e368ccdec23b8885b2d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>addressTableSize</name>
      <anchorfile>class_m_a_c_relay_unit_base.html</anchorfile>
      <anchor>aacb3805c6509a53f41e1651e65d8a7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>agingTime</name>
      <anchorfile>class_m_a_c_relay_unit_base.html</anchorfile>
      <anchor>ae71b30a18af563144dc599ca0d7ef7fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AddressTable</type>
      <name>addresstable</name>
      <anchorfile>class_m_a_c_relay_unit_base.html</anchorfile>
      <anchor>a2568accc9383c0026b31bca43b3add9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>seqNum</name>
      <anchorfile>class_m_a_c_relay_unit_base.html</anchorfile>
      <anchor>a62c8de86ef6814fe895d112ba4084526</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MACRelayUnitBase::AddressEntry</name>
    <filename>struct_m_a_c_relay_unit_base_1_1_address_entry.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>portno</name>
      <anchorfile>struct_m_a_c_relay_unit_base_1_1_address_entry.html</anchorfile>
      <anchor>a2870af84a732696337e300517d82e76d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>insertionTime</name>
      <anchorfile>struct_m_a_c_relay_unit_base_1_1_address_entry.html</anchorfile>
      <anchor>a240572b818118ca769059c533177ee07</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MACRelayUnitBase::MAC_compare</name>
    <filename>struct_m_a_c_relay_unit_base_1_1_m_a_c__compare.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>struct_m_a_c_relay_unit_base_1_1_m_a_c__compare.html</anchorfile>
      <anchor>a86c3d051e9c3e278961c71d5c191bbcd</anchor>
      <arglist>(const MACAddress &amp;u1, const MACAddress &amp;u2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MACRelayUnitNP</name>
    <filename>class_m_a_c_relay_unit_n_p.html</filename>
    <base>MACRelayUnitBase</base>
    <member kind="function">
      <type></type>
      <name>MACRelayUnitNP</name>
      <anchorfile>class_m_a_c_relay_unit_n_p.html</anchorfile>
      <anchor>a1fc0a884b9ecee86d13115bdf70d79f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MACRelayUnitNP</name>
      <anchorfile>class_m_a_c_relay_unit_n_p.html</anchorfile>
      <anchor>a1efe2c9abfb409174b7d66d019b45d4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleIncomingFrame</name>
      <anchorfile>class_m_a_c_relay_unit_n_p.html</anchorfile>
      <anchor>a5755a84cc2af7386e29c4c77bc53ae61</anchor>
      <arglist>(EtherFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processFrame</name>
      <anchorfile>class_m_a_c_relay_unit_n_p.html</anchorfile>
      <anchor>a979f2cc19eef845714e815569e7a4545</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_m_a_c_relay_unit_n_p.html</anchorfile>
      <anchor>a3970c2e7db1cd93cbdbfcee4dfe18009</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_m_a_c_relay_unit_n_p.html</anchorfile>
      <anchor>ace535008e5d7de4e00472590ff13941b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_m_a_c_relay_unit_n_p.html</anchorfile>
      <anchor>a4fb3a0eb3f17d267710500cd67a2e37d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cQueue</type>
      <name>queue</name>
      <anchorfile>class_m_a_c_relay_unit_n_p.html</anchorfile>
      <anchor>a24d0368f2496c78b57c1994992b4b329</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numCPUs</name>
      <anchorfile>class_m_a_c_relay_unit_n_p.html</anchorfile>
      <anchor>adb8da79620b684e8e1197856494976a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>processingTime</name>
      <anchorfile>class_m_a_c_relay_unit_n_p.html</anchorfile>
      <anchor>a22061ffd73016b0b71e1c3dcfc23d22b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bufferSize</name>
      <anchorfile>class_m_a_c_relay_unit_n_p.html</anchorfile>
      <anchor>a6c782bb41096a5ed70d0f2041500bf54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>highWatermark</name>
      <anchorfile>class_m_a_c_relay_unit_n_p.html</anchorfile>
      <anchor>a6de797704f3b775d47c1002366dbfe08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>pauseUnits</name>
      <anchorfile>class_m_a_c_relay_unit_n_p.html</anchorfile>
      <anchor>aea3801fd9daa375f29b09798212b44bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>pauseInterval</name>
      <anchorfile>class_m_a_c_relay_unit_n_p.html</anchorfile>
      <anchor>a7ae6b135283aef2ee609c0e0e8acf11c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bufferUsed</name>
      <anchorfile>class_m_a_c_relay_unit_n_p.html</anchorfile>
      <anchor>ae677c8ebdb04a7e1cd2ed439c6e1f354</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage **</type>
      <name>endProcEvents</name>
      <anchorfile>class_m_a_c_relay_unit_n_p.html</anchorfile>
      <anchor>a7f576c53c9f0aa6975411caf29c92516</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>pauseLastSent</name>
      <anchorfile>class_m_a_c_relay_unit_n_p.html</anchorfile>
      <anchor>a4b47b5298d03fc173adc2633e9d5cd9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numProcessedFrames</name>
      <anchorfile>class_m_a_c_relay_unit_n_p.html</anchorfile>
      <anchor>ac54ba1d342c6c477c5635b1b12f3e495</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numDroppedFrames</name>
      <anchorfile>class_m_a_c_relay_unit_n_p.html</anchorfile>
      <anchor>ac7d233977943426ebb4f5bbb6b11af79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>bufferLevel</name>
      <anchorfile>class_m_a_c_relay_unit_n_p.html</anchorfile>
      <anchor>add9b5f46c73fc0a34d411496ffb4d356</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MACRelayUnitPP</name>
    <filename>class_m_a_c_relay_unit_p_p.html</filename>
    <base>MACRelayUnitBase</base>
    <class kind="struct">MACRelayUnitPP::PortBuffer</class>
    <member kind="function">
      <type></type>
      <name>MACRelayUnitPP</name>
      <anchorfile>class_m_a_c_relay_unit_p_p.html</anchorfile>
      <anchor>a44fce1f9761eed97482e77f7416b6887</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MACRelayUnitPP</name>
      <anchorfile>class_m_a_c_relay_unit_p_p.html</anchorfile>
      <anchor>a60cd9f3777642f41ab557d05cf4c4c1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleIncomingFrame</name>
      <anchorfile>class_m_a_c_relay_unit_p_p.html</anchorfile>
      <anchor>aec0c2a6debe11269b991dd90dea8bb7f</anchor>
      <arglist>(EtherFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processFrame</name>
      <anchorfile>class_m_a_c_relay_unit_p_p.html</anchorfile>
      <anchor>a625c212ec17184ac9d7ac5a9bc5378d7</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_m_a_c_relay_unit_p_p.html</anchorfile>
      <anchor>a687e16fbeb264689d87b9761addf720f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_m_a_c_relay_unit_p_p.html</anchorfile>
      <anchor>a94a1d8bd77d3389e1ff46c6e6e679861</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_m_a_c_relay_unit_p_p.html</anchorfile>
      <anchor>afe0c542e35dcff686f748c4d9b6d54a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>processingTime</name>
      <anchorfile>class_m_a_c_relay_unit_p_p.html</anchorfile>
      <anchor>a6025e2177b33bf870c0b9974bd5cc9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bufferSize</name>
      <anchorfile>class_m_a_c_relay_unit_p_p.html</anchorfile>
      <anchor>a7922a1b5b6a3001ab2508ac0f044b9c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>highWatermark</name>
      <anchorfile>class_m_a_c_relay_unit_p_p.html</anchorfile>
      <anchor>a1c10ec43cb7fd95b092c44cae5b27585</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>pauseUnits</name>
      <anchorfile>class_m_a_c_relay_unit_p_p.html</anchorfile>
      <anchor>a554181b8990a1806dff26569606c6cd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>pauseInterval</name>
      <anchorfile>class_m_a_c_relay_unit_p_p.html</anchorfile>
      <anchor>a00ed8c5d0daa44387f31f944b23adf12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bufferUsed</name>
      <anchorfile>class_m_a_c_relay_unit_p_p.html</anchorfile>
      <anchor>aaa15c562b45c6c0a8f7ee41bfee18c93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PortBuffer *</type>
      <name>buffer</name>
      <anchorfile>class_m_a_c_relay_unit_p_p.html</anchorfile>
      <anchor>a807bf478cab168f444c67827f1d75d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>pauseLastSent</name>
      <anchorfile>class_m_a_c_relay_unit_p_p.html</anchorfile>
      <anchor>a1f1b014cd8982da1e10b5598a7f233bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numProcessedFrames</name>
      <anchorfile>class_m_a_c_relay_unit_p_p.html</anchorfile>
      <anchor>afb84877dc793d40c3251aac8a53a48d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numDroppedFrames</name>
      <anchorfile>class_m_a_c_relay_unit_p_p.html</anchorfile>
      <anchor>a8d465ab2f6a55cc187dc53631c3b8efc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>bufferLevel</name>
      <anchorfile>class_m_a_c_relay_unit_p_p.html</anchorfile>
      <anchor>ac05a744034840961b749544f742d79bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MACRelayUnitPP::PortBuffer</name>
    <filename>struct_m_a_c_relay_unit_p_p_1_1_port_buffer.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>port</name>
      <anchorfile>struct_m_a_c_relay_unit_p_p_1_1_port_buffer.html</anchorfile>
      <anchor>af312fc277397f71e0d2206fc89d486c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>cpuBusy</name>
      <anchorfile>struct_m_a_c_relay_unit_p_p_1_1_port_buffer.html</anchorfile>
      <anchor>a86d935ced4286d7e932e683cbee25284</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cQueue</type>
      <name>queue</name>
      <anchorfile>struct_m_a_c_relay_unit_p_p_1_1_port_buffer.html</anchorfile>
      <anchor>a148b0322b54c4d6ea3904a1bce140229</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MassMobility</name>
    <filename>class_mass_mobility.html</filename>
    <base>BasicMobility</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_mass_mobility.html</anchorfile>
      <anchor>a2656fd190a68dddb34b37c0d0de3f9de</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_mass_mobility.html</anchorfile>
      <anchor>a2d22bab49f0a1fe6485e4021cceaea94</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>class_mass_mobility.html</anchorfile>
      <anchor>ac3c5feac17ea67c81db48f49c5c67505</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPar *</type>
      <name>changeInterval</name>
      <anchorfile>class_mass_mobility.html</anchorfile>
      <anchor>afd45f986e54b3b0b6207d60b1aac1657</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPar *</type>
      <name>changeAngleBy</name>
      <anchorfile>class_mass_mobility.html</anchorfile>
      <anchor>ac69f80cb3b8f09cd67f4f7004b29a614</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPar *</type>
      <name>speed</name>
      <anchorfile>class_mass_mobility.html</anchorfile>
      <anchor>a32f91808215ca6e9e87fc1778f7598dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>currentSpeed</name>
      <anchorfile>class_mass_mobility.html</anchorfile>
      <anchor>ad2fdb5dfe5b821f68c5e36fd1af747b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>currentAngle</name>
      <anchorfile>class_mass_mobility.html</anchorfile>
      <anchor>a69bf82f29a741021d3da5aa0d8755d0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>updateInterval</name>
      <anchorfile>class_mass_mobility.html</anchorfile>
      <anchor>a1fb135b5eeb826cf0437322857a5e182</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>step</name>
      <anchorfile>class_mass_mobility.html</anchorfile>
      <anchor>aa10b8cb430ec411e7d0621681eafb5a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModuleAccess</name>
    <filename>class_module_access.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>ModuleAccess</name>
      <anchorfile>class_module_access.html</anchorfile>
      <anchor>a2ec686357c8696244d7bd8d5d87d69d6</anchor>
      <arglist>(const char *n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ModuleAccess</name>
      <anchorfile>class_module_access.html</anchorfile>
      <anchor>a69c5a3e1ed3efdd276040d46d6217c72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T *</type>
      <name>get</name>
      <anchorfile>class_module_access.html</anchorfile>
      <anchor>a44956ddb52973612afbba0eeecf8bb66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T *</type>
      <name>getIfExists</name>
      <anchorfile>class_module_access.html</anchorfile>
      <anchor>af36748c789196a55ab1c11c28d741b03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>class_module_access.html</anchorfile>
      <anchor>a17b8b02185c8ddda92256fa9f5f6087a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>p</name>
      <anchorfile>class_module_access.html</anchorfile>
      <anchor>a3799a269aae8d8adb4d4f1dc2f431a25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MPLS</name>
    <filename>class_m_p_l_s.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_m_p_l_s.html</anchorfile>
      <anchor>a6ec85d24ac0761ce366a00af9745f19a</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_m_p_l_s.html</anchorfile>
      <anchor>a7ca93435d662141daa34621554b03bc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_m_p_l_s.html</anchorfile>
      <anchor>a07623c41ad645130737c9d19a9899536</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPacketFromL3</name>
      <anchorfile>class_m_p_l_s.html</anchorfile>
      <anchor>ac73d9f11de405c48477afef7b1c5744c</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPacketFromL2</name>
      <anchorfile>class_m_p_l_s.html</anchorfile>
      <anchor>a1bb820016431c8b66a8810d5238fb637</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processMPLSPacketFromL2</name>
      <anchorfile>class_m_p_l_s.html</anchorfile>
      <anchor>a2455cc4bfcfd7a630f456a7f69f9e020</anchor>
      <arglist>(MPLSPacket *mplsPacket)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>tryLabelAndForwardIPDatagram</name>
      <anchorfile>class_m_p_l_s.html</anchorfile>
      <anchor>a3d803f7e89d1456d87f9983c4673884e</anchor>
      <arglist>(IPDatagram *ipdatagram)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>labelAndForwardIPDatagram</name>
      <anchorfile>class_m_p_l_s.html</anchorfile>
      <anchor>a47f98d3ea722dd8f732b35501195ce02</anchor>
      <arglist>(IPDatagram *ipdatagram)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToL2</name>
      <anchorfile>class_m_p_l_s.html</anchorfile>
      <anchor>a94b1d8efe4350316e353073a59d0b137</anchor>
      <arglist>(cMessage *msg, int gateIndex)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doStackOps</name>
      <anchorfile>class_m_p_l_s.html</anchorfile>
      <anchor>a9985d05102849fcb401f5565636c6374</anchor>
      <arglist>(MPLSPacket *mplsPacket, const LabelOpVector &amp;outLabel)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>delay1</name>
      <anchorfile>class_m_p_l_s.html</anchorfile>
      <anchor>aceb39f6bcacc185006a9371f6f513fd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LIBTable *</type>
      <name>lt</name>
      <anchorfile>class_m_p_l_s.html</anchorfile>
      <anchor>a21258a8b5d367fdbdf36b67eecc5890a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IInterfaceTable *</type>
      <name>ift</name>
      <anchorfile>class_m_p_l_s.html</anchorfile>
      <anchor>af3f97b3f24ee308f83f03eb47d467c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IClassifier *</type>
      <name>pct</name>
      <anchorfile>class_m_p_l_s.html</anchorfile>
      <anchor>a7ea433485c94a1ea762e6bb6e9127273</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MPLSPacket</name>
    <filename>class_m_p_l_s_packet.html</filename>
    <member kind="function">
      <type></type>
      <name>MPLSPacket</name>
      <anchorfile>class_m_p_l_s_packet.html</anchorfile>
      <anchor>a30f3ce307054f62d9761486bf0e4ae2d</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPLSPacket</name>
      <anchorfile>class_m_p_l_s_packet.html</anchorfile>
      <anchor>a1705f9e3650b6c51652f6f1a3ae0af98</anchor>
      <arglist>(const MPLSPacket &amp;p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MPLSPacket &amp;</type>
      <name>operator=</name>
      <anchorfile>class_m_p_l_s_packet.html</anchorfile>
      <anchor>a4556a4af3ab6825d88a05a093404f9e8</anchor>
      <arglist>(const MPLSPacket &amp;p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MPLSPacket *</type>
      <name>dup</name>
      <anchorfile>class_m_p_l_s_packet.html</anchorfile>
      <anchor>a2b947c0511615a81291b79e315c47333</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>class_m_p_l_s_packet.html</anchorfile>
      <anchor>ae2de6b837589b985d66fe8daa9188084</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapLabel</name>
      <anchorfile>class_m_p_l_s_packet.html</anchorfile>
      <anchor>a807ea7ed1b77b1a39989f7fb36d45d13</anchor>
      <arglist>(int newLabel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushLabel</name>
      <anchorfile>class_m_p_l_s_packet.html</anchorfile>
      <anchor>acec3af0b96617cd4e8171832be10f0cb</anchor>
      <arglist>(int newLabel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popLabel</name>
      <anchorfile>class_m_p_l_s_packet.html</anchorfile>
      <anchor>ad62be87a539a84363a2cd2efedfd26c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasLabel</name>
      <anchorfile>class_m_p_l_s_packet.html</anchorfile>
      <anchor>aea4f7b1829f0900bba021dc4f28e3dd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTopLabel</name>
      <anchorfile>class_m_p_l_s_packet.html</anchorfile>
      <anchor>ad4481908e90a748a9e5015f0b6fe891a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>LabelStack</name>
      <anchorfile>class_m_p_l_s_packet.html</anchorfile>
      <anchor>a66dc63ce910cef23f01c8e9729a1ea38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LabelStack</type>
      <name>labels</name>
      <anchorfile>class_m_p_l_s_packet.html</anchorfile>
      <anchor>a3e255e3069b2a0f74de39a5be55e0c9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MulticastRoute</name>
    <filename>struct_multicast_route.html</filename>
    <member kind="variable">
      <type>InterfaceEntry *</type>
      <name>interf</name>
      <anchorfile>struct_multicast_route.html</anchorfile>
      <anchor>aa52f00d8c26d8b9fd94a574303299b27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>gateway</name>
      <anchorfile>struct_multicast_route.html</anchorfile>
      <anchor>a4ba8853abd9336112518534e834116a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NAMTrace</name>
    <filename>class_n_a_m_trace.html</filename>
    <member kind="function">
      <type></type>
      <name>NAMTrace</name>
      <anchorfile>class_n_a_m_trace.html</anchorfile>
      <anchor>ac1c713fc5889da3c0fdc4a07f8ca8f8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NAMTrace</name>
      <anchorfile>class_n_a_m_trace.html</anchorfile>
      <anchor>a326382b6a24289e60bda6cd2e366bad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>assignNamId</name>
      <anchorfile>class_n_a_m_trace.html</anchorfile>
      <anchor>a46bdca1373188a1d562bf91de5d04d11</anchor>
      <arglist>(cModule *node, int namid=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNamId</name>
      <anchorfile>class_n_a_m_trace.html</anchorfile>
      <anchor>a2bc594f0e0db2f2c0c4a0fd6607ffd30</anchor>
      <arglist>(cModule *node) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEnabled</name>
      <anchorfile>class_n_a_m_trace.html</anchorfile>
      <anchor>a6290f39804dd04d85e047d2b1a4d10d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>out</name>
      <anchorfile>class_n_a_m_trace.html</anchorfile>
      <anchor>a111d1601d77a5895ecd60bf4202384e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_n_a_m_trace.html</anchorfile>
      <anchor>a742ef4b7cb28003f4eb31b8ee5d8d8ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_n_a_m_trace.html</anchorfile>
      <anchor>a4413b25773bbaa9604371f2732ee7ddf</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ofstream *</type>
      <name>nams</name>
      <anchorfile>class_n_a_m_trace.html</anchorfile>
      <anchor>a5666b2ed15628389cc03763e51b2d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lastnamid</name>
      <anchorfile>class_n_a_m_trace.html</anchorfile>
      <anchor>a4c3312037beac36c61926b4d5bb7d3f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, int &gt;</type>
      <name>modid2namid</name>
      <anchorfile>class_n_a_m_trace.html</anchorfile>
      <anchor>a7eda0be48f3ab3874626df977d975ef8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NAMTraceWriter</name>
    <filename>class_n_a_m_trace_writer.html</filename>
    <base>INotifiable</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>recordNodeEvent</name>
      <anchorfile>class_n_a_m_trace_writer.html</anchorfile>
      <anchor>a26f33a8a63dad5943dff47ce7cd6d0da</anchor>
      <arglist>(const char *state, const char *shape)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>recordLinkEvent</name>
      <anchorfile>class_n_a_m_trace_writer.html</anchorfile>
      <anchor>a2e24f03665a06177035537fb361f1aa8</anchor>
      <arglist>(int peernamid, double datarate, simtime_t delay, const char *state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>recordPacketEvent</name>
      <anchorfile>class_n_a_m_trace_writer.html</anchorfile>
      <anchor>af7018709ca48f989580066ebe642f8b9</anchor>
      <arglist>(char event, int peernamid, cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_n_a_m_trace_writer.html</anchorfile>
      <anchor>a882721ae03388a6115163d89e1159a40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_n_a_m_trace_writer.html</anchorfile>
      <anchor>abc842e182202d89c16cadbe453d88350</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~NAMTraceWriter</name>
      <anchorfile>class_n_a_m_trace_writer.html</anchorfile>
      <anchor>a392c5a8300f91dbd21c656b543602bd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchorfile>class_n_a_m_trace_writer.html</anchorfile>
      <anchor>aa23f82118398aa92a06664fe8fc43617</anchor>
      <arglist>(int category, const cPolymorphic *details)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>namid</name>
      <anchorfile>class_n_a_m_trace_writer.html</anchorfile>
      <anchor>ad8d40b42fd5ef8bb1764f31a6ae30ae8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NAMTrace *</type>
      <name>nt</name>
      <anchorfile>class_n_a_m_trace_writer.html</anchorfile>
      <anchor>a41819db35e8fb9a79369d58dea90ec09</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NetworkConfigurator</name>
    <filename>class_network_configurator.html</filename>
    <class kind="struct">NetworkConfigurator::NodeInfo</class>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; NodeInfo &gt;</type>
      <name>NodeInfoVector</name>
      <anchorfile>class_network_configurator.html</anchorfile>
      <anchor>a818dd8f90cde0528eab672a5582024cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_network_configurator.html</anchorfile>
      <anchor>a02909ee624d19ee23a074f4b52d5a10b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_network_configurator.html</anchorfile>
      <anchor>ad955b690f0e0a0a4c8f79bcf38b7d486</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_network_configurator.html</anchorfile>
      <anchor>ad947f0a9668e914fd99fb7414f2cd511</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>extractTopology</name>
      <anchorfile>class_network_configurator.html</anchorfile>
      <anchor>a990d112d97e59c5c96c023e3ce31f3da</anchor>
      <arglist>(cTopology &amp;topo, NodeInfoVector &amp;nodeInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>assignAddresses</name>
      <anchorfile>class_network_configurator.html</anchorfile>
      <anchor>a334fbae56e310d5aaf46f7dd22e292ab</anchor>
      <arglist>(cTopology &amp;topo, NodeInfoVector &amp;nodeInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addPointToPointPeerRoutes</name>
      <anchorfile>class_network_configurator.html</anchorfile>
      <anchor>a91169ed30c32017edbaadfc11fcaf6e1</anchor>
      <arglist>(cTopology &amp;topo, NodeInfoVector &amp;nodeInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addDefaultRoutes</name>
      <anchorfile>class_network_configurator.html</anchorfile>
      <anchor>a10273a8ab076552a4867bbdc26321420</anchor>
      <arglist>(cTopology &amp;topo, NodeInfoVector &amp;nodeInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setPeersParameter</name>
      <anchorfile>class_network_configurator.html</anchorfile>
      <anchor>a030f95494b3c9ba193ebf2328726cfe3</anchor>
      <arglist>(const char *submodName, cTopology &amp;topo, NodeInfoVector &amp;nodeInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fillRoutingTables</name>
      <anchorfile>class_network_configurator.html</anchorfile>
      <anchor>a8163b433d09d3506cee8e07d73edb5a6</anchor>
      <arglist>(cTopology &amp;topo, NodeInfoVector &amp;nodeInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setDisplayString</name>
      <anchorfile>class_network_configurator.html</anchorfile>
      <anchor>a5976c3feee4e20ad46f181b0514b355a</anchor>
      <arglist>(cTopology &amp;topo, NodeInfoVector &amp;nodeInfo)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>NetworkConfigurator::NodeInfo</name>
    <filename>struct_network_configurator_1_1_node_info.html</filename>
    <member kind="function">
      <type></type>
      <name>NodeInfo</name>
      <anchorfile>struct_network_configurator_1_1_node_info.html</anchorfile>
      <anchor>afca514424b94bc6572dff2cd0adb9b4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isIPNode</name>
      <anchorfile>struct_network_configurator_1_1_node_info.html</anchorfile>
      <anchor>aa5cd5c87a99f2454e107e5f92bca273b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IInterfaceTable *</type>
      <name>ift</name>
      <anchorfile>struct_network_configurator_1_1_node_info.html</anchorfile>
      <anchor>a3dc90921c3612eddb71213c1d429d68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IRoutingTable *</type>
      <name>rt</name>
      <anchorfile>struct_network_configurator_1_1_node_info.html</anchorfile>
      <anchor>a0c68f3885816cb7f61115296f67d570f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>usesDefaultRoute</name>
      <anchorfile>struct_network_configurator_1_1_node_info.html</anchorfile>
      <anchor>a90ae0bc5eca7298f95fc6cf556f9550d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NetworkInfo</name>
    <filename>class_network_info.html</filename>
    <base>IScriptable</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_network_info.html</anchorfile>
      <anchor>a23e3e864e26c22290cc45ee0ae870710</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_network_info.html</anchorfile>
      <anchor>a9ebcee8fb999ffebc681ebfb41551b05</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processCommand</name>
      <anchorfile>class_network_info.html</anchorfile>
      <anchor>a261bcd68892ab42323e6ee6905bf43ef</anchor>
      <arglist>(const cXMLElement &amp;node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>dumpRoutingInfo</name>
      <anchorfile>class_network_info.html</anchorfile>
      <anchor>ac1273d7196bf7b93b6bde047651b1fb7</anchor>
      <arglist>(cModule *target, const char *filename, bool append, bool compat)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NotificationBoard</name>
    <filename>class_notification_board.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; INotifiable * &gt;</type>
      <name>NotifiableVector</name>
      <anchorfile>class_notification_board.html</anchorfile>
      <anchor>aaf7daab1d6f01c2993bc3676e1220281</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; int, NotifiableVector &gt;</type>
      <name>ClientMap</name>
      <anchorfile>class_notification_board.html</anchorfile>
      <anchor>a04c2b90ab6db51c359ace8d11caf4041</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>subscribe</name>
      <anchorfile>class_notification_board.html</anchorfile>
      <anchor>aeb02a282e6c807c1cb064a28e8409ff2</anchor>
      <arglist>(INotifiable *client, int category)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unsubscribe</name>
      <anchorfile>class_notification_board.html</anchorfile>
      <anchor>a618069a9c5e40e5adc663def23325035</anchor>
      <arglist>(INotifiable *client, int category)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasSubscribers</name>
      <anchorfile>class_notification_board.html</anchorfile>
      <anchor>a668821c8867857ed47a4adaaa99248f8</anchor>
      <arglist>(int category)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fireChangeNotification</name>
      <anchorfile>class_notification_board.html</anchorfile>
      <anchor>a2bb0a5aa0cb272a9b15cb5a58a253fcc</anchor>
      <arglist>(int category, const cPolymorphic *details=NULL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_notification_board.html</anchorfile>
      <anchor>a3f958d3beda02f0a0ad5672bbed4f953</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_notification_board.html</anchorfile>
      <anchor>a95125026311c1ebea679364a6eb6d4a3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ClientMap</type>
      <name>clientMap</name>
      <anchorfile>class_notification_board.html</anchorfile>
      <anchor>acb59aab805c7544f4a9800a2498cc828</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_notification_board.html</anchorfile>
      <anchor>a4dc63b8b48b2e35f9fa899c3525310f6</anchor>
      <arglist>(std::ostream &amp;, const NotifiableVector &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NotificationBoardAccess</name>
    <filename>class_notification_board_access.html</filename>
    <base>ModuleAccess&lt; NotificationBoard &gt;</base>
    <member kind="function">
      <type></type>
      <name>NotificationBoardAccess</name>
      <anchorfile>class_notification_board_access.html</anchorfile>
      <anchor>a89bcfb11780f400b546f85f5b693477f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NullMobility</name>
    <filename>class_null_mobility.html</filename>
    <base>BasicMobility</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_null_mobility.html</anchorfile>
      <anchor>a72b6845f721575f8181ef49bc37cbd6c</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NullModulation</name>
    <filename>class_null_modulation.html</filename>
    <base>IModulation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>class_null_modulation.html</anchorfile>
      <anchor>a77f0f0b4dd765c285246f72978dfa454</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>calculateBER</name>
      <anchorfile>class_null_modulation.html</anchorfile>
      <anchor>a23a7d7c3dda36eafc7181503bc8b581e</anchor>
      <arglist>(double snir, double bandwidth, double bitrate)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFASExternalLSA</name>
    <filename>class_o_s_p_f_a_s_external_l_s_a.html</filename>
    <base>OSPFLSA</base>
    <member kind="function">
      <type></type>
      <name>OSPFASExternalLSA</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a.html</anchorfile>
      <anchor>aea6efe3282a2767c31490d3ba352411e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSPFASExternalLSA</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a.html</anchorfile>
      <anchor>a16e4de5dcc6e371a3aa7d3358c304c5f</anchor>
      <arglist>(const OSPFASExternalLSA &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFASExternalLSA</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a.html</anchorfile>
      <anchor>a033acd6c921588ce36a4c5527c0f9123</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OSPFASExternalLSA &amp;</type>
      <name>operator=</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a.html</anchorfile>
      <anchor>aeb3f525b0569ed8be0b57ae66d2b0aba</anchor>
      <arglist>(const OSPFASExternalLSA &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFASExternalLSA *</type>
      <name>dup</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a.html</anchorfile>
      <anchor>a0580de6472f64d1bc49df45c222626a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a.html</anchorfile>
      <anchor>a5aa68ba146f480873d367814a6d0c5fc</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a.html</anchorfile>
      <anchor>aab961731a432fcb98f377a722a291d4d</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFASExternalLSAContents &amp;</type>
      <name>getContents</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a.html</anchorfile>
      <anchor>a34f5913c38930cb4098b1b5b2ceca1bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OSPFASExternalLSAContents &amp;</type>
      <name>getContents</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a.html</anchorfile>
      <anchor>a99ff87ecad95c119d9e9525032f36916</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setContents</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a.html</anchorfile>
      <anchor>a21df5717f0c72befeabc7425233de663</anchor>
      <arglist>(const OSPFASExternalLSAContents &amp;contents_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a.html</anchorfile>
      <anchor>a1d04a3ae6ad52346599f599902357773</anchor>
      <arglist>(const OSPFASExternalLSA &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::OSPFASExternalLSAContents</type>
      <name>contents_var</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a.html</anchorfile>
      <anchor>a9640d94d752a995705bcbc2b4de327de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFASExternalLSAContents</name>
    <filename>class_o_s_p_f_a_s_external_l_s_a_contents.html</filename>
    <member kind="function">
      <type></type>
      <name>OSPFASExternalLSAContents</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>a4713fb8327f3216016feb1e58438d2f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSPFASExternalLSAContents</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>a79e4490ae50cbb2d75158c4a3d7dd316</anchor>
      <arglist>(const OSPFASExternalLSAContents &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFASExternalLSAContents</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>a369c861b008b5a2f126ca4e38d79bc29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OSPFASExternalLSAContents &amp;</type>
      <name>operator=</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>a4a5d5bda3e6980387777e44a11697ce1</anchor>
      <arglist>(const OSPFASExternalLSAContents &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFASExternalLSAContents *</type>
      <name>dup</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>ab8109b14cf658ef27f2f0f770766b829</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>ab23aa0068b3220df3604e62b86ba6b76</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>a0e02f0565a295aded20a9c6aadcf1351</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getNetworkMask</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>a0e25297f13bd07dcd4d402fa8fb0724f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getNetworkMask</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>a94a59efbf909446bd6fc9077f6361881</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNetworkMask</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>a2de8600e7d3181c6adadc14c82ebba72</anchor>
      <arglist>(const IPAddress &amp;networkMask_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getE_ExternalMetricType</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>a516562d1adb3fa4b65131d826a93de4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setE_ExternalMetricType</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>ab83cdaea2065422d1afc95d429a67140</anchor>
      <arglist>(bool E_ExternalMetricType_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>getRouteCost</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>a9158b3adccf5864d8806813976f44b38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRouteCost</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>a29c255827c3eaf31c976c5199fe5c5e9</anchor>
      <arglist>(unsigned long routeCost_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getForwardingAddress</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>aa6763dd6e1ba71fc91654887797f6d1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getForwardingAddress</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>ac5cfc3bcb018385fd6c7dbdb997e442e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setForwardingAddress</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>ab3cd46426c1c3b8e656380791f7d7be8</anchor>
      <arglist>(const IPAddress &amp;forwardingAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getExternalRouteTag</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>ad63c56a13aea3fa510bf3f7e3e30b796</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExternalRouteTag</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>a9f07e72301e59a13647a2dbddd2abd7d</anchor>
      <arglist>(long externalRouteTag_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExternalTOSInfoArraySize</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>a8d6f4c80a3718102c2e8631b7fc0237f</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getExternalTOSInfoArraySize</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>a407f4083d2a244a845b23b5e9f8d5aa1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExternalTOSInfo &amp;</type>
      <name>getExternalTOSInfo</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>ac97f3e477e572231949e4bf0115b9502</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ExternalTOSInfo &amp;</type>
      <name>getExternalTOSInfo</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>ae5b73e18f7e59c8f3c8133cd9bd53395</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExternalTOSInfo</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>a0aa9beffe9cbad3eee43d7b5afce2d3e</anchor>
      <arglist>(unsigned int k, const ExternalTOSInfo &amp;externalTOSInfo_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>ac6e8b2ff04054ac023a87218f58e8986</anchor>
      <arglist>(const OSPFASExternalLSAContents &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>networkMask_var</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>a4f3b68eebf264f64f5afeea3f04d4812</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>E_ExternalMetricType_var</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>aa5127fa0e6ba3ce7e0c4d67493e43f9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>routeCost_var</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>a5833f13620f23cfb59f84329267237ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>forwardingAddress_var</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>a3139e40bd12eeb225fe128e80175af11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>externalRouteTag_var</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>a89754063e56f66334a9246d5184e8ade</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::ExternalTOSInfo *</type>
      <name>externalTOSInfo_var</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>a65077dbe1a714d022e4684c99f1f0ea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>externalTOSInfo_arraysize</name>
      <anchorfile>class_o_s_p_f_a_s_external_l_s_a_contents.html</anchorfile>
      <anchor>a4f27f578712f04f86dc471601f1b9e0e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFDatabaseDescriptionPacket</name>
    <filename>class_o_s_p_f_database_description_packet.html</filename>
    <base>OSPFPacket</base>
    <member kind="function">
      <type></type>
      <name>OSPFDatabaseDescriptionPacket</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>aa10bd15664c18003aac7a557edd67b6e</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSPFDatabaseDescriptionPacket</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>a46d05deb7c52ec563066ed296de0e178</anchor>
      <arglist>(const OSPFDatabaseDescriptionPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFDatabaseDescriptionPacket</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>a69aab0b930878c7ca20c10e62f3886f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OSPFDatabaseDescriptionPacket &amp;</type>
      <name>operator=</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>aadd774b02afc99bde5c386d9542db6bf</anchor>
      <arglist>(const OSPFDatabaseDescriptionPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFDatabaseDescriptionPacket *</type>
      <name>dup</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>ade9cb36cb6bf0a6041a1f6867599b350</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>a7adf2843e8fe3396e0014d8ad005d86a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>a66bc3b291397934a04550840117e82cb</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getInterfaceMTU</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>a0bdabefaf7e63ad1b6c41d9fd29e9479</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInterfaceMTU</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>af504259761859b0b65606b4f3da59519</anchor>
      <arglist>(unsigned short interfaceMTU_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFOptions &amp;</type>
      <name>getOptions</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>ae9d7fdd28c7e085180d1e5a48429123a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OSPFOptions &amp;</type>
      <name>getOptions</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>a5efa3c176b4c676dcae499921aed396d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOptions</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>a5cdd774ee972e86c01f0aadc05106583</anchor>
      <arglist>(const OSPFOptions &amp;options_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFDDOptions &amp;</type>
      <name>getDdOptions</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>a6dd39616b4a729e0f10ce8bb7dbabd93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OSPFDDOptions &amp;</type>
      <name>getDdOptions</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>a841de5d514adc44ba7d2ff8f5f23cd1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDdOptions</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>a8f15899613b537fb81febe8c89685fc3</anchor>
      <arglist>(const OSPFDDOptions &amp;ddOptions_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>getDdSequenceNumber</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>af679fc4105e146617fd1d9db7814da25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDdSequenceNumber</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>afd1523944b1dc7f6a2a7d96adf1e509a</anchor>
      <arglist>(unsigned long ddSequenceNumber_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLsaHeadersArraySize</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>ab3d605de3cd37a014859f8fdc8441419</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getLsaHeadersArraySize</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>a2bde67c5dcd8c9a19a804c4ac0884ee2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFLSAHeader &amp;</type>
      <name>getLsaHeaders</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>a390b9bbc57e76778c8ede5ba267b2765</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OSPFLSAHeader &amp;</type>
      <name>getLsaHeaders</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>a246ac139345f6812c60465cd7a3c8f23</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLsaHeaders</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>a7769a306bf55904ec1db605a52b43cd9</anchor>
      <arglist>(unsigned int k, const OSPFLSAHeader &amp;lsaHeaders_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>a816479d60631b1ed923adc19b0b35764</anchor>
      <arglist>(const OSPFDatabaseDescriptionPacket &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>interfaceMTU_var</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>a52220344d456627dc6c5db9438f1ad8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::OSPFOptions</type>
      <name>options_var</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>affaffd74ba9466faf5bb2b2ce3ef77c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::OSPFDDOptions</type>
      <name>ddOptions_var</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>a96372332dc6e57e79e70a8c33786522f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>ddSequenceNumber_var</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>ad51d974946a2d8ac0a64d2c768118fe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::OSPFLSAHeader *</type>
      <name>lsaHeaders_var</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>aa52353420650cb09188a898a57fbd544</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>lsaHeaders_arraysize</name>
      <anchorfile>class_o_s_p_f_database_description_packet.html</anchorfile>
      <anchor>a73b4074a2508399ddbec614fb2d247a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OSPFDDOptions</name>
    <filename>struct_o_s_p_f_d_d_options.html</filename>
    <member kind="function">
      <type></type>
      <name>OSPFDDOptions</name>
      <anchorfile>struct_o_s_p_f_d_d_options.html</anchorfile>
      <anchor>a0d914925fe9c9c2e3584724641a7213e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>unused_1</name>
      <anchorfile>struct_o_s_p_f_d_d_options.html</anchorfile>
      <anchor>aeda80d016e95c47d383b1101683d2474</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>unused_2</name>
      <anchorfile>struct_o_s_p_f_d_d_options.html</anchorfile>
      <anchor>ac00c326d5677529176a6b2e1c6435391</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>unused_3</name>
      <anchorfile>struct_o_s_p_f_d_d_options.html</anchorfile>
      <anchor>acd8b0ef65eea886b63e894c342d5741e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>unused_4</name>
      <anchorfile>struct_o_s_p_f_d_d_options.html</anchorfile>
      <anchor>a8b536639d43e5fe8b10a38dc21528b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>unused_5</name>
      <anchorfile>struct_o_s_p_f_d_d_options.html</anchorfile>
      <anchor>a1540883f1c891c6ade7e6b4b362f2d1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>I_Init</name>
      <anchorfile>struct_o_s_p_f_d_d_options.html</anchorfile>
      <anchor>a5b89a1ecd60217e80cd957ab8b912ad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>M_More</name>
      <anchorfile>struct_o_s_p_f_d_d_options.html</anchorfile>
      <anchor>a378b4775cffedf62f289e57ab0f756c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>MS_MasterSlave</name>
      <anchorfile>struct_o_s_p_f_d_d_options.html</anchorfile>
      <anchor>a2c0601f852a00c2ee1313977a23b0fd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFHelloPacket</name>
    <filename>class_o_s_p_f_hello_packet.html</filename>
    <base>OSPFPacket</base>
    <member kind="function">
      <type></type>
      <name>OSPFHelloPacket</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>ad154d6a301b30353f92d6c15cf48e01c</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSPFHelloPacket</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>aa77ed490d30b2aa7be60223fb73c7fb7</anchor>
      <arglist>(const OSPFHelloPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFHelloPacket</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>a848b6a9c4a55ad8320cb1c4ed1e37389</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OSPFHelloPacket &amp;</type>
      <name>operator=</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>a6e9ef9a5668019e2f22d231ee4e93f1a</anchor>
      <arglist>(const OSPFHelloPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFHelloPacket *</type>
      <name>dup</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>afae5aabed4adf5eb74809c520fb85f1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>abd944d6841269116fc328cdcdef93e9c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>a754694ea87997ea33a675fed45e9f8de</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getNetworkMask</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>a23a36fd2b39f77bdae858768adaa7c55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getNetworkMask</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>a39f47cc5f00792e387afa67a3ab19609</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNetworkMask</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>a6cbd2f72eff475c263ac3943255a10f7</anchor>
      <arglist>(const IPAddress &amp;networkMask_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getHelloInterval</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>a34cbf2d90eab0c4518af13d2b3e22f58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHelloInterval</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>a66520dfc48764a154e1b0a8b0374979c</anchor>
      <arglist>(short helloInterval_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFOptions &amp;</type>
      <name>getOptions</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>a109c71f09bef47b79002c969872769de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OSPFOptions &amp;</type>
      <name>getOptions</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>a9f05b8f9c88657ee62682b17ea1e382f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOptions</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>a1fc14fe89689d00c894e2f3610cfebb3</anchor>
      <arglist>(const OSPFOptions &amp;options_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getRouterPriority</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>a274f7593284e8c64071368b31bf13eb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRouterPriority</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>ae016c856afac462f26eb6e3f5eb990a3</anchor>
      <arglist>(char routerPriority_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getRouterDeadInterval</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>a543ae717d442d3415e9b94f52300e2e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRouterDeadInterval</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>a7f70b1033a4b76a9c470f37f9e716a24</anchor>
      <arglist>(long routerDeadInterval_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getDesignatedRouter</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>a061e6a762954dffb93efc310eeb3c467</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getDesignatedRouter</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>a7c74eb9e26b56b4a9fd7ee6155000a50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDesignatedRouter</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>a4ad669b79f54a9abf5e5ecc9a13e1e73</anchor>
      <arglist>(const IPAddress &amp;designatedRouter_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getBackupDesignatedRouter</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>a89c1bea59379e50c42872ac182f4a671</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getBackupDesignatedRouter</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>a60dd5c302ec321417bd1ff0b497147ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBackupDesignatedRouter</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>a77893d31ad75948deeb959e07ba18df3</anchor>
      <arglist>(const IPAddress &amp;backupDesignatedRouter_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNeighborArraySize</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>a9d52500a193c4b014e1b15a29ee7ecdb</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNeighborArraySize</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>aa06cc67f90255174e436e6595d3a6b22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getNeighbor</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>af4ebcbc442776983b8df07fe6a49b569</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getNeighbor</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>a6428eff6fafcaae1571d81073578e680</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNeighbor</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>abe2d6ced06edef783933f3415aea74b7</anchor>
      <arglist>(unsigned int k, const IPAddress &amp;neighbor_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>ab2d33c58ede122fb50a7dcc9bcf40e5f</anchor>
      <arglist>(const OSPFHelloPacket &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>networkMask_var</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>a169416b03f221c7fbb626bdfd98a0d78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>helloInterval_var</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>a0aed184180775cb321b17ed3849c8830</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::OSPFOptions</type>
      <name>options_var</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>ac4bdaaedfb892391fde2df6584a599df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>routerPriority_var</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>a62722a271427756697558bf0eef2993e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>routerDeadInterval_var</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>a00df27342d494434b20c8f34593e399b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>designatedRouter_var</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>afd231fc7ab2380939f3f86bf6b5d4bc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>backupDesignatedRouter_var</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>a7a62826291bef8060caac023dfef9430</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress *</type>
      <name>neighbor_var</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>aed9de164480d3c62676892bffe825024</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>neighbor_arraysize</name>
      <anchorfile>class_o_s_p_f_hello_packet.html</anchorfile>
      <anchor>ae7bb24ec1bb0b82db2471f0906312b9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFLinkStateAcknowledgementPacket</name>
    <filename>class_o_s_p_f_link_state_acknowledgement_packet.html</filename>
    <base>OSPFPacket</base>
    <member kind="function">
      <type></type>
      <name>OSPFLinkStateAcknowledgementPacket</name>
      <anchorfile>class_o_s_p_f_link_state_acknowledgement_packet.html</anchorfile>
      <anchor>a16a87453e00a5d910701e7729b786884</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSPFLinkStateAcknowledgementPacket</name>
      <anchorfile>class_o_s_p_f_link_state_acknowledgement_packet.html</anchorfile>
      <anchor>a54911b0b0f21f2f2851eba670402b9c9</anchor>
      <arglist>(const OSPFLinkStateAcknowledgementPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFLinkStateAcknowledgementPacket</name>
      <anchorfile>class_o_s_p_f_link_state_acknowledgement_packet.html</anchorfile>
      <anchor>a0fbfdf65aafe64f41c8904e13056b7ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OSPFLinkStateAcknowledgementPacket &amp;</type>
      <name>operator=</name>
      <anchorfile>class_o_s_p_f_link_state_acknowledgement_packet.html</anchorfile>
      <anchor>ac864d00ed03c0e829190236351ca89c5</anchor>
      <arglist>(const OSPFLinkStateAcknowledgementPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFLinkStateAcknowledgementPacket *</type>
      <name>dup</name>
      <anchorfile>class_o_s_p_f_link_state_acknowledgement_packet.html</anchorfile>
      <anchor>a6738c8cbec38e0196557f56bfe8edd04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_o_s_p_f_link_state_acknowledgement_packet.html</anchorfile>
      <anchor>a67c64a9d761501a22250e54180144110</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_o_s_p_f_link_state_acknowledgement_packet.html</anchorfile>
      <anchor>a91d793dac4e92514b32b5d2892234d21</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLsaHeadersArraySize</name>
      <anchorfile>class_o_s_p_f_link_state_acknowledgement_packet.html</anchorfile>
      <anchor>a3ff44a1b5c77d68528004c0dfe5ce72e</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getLsaHeadersArraySize</name>
      <anchorfile>class_o_s_p_f_link_state_acknowledgement_packet.html</anchorfile>
      <anchor>a36b419c0775c3b0f2f5edd13274b6ba2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFLSAHeader &amp;</type>
      <name>getLsaHeaders</name>
      <anchorfile>class_o_s_p_f_link_state_acknowledgement_packet.html</anchorfile>
      <anchor>a1a0cadb98b3d84a7f87635658bccaecb</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OSPFLSAHeader &amp;</type>
      <name>getLsaHeaders</name>
      <anchorfile>class_o_s_p_f_link_state_acknowledgement_packet.html</anchorfile>
      <anchor>af48da59e5e8d0bac09fd35af95b48c6f</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLsaHeaders</name>
      <anchorfile>class_o_s_p_f_link_state_acknowledgement_packet.html</anchorfile>
      <anchor>addd8a17e084845d9a5fce73818155521</anchor>
      <arglist>(unsigned int k, const OSPFLSAHeader &amp;lsaHeaders_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_o_s_p_f_link_state_acknowledgement_packet.html</anchorfile>
      <anchor>a871be9b749da3dc7deaf59143ff1f680</anchor>
      <arglist>(const OSPFLinkStateAcknowledgementPacket &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::OSPFLSAHeader *</type>
      <name>lsaHeaders_var</name>
      <anchorfile>class_o_s_p_f_link_state_acknowledgement_packet.html</anchorfile>
      <anchor>a8dd63518a8ffbdca104bc7c0de595b6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>lsaHeaders_arraysize</name>
      <anchorfile>class_o_s_p_f_link_state_acknowledgement_packet.html</anchorfile>
      <anchor>a8f3223586d4b479165f02f79191e6211</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFLinkStateRequestPacket</name>
    <filename>class_o_s_p_f_link_state_request_packet.html</filename>
    <base>OSPFPacket</base>
    <member kind="function">
      <type></type>
      <name>OSPFLinkStateRequestPacket</name>
      <anchorfile>class_o_s_p_f_link_state_request_packet.html</anchorfile>
      <anchor>a36016dadb5a6d9102039defa7383c9d5</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSPFLinkStateRequestPacket</name>
      <anchorfile>class_o_s_p_f_link_state_request_packet.html</anchorfile>
      <anchor>af46aa7902fa083118ff1bf4c8ae9f785</anchor>
      <arglist>(const OSPFLinkStateRequestPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFLinkStateRequestPacket</name>
      <anchorfile>class_o_s_p_f_link_state_request_packet.html</anchorfile>
      <anchor>aa4e8a902ab94e948cbce536d4f037863</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OSPFLinkStateRequestPacket &amp;</type>
      <name>operator=</name>
      <anchorfile>class_o_s_p_f_link_state_request_packet.html</anchorfile>
      <anchor>a6891f9d98843e9e8903ef74f962a301c</anchor>
      <arglist>(const OSPFLinkStateRequestPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFLinkStateRequestPacket *</type>
      <name>dup</name>
      <anchorfile>class_o_s_p_f_link_state_request_packet.html</anchorfile>
      <anchor>a3afb655ee2aee7f5e5459636011cb0cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_o_s_p_f_link_state_request_packet.html</anchorfile>
      <anchor>aca83f09780161a8ddbf9804ca3bab5e6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_o_s_p_f_link_state_request_packet.html</anchorfile>
      <anchor>a2ae667ec31955b3e3b24f71dd776ad29</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRequestsArraySize</name>
      <anchorfile>class_o_s_p_f_link_state_request_packet.html</anchorfile>
      <anchor>a097f19dbfca37e58aa2e0ffb668a7f64</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getRequestsArraySize</name>
      <anchorfile>class_o_s_p_f_link_state_request_packet.html</anchorfile>
      <anchor>a2afbba06af70d3f71fd3cf42305bc734</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LSARequest &amp;</type>
      <name>getRequests</name>
      <anchorfile>class_o_s_p_f_link_state_request_packet.html</anchorfile>
      <anchor>a342c2d4e18333b935d114ec501ce4b80</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LSARequest &amp;</type>
      <name>getRequests</name>
      <anchorfile>class_o_s_p_f_link_state_request_packet.html</anchorfile>
      <anchor>a293283f327cb54e53a3494733a4d1d09</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRequests</name>
      <anchorfile>class_o_s_p_f_link_state_request_packet.html</anchorfile>
      <anchor>a7ffc27210b1141b06907c6938065955e</anchor>
      <arglist>(unsigned int k, const LSARequest &amp;requests_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_o_s_p_f_link_state_request_packet.html</anchorfile>
      <anchor>a8afb80fac2a691825ea37943e1b388d8</anchor>
      <arglist>(const OSPFLinkStateRequestPacket &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::LSARequest *</type>
      <name>requests_var</name>
      <anchorfile>class_o_s_p_f_link_state_request_packet.html</anchorfile>
      <anchor>a7789f099e4cae06dee74c852a812d1dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>requests_arraysize</name>
      <anchorfile>class_o_s_p_f_link_state_request_packet.html</anchorfile>
      <anchor>a5f7eb14697c0f65f8ebc7d029fba41b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFLinkStateUpdatePacket</name>
    <filename>class_o_s_p_f_link_state_update_packet.html</filename>
    <base>OSPFPacket</base>
    <member kind="function">
      <type></type>
      <name>OSPFLinkStateUpdatePacket</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>ac2fce03fdc15568ce492e2fd34900318</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSPFLinkStateUpdatePacket</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>ae05b386ac48b74b62ad85405502b541e</anchor>
      <arglist>(const OSPFLinkStateUpdatePacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFLinkStateUpdatePacket</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>ac4731ba51d133e47f0c1004e0aae6bc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OSPFLinkStateUpdatePacket &amp;</type>
      <name>operator=</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>ad96a2cdcd72d4cd9d7db72a24da5bda1</anchor>
      <arglist>(const OSPFLinkStateUpdatePacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFLinkStateUpdatePacket *</type>
      <name>dup</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>abe5632f5dbe52e8c32a8263b651a5f75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>abbdc10bb1c80f791020ff44d18f31205</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>ab2853e9b226ef5b305aa8cb665a6fbc4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>getNumberOfLSAs</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>a14e8219272077d382a3545662189b845</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumberOfLSAs</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>a29338ad99d58a16fed2b0193fdeb45cb</anchor>
      <arglist>(unsigned long numberOfLSAs_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRouterLSAsArraySize</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>adc72cd2f8068d2887a2f4dcdf3878254</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getRouterLSAsArraySize</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>af3a8c2d3b483500458bf03ef99de8e0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFRouterLSA &amp;</type>
      <name>getRouterLSAs</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>a664259d01bcec48edf920542db26b4e5</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OSPFRouterLSA &amp;</type>
      <name>getRouterLSAs</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>ab51413b2100f0fbe55cf15dc969afd89</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRouterLSAs</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>ae991462c1ccf79412da38e63a7014e7b</anchor>
      <arglist>(unsigned int k, const OSPFRouterLSA &amp;routerLSAs_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNetworkLSAsArraySize</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>a26ee951bef71223b82d3546b552e39c4</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNetworkLSAsArraySize</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>aa01ab1e7fb9915ef65eb6b9146aebe54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFNetworkLSA &amp;</type>
      <name>getNetworkLSAs</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>adc6782663a70e2f7945afeae66aaaf06</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OSPFNetworkLSA &amp;</type>
      <name>getNetworkLSAs</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>abf6181f8014642b935083e934fe25812</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNetworkLSAs</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>a9fb5573553bbb1e8150e5eaeab25aa68</anchor>
      <arglist>(unsigned int k, const OSPFNetworkLSA &amp;networkLSAs_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSummaryLSAsArraySize</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>a38ac5f32dd3de9bd32d45a5f1290fd97</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSummaryLSAsArraySize</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>a391976d782d0454c0e0a781ef82887f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFSummaryLSA &amp;</type>
      <name>getSummaryLSAs</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>a027b0f409d40a41a0035dd9d9f26609f</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OSPFSummaryLSA &amp;</type>
      <name>getSummaryLSAs</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>a1526612a9074ec92e3d8627ecf2e602e</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSummaryLSAs</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>ac304f1aaef1c9eb29a3bf1e41eab8f25</anchor>
      <arglist>(unsigned int k, const OSPFSummaryLSA &amp;summaryLSAs_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAsExternalLSAsArraySize</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>aa7165bc83e681a7609d148ac518895d0</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getAsExternalLSAsArraySize</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>a7eb7e5dc8bd1a27e274bf4154ee3ffce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFASExternalLSA &amp;</type>
      <name>getAsExternalLSAs</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>a07acebc88a55bd3158858c67a6fa2858</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OSPFASExternalLSA &amp;</type>
      <name>getAsExternalLSAs</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>a2564a8c5d6fbcfc8036c6ac6637e957b</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAsExternalLSAs</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>aeaa7944ee4181ffe13de5804bdf9b2ee</anchor>
      <arglist>(unsigned int k, const OSPFASExternalLSA &amp;asExternalLSAs_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>ab866575ab25dd0e13a5e539d105ba7d9</anchor>
      <arglist>(const OSPFLinkStateUpdatePacket &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numberOfLSAs_var</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>ab36e8b0943198c30e845af91bb6b0b44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::OSPFRouterLSA *</type>
      <name>routerLSAs_var</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>ae6f4a65d7e900d2a35ed00beeb7891bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>routerLSAs_arraysize</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>a4f2fbfbe70ce7ce381ec7df37992d240</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::OSPFNetworkLSA *</type>
      <name>networkLSAs_var</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>a79db499d9b6ee92023cea2415e886cd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>networkLSAs_arraysize</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>a031a01c5c715a0c969bb99c199bc0572</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::OSPFSummaryLSA *</type>
      <name>summaryLSAs_var</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>ac4c5d6465b8625d67a4f285e224aa004</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>summaryLSAs_arraysize</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>a95c15b30bbe3544450e7ee73704c5b54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::OSPFASExternalLSA *</type>
      <name>asExternalLSAs_var</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>a1cb502260421eb97e0434dba4902063d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>asExternalLSAs_arraysize</name>
      <anchorfile>class_o_s_p_f_link_state_update_packet.html</anchorfile>
      <anchor>a4d726f88b7f6402bf60f3254877dd8f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFLSA</name>
    <filename>class_o_s_p_f_l_s_a.html</filename>
    <member kind="function">
      <type></type>
      <name>OSPFLSA</name>
      <anchorfile>class_o_s_p_f_l_s_a.html</anchorfile>
      <anchor>a91004c5e026be250c3019ef77eb8584f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSPFLSA</name>
      <anchorfile>class_o_s_p_f_l_s_a.html</anchorfile>
      <anchor>ada577f12e2768ea2f57c4773f6c0463f</anchor>
      <arglist>(const OSPFLSA &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFLSA</name>
      <anchorfile>class_o_s_p_f_l_s_a.html</anchorfile>
      <anchor>ae60b8b2a2cfbe103f4c6100f4b281253</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OSPFLSA &amp;</type>
      <name>operator=</name>
      <anchorfile>class_o_s_p_f_l_s_a.html</anchorfile>
      <anchor>ad8f3686e1e4518b75ce7972f1c910d49</anchor>
      <arglist>(const OSPFLSA &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFLSA *</type>
      <name>dup</name>
      <anchorfile>class_o_s_p_f_l_s_a.html</anchorfile>
      <anchor>a25a033a9947afd6d863dee75cf58b3c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_o_s_p_f_l_s_a.html</anchorfile>
      <anchor>a4eb3945e5b3f3e2c32d30b8ff739c232</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_o_s_p_f_l_s_a.html</anchorfile>
      <anchor>ac6f3976d08f68624c0d260ce4821879f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFLSAHeader &amp;</type>
      <name>getHeader</name>
      <anchorfile>class_o_s_p_f_l_s_a.html</anchorfile>
      <anchor>a2c9acdc68e5e66deb1826ee41a07b7d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OSPFLSAHeader &amp;</type>
      <name>getHeader</name>
      <anchorfile>class_o_s_p_f_l_s_a.html</anchorfile>
      <anchor>afdde4c7991b662994d3abef5d22d5c9d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHeader</name>
      <anchorfile>class_o_s_p_f_l_s_a.html</anchorfile>
      <anchor>add510a61d049b97a29bb219fbfa58f3a</anchor>
      <arglist>(const OSPFLSAHeader &amp;header_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_o_s_p_f_l_s_a.html</anchorfile>
      <anchor>ab0bf81c9011984d6725ce82123e6a5fc</anchor>
      <arglist>(const OSPFLSA &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::OSPFLSAHeader</type>
      <name>header_var</name>
      <anchorfile>class_o_s_p_f_l_s_a.html</anchorfile>
      <anchor>ae1cbcb0c972d31ef649e896d7d8fb087</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFLSAHeader</name>
    <filename>class_o_s_p_f_l_s_a_header.html</filename>
    <member kind="function">
      <type></type>
      <name>OSPFLSAHeader</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>abbcae35519b03c2ce3aaed75cb07f39c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSPFLSAHeader</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>a71c859d27316f8b2af7ac46c54575ed8</anchor>
      <arglist>(const OSPFLSAHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFLSAHeader</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>ae416f48feda8562815d77ccbe926e978</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OSPFLSAHeader &amp;</type>
      <name>operator=</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>aeec1d7b2b09211820d05c2d9659c5e72</anchor>
      <arglist>(const OSPFLSAHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFLSAHeader *</type>
      <name>dup</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>a8694215224145de2cff18179832ab8b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>acd906d6010f34ee518f0cc52f9aacd70</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>a8715921c16f62b6af578c4ae67554a1e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getLsAge</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>abfa986a01e651197c287f6ee1898e1a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLsAge</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>ae9da0df1ade356d3da9daaf68aa77c0d</anchor>
      <arglist>(unsigned short lsAge_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFOptions &amp;</type>
      <name>getLsOptions</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>a49c67b283f8c7564d2a18500729c604f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OSPFOptions &amp;</type>
      <name>getLsOptions</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>ad851b65348047c6437fdfb74a4bc3508</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLsOptions</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>ab538deb05028f4795117cbc985807184</anchor>
      <arglist>(const OSPFOptions &amp;lsOptions_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getLsType</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>a5ec5eaa7d91ea4e1447766fe076d7207</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLsType</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>a7777cb731176278d6cc4560585ee12cc</anchor>
      <arglist>(char lsType_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>getLinkStateID</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>a2f146ccaa3d51bae77fd76f429b52abe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLinkStateID</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>a8d1dbb5243500d65e581b054e9f677a5</anchor>
      <arglist>(unsigned long linkStateID_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getAdvertisingRouter</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>a85083aabf7994ed37c3458e06337d183</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getAdvertisingRouter</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>ac28e23ebc67fb7f15092c0a58d0c78ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAdvertisingRouter</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>a4de46ac0ce652fea0032f20e32afb1df</anchor>
      <arglist>(const IPAddress &amp;advertisingRouter_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getLsSequenceNumber</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>aa1fa1df57d84e20fef93e765a587ff1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLsSequenceNumber</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>a91209faeabf5287af7e5a9c8735e4cf7</anchor>
      <arglist>(long lsSequenceNumber_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getLsChecksum</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>a4ca8e821a78288c99c30ea91932b41d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLsChecksum</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>a1e71120701358465cc8f5b598f74760f</anchor>
      <arglist>(short lsChecksum_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getLsaLength</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>a092384789ce32f19272513023b63dfc1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLsaLength</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>a870f11178fe2130e778308966bb57792</anchor>
      <arglist>(unsigned short lsaLength_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>a0f3721f1df0403a735c89cde4c1a3fe0</anchor>
      <arglist>(const OSPFLSAHeader &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>lsAge_var</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>af1fc69e022ae7914ae0f8091138775fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::OSPFOptions</type>
      <name>lsOptions_var</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>ae0a4f35266f9539edb527c3541425a86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>lsType_var</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>a9119e8dacc4aaa81cc19f8bd674def0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>linkStateID_var</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>af3b9f80e534e847157bbe6b82f7c8927</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>advertisingRouter_var</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>a21d720fb534e037f58fb405ff98ab72a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>lsSequenceNumber_var</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>a92605a73f332f9f21c129bd19e61527e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>lsChecksum_var</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>a5375084299840820dfcc01e5b102823d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>lsaLength_var</name>
      <anchorfile>class_o_s_p_f_l_s_a_header.html</anchorfile>
      <anchor>af45ea48d061d15c55248d9c81a3a3687</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFNetworkLSA</name>
    <filename>class_o_s_p_f_network_l_s_a.html</filename>
    <base>OSPFLSA</base>
    <member kind="function">
      <type></type>
      <name>OSPFNetworkLSA</name>
      <anchorfile>class_o_s_p_f_network_l_s_a.html</anchorfile>
      <anchor>a99d4fca52e448a80ade40dfb4e4fd182</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSPFNetworkLSA</name>
      <anchorfile>class_o_s_p_f_network_l_s_a.html</anchorfile>
      <anchor>a6f3a51e72311545e9a505a6f856d6249</anchor>
      <arglist>(const OSPFNetworkLSA &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFNetworkLSA</name>
      <anchorfile>class_o_s_p_f_network_l_s_a.html</anchorfile>
      <anchor>af9475425bffa30b6e9868cfa6e409317</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OSPFNetworkLSA &amp;</type>
      <name>operator=</name>
      <anchorfile>class_o_s_p_f_network_l_s_a.html</anchorfile>
      <anchor>ae31dc597e4e20e4daa1051b29275ae6f</anchor>
      <arglist>(const OSPFNetworkLSA &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFNetworkLSA *</type>
      <name>dup</name>
      <anchorfile>class_o_s_p_f_network_l_s_a.html</anchorfile>
      <anchor>af4ecc71316b1edd866a2ea4a318763c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_o_s_p_f_network_l_s_a.html</anchorfile>
      <anchor>a89512e0eda834ece37420fe57d260874</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_o_s_p_f_network_l_s_a.html</anchorfile>
      <anchor>a21e79f2efce4f0fee991d8bf502fcea2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getNetworkMask</name>
      <anchorfile>class_o_s_p_f_network_l_s_a.html</anchorfile>
      <anchor>a88c13f00f8123bd371b76be47c87e0c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getNetworkMask</name>
      <anchorfile>class_o_s_p_f_network_l_s_a.html</anchorfile>
      <anchor>aa449c78fb094e2a3315aed88ce91f45c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNetworkMask</name>
      <anchorfile>class_o_s_p_f_network_l_s_a.html</anchorfile>
      <anchor>a887e3ce7e47a9f5716b949d71abb1124</anchor>
      <arglist>(const IPAddress &amp;networkMask_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttachedRoutersArraySize</name>
      <anchorfile>class_o_s_p_f_network_l_s_a.html</anchorfile>
      <anchor>a86410a1fdf3c1287858b3a27104b70b2</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getAttachedRoutersArraySize</name>
      <anchorfile>class_o_s_p_f_network_l_s_a.html</anchorfile>
      <anchor>a50154f7e76b77b626d057dc52b819bb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getAttachedRouters</name>
      <anchorfile>class_o_s_p_f_network_l_s_a.html</anchorfile>
      <anchor>a367e80b89b878798b2dcb401a588ef23</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getAttachedRouters</name>
      <anchorfile>class_o_s_p_f_network_l_s_a.html</anchorfile>
      <anchor>a6e419aa4daed6af7d5c1fe05722c462a</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttachedRouters</name>
      <anchorfile>class_o_s_p_f_network_l_s_a.html</anchorfile>
      <anchor>a1be4d767f8c6f2fa778d846e652e6bef</anchor>
      <arglist>(unsigned int k, const IPAddress &amp;attachedRouters_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_o_s_p_f_network_l_s_a.html</anchorfile>
      <anchor>a28f937831b14e41848ed1365a29caef3</anchor>
      <arglist>(const OSPFNetworkLSA &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>networkMask_var</name>
      <anchorfile>class_o_s_p_f_network_l_s_a.html</anchorfile>
      <anchor>a147d8de39989ef34e133305bbaa7449f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress *</type>
      <name>attachedRouters_var</name>
      <anchorfile>class_o_s_p_f_network_l_s_a.html</anchorfile>
      <anchor>a1dd5b49ffdf4afac7be3abd74b149cb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>attachedRouters_arraysize</name>
      <anchorfile>class_o_s_p_f_network_l_s_a.html</anchorfile>
      <anchor>a6b31ca131a693c3c207cee8c99f45040</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OSPFOptions</name>
    <filename>struct_o_s_p_f_options.html</filename>
    <member kind="function">
      <type></type>
      <name>OSPFOptions</name>
      <anchorfile>struct_o_s_p_f_options.html</anchorfile>
      <anchor>af370c04750f3cad299619dcd4a258da6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>unused_1</name>
      <anchorfile>struct_o_s_p_f_options.html</anchorfile>
      <anchor>aaf755e9129ee6e13c1cf8c10e8efe456</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>E_ExternalRoutingCapability</name>
      <anchorfile>struct_o_s_p_f_options.html</anchorfile>
      <anchor>ae52711a2db18ba8c2c34ffbb9ac162e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>MC_MulticastForwarding</name>
      <anchorfile>struct_o_s_p_f_options.html</anchorfile>
      <anchor>a45e089e5fc5f4a6b0a45a05e1b28f5b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>NP_Type7LSA</name>
      <anchorfile>struct_o_s_p_f_options.html</anchorfile>
      <anchor>a0e0ef0d09962db76af0d7b9b27ad8aeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>EA_ForwardExternalLSAs</name>
      <anchorfile>struct_o_s_p_f_options.html</anchorfile>
      <anchor>aeba376f1712dbc675521892970764cb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>DC_DemandCircuits</name>
      <anchorfile>struct_o_s_p_f_options.html</anchorfile>
      <anchor>a6cd37e8fea12205fa42876add94af33c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>unused_2</name>
      <anchorfile>struct_o_s_p_f_options.html</anchorfile>
      <anchor>a5c6949b2519451dcec01c7e5c9555a8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>unused_3</name>
      <anchorfile>struct_o_s_p_f_options.html</anchorfile>
      <anchor>afcfc42895cf0ccc2a9cf0fc188b70c85</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFPacket</name>
    <filename>class_o_s_p_f_packet.html</filename>
    <member kind="function">
      <type></type>
      <name>OSPFPacket</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>a55ecd6129e986accd17ec812d8a964bf</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSPFPacket</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>a45a237174c337d97d55b8131b5cd725a</anchor>
      <arglist>(const OSPFPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFPacket</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>ae6e23697f35aad75c9b1f2f3c040f613</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OSPFPacket &amp;</type>
      <name>operator=</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>adb5de845a0105d3df9eb5c4df017fcf5</anchor>
      <arglist>(const OSPFPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFPacket *</type>
      <name>dup</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>acc04a11b407dd6dcb884762160bcbc69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>abd2723ec6930bbb8f1bcd9edfbfdcaea</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>a18cb1d0e70446acbc024461e87c32671</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getVersion</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>a6be4b68eb55c8bd972fa70522ed505a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVersion</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>afbe44e5d9ab93c3c9ced985f39c2487b</anchor>
      <arglist>(char version_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getType</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>a678811acb1d47c5bb22c298d4d332f47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>a91cf3984eedf6f3ceb4c0c09c1fc6c6a</anchor>
      <arglist>(char type_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getPacketLength</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>aa70a94762d620fcac36c6ff77986381c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPacketLength</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>ad9a7f38186b1ebbe2bc924c809054a41</anchor>
      <arglist>(short packetLength_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getRouterID</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>abebaeb8bfd030b4d7d12b58092309298</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getRouterID</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>aeeaa23093aacd113f0ec706de76d2cc9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRouterID</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>a7839127100306f0d32de845322dc5d16</anchor>
      <arglist>(const IPAddress &amp;routerID_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getAreaID</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>a65e2840934e5751ee9c475a8cdd4d23e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getAreaID</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>adee88c6c07b2f49235f0c8a7d1fe810b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAreaID</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>a8330f979e87055012a3c3acf8adf785f</anchor>
      <arglist>(const IPAddress &amp;areaID_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getChecksum</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>a57c0ff2cd36d480a8144d7dcaa6630f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChecksum</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>ad9a629a73a19fbe1184c60e9594d579f</anchor>
      <arglist>(short checksum_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getAuthenticationType</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>a52c156903a31141ff29721cfced4bfbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAuthenticationType</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>a2e003d1dd0afa513157935fdf62b4ebe</anchor>
      <arglist>(short authenticationType_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getAuthenticationArraySize</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>ac8e890dba71da3d4c14748eff7fb07c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getAuthentication</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>a189b8776ce81d6aa36f49672cc4dcc5c</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAuthentication</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>a50fd50be5a73b14c4859a7f1274bd9f8</anchor>
      <arglist>(unsigned int k, char authentication_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>a4d3ef016afc29115cca5c60673e73552</anchor>
      <arglist>(const OSPFPacket &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>version_var</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>a251c511db4f216b651548962d7d4e509</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>type_var</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>a19e0d4d4e511de5db4dd67acf16f4ccb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>packetLength_var</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>ad3ff64a5ce02d242a2f3c7663ddf4871</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>routerID_var</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>ae89541ead6647a3328a752b7926b4b03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>areaID_var</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>ac33f8f3cac85ac789bc86e2959eb5730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>checksum_var</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>a057f1984cbd92103ad6c51a114cc1d16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>authenticationType_var</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>ad57e08f2978ba89105abfa1cfcf985bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>authentication_var</name>
      <anchorfile>class_o_s_p_f_packet.html</anchorfile>
      <anchor>ab96e3bfd986014d8f2d2c18158c6ccde</anchor>
      <arglist>[8]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFRouterLSA</name>
    <filename>class_o_s_p_f_router_l_s_a.html</filename>
    <base>OSPFLSA</base>
    <member kind="function">
      <type></type>
      <name>OSPFRouterLSA</name>
      <anchorfile>class_o_s_p_f_router_l_s_a.html</anchorfile>
      <anchor>a74d8960ac1a7121f5d5ea49395c5a6a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSPFRouterLSA</name>
      <anchorfile>class_o_s_p_f_router_l_s_a.html</anchorfile>
      <anchor>a7e6a04fc775ca989ab8a8a3dd81536cb</anchor>
      <arglist>(const OSPFRouterLSA &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFRouterLSA</name>
      <anchorfile>class_o_s_p_f_router_l_s_a.html</anchorfile>
      <anchor>a9e3c023833490223f1b951bd24d1f646</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OSPFRouterLSA &amp;</type>
      <name>operator=</name>
      <anchorfile>class_o_s_p_f_router_l_s_a.html</anchorfile>
      <anchor>adfb6661d0051990e5bdea5d1a8cd7aa8</anchor>
      <arglist>(const OSPFRouterLSA &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFRouterLSA *</type>
      <name>dup</name>
      <anchorfile>class_o_s_p_f_router_l_s_a.html</anchorfile>
      <anchor>ab098265743cf992e2ac710b840c682c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_o_s_p_f_router_l_s_a.html</anchorfile>
      <anchor>ac0fffd8234494c2ce0780181fa423fd0</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_o_s_p_f_router_l_s_a.html</anchorfile>
      <anchor>aafcbfe082a2086fbb6aba997eff9bebf</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getV_VirtualLinkEndpoint</name>
      <anchorfile>class_o_s_p_f_router_l_s_a.html</anchorfile>
      <anchor>a74770ef3b0c2678ccb33a236cedcfcc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setV_VirtualLinkEndpoint</name>
      <anchorfile>class_o_s_p_f_router_l_s_a.html</anchorfile>
      <anchor>adb0b5528f226277582347e8109ae2aef</anchor>
      <arglist>(bool V_VirtualLinkEndpoint_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getE_ASBoundaryRouter</name>
      <anchorfile>class_o_s_p_f_router_l_s_a.html</anchorfile>
      <anchor>a22400cd3947a21b087fdbd0fecc5b3ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setE_ASBoundaryRouter</name>
      <anchorfile>class_o_s_p_f_router_l_s_a.html</anchorfile>
      <anchor>a408f3ed9f4c932b62a932b14c68614c7</anchor>
      <arglist>(bool E_ASBoundaryRouter_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getB_AreaBorderRouter</name>
      <anchorfile>class_o_s_p_f_router_l_s_a.html</anchorfile>
      <anchor>aa77e2d2e1392414b8bd5a15d0450952f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setB_AreaBorderRouter</name>
      <anchorfile>class_o_s_p_f_router_l_s_a.html</anchorfile>
      <anchor>a43545b231bff2d0ce223c3b92e889290</anchor>
      <arglist>(bool B_AreaBorderRouter_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getNumberOfLinks</name>
      <anchorfile>class_o_s_p_f_router_l_s_a.html</anchorfile>
      <anchor>a0d1e50fe0f51e4d2b6e0044b4bbc5ee3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumberOfLinks</name>
      <anchorfile>class_o_s_p_f_router_l_s_a.html</anchorfile>
      <anchor>af79619015e752cfafac0e014bfded412</anchor>
      <arglist>(unsigned short numberOfLinks_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLinksArraySize</name>
      <anchorfile>class_o_s_p_f_router_l_s_a.html</anchorfile>
      <anchor>a2d3ce7f06ea01051187facaca82d1119</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getLinksArraySize</name>
      <anchorfile>class_o_s_p_f_router_l_s_a.html</anchorfile>
      <anchor>a65d69daaf585899cc5b125c057e1eb97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Link &amp;</type>
      <name>getLinks</name>
      <anchorfile>class_o_s_p_f_router_l_s_a.html</anchorfile>
      <anchor>a8efa6eb271aaf62a4062a16156819db5</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Link &amp;</type>
      <name>getLinks</name>
      <anchorfile>class_o_s_p_f_router_l_s_a.html</anchorfile>
      <anchor>a4e06498b53ecb83268bfa11f1df46964</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLinks</name>
      <anchorfile>class_o_s_p_f_router_l_s_a.html</anchorfile>
      <anchor>a244919b3cebe8dbaf33e05520ab34e67</anchor>
      <arglist>(unsigned int k, const Link &amp;links_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_o_s_p_f_router_l_s_a.html</anchorfile>
      <anchor>af4ad271ce7b46d5511ff033db0bd8717</anchor>
      <arglist>(const OSPFRouterLSA &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>V_VirtualLinkEndpoint_var</name>
      <anchorfile>class_o_s_p_f_router_l_s_a.html</anchorfile>
      <anchor>a6dd0dfc58a752afb425797901e62abaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>E_ASBoundaryRouter_var</name>
      <anchorfile>class_o_s_p_f_router_l_s_a.html</anchorfile>
      <anchor>a40793689537c0398a3c6d72ce03db795</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>B_AreaBorderRouter_var</name>
      <anchorfile>class_o_s_p_f_router_l_s_a.html</anchorfile>
      <anchor>a196fcd0a1083e7d0aaa93573bcb31c8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>numberOfLinks_var</name>
      <anchorfile>class_o_s_p_f_router_l_s_a.html</anchorfile>
      <anchor>a0d94344fa94e67f8524ca3b343a42ce7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::Link *</type>
      <name>links_var</name>
      <anchorfile>class_o_s_p_f_router_l_s_a.html</anchorfile>
      <anchor>a0a05bea5c06268256da59b0f4c6b6c09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>links_arraysize</name>
      <anchorfile>class_o_s_p_f_router_l_s_a.html</anchorfile>
      <anchor>a9974023df70c354061cf79463bb0f4e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFRouting</name>
    <filename>class_o_s_p_f_routing.html</filename>
    <member kind="function">
      <type></type>
      <name>OSPFRouting</name>
      <anchorfile>class_o_s_p_f_routing.html</anchorfile>
      <anchor>a308ea62380bcd522116dda0d58800644</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFRouting</name>
      <anchorfile>class_o_s_p_f_routing.html</anchorfile>
      <anchor>a457db930e04bfd5be7405113756727e9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_o_s_p_f_routing.html</anchorfile>
      <anchor>af7eb65eaa0b148353d7f4db823d68f4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_o_s_p_f_routing.html</anchorfile>
      <anchor>a757ca2b86873671c421c65e092630f42</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_o_s_p_f_routing.html</anchorfile>
      <anchor>acdf1e955f64a259cad0ac496e2c846a2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>ResolveInterfaceName</name>
      <anchorfile>class_o_s_p_f_routing.html</anchorfile>
      <anchor>a8d385175d7fb3de98c2f0e1186386ecb</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>GetAreaListFromXML</name>
      <anchorfile>class_o_s_p_f_routing.html</anchorfile>
      <anchor>af45e8fcdb8a085169c6ebc910778bc40</anchor>
      <arglist>(const cXMLElement &amp;routerNode, std::map&lt; std::string, int &gt; &amp;areaList) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>LoadAreaFromXML</name>
      <anchorfile>class_o_s_p_f_routing.html</anchorfile>
      <anchor>a366e9d2f93bcb10efe24da101a6cf4a8</anchor>
      <arglist>(const cXMLElement &amp;asConfig, const std::string &amp;areaID)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>LoadInterfaceParameters</name>
      <anchorfile>class_o_s_p_f_routing.html</anchorfile>
      <anchor>a2f4d972b5e0953bdfa621f22a72b8113</anchor>
      <arglist>(const cXMLElement &amp;ifConfig)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>LoadExternalRoute</name>
      <anchorfile>class_o_s_p_f_routing.html</anchorfile>
      <anchor>a2f336ded44b9ee2443da70db19ff34f4</anchor>
      <arglist>(const cXMLElement &amp;externalRouteConfig)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>LoadHostRoute</name>
      <anchorfile>class_o_s_p_f_routing.html</anchorfile>
      <anchor>aaaa7a0595a166970c8c6238b52dacfff</anchor>
      <arglist>(const cXMLElement &amp;hostRouteConfig)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>LoadVirtualLink</name>
      <anchorfile>class_o_s_p_f_routing.html</anchorfile>
      <anchor>adb2da70e8f941e2904279f3d176bf0b5</anchor>
      <arglist>(const cXMLElement &amp;virtualLinkConfig)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>LoadConfigFromXML</name>
      <anchorfile>class_o_s_p_f_routing.html</anchorfile>
      <anchor>af1b821a07e9e6aa92b95d8b88c351675</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IInterfaceTable *</type>
      <name>ift</name>
      <anchorfile>class_o_s_p_f_routing.html</anchorfile>
      <anchor>ad4bdd62bb9e1cdeeb118e986db7faf02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IRoutingTable *</type>
      <name>rt</name>
      <anchorfile>class_o_s_p_f_routing.html</anchorfile>
      <anchor>ad46d802ce8ea2ea455fa710e963f53c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPF::Router *</type>
      <name>ospfRouter</name>
      <anchorfile>class_o_s_p_f_routing.html</anchorfile>
      <anchor>a690ee8115e4d30c21e8adb5035ca5614</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFSummaryLSA</name>
    <filename>class_o_s_p_f_summary_l_s_a.html</filename>
    <base>OSPFLSA</base>
    <member kind="function">
      <type></type>
      <name>OSPFSummaryLSA</name>
      <anchorfile>class_o_s_p_f_summary_l_s_a.html</anchorfile>
      <anchor>a9640e945a64b548d6356fffe5e0f7167</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSPFSummaryLSA</name>
      <anchorfile>class_o_s_p_f_summary_l_s_a.html</anchorfile>
      <anchor>a33a199b1a0ce0ea65b6aaa51aef28006</anchor>
      <arglist>(const OSPFSummaryLSA &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFSummaryLSA</name>
      <anchorfile>class_o_s_p_f_summary_l_s_a.html</anchorfile>
      <anchor>af49e574d45b614ebdf8b509f4aae7150</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OSPFSummaryLSA &amp;</type>
      <name>operator=</name>
      <anchorfile>class_o_s_p_f_summary_l_s_a.html</anchorfile>
      <anchor>a77b2a32a7b60b3aa400f302b85e8c7e0</anchor>
      <arglist>(const OSPFSummaryLSA &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFSummaryLSA *</type>
      <name>dup</name>
      <anchorfile>class_o_s_p_f_summary_l_s_a.html</anchorfile>
      <anchor>a9e6455b9fec21ed559daa2040e34dfa4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_o_s_p_f_summary_l_s_a.html</anchorfile>
      <anchor>aff65975b3249937991cf0ff7799238ac</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_o_s_p_f_summary_l_s_a.html</anchorfile>
      <anchor>a30e0c37eeabd04d56c30a9790f2ee718</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getNetworkMask</name>
      <anchorfile>class_o_s_p_f_summary_l_s_a.html</anchorfile>
      <anchor>a89d8933ab80c516ff7fe8f6551ddaed1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getNetworkMask</name>
      <anchorfile>class_o_s_p_f_summary_l_s_a.html</anchorfile>
      <anchor>aa9fdb8318b54a3dde2b6dc404197cf49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNetworkMask</name>
      <anchorfile>class_o_s_p_f_summary_l_s_a.html</anchorfile>
      <anchor>a2fda26e8c51278cbdfc918e9df3f536e</anchor>
      <arglist>(const IPAddress &amp;networkMask_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>getRouteCost</name>
      <anchorfile>class_o_s_p_f_summary_l_s_a.html</anchorfile>
      <anchor>a35b052e8b5bab0e322903740f2aad05e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRouteCost</name>
      <anchorfile>class_o_s_p_f_summary_l_s_a.html</anchorfile>
      <anchor>a8322233851f2721d7c3c7ce9fc06bd6c</anchor>
      <arglist>(unsigned long routeCost_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTosDataArraySize</name>
      <anchorfile>class_o_s_p_f_summary_l_s_a.html</anchorfile>
      <anchor>a66785092e6cb41e22c73e99a429e095e</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getTosDataArraySize</name>
      <anchorfile>class_o_s_p_f_summary_l_s_a.html</anchorfile>
      <anchor>acc47f20ed9828b2b92cfb9f6710f4e34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TOSData &amp;</type>
      <name>getTosData</name>
      <anchorfile>class_o_s_p_f_summary_l_s_a.html</anchorfile>
      <anchor>a5c42b54450fd4e5b52058454938b6c8c</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TOSData &amp;</type>
      <name>getTosData</name>
      <anchorfile>class_o_s_p_f_summary_l_s_a.html</anchorfile>
      <anchor>a1186ff8c8a728d7bf9b6a6fce7dab161</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTosData</name>
      <anchorfile>class_o_s_p_f_summary_l_s_a.html</anchorfile>
      <anchor>a4151270511d3333a220a4943e66db01e</anchor>
      <arglist>(unsigned int k, const TOSData &amp;tosData_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_o_s_p_f_summary_l_s_a.html</anchorfile>
      <anchor>abbc34d71d282ec4099da01109d56f186</anchor>
      <arglist>(const OSPFSummaryLSA &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>networkMask_var</name>
      <anchorfile>class_o_s_p_f_summary_l_s_a.html</anchorfile>
      <anchor>aa53cb2c65bbc537b9080f03b9785e29f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>routeCost_var</name>
      <anchorfile>class_o_s_p_f_summary_l_s_a.html</anchorfile>
      <anchor>a8d9036d086bab3b21b7975d2ff68c19a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::TOSData *</type>
      <name>tosData_var</name>
      <anchorfile>class_o_s_p_f_summary_l_s_a.html</anchorfile>
      <anchor>a0b571c83d12fce4716af5e9cc611a2b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>tosData_arraysize</name>
      <anchorfile>class_o_s_p_f_summary_l_s_a.html</anchorfile>
      <anchor>ae5c9da394bdc5448999c0c05070eb555</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFTimer</name>
    <filename>class_o_s_p_f_timer.html</filename>
    <member kind="function">
      <type></type>
      <name>OSPFTimer</name>
      <anchorfile>class_o_s_p_f_timer.html</anchorfile>
      <anchor>a55457afb854f31dcfa367c47c6154194</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSPFTimer</name>
      <anchorfile>class_o_s_p_f_timer.html</anchorfile>
      <anchor>ae8ba838db58d215c09061dc6a1027b0f</anchor>
      <arglist>(const OSPFTimer &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFTimer</name>
      <anchorfile>class_o_s_p_f_timer.html</anchorfile>
      <anchor>a369fec0f00f61ca4d68245e8a952664d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OSPFTimer &amp;</type>
      <name>operator=</name>
      <anchorfile>class_o_s_p_f_timer.html</anchorfile>
      <anchor>a1af4a19d2a6a91d73b8e9fb9116c4618</anchor>
      <arglist>(const OSPFTimer &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFTimer *</type>
      <name>dup</name>
      <anchorfile>class_o_s_p_f_timer.html</anchorfile>
      <anchor>ad2103fb62eda7e0b3d471443799a807d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_o_s_p_f_timer.html</anchorfile>
      <anchor>a785b251da33aff10e9cfde3269c68232</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_o_s_p_f_timer.html</anchorfile>
      <anchor>aeb5d42676d1e00c4bc7d423cd205dc25</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getTimerKind</name>
      <anchorfile>class_o_s_p_f_timer.html</anchorfile>
      <anchor>a013a44cf6f4a28a61c7b7f6bef51cc81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimerKind</name>
      <anchorfile>class_o_s_p_f_timer.html</anchorfile>
      <anchor>a0466771c5b2cff0c46ea2fadad1a5752</anchor>
      <arglist>(char timerKind_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_o_s_p_f_timer.html</anchorfile>
      <anchor>a9a70731f2ae6458d8e6c754ae2151d40</anchor>
      <arglist>(const OSPFTimer &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>timerKind_var</name>
      <anchorfile>class_o_s_p_f_timer.html</anchorfile>
      <anchor>a3b410f2a8c44cb9b0ef5f91ba2085f3c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PassiveQueueBase</name>
    <filename>class_passive_queue_base.html</filename>
    <base>IPassiveQueue</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>requestPacket</name>
      <anchorfile>class_passive_queue_base.html</anchorfile>
      <anchor>a57b0190cd7ff0680aec0e0380bfe5f6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_passive_queue_base.html</anchorfile>
      <anchor>a3a488890814dbb44a5a13484bc53c8e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_passive_queue_base.html</anchorfile>
      <anchor>a9ffb506efef264020593255ca851ee0f</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_passive_queue_base.html</anchorfile>
      <anchor>acee0e2aa70ab285e4c8cd6cc4f2e2a7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>enqueue</name>
      <anchorfile>class_passive_queue_base.html</anchorfile>
      <anchor>a3a66cd4ad83d1fc2eca438a464cb18e3</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual cMessage *</type>
      <name>dequeue</name>
      <anchorfile>class_passive_queue_base.html</anchorfile>
      <anchor>a1757ec3ed3d949ba3b98c9fca336555a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>sendOut</name>
      <anchorfile>class_passive_queue_base.html</anchorfile>
      <anchor>aa22695ef0f03857570e4a94770b421ce</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>packetRequested</name>
      <anchorfile>class_passive_queue_base.html</anchorfile>
      <anchor>a36056a661022502ac55f56beb94d00c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numQueueReceived</name>
      <anchorfile>class_passive_queue_base.html</anchorfile>
      <anchor>af2713c83f79d14c84fdfbcc98d1e5959</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numQueueDropped</name>
      <anchorfile>class_passive_queue_base.html</anchorfile>
      <anchor>af82ffeddcd1d4b3eb6e681d44319b00b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PathLossReceptionModel</name>
    <filename>class_path_loss_reception_model.html</filename>
    <base>IReceptionModel</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeFrom</name>
      <anchorfile>class_path_loss_reception_model.html</anchorfile>
      <anchor>add9c5f7e304261adae2cf281802019ab</anchor>
      <arglist>(cModule *radioModule)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>calculateReceivedPower</name>
      <anchorfile>class_path_loss_reception_model.html</anchorfile>
      <anchor>a126b13349a7602b64d973f404c8fc517</anchor>
      <arglist>(double pSend, double carrierFrequency, double distance)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>pathLossAlpha</name>
      <anchorfile>class_path_loss_reception_model.html</anchorfile>
      <anchor>a4b0b4452b46aad584b5a3c99d2696892</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PathNotifyMsg</name>
    <filename>class_path_notify_msg.html</filename>
    <base>SignallingMsg</base>
    <member kind="function">
      <type></type>
      <name>PathNotifyMsg</name>
      <anchorfile>class_path_notify_msg.html</anchorfile>
      <anchor>a1a821a5d8aecd69f78cb925e016dd841</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PathNotifyMsg</name>
      <anchorfile>class_path_notify_msg.html</anchorfile>
      <anchor>a9470bed2d9d8db645aab209ebf78a8de</anchor>
      <arglist>(const PathNotifyMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PathNotifyMsg</name>
      <anchorfile>class_path_notify_msg.html</anchorfile>
      <anchor>a91193add3a48be9a269c3b84b7f3b2ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PathNotifyMsg &amp;</type>
      <name>operator=</name>
      <anchorfile>class_path_notify_msg.html</anchorfile>
      <anchor>abcd46409dd85b3d597b39c7d23727d82</anchor>
      <arglist>(const PathNotifyMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathNotifyMsg *</type>
      <name>dup</name>
      <anchorfile>class_path_notify_msg.html</anchorfile>
      <anchor>aa24f80376b3b3f640db4cf473c30925e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_path_notify_msg.html</anchorfile>
      <anchor>ac790d2cfd19fc32faa356031d1373670</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_path_notify_msg.html</anchorfile>
      <anchor>aca8af71b4ff6a6e5923b1591214aedfc</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SessionObj_t &amp;</type>
      <name>getSession</name>
      <anchorfile>class_path_notify_msg.html</anchorfile>
      <anchor>ada89959ec960e987083eae8d8f3ac8bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SessionObj_t &amp;</type>
      <name>getSession</name>
      <anchorfile>class_path_notify_msg.html</anchorfile>
      <anchor>abadcd3dc409418d4816ccde1e676d6c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSession</name>
      <anchorfile>class_path_notify_msg.html</anchorfile>
      <anchor>ae9893896b9fd6107607d288c999cf682</anchor>
      <arglist>(const SessionObj_t &amp;session_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SenderTemplateObj_t &amp;</type>
      <name>getSender</name>
      <anchorfile>class_path_notify_msg.html</anchorfile>
      <anchor>a1b8969c398c764f402fa78b52e45bec6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SenderTemplateObj_t &amp;</type>
      <name>getSender</name>
      <anchorfile>class_path_notify_msg.html</anchorfile>
      <anchor>a0da25433f5275c6e306b716d809ee429</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSender</name>
      <anchorfile>class_path_notify_msg.html</anchorfile>
      <anchor>a85adfe8dae5560dc0b01cfb43293fcca</anchor>
      <arglist>(const SenderTemplateObj_t &amp;sender_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getStatus</name>
      <anchorfile>class_path_notify_msg.html</anchorfile>
      <anchor>a7ab68dfef81ece183a685adb69122154</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStatus</name>
      <anchorfile>class_path_notify_msg.html</anchorfile>
      <anchor>aa1075e94a9e635356e6cc77495197d8c</anchor>
      <arglist>(int status_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommand</name>
      <anchorfile>class_path_notify_msg.html</anchorfile>
      <anchor>ab2ab9657d9065b4bc440b1fd83e9dde3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchorfile>class_path_notify_msg.html</anchorfile>
      <anchor>a2a7226c9cd78292f7da57cda2efa514b</anchor>
      <arglist>(int command_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_path_notify_msg.html</anchorfile>
      <anchor>ae7653b9f97ab0c23b063ce288fbdacae</anchor>
      <arglist>(const PathNotifyMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::SessionObj_t</type>
      <name>session_var</name>
      <anchorfile>class_path_notify_msg.html</anchorfile>
      <anchor>a62f3dcba24dae541ad889495ecd8c5ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::SenderTemplateObj_t</type>
      <name>sender_var</name>
      <anchorfile>class_path_notify_msg.html</anchorfile>
      <anchor>a0c1731be45bc55bef83548476448f3af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>status_var</name>
      <anchorfile>class_path_notify_msg.html</anchorfile>
      <anchor>a5387574c3434101aa013e5ed61ad3b3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>command_var</name>
      <anchorfile>class_path_notify_msg.html</anchorfile>
      <anchor>aec3d2c8805d00f27e6f02cf901dab820</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pcap_hdr</name>
    <filename>structpcap__hdr.html</filename>
    <member kind="variable">
      <type>uint32</type>
      <name>magic</name>
      <anchorfile>structpcap__hdr.html</anchorfile>
      <anchor>a365515f31ff22dabe8427dcb3b2edef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>version_major</name>
      <anchorfile>structpcap__hdr.html</anchorfile>
      <anchor>aeec1b462c49a28676acccf006efdb4ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>version_minor</name>
      <anchorfile>structpcap__hdr.html</anchorfile>
      <anchor>a4431b3e54b5dde48ed4f7bebc4c28317</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>thiszone</name>
      <anchorfile>structpcap__hdr.html</anchorfile>
      <anchor>a2b55b0316431873ffddf8dc72bfdcc21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>sigfigs</name>
      <anchorfile>structpcap__hdr.html</anchorfile>
      <anchor>aab28b83772f5d7eebf1f53d36707b9bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>snaplen</name>
      <anchorfile>structpcap__hdr.html</anchorfile>
      <anchor>abc6d2290dae95d58b64073f887006e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>network</name>
      <anchorfile>structpcap__hdr.html</anchorfile>
      <anchor>af0322daa113dc759bc598cae5a8cfe01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pcaprec_hdr</name>
    <filename>structpcaprec__hdr.html</filename>
    <member kind="variable">
      <type>int32</type>
      <name>ts_sec</name>
      <anchorfile>structpcaprec__hdr.html</anchorfile>
      <anchor>a6a864e0cfab37d2ed276c7a737d348ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>ts_usec</name>
      <anchorfile>structpcaprec__hdr.html</anchorfile>
      <anchor>aefcb7390c3211729dad3a61296b2585c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>incl_len</name>
      <anchorfile>structpcaprec__hdr.html</anchorfile>
      <anchor>ac480fc1b279cc957f290d34cbb3f6faf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>orig_len</name>
      <anchorfile>structpcaprec__hdr.html</anchorfile>
      <anchor>a77d92d75020416084eb5cffbfdc22ee0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PhyControlInfo</name>
    <filename>class_phy_control_info.html</filename>
    <member kind="function">
      <type></type>
      <name>PhyControlInfo</name>
      <anchorfile>class_phy_control_info.html</anchorfile>
      <anchor>a1ee1ff29686fa4f84106b920759ae3a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PhyControlInfo</name>
      <anchorfile>class_phy_control_info.html</anchorfile>
      <anchor>a986ad8594f5a4b0c25e88e18563e6000</anchor>
      <arglist>(const PhyControlInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PhyControlInfo</name>
      <anchorfile>class_phy_control_info.html</anchorfile>
      <anchor>a3b543473c86d00ae2d98a368c364688d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PhyControlInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>class_phy_control_info.html</anchorfile>
      <anchor>a16667ba68b9b8adb555a644d4c774eca</anchor>
      <arglist>(const PhyControlInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PhyControlInfo *</type>
      <name>dup</name>
      <anchorfile>class_phy_control_info.html</anchorfile>
      <anchor>a5c04d5003ab24f9b506a19b85fe8b799</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_phy_control_info.html</anchorfile>
      <anchor>ae61f1443294ad386ae4e2071366f1c29</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_phy_control_info.html</anchorfile>
      <anchor>a7f8863864a29d88f345bad2001a52aa5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getChannelNumber</name>
      <anchorfile>class_phy_control_info.html</anchorfile>
      <anchor>adf34f991f466b2ed39bcc3d484612167</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChannelNumber</name>
      <anchorfile>class_phy_control_info.html</anchorfile>
      <anchor>a59923d33b613096faf28726aed0ed463</anchor>
      <arglist>(int channelNumber_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBitrate</name>
      <anchorfile>class_phy_control_info.html</anchorfile>
      <anchor>a75467afe8d5de4d4aa72e8f773117736</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBitrate</name>
      <anchorfile>class_phy_control_info.html</anchorfile>
      <anchor>a7b87a31b98708a05cf9cd567600483a7</anchor>
      <arglist>(double bitrate_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_phy_control_info.html</anchorfile>
      <anchor>ada77644f2ed670318bb392cdf9e500e6</anchor>
      <arglist>(const PhyControlInfo &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>channelNumber_var</name>
      <anchorfile>class_phy_control_info.html</anchorfile>
      <anchor>a080c73a3dbb944981ed398842d005859</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate_var</name>
      <anchorfile>class_phy_control_info.html</anchorfile>
      <anchor>a613a4f3d466fd765af18be56760a346b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PingApp</name>
    <filename>class_ping_app.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_ping_app.html</anchorfile>
      <anchor>abbc1461430d45eb1388d2d7eeb76bb30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_ping_app.html</anchorfile>
      <anchor>a26bc45b681ca3330c15568353c72acf3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_ping_app.html</anchorfile>
      <anchor>ab5042aef4ae31665177fb3f22ca4b9b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendPing</name>
      <anchorfile>class_ping_app.html</anchorfile>
      <anchor>adb7caedd0bf01a0b40b3183aa0eeb03b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleNextPing</name>
      <anchorfile>class_ping_app.html</anchorfile>
      <anchor>aefc73a888ee638c121892a9579a995ca</anchor>
      <arglist>(cMessage *timer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToICMP</name>
      <anchorfile>class_ping_app.html</anchorfile>
      <anchor>aef7fc734d0cc901d9378eeafced96ee2</anchor>
      <arglist>(cMessage *payload, const IPvXAddress &amp;destAddr, const IPvXAddress &amp;srcAddr, int hopLimit)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPingResponse</name>
      <anchorfile>class_ping_app.html</anchorfile>
      <anchor>ad14e23f81b42abf19ec61f47745ec0e7</anchor>
      <arglist>(PingPayload *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>countPingResponse</name>
      <anchorfile>class_ping_app.html</anchorfile>
      <anchor>aead6e8c1c525d60844de9983d7475653</anchor>
      <arglist>(int bytes, long seqNo, simtime_t rtt)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>destAddr</name>
      <anchorfile>class_ping_app.html</anchorfile>
      <anchor>a90c1f4f53aa0f82c1596491f10818e16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>srcAddr</name>
      <anchorfile>class_ping_app.html</anchorfile>
      <anchor>a67c208bc982f7326d96de208911561f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>packetSize</name>
      <anchorfile>class_ping_app.html</anchorfile>
      <anchor>a31f1b37b2a1a4f173b5483de5802b280</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPar *</type>
      <name>intervalp</name>
      <anchorfile>class_ping_app.html</anchorfile>
      <anchor>a3867242ac06b4da1a529ff34e3b1d632</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>hopLimit</name>
      <anchorfile>class_ping_app.html</anchorfile>
      <anchor>a167021a8e4e793e3a1d7ad257ae4c4db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>count</name>
      <anchorfile>class_ping_app.html</anchorfile>
      <anchor>a1e7798fd90c7c1310a0209e3ad204c9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>startTime</name>
      <anchorfile>class_ping_app.html</anchorfile>
      <anchor>a7650ac4f6eb73299696aa153d10c938d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>stopTime</name>
      <anchorfile>class_ping_app.html</anchorfile>
      <anchor>a20383390baf840ee48d7832b93b79be8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>printPing</name>
      <anchorfile>class_ping_app.html</anchorfile>
      <anchor>a1b8bb85846ac294ab8eee2afd7540465</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>sendSeqNo</name>
      <anchorfile>class_ping_app.html</anchorfile>
      <anchor>a288c03dc5898822528e9a77799e8f631</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>expectedReplySeqNo</name>
      <anchorfile>class_ping_app.html</anchorfile>
      <anchor>a0f1e53b0d49fd65111fb98bf8ca737e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cStdDev</type>
      <name>delayStat</name>
      <anchorfile>class_ping_app.html</anchorfile>
      <anchor>a38122dab1f643b9c15cf2af30b86a1d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>delayVector</name>
      <anchorfile>class_ping_app.html</anchorfile>
      <anchor>a6f5dcd6cc7fe36e2f9db525e75ae3b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>dropVector</name>
      <anchorfile>class_ping_app.html</anchorfile>
      <anchor>a06afd4d41f5311b62ed8a96843c2d099</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>dropCount</name>
      <anchorfile>class_ping_app.html</anchorfile>
      <anchor>a63e70f3d50d36cb3b31aa6e064d2d1c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>outOfOrderArrivalCount</name>
      <anchorfile>class_ping_app.html</anchorfile>
      <anchor>ac85c2afd50d7cbf1b429c89ffb535b68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PingPayload</name>
    <filename>class_ping_payload.html</filename>
    <member kind="function">
      <type></type>
      <name>PingPayload</name>
      <anchorfile>class_ping_payload.html</anchorfile>
      <anchor>aee47d5e69adfdb37ab7fada3720d97b0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PingPayload</name>
      <anchorfile>class_ping_payload.html</anchorfile>
      <anchor>a16ea9b82dcc7db1d80ea278e68a6e873</anchor>
      <arglist>(const PingPayload &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PingPayload</name>
      <anchorfile>class_ping_payload.html</anchorfile>
      <anchor>abbbbef88675dc4a20dae773a516c0885</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PingPayload &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ping_payload.html</anchorfile>
      <anchor>af88980feb6da0c6659104d5cb8815add</anchor>
      <arglist>(const PingPayload &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PingPayload *</type>
      <name>dup</name>
      <anchorfile>class_ping_payload.html</anchorfile>
      <anchor>abb9e64768850d438e3457e387e2edabb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_ping_payload.html</anchorfile>
      <anchor>a282b855f676fe49f5f7a0bb45da07295</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_ping_payload.html</anchorfile>
      <anchor>ac9b63fb0a2bee6fe1f5e3cee4cfd9bf8</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getOriginatorId</name>
      <anchorfile>class_ping_payload.html</anchorfile>
      <anchor>abe1bc827f2853b31074b3f2e572eb47a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOriginatorId</name>
      <anchorfile>class_ping_payload.html</anchorfile>
      <anchor>aa4fc4185a1c60ce37483479436338f8b</anchor>
      <arglist>(long originatorId_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getSeqNo</name>
      <anchorfile>class_ping_payload.html</anchorfile>
      <anchor>a9078031b7f94d0209c7c2d918999d9bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSeqNo</name>
      <anchorfile>class_ping_payload.html</anchorfile>
      <anchor>a54cba676221848a5e702c9f036343278</anchor>
      <arglist>(long seqNo_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDataArraySize</name>
      <anchorfile>class_ping_payload.html</anchorfile>
      <anchor>a5dc6809e8fbf3a18f2e5c614b9c3bfab</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getDataArraySize</name>
      <anchorfile>class_ping_payload.html</anchorfile>
      <anchor>af74b062556e1209568fed0a1f35fdad2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getData</name>
      <anchorfile>class_ping_payload.html</anchorfile>
      <anchor>afef42461bf4c168d8b7c9fe6ad9c44c4</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setData</name>
      <anchorfile>class_ping_payload.html</anchorfile>
      <anchor>a44f09ec4cb1ca549e0c2e11e163a9991</anchor>
      <arglist>(unsigned int k, unsigned char data_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_ping_payload.html</anchorfile>
      <anchor>aa1454bf2c9c16e73bb93968124b0d893</anchor>
      <arglist>(const PingPayload &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>originatorId_var</name>
      <anchorfile>class_ping_payload.html</anchorfile>
      <anchor>a3884705e693af2db1cb570c9e8d0f34c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>seqNo_var</name>
      <anchorfile>class_ping_payload.html</anchorfile>
      <anchor>a77ba8ec13b4f2535ed5e96b02f67b521</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>data_var</name>
      <anchorfile>class_ping_payload.html</anchorfile>
      <anchor>a5eecca0d01d7137b036a4910d45c9fe1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>data_arraysize</name>
      <anchorfile>class_ping_payload.html</anchorfile>
      <anchor>ad49fe7d0d62c5796c87f2318e51396ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PPP</name>
    <filename>class_p_p_p.html</filename>
    <base>INotifiable</base>
    <member kind="function">
      <type></type>
      <name>PPP</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>a89531514354bf89f5f02cec4fce1c54d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PPP</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>a0772aed95f66475d69a67bee11c8ac36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual InterfaceEntry *</type>
      <name>registerInterface</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>af0cf5df454211761f908bcaffc230ef1</anchor>
      <arglist>(double datarate)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>startTransmitting</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>a7c8ceb697c8b10fe8f8c88635716a670</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual PPPFrame *</type>
      <name>encapsulate</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>ae6e442374ef9e796fdcd2814a53df6bf</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>decapsulate</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>af428f42f1af9023c7a957f3cece82a32</anchor>
      <arglist>(PPPFrame *pppFrame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>displayBusy</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>a920a4ace26e1a715a949250a5a2a7dfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>displayIdle</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>a8ec45c6b089b5af71509b99606627b41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDisplayString</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>ab8b681ee7211e3fbeb159d724f17f65f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateHasSubcribers</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>ad8ddb3381ac25719751d53bcd684b193</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>a30dd53132798608b57348b7f67b4f65f</anchor>
      <arglist>(int category, const cPolymorphic *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>a202f50e17da0b3ff99bc7c9970833a9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>a4cb478dc8f5ddb7f49c8888a9a4a87eb</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>aacbdf3925cd661e8e9cf410d98b8f6a4</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>txQueueLimit</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>ac731e7aaf0cc52ed236260cb7aa5aa15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cGate *</type>
      <name>physOutGate</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>a4b3543a798c6131e6fbe2b1e28ee3423</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cChannel *</type>
      <name>datarateChannel</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>ac5fea52e441f1b995fe467a48027fd62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cQueue</type>
      <name>txQueue</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>a8a7ab0a44166c893167334548b6718b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endTransmissionEvent</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>a3dc70c045c2cf2901099b490407b92ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPassiveQueue *</type>
      <name>queueModule</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>a96a748874c91fa8a1fb0e40899801b72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterfaceEntry *</type>
      <name>interfaceEntry</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>acb8266d52b5574c64a32db437b22d13f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NotificationBoard *</type>
      <name>nb</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>aafac1bf1ff7fa1129a128383564962ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TxNotifDetails</type>
      <name>notifDetails</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>aed42f07801b5b2866f85388a5bed92f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hasSubscribers</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>a7aec9f15f96818f06c986438082b1125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>oldConnColor</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>abe87fb75773ff7b998603e1ae6d1af0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numSent</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>a875328ed8b27af42ed90a66c8c05cb66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numRcvdOK</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>a15fac7a6a4bfc24b6ead996e65ed929f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numBitErr</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>a12df1db57627218860cbf44430b1af61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numDroppedIfaceDown</name>
      <anchorfile>class_p_p_p.html</anchorfile>
      <anchor>af3c8934517714351e70afd59a3f0151b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PPPFrame</name>
    <filename>class_p_p_p_frame.html</filename>
    <member kind="function">
      <type></type>
      <name>PPPFrame</name>
      <anchorfile>class_p_p_p_frame.html</anchorfile>
      <anchor>a1513652c774a06e370a2bfecb3b9993c</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PPPFrame</name>
      <anchorfile>class_p_p_p_frame.html</anchorfile>
      <anchor>a9cbfba201316e67ef5b868f0a5665580</anchor>
      <arglist>(const PPPFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PPPFrame</name>
      <anchorfile>class_p_p_p_frame.html</anchorfile>
      <anchor>a071207d5fb8da6bdb7a00b54cdf143d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PPPFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>class_p_p_p_frame.html</anchorfile>
      <anchor>a1a4789fd90e2835ee4ea67c5355f830a</anchor>
      <arglist>(const PPPFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PPPFrame *</type>
      <name>dup</name>
      <anchorfile>class_p_p_p_frame.html</anchorfile>
      <anchor>ac576ea1351f9c3de87d67e9b21b9d524</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_p_p_p_frame.html</anchorfile>
      <anchor>a10913592801c590dfa779c05968657ea</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_p_p_p_frame.html</anchorfile>
      <anchor>a1f5b45da2e1f75390b632563fcb8700d</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_p_p_p_frame.html</anchorfile>
      <anchor>a9681dc219d797b74242cdcf62ca84b70</anchor>
      <arglist>(const PPPFrame &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ProtocolMapping</name>
    <filename>class_protocol_mapping.html</filename>
    <class kind="struct">ProtocolMapping::Entry</class>
    <member kind="function">
      <type></type>
      <name>ProtocolMapping</name>
      <anchorfile>class_protocol_mapping.html</anchorfile>
      <anchor>a8a74681e885dcb547ecc99b0c068f875</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ProtocolMapping</name>
      <anchorfile>class_protocol_mapping.html</anchorfile>
      <anchor>a96e97574a88211de44263609cbbc914e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parseProtocolMapping</name>
      <anchorfile>class_protocol_mapping.html</anchorfile>
      <anchor>a704b3e85485f45f254836bbbdfdd4637</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOutputGateForProtocol</name>
      <anchorfile>class_protocol_mapping.html</anchorfile>
      <anchor>aab6b4ece952c398a02f939f86698e5b3</anchor>
      <arglist>(int protocol)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; Entry &gt;</type>
      <name>Entries</name>
      <anchorfile>class_protocol_mapping.html</anchorfile>
      <anchor>a5744dbfcb6f94692be44a97589692e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Entries</type>
      <name>entries</name>
      <anchorfile>class_protocol_mapping.html</anchorfile>
      <anchor>a4d9026dc8880b03a61255c0a7e33a17b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ProtocolMapping::Entry</name>
    <filename>struct_protocol_mapping_1_1_entry.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>protocolNumber</name>
      <anchorfile>struct_protocol_mapping_1_1_entry.html</anchorfile>
      <anchor>a28dcbf7aa8a640a0da88365861912104</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>outGateIndex</name>
      <anchorfile>struct_protocol_mapping_1_1_entry.html</anchorfile>
      <anchor>a05afa2512e8005da1f366fe5e2422d5b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PsbTimeoutMsg</name>
    <filename>class_psb_timeout_msg.html</filename>
    <base>SignallingMsg</base>
    <member kind="function">
      <type></type>
      <name>PsbTimeoutMsg</name>
      <anchorfile>class_psb_timeout_msg.html</anchorfile>
      <anchor>a8f4267f70818afce6827635a0e1e815c</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PsbTimeoutMsg</name>
      <anchorfile>class_psb_timeout_msg.html</anchorfile>
      <anchor>abc6126ee1772016e9f4daf73ab8a47fd</anchor>
      <arglist>(const PsbTimeoutMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PsbTimeoutMsg</name>
      <anchorfile>class_psb_timeout_msg.html</anchorfile>
      <anchor>a68fada9e4d56517a3c1b3d0664bc7f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PsbTimeoutMsg &amp;</type>
      <name>operator=</name>
      <anchorfile>class_psb_timeout_msg.html</anchorfile>
      <anchor>a60e17325c5826f2605de952a6ad7b27d</anchor>
      <arglist>(const PsbTimeoutMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PsbTimeoutMsg *</type>
      <name>dup</name>
      <anchorfile>class_psb_timeout_msg.html</anchorfile>
      <anchor>a52c49925e99c9056f828b7d7d0a459ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_psb_timeout_msg.html</anchorfile>
      <anchor>aa4f6faae61fa999e307fef85456cec5f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_psb_timeout_msg.html</anchorfile>
      <anchor>aa0f7279acde64773922f1b7882a70d37</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getId</name>
      <anchorfile>class_psb_timeout_msg.html</anchorfile>
      <anchor>abc9394fc8a0dfeca89f68399e04bb279</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setId</name>
      <anchorfile>class_psb_timeout_msg.html</anchorfile>
      <anchor>a3877e7bbfd31fbcfd5c8dcdb82421302</anchor>
      <arglist>(int id_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommand</name>
      <anchorfile>class_psb_timeout_msg.html</anchorfile>
      <anchor>ad87af7bb706f79d8641aa869f593f9fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchorfile>class_psb_timeout_msg.html</anchorfile>
      <anchor>a7bf6d330f5db1057f731a032f7ad9f60</anchor>
      <arglist>(int command_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_psb_timeout_msg.html</anchorfile>
      <anchor>a46b0734f0f8d282e73869ec131cf3b5a</anchor>
      <arglist>(const PsbTimeoutMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>id_var</name>
      <anchorfile>class_psb_timeout_msg.html</anchorfile>
      <anchor>a03ec796c648cf9519cefa0655b809e4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>command_var</name>
      <anchorfile>class_psb_timeout_msg.html</anchorfile>
      <anchor>ac116208c944318c3975b97115609dd24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PsbTimerMsg</name>
    <filename>class_psb_timer_msg.html</filename>
    <base>SignallingMsg</base>
    <member kind="function">
      <type></type>
      <name>PsbTimerMsg</name>
      <anchorfile>class_psb_timer_msg.html</anchorfile>
      <anchor>ad50f45b3f02e89555c51719556c845db</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PsbTimerMsg</name>
      <anchorfile>class_psb_timer_msg.html</anchorfile>
      <anchor>ad8207be5c089ab997c74728406459ab3</anchor>
      <arglist>(const PsbTimerMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PsbTimerMsg</name>
      <anchorfile>class_psb_timer_msg.html</anchorfile>
      <anchor>a6f6764342478aa328d22d676d2496a0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PsbTimerMsg &amp;</type>
      <name>operator=</name>
      <anchorfile>class_psb_timer_msg.html</anchorfile>
      <anchor>a37f59a1399b997b0bc1375b394ea4dbb</anchor>
      <arglist>(const PsbTimerMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PsbTimerMsg *</type>
      <name>dup</name>
      <anchorfile>class_psb_timer_msg.html</anchorfile>
      <anchor>ac61453c2323825f21fbf5fb52d4818fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_psb_timer_msg.html</anchorfile>
      <anchor>a290891fe12336ae563ca899c88686270</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_psb_timer_msg.html</anchorfile>
      <anchor>aed5dc911df6061a22ce1088d6f5b429d</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getId</name>
      <anchorfile>class_psb_timer_msg.html</anchorfile>
      <anchor>a3bdc095fac252bfa74f8459f664f028a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setId</name>
      <anchorfile>class_psb_timer_msg.html</anchorfile>
      <anchor>ad8c6465f50d874487e4e57b3a11346a2</anchor>
      <arglist>(int id_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommand</name>
      <anchorfile>class_psb_timer_msg.html</anchorfile>
      <anchor>aa59245820559358e889142333afce6b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchorfile>class_psb_timer_msg.html</anchorfile>
      <anchor>a6dc8f4c328ab8dd541fb1159b28e7b2e</anchor>
      <arglist>(int command_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_psb_timer_msg.html</anchorfile>
      <anchor>afaddd82f68a33db6f1a9712fec98de5a</anchor>
      <arglist>(const PsbTimerMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>id_var</name>
      <anchorfile>class_psb_timer_msg.html</anchorfile>
      <anchor>a084a5550176a5745de73879099f542ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>command_var</name>
      <anchorfile>class_psb_timer_msg.html</anchorfile>
      <anchor>a0115558ece7ab0cf21c6acf6213cf530</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAM16Modulation</name>
    <filename>class_q_a_m16_modulation.html</filename>
    <base>IModulation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>class_q_a_m16_modulation.html</anchorfile>
      <anchor>a71fb88758e4d0acf18a74e8cc0244331</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>calculateBER</name>
      <anchorfile>class_q_a_m16_modulation.html</anchorfile>
      <anchor>ab04e99ccd25841327b602c4919ed7bf7</anchor>
      <arglist>(double snir, double bandwidth, double bitrate)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAM256Modulation</name>
    <filename>class_q_a_m256_modulation.html</filename>
    <base>IModulation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>class_q_a_m256_modulation.html</anchorfile>
      <anchor>a3efb6352be2e00fb6ac3c40f031f084e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>calculateBER</name>
      <anchorfile>class_q_a_m256_modulation.html</anchorfile>
      <anchor>a25993036441a76b4f449cdc3bb144590</anchor>
      <arglist>(double snir, double bandwidth, double bitrate)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QueueBase</name>
    <filename>class_queue_base.html</filename>
    <base>AbstractQueue</base>
    <member kind="function">
      <type></type>
      <name>QueueBase</name>
      <anchorfile>class_queue_base.html</anchorfile>
      <anchor>a12a6ab452d0bf508916aed1fbf124520</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_queue_base.html</anchorfile>
      <anchor>a438aa1bb4e9a14fc76bd478612b354ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>arrival</name>
      <anchorfile>class_queue_base.html</anchorfile>
      <anchor>ac9bb719863ad55ee04754893dca34078</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>arrivalWhenIdle</name>
      <anchorfile>class_queue_base.html</anchorfile>
      <anchor>a0d2382ecff87de7e2b556016695fe080</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>startService</name>
      <anchorfile>class_queue_base.html</anchorfile>
      <anchor>ae57f6b8bffeb014637903b9944e58c66</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>delay</name>
      <anchorfile>class_queue_base.html</anchorfile>
      <anchor>af73b42b0f04ac3d29d67ecd470d506e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QueueWithQoS</name>
    <filename>class_queue_with_qo_s.html</filename>
    <base>AbstractQueue</base>
    <member kind="function">
      <type></type>
      <name>QueueWithQoS</name>
      <anchorfile>class_queue_with_qo_s.html</anchorfile>
      <anchor>aeabdafa3a3c1be931b313420e4c65bde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_queue_with_qo_s.html</anchorfile>
      <anchor>a5bef8ae95596e6ba9cb5eabb6c8ac9e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>arrival</name>
      <anchorfile>class_queue_with_qo_s.html</anchorfile>
      <anchor>af753c5123a157f249c448ab06a19ec3a</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>arrivalWhenIdle</name>
      <anchorfile>class_queue_with_qo_s.html</anchorfile>
      <anchor>adda34a30cf2740c6ef0e68f2e3dfdda7</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>startService</name>
      <anchorfile>class_queue_with_qo_s.html</anchorfile>
      <anchor>a1940615e60cab7a91f0f5531d0bd4192</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>delay</name>
      <anchorfile>class_queue_with_qo_s.html</anchorfile>
      <anchor>a04b6596303d68a6d35c5b8f6a406ed0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EnqueueHook *</type>
      <name>qosHook</name>
      <anchorfile>class_queue_with_qo_s.html</anchorfile>
      <anchor>ac9479f34ed15854bf0c03105d0526990</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RadioState</name>
    <filename>class_radio_state.html</filename>
    <member kind="enumeration">
      <name>State</name>
      <anchorfile>class_radio_state.html</anchorfile>
      <anchor>a9b2ff8c4d3f1cdb73af0a9fcea0d5449</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IDLE</name>
      <anchorfile>class_radio_state.html</anchorfile>
      <anchor>a9b2ff8c4d3f1cdb73af0a9fcea0d5449aeb600ab2fbbbbc2d12d874edb9320ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RECV</name>
      <anchorfile>class_radio_state.html</anchorfile>
      <anchor>a9b2ff8c4d3f1cdb73af0a9fcea0d5449ab9ff1508b0f4aac00ec13bd9e9335c4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRANSMIT</name>
      <anchorfile>class_radio_state.html</anchorfile>
      <anchor>a9b2ff8c4d3f1cdb73af0a9fcea0d5449aedb2522a6da55abd014a306192411a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SLEEP</name>
      <anchorfile>class_radio_state.html</anchorfile>
      <anchor>a9b2ff8c4d3f1cdb73af0a9fcea0d5449a59cdfea937681c77be455b21bcfa6ca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RadioState</name>
      <anchorfile>class_radio_state.html</anchorfile>
      <anchor>ab0e10cb299aaa5fec3e955048c5e94e7</anchor>
      <arglist>(int radioModuleId)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRadioId</name>
      <anchorfile>class_radio_state.html</anchorfile>
      <anchor>aab00b23164311f008b0995d865b65474</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>getState</name>
      <anchorfile>class_radio_state.html</anchorfile>
      <anchor>ab714f16be9aaf5b6789801854f859883</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>class_radio_state.html</anchorfile>
      <anchor>ae524aa6442043b5cdecb052a84ca57aa</anchor>
      <arglist>(State s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getChannelNumber</name>
      <anchorfile>class_radio_state.html</anchorfile>
      <anchor>a0799344b13882d66af3376919bdf9c7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChannelNumber</name>
      <anchorfile>class_radio_state.html</anchorfile>
      <anchor>ab4ce41a963cc11f5bbd10a5d9b894a71</anchor>
      <arglist>(int chan)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBitrate</name>
      <anchorfile>class_radio_state.html</anchorfile>
      <anchor>a2f127045c28c2a709aa1212ba098b9b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBitrate</name>
      <anchorfile>class_radio_state.html</anchorfile>
      <anchor>a789f5ce6d79f31a60e9473cbc07a5d49</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>class_radio_state.html</anchorfile>
      <anchor>ac8cd8a82815b4e48e0a08df197683985</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>stateName</name>
      <anchorfile>class_radio_state.html</anchorfile>
      <anchor>adb67a3e5a0055b202fac856b761256fc</anchor>
      <arglist>(State state)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>radioId</name>
      <anchorfile>class_radio_state.html</anchorfile>
      <anchor>a5fda71f54b2bb886e35003a29523a632</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>State</type>
      <name>state</name>
      <anchorfile>class_radio_state.html</anchorfile>
      <anchor>a1c8963defc4b173f959eef8920ad7138</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>channelNumber</name>
      <anchorfile>class_radio_state.html</anchorfile>
      <anchor>a2c1c0251d33f54de8e08c3253ce3a2e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>class_radio_state.html</anchorfile>
      <anchor>a57eb1c3e541f56ef4de63306d6319f3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RandomWPMobility</name>
    <filename>class_random_w_p_mobility.html</filename>
    <base>LineSegmentsMobilityBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_random_w_p_mobility.html</anchorfile>
      <anchor>a9e8d942162516a015269978af567e25d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchorfile>class_random_w_p_mobility.html</anchorfile>
      <anchor>aec3111a2fa5e5bed3737d1067d2b01b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>class_random_w_p_mobility.html</anchorfile>
      <anchor>aa501ac1a80f4795a712fd4e895bc44f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>nextMoveIsWait</name>
      <anchorfile>class_random_w_p_mobility.html</anchorfile>
      <anchor>a4f79cd5fe8c2350af8703874ca1dfb06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReassemblyBuffer</name>
    <filename>class_reassembly_buffer.html</filename>
    <class kind="struct">ReassemblyBuffer::Region</class>
    <member kind="function">
      <type></type>
      <name>ReassemblyBuffer</name>
      <anchorfile>class_reassembly_buffer.html</anchorfile>
      <anchor>a54d732c312858b7d5927edef3102a93e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ReassemblyBuffer</name>
      <anchorfile>class_reassembly_buffer.html</anchorfile>
      <anchor>afc310bf8fd0a3a58da417b60dfdff933</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addFragment</name>
      <anchorfile>class_reassembly_buffer.html</anchorfile>
      <anchor>ab4bfa4f1dab14208e2c80ca48dac201f</anchor>
      <arglist>(ushort beg, ushort end, bool islast)</arglist>
    </member>
    <member kind="function">
      <type>ushort</type>
      <name>getTotalLength</name>
      <anchorfile>class_reassembly_buffer.html</anchorfile>
      <anchor>a3b50fb57827c7da66c7ed4ff43df375b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; Region &gt;</type>
      <name>RegionVector</name>
      <anchorfile>class_reassembly_buffer.html</anchorfile>
      <anchor>a83fd2124f7b3842cba44b4dc342a8a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>merge</name>
      <anchorfile>class_reassembly_buffer.html</anchorfile>
      <anchor>ac9d11d08c5161e9a60be575ff148c246</anchor>
      <arglist>(ushort beg, ushort end, bool islast)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mergeFragments</name>
      <anchorfile>class_reassembly_buffer.html</anchorfile>
      <anchor>a856adb545d69725ed2c37823400e74d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Region</type>
      <name>main</name>
      <anchorfile>class_reassembly_buffer.html</anchorfile>
      <anchor>a5b40a71fcef3739cab30a3b70174a41d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RegionVector *</type>
      <name>fragments</name>
      <anchorfile>class_reassembly_buffer.html</anchorfile>
      <anchor>a729feced61f992167163c56fa48595b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ReassemblyBuffer::Region</name>
    <filename>struct_reassembly_buffer_1_1_region.html</filename>
    <member kind="variable">
      <type>ushort</type>
      <name>beg</name>
      <anchorfile>struct_reassembly_buffer_1_1_region.html</anchorfile>
      <anchor>aea56b66977f71d6fb6227c77e0a67734</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ushort</type>
      <name>end</name>
      <anchorfile>struct_reassembly_buffer_1_1_region.html</anchorfile>
      <anchor>a5088bda413e7bb152220e4878b169f12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>islast</name>
      <anchorfile>struct_reassembly_buffer_1_1_region.html</anchorfile>
      <anchor>a06f0f8e0aae932b993ee6227b72f8ffe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReceptionReport</name>
    <filename>class_reception_report.html</filename>
    <member kind="function">
      <type></type>
      <name>ReceptionReport</name>
      <anchorfile>class_reception_report.html</anchorfile>
      <anchor>ae9bb924e7cefb39d398479332c891558</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReceptionReport</name>
      <anchorfile>class_reception_report.html</anchorfile>
      <anchor>af29bc7af599a17e8cf4b2f2ad87336e2</anchor>
      <arglist>(const ReceptionReport &amp;receptionReport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ReceptionReport</name>
      <anchorfile>class_reception_report.html</anchorfile>
      <anchor>a39761a6787e260e08f425d9415a4346e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ReceptionReport &amp;</type>
      <name>operator=</name>
      <anchorfile>class_reception_report.html</anchorfile>
      <anchor>ab5b92c58b7d0359bfba4710e1dc5deaf</anchor>
      <arglist>(const ReceptionReport &amp;receptionReport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ReceptionReport *</type>
      <name>dup</name>
      <anchorfile>class_reception_report.html</anchorfile>
      <anchor>a60a032ef32c164cb801f2c1e68b11cc5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>class_reception_report.html</anchorfile>
      <anchor>a6cf22a8923856eb3173d662bf1f84f66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>class_reception_report.html</anchorfile>
      <anchor>ad0dc3d4d8ddb7c3f3fdef81731e15005</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getSSRC</name>
      <anchorfile>class_reception_report.html</anchorfile>
      <anchor>adff1713e63303ab13235b1280ad863bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSSRC</name>
      <anchorfile>class_reception_report.html</anchorfile>
      <anchor>a6d0a2ab38b94e1bb392d9248e3a501aa</anchor>
      <arglist>(uint32 ssrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint8</type>
      <name>getFractionLost</name>
      <anchorfile>class_reception_report.html</anchorfile>
      <anchor>a331464a4e44b2b6ed64e7004f77ad020</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFractionLost</name>
      <anchorfile>class_reception_report.html</anchorfile>
      <anchor>a208537106ffe7cde7c7e25dd251f92e6</anchor>
      <arglist>(uint8 fractionLost)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPacketsLostCumulative</name>
      <anchorfile>class_reception_report.html</anchorfile>
      <anchor>ad85acf0e8e0d424eb1ea0322fe0213d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPacketsLostCumulative</name>
      <anchorfile>class_reception_report.html</anchorfile>
      <anchor>ac476338dff81b5f9d297f8a7e4ecbfcd</anchor>
      <arglist>(int packetLostCumulative)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getSequenceNumber</name>
      <anchorfile>class_reception_report.html</anchorfile>
      <anchor>ae7091a65dc310e7036e97234eb89e937</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSequenceNumber</name>
      <anchorfile>class_reception_report.html</anchorfile>
      <anchor>aaa799e5bb701c9ab6edd1be930da995b</anchor>
      <arglist>(uint32 sequenceNumber)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getJitter</name>
      <anchorfile>class_reception_report.html</anchorfile>
      <anchor>a2408ada461bcf30276d50cee08997d0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setJitter</name>
      <anchorfile>class_reception_report.html</anchorfile>
      <anchor>a9a761ef29591432d7664b1c45bb71fd3</anchor>
      <arglist>(int jitter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getLastSR</name>
      <anchorfile>class_reception_report.html</anchorfile>
      <anchor>aeeff9f8271ffb68e1455c9b9987dc0dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLastSR</name>
      <anchorfile>class_reception_report.html</anchorfile>
      <anchor>acbbaaef170bfe53d9eeeaacb3d8fdaba</anchor>
      <arglist>(int lastSR)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDelaySinceLastSR</name>
      <anchorfile>class_reception_report.html</anchorfile>
      <anchor>a3d06912a389a6a9f3e77b938a9fa82ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDelaySinceLastSR</name>
      <anchorfile>class_reception_report.html</anchorfile>
      <anchor>accd70c27b135f206c2911bf103d8b7c9</anchor>
      <arglist>(int delaySinceLastSR)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>_ssrc</name>
      <anchorfile>class_reception_report.html</anchorfile>
      <anchor>ab94d37e6a4aa0f91d2c3c9882436a378</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint8</type>
      <name>_fractionLost</name>
      <anchorfile>class_reception_report.html</anchorfile>
      <anchor>acaef9198d460357c5569687025877b5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_packetsLostCumulative</name>
      <anchorfile>class_reception_report.html</anchorfile>
      <anchor>a7cebe7933ed6a0b69a6a9248ffa603d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>_extendedHighestSequenceNumber</name>
      <anchorfile>class_reception_report.html</anchorfile>
      <anchor>ac6e583d28981921c93a92b061439f5f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_jitter</name>
      <anchorfile>class_reception_report.html</anchorfile>
      <anchor>acd996f0df3f797f4c4e37ea13a3e7244</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_lastSR</name>
      <anchorfile>class_reception_report.html</anchorfile>
      <anchor>aa5432f1ede4db4690bec40e75ae8dd8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_delaySinceLastSR</name>
      <anchorfile>class_reception_report.html</anchorfile>
      <anchor>a658380559d836b46845d3ae01e15f6ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RectangleMobility</name>
    <filename>class_rectangle_mobility.html</filename>
    <base>BasicMobility</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_rectangle_mobility.html</anchorfile>
      <anchor>a58a5e54bdbbce2fb22beba47d65db2ca</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_rectangle_mobility.html</anchorfile>
      <anchor>a8f2262ac7d756932da0931e3db5a444c</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>class_rectangle_mobility.html</anchorfile>
      <anchor>a32ecffdbc60f4af16a23acd84b8aab90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>calculateXY</name>
      <anchorfile>class_rectangle_mobility.html</anchorfile>
      <anchor>a312aef1943f93b86ee58b1ca282b01c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>x1</name>
      <anchorfile>class_rectangle_mobility.html</anchorfile>
      <anchor>a68cee2e62a6803716d0526cefc1da76c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>y1</name>
      <anchorfile>class_rectangle_mobility.html</anchorfile>
      <anchor>a6cf4ff4a69a687530cd660951031bef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>x2</name>
      <anchorfile>class_rectangle_mobility.html</anchorfile>
      <anchor>ab948a3d2c1aad2652c77b0ba7f0b9fbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>y2</name>
      <anchorfile>class_rectangle_mobility.html</anchorfile>
      <anchor>acd56df4cf5cc3967a0c6578ce428922a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speed</name>
      <anchorfile>class_rectangle_mobility.html</anchorfile>
      <anchor>a9310117cb7d6d7290eb16ceec3daf98f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>updateInterval</name>
      <anchorfile>class_rectangle_mobility.html</anchorfile>
      <anchor>a02481ef03e7c346c73e66357303e8c70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>stationary</name>
      <anchorfile>class_rectangle_mobility.html</anchorfile>
      <anchor>a46dab5b7dff9e877752eb77ed8f0a17d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>d</name>
      <anchorfile>class_rectangle_mobility.html</anchorfile>
      <anchor>aa83622f27b0d73d7d4f4dad3dde4d7ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>corner1</name>
      <anchorfile>class_rectangle_mobility.html</anchorfile>
      <anchor>a1cbbe28da9bb02adb85d20443b532661</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>corner2</name>
      <anchorfile>class_rectangle_mobility.html</anchorfile>
      <anchor>a1b7ab4275ae23da11aaa267676966e99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>corner3</name>
      <anchorfile>class_rectangle_mobility.html</anchorfile>
      <anchor>aff489c70c030aec6f6bcb2f25979001e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>corner4</name>
      <anchorfile>class_rectangle_mobility.html</anchorfile>
      <anchor>afb7594642fcbc485adf6996b73fb57c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>REDQueue</name>
    <filename>class_r_e_d_queue.html</filename>
    <base>PassiveQueueBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_r_e_d_queue.html</anchorfile>
      <anchor>adcd488006136911160e52a6d2b4bfdb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_r_e_d_queue.html</anchorfile>
      <anchor>a59f83e91b4c1ea4829b5922eeac0972a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>enqueue</name>
      <anchorfile>class_r_e_d_queue.html</anchorfile>
      <anchor>a802e2887d8857f5bd846684929b36987</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>dequeue</name>
      <anchorfile>class_r_e_d_queue.html</anchorfile>
      <anchor>a7b3c9747da57749194c2a031242069f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendOut</name>
      <anchorfile>class_r_e_d_queue.html</anchorfile>
      <anchor>a06152a7a57927b29f0c3ef58218cbb00</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>wq</name>
      <anchorfile>class_r_e_d_queue.html</anchorfile>
      <anchor>a619f521cf5f7be1026d0aeb50a46abc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>minth</name>
      <anchorfile>class_r_e_d_queue.html</anchorfile>
      <anchor>a7899a846c9609ca4cf4fa6b606062cb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxth</name>
      <anchorfile>class_r_e_d_queue.html</anchorfile>
      <anchor>a44525091cb7921142740bdafef12faed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxp</name>
      <anchorfile>class_r_e_d_queue.html</anchorfile>
      <anchor>a769776194f1d9847aba22c0f861ebdce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>pkrate</name>
      <anchorfile>class_r_e_d_queue.html</anchorfile>
      <anchor>a5eb92d6a2e6c9bca287994e2a1245207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cQueue</type>
      <name>queue</name>
      <anchorfile>class_r_e_d_queue.html</anchorfile>
      <anchor>a07667e10325a5a26f7a7b548c5d013d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>avg</name>
      <anchorfile>class_r_e_d_queue.html</anchorfile>
      <anchor>a9010c1d698fa7cd31f806235b5c7af68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>q_time</name>
      <anchorfile>class_r_e_d_queue.html</anchorfile>
      <anchor>ab2ccea77c9772cb89b4e787ec30ee6b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>count</name>
      <anchorfile>class_r_e_d_queue.html</anchorfile>
      <anchor>a7954d348b7ddf56602af581dec2bff0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cGate *</type>
      <name>outGate</name>
      <anchorfile>class_r_e_d_queue.html</anchorfile>
      <anchor>aff4f47ce66bde9571ec437030bcf509a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>avgQlenVec</name>
      <anchorfile>class_r_e_d_queue.html</anchorfile>
      <anchor>ad3256ca1229f617bb320e3342361eb32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>qlenVec</name>
      <anchorfile>class_r_e_d_queue.html</anchorfile>
      <anchor>acc07f20e918e0c7a5990fb5d0a531841</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>dropVec</name>
      <anchorfile>class_r_e_d_queue.html</anchorfile>
      <anchor>aea5defd3590659442ed1ae3ade80e954</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numEarlyDrops</name>
      <anchorfile>class_r_e_d_queue.html</anchorfile>
      <anchor>ab3e9594ff1ea81b8b7fe3a66a7cdc51f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RoutingTable</name>
    <filename>class_routing_table.html</filename>
    <base>IRoutingTable</base>
    <base protection="protected">INotifiable</base>
    <member kind="function">
      <type></type>
      <name>RoutingTable</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a0f4caeade124b4fde4c1a4521a914a02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RoutingTable</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>abe5b508511742899600b98401af7c761</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printRoutingTable</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a86f4aa3d025b21b5e67ba14943fdf02b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isIPForwardingEnabled</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>ac1eb79e7247a9da2a64abc4050913efd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress</type>
      <name>getRouterId</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>adf42db0416d6d8c4061d9bc91a17e6e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRouterId</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a39708c0679e2bbdcb01e7b249481329a</anchor>
      <arglist>(IPAddress a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>configureInterfaceForIPv4</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>afaca8cf9e47f78fdd727d794109c1842</anchor>
      <arglist>(InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceByAddress</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>acbdfefb5742c413314749c72e0e92d42</anchor>
      <arglist>(const IPAddress &amp;address) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isLocalAddress</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a1bdf2e7d6270c386ab0060dd82260ac2</anchor>
      <arglist>(const IPAddress &amp;dest) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPRoute *</type>
      <name>findBestMatchingRoute</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a9c48c581c9dc6920b9427d1739ac21ca</anchor>
      <arglist>(const IPAddress &amp;dest) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceForDestAddr</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>aba5815f6040065c8a1804cc542e659de</anchor>
      <arglist>(const IPAddress &amp;dest) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress</type>
      <name>getGatewayForDestAddr</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a7f385e81b1aec6d727e2d4296dc931e7</anchor>
      <arglist>(const IPAddress &amp;dest) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isLocalMulticastAddress</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a2a2bac31158b7b135cd43460d1d20171</anchor>
      <arglist>(const IPAddress &amp;dest) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MulticastRoutes</type>
      <name>getMulticastRoutesFor</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>ac1e192ee7a51439d49dfaba757338de3</anchor>
      <arglist>(const IPAddress &amp;dest) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumRoutes</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a5234d020269187269f385eabee291da8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPRoute *</type>
      <name>getRoute</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a7bf183b2da78d2f70099b3abf3cc91ed</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPRoute *</type>
      <name>findRoute</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a33fec398f3610c23d36dc6e17ec43d48</anchor>
      <arglist>(const IPAddress &amp;target, const IPAddress &amp;netmask, const IPAddress &amp;gw, int metric=0, const char *dev=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPRoute *</type>
      <name>getDefaultRoute</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a7a7085c40be2e2f588b5fd1062710d61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addRoute</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a586e1be0471ccb8b02c28fd8c2cafc86</anchor>
      <arglist>(const IPRoute *entry)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>deleteRoute</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a98d3d0f11f8ed87f7b30465110277f35</anchor>
      <arglist>(const IPRoute *entry)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; IPAddress &gt;</type>
      <name>gatherAddresses</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a528f2d18212d30617d577e5c72c9e47f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; IPRoute * &gt;</type>
      <name>RouteVector</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>ad55f1d5e9420dcd2ef718698dd8d8d52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; IPAddress, const IPRoute * &gt;</type>
      <name>RoutingCache</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a5db50e6eede34e665f3e93089e8fbe5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::set&lt; IPAddress &gt;</type>
      <name>AddressSet</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a03c156a848e9829fe58cf3c56ac120ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>configureLoopbackForIPv4</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a7c5e8b0d56e707bffc8ae56aeb3ca545</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>routeMatches</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a182e9f6bafe82c6b2de86a8da872d49a</anchor>
      <arglist>(const IPRoute *entry, const IPAddress &amp;target, const IPAddress &amp;nmask, const IPAddress &amp;gw, int metric, const char *dev) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>configureRouterId</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a8b681e68c0cecf8b3b67981c23a86085</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNetmaskRoutes</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a22ed882b21268b0cb94b4ed3cd437319</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDisplayString</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a8a8313b75234201d11785afdd69e4eca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteInterfaceRoutes</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a95718902c009b8c2d4b09405a0d547a9</anchor>
      <arglist>(InterfaceEntry *entry)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>invalidateCache</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a484a19b6b712d938738521f454420129</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a4ab26e1c685f9810d85a1cde9ff007e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a0f8b6dd1c9a692ca1eba05d35bcc78ed</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a27a3710233113ed3316c39c47dba1f64</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>ad83066430a3ce807272276b221ad9c13</anchor>
      <arglist>(int category, const cPolymorphic *details)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IInterfaceTable *</type>
      <name>ift</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a809dc905f24f2eb82b58278d2d371010</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NotificationBoard *</type>
      <name>nb</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a5c4641496d9964ea8422157447691880</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>routerId</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>aadbf86bac1497193ccdd137f34610551</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>IPForward</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>ab1fae735c632287a00881b1b6eb24271</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RouteVector</type>
      <name>routes</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a74b73efea6f1bd7d452714ce396da47a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RouteVector</type>
      <name>multicastRoutes</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>afe79828397a7768771315c2099734d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RoutingCache</type>
      <name>routingCache</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>ac2aeac5d70e440d6ad1b3d560029f277</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AddressSet</type>
      <name>localAddresses</name>
      <anchorfile>class_routing_table.html</anchorfile>
      <anchor>a732fcc528f888d4318dfe00220df230b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RoutingTable6</name>
    <filename>class_routing_table6.html</filename>
    <base protection="protected">INotifiable</base>
    <class kind="struct">RoutingTable6::DestCacheEntry</class>
    <member kind="function">
      <type></type>
      <name>RoutingTable6</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>a212c6cdbc175cef88bfcc3cc17ef842d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RoutingTable6</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>aa08b78617d4f08502d746686ecf0a58c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isRouter</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>a79a742fa2d94543412e183ebe0e83d3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceByAddress</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>a24cede6c1b7ed7a17fad2525a4702851</anchor>
      <arglist>(const IPv6Address &amp;address)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isLocalAddress</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>acbf9dbfff5efa25eec0982afa1bbf061</anchor>
      <arglist>(const IPv6Address &amp;dest) const </arglist>
    </member>
    <member kind="function">
      <type>const IPv6Address &amp;</type>
      <name>lookupDestCache</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>af91523a83ab946e36d292337435b3679</anchor>
      <arglist>(const IPv6Address &amp;dest, int &amp;outInterfaceId) const </arglist>
    </member>
    <member kind="function">
      <type>const IPv6Route *</type>
      <name>doLongestPrefixMatch</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>aa3ba1d17dc59f3e5d77ead359dd3a999</anchor>
      <arglist>(const IPv6Address &amp;dest)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPrefixPresent</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>afef0aa2431b02b3744b58238c7a73547</anchor>
      <arglist>(const IPv6Address &amp;prefix) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDestCache</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>a0b95d2a43a904e2cae8521bebe8b3335</anchor>
      <arglist>(const IPv6Address &amp;dest, const IPv6Address &amp;nextHopAddr, int interfaceId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>purgeDestCache</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>a508ea0dd32bd3256348e99abe32a48a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>purgeDestCacheEntriesToNeighbour</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>a1b4f1c86d678de8ac3f873ac7de0687f</anchor>
      <arglist>(const IPv6Address &amp;nextHopAddr, int interfaceId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addOrUpdateOnLinkPrefix</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>ad942d6cb5b1376b132947f75924344f6</anchor>
      <arglist>(const IPv6Address &amp;destPrefix, int prefixLength, int interfaceId, simtime_t expiryTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeOnLinkPrefix</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>a85e00922381c188efc0ad51197e5f718</anchor>
      <arglist>(const IPv6Address &amp;destPrefix, int prefixLength)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addOrUpdateOwnAdvPrefix</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>aad45eef791b41fe469357f1f4c6090bb</anchor>
      <arglist>(const IPv6Address &amp;destPrefix, int prefixLength, int interfaceId, simtime_t expiryTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addStaticRoute</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>adf9413825a24ef26051d8a78539dec29</anchor>
      <arglist>(const IPv6Address &amp;destPrefix, int prefixLength, unsigned int interfaceId, const IPv6Address &amp;nextHop, int metric=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addDefaultRoute</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>a50f73e181d9c5e965ad72f74f0b43c40</anchor>
      <arglist>(const IPv6Address &amp;raSrcAddr, unsigned int ifID, simtime_t routerLifetime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addRoutingProtocolRoute</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>af11c468a66aa9edc3b16cc7b6b01d5bb</anchor>
      <arglist>(IPv6Route *route)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeRoute</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>acd6b7dbf0bfa1e923366a2bcb1f309fc</anchor>
      <arglist>(IPv6Route *route)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumRoutes</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>a384a101ad5895b4cdbc796ec0fb427e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6Route *</type>
      <name>getRoute</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>a037e2206e766dff2c8cc904694feba88</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; IPv6Address, DestCacheEntry &gt;</type>
      <name>DestCache</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>ae97d16a39dd6e82ed1fef07e2bd5ac49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; IPv6Route * &gt;</type>
      <name>RouteList</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>ae2d7a96a112758e54bb1fa5e5f41d4bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addRoute</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>ac5315cdff4b757915773f1c22f273ba4</anchor>
      <arglist>(IPv6Route *route)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>configureInterfaceForIPv6</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>ab78638e39019d6ca1690d926da5f04fe</anchor>
      <arglist>(InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>assignRequiredNodeAddresses</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>a84a7121fd02397bfd4ea169675381e3e</anchor>
      <arglist>(InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>configureInterfaceFromXML</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>a5d4f86dbabc31663a4bd12f50a72140f</anchor>
      <arglist>(InterfaceEntry *ie, cXMLElement *cfg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDisplayString</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>ac174c90714b3e6b245c5084850651af7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>a19bf3f3581b2564834e3afda3c7181e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>a3a930dca8cabc52375c754dfce15252d</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>parseXMLConfigFile</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>a3dc6e638b861a416cd1a44f8dbde473a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>a3aa22d18d79d749697aba97c01e21076</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>a7b233ea89357dd9c3cb13260e4877432</anchor>
      <arglist>(int category, const cPolymorphic *details)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>routeLessThan</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>a707cec2ac6652e7eb0ff97b53f70d9b9</anchor>
      <arglist>(const IPv6Route *a, const IPv6Route *b)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IInterfaceTable *</type>
      <name>ift</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>aaaec39a83ad4a660b4cea65d1266b0e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NotificationBoard *</type>
      <name>nb</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>a03a9b00ecf47fb5395108c427d9e05f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isrouter</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>a0cebbe3d99a2059179fbb17dc833476d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DestCache</type>
      <name>destCache</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>a40eeef91dde2b4b37c53fdc2d88a6b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RouteList</type>
      <name>routeList</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>a876169265a1d3d1fc1224becfcb7ca67</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_routing_table6.html</anchorfile>
      <anchor>a9a8e6d548f687ed667d614b61d4b7ab8</anchor>
      <arglist>(std::ostream &amp;os, const DestCacheEntry &amp;e)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RoutingTable6::DestCacheEntry</name>
    <filename>struct_routing_table6_1_1_dest_cache_entry.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>interfaceId</name>
      <anchorfile>struct_routing_table6_1_1_dest_cache_entry.html</anchorfile>
      <anchor>abd866109fb86677c9c7c4cdfeacb5d03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPv6Address</type>
      <name>nextHopAddr</name>
      <anchorfile>struct_routing_table6_1_1_dest_cache_entry.html</anchorfile>
      <anchor>a00c557d3ffea8ef7819046a19e7fb07a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RoutingTable6Access</name>
    <filename>class_routing_table6_access.html</filename>
    <base>ModuleAccess&lt; RoutingTable6 &gt;</base>
    <member kind="function">
      <type></type>
      <name>RoutingTable6Access</name>
      <anchorfile>class_routing_table6_access.html</anchorfile>
      <anchor>ad36cc007e0e4210ffb472354702ac440</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RoutingTableAccess</name>
    <filename>class_routing_table_access.html</filename>
    <base>ModuleAccess&lt; IRoutingTable &gt;</base>
    <member kind="function">
      <type></type>
      <name>RoutingTableAccess</name>
      <anchorfile>class_routing_table_access.html</anchorfile>
      <anchor>a3f251aabe87d216d8cf357c2de33809a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RoutingTableParser</name>
    <filename>class_routing_table_parser.html</filename>
    <member kind="function">
      <type></type>
      <name>RoutingTableParser</name>
      <anchorfile>class_routing_table_parser.html</anchorfile>
      <anchor>a385f6182b0a515a0868ed50b63ccf890</anchor>
      <arglist>(IInterfaceTable *ift, IRoutingTable *rt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>readRoutingTableFromFile</name>
      <anchorfile>class_routing_table_parser.html</anchorfile>
      <anchor>a43af098582f95f56435bb5715c158291</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual char *</type>
      <name>createFilteredFile</name>
      <anchorfile>class_routing_table_parser.html</anchorfile>
      <anchor>afb9b9e857d1c52f82377456d3b3f2d37</anchor>
      <arglist>(char *file, int &amp;charpointer, const char *endtoken)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>parseInterfaces</name>
      <anchorfile>class_routing_table_parser.html</anchorfile>
      <anchor>a85c2cfab7a9bad4cd89a663dd7d24a5d</anchor>
      <arglist>(char *ifconfigFile)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>parseRouting</name>
      <anchorfile>class_routing_table_parser.html</anchorfile>
      <anchor>a0eaa1e4e4bd652ef046eb6cb9be8b7b9</anchor>
      <arglist>(char *routeFile)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual char *</type>
      <name>parseEntry</name>
      <anchorfile>class_routing_table_parser.html</anchorfile>
      <anchor>a6c02a30412513997b52c0c486b0906fa</anchor>
      <arglist>(char *ifconfigFile, const char *tokenStr, int &amp;charpointer, char *destStr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>parseMulticastGroups</name>
      <anchorfile>class_routing_table_parser.html</anchorfile>
      <anchor>abdb8ce749a563c8612464082c0cbe1e5</anchor>
      <arglist>(char *groupStr, InterfaceEntry *)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>streq</name>
      <anchorfile>class_routing_table_parser.html</anchorfile>
      <anchor>a04b2f70cae210d148f1b3e7a7efd434e</anchor>
      <arglist>(const char *str1, const char *str2)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>skipBlanks</name>
      <anchorfile>class_routing_table_parser.html</anchorfile>
      <anchor>a8176bab695ff724220e1f2566641a7b2</anchor>
      <arglist>(char *str, int &amp;charptr)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>strcpyword</name>
      <anchorfile>class_routing_table_parser.html</anchorfile>
      <anchor>ace62d5256f3e8e16ae42f236e5be2758</anchor>
      <arglist>(char *dest, const char *src)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IInterfaceTable *</type>
      <name>ift</name>
      <anchorfile>class_routing_table_parser.html</anchorfile>
      <anchor>adbb5e5022b661cb806384ec284d185aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IRoutingTable *</type>
      <name>rt</name>
      <anchorfile>class_routing_table_parser.html</anchorfile>
      <anchor>af194cf273b281b3d99ed7470f7b8e879</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RsbCommitTimerMsg</name>
    <filename>class_rsb_commit_timer_msg.html</filename>
    <base>SignallingMsg</base>
    <member kind="function">
      <type></type>
      <name>RsbCommitTimerMsg</name>
      <anchorfile>class_rsb_commit_timer_msg.html</anchorfile>
      <anchor>aa9bf066b7f509cdcc877b8b682d63adb</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RsbCommitTimerMsg</name>
      <anchorfile>class_rsb_commit_timer_msg.html</anchorfile>
      <anchor>abfb3980895ceadacff28f26ada2220bb</anchor>
      <arglist>(const RsbCommitTimerMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RsbCommitTimerMsg</name>
      <anchorfile>class_rsb_commit_timer_msg.html</anchorfile>
      <anchor>a1568b9905dbc8abe86efe1b8f3e777d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RsbCommitTimerMsg &amp;</type>
      <name>operator=</name>
      <anchorfile>class_rsb_commit_timer_msg.html</anchorfile>
      <anchor>a2f4a708ee9453394dc9b5d205c7586df</anchor>
      <arglist>(const RsbCommitTimerMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RsbCommitTimerMsg *</type>
      <name>dup</name>
      <anchorfile>class_rsb_commit_timer_msg.html</anchorfile>
      <anchor>ac96718736beb5d7fe699faf5cdb12ba4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_rsb_commit_timer_msg.html</anchorfile>
      <anchor>a11cfd656ba975297006e0498e247c185</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_rsb_commit_timer_msg.html</anchorfile>
      <anchor>a9f606d0b0aa81ae8b906582b578ce467</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getId</name>
      <anchorfile>class_rsb_commit_timer_msg.html</anchorfile>
      <anchor>a4a8bd9429ab7eb153185be30dc14cfe6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setId</name>
      <anchorfile>class_rsb_commit_timer_msg.html</anchorfile>
      <anchor>a13dff049594df3e3f1e49422bd2d24bb</anchor>
      <arglist>(int id_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommand</name>
      <anchorfile>class_rsb_commit_timer_msg.html</anchorfile>
      <anchor>a18af0f33ec0452b5211c0a50e03ae287</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchorfile>class_rsb_commit_timer_msg.html</anchorfile>
      <anchor>ab9b715f942843f93ae01f279869d99a1</anchor>
      <arglist>(int command_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_rsb_commit_timer_msg.html</anchorfile>
      <anchor>a0a75889c42929c574fd0f6eacfd16c00</anchor>
      <arglist>(const RsbCommitTimerMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>id_var</name>
      <anchorfile>class_rsb_commit_timer_msg.html</anchorfile>
      <anchor>ad8b94f7e9e416bdc8d9d3c0457501f56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>command_var</name>
      <anchorfile>class_rsb_commit_timer_msg.html</anchorfile>
      <anchor>a02ace1c58ec7f763053114aa43e93051</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RsbRefreshTimerMsg</name>
    <filename>class_rsb_refresh_timer_msg.html</filename>
    <base>SignallingMsg</base>
    <member kind="function">
      <type></type>
      <name>RsbRefreshTimerMsg</name>
      <anchorfile>class_rsb_refresh_timer_msg.html</anchorfile>
      <anchor>a8928ca9f238050bcd50ea4e31fd58f9d</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RsbRefreshTimerMsg</name>
      <anchorfile>class_rsb_refresh_timer_msg.html</anchorfile>
      <anchor>ab412b9cd86d3cddaca3d5500841235c5</anchor>
      <arglist>(const RsbRefreshTimerMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RsbRefreshTimerMsg</name>
      <anchorfile>class_rsb_refresh_timer_msg.html</anchorfile>
      <anchor>aefa12135d2839843f7c266f2687c156d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RsbRefreshTimerMsg &amp;</type>
      <name>operator=</name>
      <anchorfile>class_rsb_refresh_timer_msg.html</anchorfile>
      <anchor>a62c456c8ab624c6bc1b61bcf3b9d84be</anchor>
      <arglist>(const RsbRefreshTimerMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RsbRefreshTimerMsg *</type>
      <name>dup</name>
      <anchorfile>class_rsb_refresh_timer_msg.html</anchorfile>
      <anchor>add0be84337828f82ac2a44d38d70a11c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_rsb_refresh_timer_msg.html</anchorfile>
      <anchor>ab95aea8af005badb1846cbd01c805acf</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_rsb_refresh_timer_msg.html</anchorfile>
      <anchor>ac068e77eed02a693f452e64696223410</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getId</name>
      <anchorfile>class_rsb_refresh_timer_msg.html</anchorfile>
      <anchor>a302d22d8711705ad12276199bc294bfb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setId</name>
      <anchorfile>class_rsb_refresh_timer_msg.html</anchorfile>
      <anchor>a665841ae20f35fa218077911a8f180c1</anchor>
      <arglist>(int id_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommand</name>
      <anchorfile>class_rsb_refresh_timer_msg.html</anchorfile>
      <anchor>a47ac4b9955e494cbe0d50af900c7ab85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchorfile>class_rsb_refresh_timer_msg.html</anchorfile>
      <anchor>a607f8d199e50b19bb8d4fb6a7985150a</anchor>
      <arglist>(int command_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_rsb_refresh_timer_msg.html</anchorfile>
      <anchor>afbcbd72c5e5078ba42c37ce25209d548</anchor>
      <arglist>(const RsbRefreshTimerMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>id_var</name>
      <anchorfile>class_rsb_refresh_timer_msg.html</anchorfile>
      <anchor>a25bca40354d9f09de7d26efe5506ed02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>command_var</name>
      <anchorfile>class_rsb_refresh_timer_msg.html</anchorfile>
      <anchor>a6d6f88282a1d41be572264c687611252</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RsbTimeoutMsg</name>
    <filename>class_rsb_timeout_msg.html</filename>
    <base>SignallingMsg</base>
    <member kind="function">
      <type></type>
      <name>RsbTimeoutMsg</name>
      <anchorfile>class_rsb_timeout_msg.html</anchorfile>
      <anchor>a712d0a763ee8d7702438b69d64057a96</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RsbTimeoutMsg</name>
      <anchorfile>class_rsb_timeout_msg.html</anchorfile>
      <anchor>a3c6a01dec146b6386a8b1875106f3dea</anchor>
      <arglist>(const RsbTimeoutMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RsbTimeoutMsg</name>
      <anchorfile>class_rsb_timeout_msg.html</anchorfile>
      <anchor>a62b8155e2d20afe701a1658cfdb6316a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RsbTimeoutMsg &amp;</type>
      <name>operator=</name>
      <anchorfile>class_rsb_timeout_msg.html</anchorfile>
      <anchor>abab18c28781cc7e11ef55e0d278acc43</anchor>
      <arglist>(const RsbTimeoutMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RsbTimeoutMsg *</type>
      <name>dup</name>
      <anchorfile>class_rsb_timeout_msg.html</anchorfile>
      <anchor>a75e32e3a03d0ddf6ffca566d9482769d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_rsb_timeout_msg.html</anchorfile>
      <anchor>aba1e10bb39de27c1227252f65680458d</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_rsb_timeout_msg.html</anchorfile>
      <anchor>a8ed1d3223da2c7a93c4e99f825cb87fc</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getId</name>
      <anchorfile>class_rsb_timeout_msg.html</anchorfile>
      <anchor>a3a09ed48e2c6a650488af89301d163b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setId</name>
      <anchorfile>class_rsb_timeout_msg.html</anchorfile>
      <anchor>a3589e0b23e39b564df66ffd121fcf3af</anchor>
      <arglist>(int id_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommand</name>
      <anchorfile>class_rsb_timeout_msg.html</anchorfile>
      <anchor>a55292e04e9a206d8f629509b5d2ea1f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchorfile>class_rsb_timeout_msg.html</anchorfile>
      <anchor>acab3481f8e0c9c129cc0b677001e292b</anchor>
      <arglist>(int command_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_rsb_timeout_msg.html</anchorfile>
      <anchor>a47764f391b26b2f2493fe3ba9ada6d14</anchor>
      <arglist>(const RsbTimeoutMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>id_var</name>
      <anchorfile>class_rsb_timeout_msg.html</anchorfile>
      <anchor>a07304488218917b4e151a18e336e3996</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>command_var</name>
      <anchorfile>class_rsb_timeout_msg.html</anchorfile>
      <anchor>ab4d8b60b2b5f0364772af2d1a02ee3dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVP</name>
    <filename>class_r_s_v_p.html</filename>
    <base>IScriptable</base>
    <class kind="struct">RSVP::HelloState_t</class>
    <class kind="struct">RSVP::PathStateBlock_t</class>
    <class kind="struct">RSVP::ResvStateBlock_t</class>
    <class kind="struct">RSVP::traffic_path_t</class>
    <class kind="struct">RSVP::traffic_session_t</class>
    <member kind="function">
      <type></type>
      <name>RSVP</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>ad355cd8179b4c281f7164a498c9bb43e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RSVP</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>aca71f498907770d708d6be9a4480522a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; PathStateBlock_t &gt;</type>
      <name>PSBVector</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>aa2a110dcc9fd3eb0f59fe5d4be909961</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; ResvStateBlock_t &gt;</type>
      <name>RSBVector</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a0f8968a708f4b7d59fe5d714611df147</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; HelloState_t &gt;</type>
      <name>HelloVector</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>ab37d8b4656962b40e0e3d4ead1b09652</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processSignallingMessage</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a6393538e367792874a6e1a9d9a245ded</anchor>
      <arglist>(SignallingMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPSB_TIMER</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a18f4a987254edd684d0d57345c818c81</anchor>
      <arglist>(PsbTimerMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPSB_TIMEOUT</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a5bc9ab7d3a8b3db1c563d7e7adddb8d6</anchor>
      <arglist>(PsbTimeoutMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processRSB_REFRESH_TIMER</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a7b967a2ab4a53edc0bdd12c8ad3a4c99</anchor>
      <arglist>(RsbRefreshTimerMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processRSB_COMMIT_TIMER</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a7e760e4263df7614b1dfbea8e39cc8f3</anchor>
      <arglist>(RsbCommitTimerMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processRSB_TIMEOUT</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a2fc38252a7b31028e80b360fc8dc7af3</anchor>
      <arglist>(RsbTimeoutMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processHELLO_TIMER</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a5c7ef8c3f1f0a9b7061f499891a82ad6</anchor>
      <arglist>(HelloTimerMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processHELLO_TIMEOUT</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a41999b24ba006f359ce2ee9b4638ee96</anchor>
      <arglist>(HelloTimeoutMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPATH_NOTIFY</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a046faf4019fa1dd31f24ee445236236b</anchor>
      <arglist>(PathNotifyMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processRSVPMessage</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a604c7cdcbec35b1c1facf476ddc27eb9</anchor>
      <arglist>(RSVPMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processHelloMsg</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a4248b4a0ff4175b4be496ec30aee8672</anchor>
      <arglist>(RSVPHelloMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPathMsg</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a3fa7b4ca1bf18d5afac7664f0ae3584a</anchor>
      <arglist>(RSVPPathMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processResvMsg</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>aaebd61f0dcf0f517e95c4b1e81fea967</anchor>
      <arglist>(RSVPResvMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPathTearMsg</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a9d40c6ab5084f41b18645183f85fecc9</anchor>
      <arglist>(RSVPPathTear *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPathErrMsg</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>aaa1b0102445119825a264bf187aca6e9</anchor>
      <arglist>(RSVPPathError *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual PathStateBlock_t *</type>
      <name>createPSB</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a4c582acc45b47942f56a34aa35fcfc70</anchor>
      <arglist>(RSVPPathMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual PathStateBlock_t *</type>
      <name>createIngressPSB</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a46e933eb87d8a3b105a313a0e48403a3</anchor>
      <arglist>(const traffic_session_t &amp;session, const traffic_path_t &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removePSB</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a43b1c666eee1f02f7070d7b39e3dea0f</anchor>
      <arglist>(PathStateBlock_t *psb)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ResvStateBlock_t *</type>
      <name>createRSB</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>ad53a7a49e12f3cc0ff339e20624406fe</anchor>
      <arglist>(RSVPResvMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ResvStateBlock_t *</type>
      <name>createEgressRSB</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>af34403ca300fb9425d67e609c7bbf9a3</anchor>
      <arglist>(PathStateBlock_t *psb)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateRSB</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a2d374e27ad177a0e0e0500deaf1affb7</anchor>
      <arglist>(ResvStateBlock_t *rsb, RSVPResvMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeRSB</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>af0469af2686bf9440e3d7320c57bfb6f</anchor>
      <arglist>(ResvStateBlock_t *rsb)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeRsbFilter</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a0a010c3a16c0b7fbc37dec6368d9ad03</anchor>
      <arglist>(ResvStateBlock_t *rsb, unsigned int index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>refreshPath</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>acc0978a512bc47c6cbeea226904a4e51</anchor>
      <arglist>(PathStateBlock_t *psbEle)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>refreshResv</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a8745c357a38f4ab3b5c39668b5498820</anchor>
      <arglist>(ResvStateBlock_t *rsbEle)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>refreshResv</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>af84a7ab872ddde72e4e6394c904285ab</anchor>
      <arglist>(ResvStateBlock_t *rsbEle, IPAddress PHOP)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>commitResv</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a5418c3bcb4cf57a5965c6a7067b7f678</anchor>
      <arglist>(ResvStateBlock_t *rsb)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleRefreshTimer</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a130138413206f03179fc63d56f4937cd</anchor>
      <arglist>(PathStateBlock_t *psbEle, simtime_t delay)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleTimeout</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>ac4faa2c6f7a952138fb145bc948c79eb</anchor>
      <arglist>(PathStateBlock_t *psbEle)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleRefreshTimer</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a67c62268de3b1946288d7f2c451649b0</anchor>
      <arglist>(ResvStateBlock_t *rsbEle, simtime_t delay)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleCommitTimer</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a269cab6db09df7ab124076afe9515a6f</anchor>
      <arglist>(ResvStateBlock_t *rsbEle)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleTimeout</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a8d7428629dfacb146e7b6c6608ae21d8</anchor>
      <arglist>(ResvStateBlock_t *rsbEle)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendPathErrorMessage</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>aede65339bca2fcd134158dd9784100e2</anchor>
      <arglist>(PathStateBlock_t *psb, int errCode)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendPathErrorMessage</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a39d87f7b6317e6a613fd0dee613ab34e</anchor>
      <arglist>(SessionObj_t session, SenderTemplateObj_t sender, SenderTspecObj_t tspec, IPAddress nextHop, int errCode)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendPathTearMessage</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>ab1e3e1ec1c7be3d59e249a147f3f3862</anchor>
      <arglist>(IPAddress peerIP, const SessionObj_t &amp;session, const SenderTemplateObj_t &amp;sender, IPAddress LIH, IPAddress NHOP, bool force)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendPathNotify</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a472ceb4e889ba0fc93649dff8e5d549a</anchor>
      <arglist>(int handler, const SessionObj_t &amp;session, const SenderTemplateObj_t &amp;sender, int status, simtime_t delay)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setupHello</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a56c68314c8b1e8b82370416d2b2f4785</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>startHello</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>ad50bb2638d5ca3d9bc42b3364cffabbb</anchor>
      <arglist>(IPAddress peer, simtime_t delay)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>recoveryEvent</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a771e852915d4521e65a3d243bdf1a82c</anchor>
      <arglist>(IPAddress peer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>allocateResource</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a58055c8fd6f3b98c57ef68adeaa009e3</anchor>
      <arglist>(IPAddress OI, const SessionObj_t &amp;session, double bandwidth)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preempt</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a933ffa437ba9f3cef9efdfc5f1ac18a9</anchor>
      <arglist>(IPAddress OI, int priority, double bandwidth)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doCACCheck</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a05e7433548bd2ecc502fa40210d85f46</anchor>
      <arglist>(const SessionObj_t &amp;session, const SenderTspecObj_t &amp;tspec, IPAddress OI)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>announceLinkChange</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>ab63d5bdece74e8218d703ca07604dbe6</anchor>
      <arglist>(int tedlinkindex)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToIP</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>afe54ffd483063082234277edce5e792d</anchor>
      <arglist>(cMessage *msg, IPAddress destAddr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>evalNextHopInterface</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a74c8cb3303ae62d7e118cbacacf0c5e0</anchor>
      <arglist>(IPAddress destAddr, const EroVector &amp;ERO, IPAddress &amp;OI)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual PathStateBlock_t *</type>
      <name>findPSB</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>adda3d6bf44e6f8181f0f2083f243474d</anchor>
      <arglist>(const SessionObj_t &amp;session, const SenderTemplateObj_t &amp;sender)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ResvStateBlock_t *</type>
      <name>findRSB</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a7741a01ced48d4fbf371cb7b846a27aa</anchor>
      <arglist>(const SessionObj_t &amp;session, const SenderTemplateObj_t &amp;sender, unsigned int &amp;index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual PathStateBlock_t *</type>
      <name>findPsbById</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a15d8d2605257b63906833bf6dcb7e7f9</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ResvStateBlock_t *</type>
      <name>findRsbById</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a96e4fae87f154aec8efed1f306864d81</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; traffic_session_t &gt;::iterator</type>
      <name>findSession</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>adbc9840e5bb15c37459aacb83385bdc0</anchor>
      <arglist>(const SessionObj_t &amp;session)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; traffic_path_t &gt;::iterator</type>
      <name>findPath</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a92c0c4053e1f2d4a7fa85fed30d9a49d</anchor>
      <arglist>(traffic_session_t *session, const SenderTemplateObj_t &amp;sender)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual HelloState_t *</type>
      <name>findHello</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a04c45fcf64189ff23bc0233639956459</anchor>
      <arglist>(IPAddress peer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a95acc5695ef5d439aec6996abfb98a0c</anchor>
      <arglist>(RSVPPathMsg *p)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a90209c6a16793748ba35624d55ec167e</anchor>
      <arglist>(RSVPResvMsg *r)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>readTrafficFromXML</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a7afe215d5b5f46066a7d2db44ac93369</anchor>
      <arglist>(const cXMLElement *traffic)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>readTrafficSessionFromXML</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>adada9d53651da0e8c535e7ed47f931fd</anchor>
      <arglist>(const cXMLElement *session)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual EroVector</type>
      <name>readTrafficRouteFromXML</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a14bfd32e0426538ba9b59a18037bb57a</anchor>
      <arglist>(const cXMLElement *route)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>createPath</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a820c09dd3002f2309aeaa1f30d092887</anchor>
      <arglist>(const SessionObj_t &amp;session, const SenderTemplateObj_t &amp;sender)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>pathProblem</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>aa1c0596a9dfde9005405cbdebbd3a6a9</anchor>
      <arglist>(PathStateBlock_t *psb)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addSession</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>aa8c17ae4390aeedc6b6d1bc6e0743c5f</anchor>
      <arglist>(const cXMLElement &amp;node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>delSession</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a1578adc0aa64e000a877ab117a3e9060</anchor>
      <arglist>(const cXMLElement &amp;node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>getInLabel</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a09621c3f70738316d5cc1380ed54212b</anchor>
      <arglist>(const SessionObj_t &amp;session, const SenderTemplateObj_t &amp;sender)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a4c9e7e6120185700741ea3394ae65c0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>ad55ae7e15d484d73cdfe053442f345ad</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a4772469f02e97f0d99a3c00f298322dd</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processCommand</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a33de1da9c058e57354d8c76a026ce036</anchor>
      <arglist>(const cXMLElement &amp;node)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; traffic_session_t &gt;</type>
      <name>traffic</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a4a6fd79a633dacf8dad56e233d613a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>helloInterval</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>af5bdcd75e4a984969f22119c8cb4d89b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>helloTimeout</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a5873d10d15860ed9e24e941f851f4b71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>retryInterval</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a469e284ac5acfa70db603d70691b06ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TED *</type>
      <name>tedmod</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>ac21c730ad1bba1c6b90cf5b784d1aad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IRoutingTable *</type>
      <name>rt</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a9f89cdfc58368bf8e0c491b7da2dd113</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IInterfaceTable *</type>
      <name>ift</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a52533534d5e3afbfc42030440071a5d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LIBTable *</type>
      <name>lt</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>ad137623f6252e3398084176dc311885f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NotificationBoard *</type>
      <name>nb</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a0f1e35ac657ccaeca38a235d1b4a3414</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IRSVPClassifier *</type>
      <name>rpct</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a44fd3dc334665b246ce0a555cb35e34f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxPsbId</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a18c51012884262a7a68bc2ef3fee90a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxRsbId</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a8df043f6a88c29e65a22c37ec7294ff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxSrcInstance</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a9cd7607aca27a1351bb82ddc7f37937f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>routerId</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>ad26576072a881df7550e35ea94c2f955</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PSBVector</type>
      <name>PSBList</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>ac6b5ffa8b42538c5c55d308412263bd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RSBVector</type>
      <name>RSBList</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a3657146b277de8157c443afc3d986c0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HelloVector</type>
      <name>HelloList</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>a1070041b2d075e1d4c8cbf18f0fe2faf</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>SimpleClassifier</name>
      <anchorfile>class_r_s_v_p.html</anchorfile>
      <anchor>aab8856a7428469eb2467b9a30355b2fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RSVP::HelloState_t</name>
    <filename>struct_r_s_v_p_1_1_hello_state__t.html</filename>
    <member kind="variable">
      <type>IPAddress</type>
      <name>peer</name>
      <anchorfile>struct_r_s_v_p_1_1_hello_state__t.html</anchorfile>
      <anchor>a666d1b5f4fff94027106acf741034111</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>srcInstance</name>
      <anchorfile>struct_r_s_v_p_1_1_hello_state__t.html</anchorfile>
      <anchor>af5ad8bf9c3dd2c4153cf2c3bf344142d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>dstInstance</name>
      <anchorfile>struct_r_s_v_p_1_1_hello_state__t.html</anchorfile>
      <anchor>aec58259b0782cec31c4cf27e6aec2c65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HelloTimerMsg *</type>
      <name>timer</name>
      <anchorfile>struct_r_s_v_p_1_1_hello_state__t.html</anchorfile>
      <anchor>a9cfe0e974bcd579a9e6521eb4102b64f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HelloTimeoutMsg *</type>
      <name>timeout</name>
      <anchorfile>struct_r_s_v_p_1_1_hello_state__t.html</anchorfile>
      <anchor>a7f6e8f09c2884dfe24d0fdc5b28de612</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>request</name>
      <anchorfile>struct_r_s_v_p_1_1_hello_state__t.html</anchorfile>
      <anchor>a9098d4a110f56952f2ae2bb6986ac527</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>ack</name>
      <anchorfile>struct_r_s_v_p_1_1_hello_state__t.html</anchorfile>
      <anchor>a6065fed08e589a5fd8e00fe980763342</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>ok</name>
      <anchorfile>struct_r_s_v_p_1_1_hello_state__t.html</anchorfile>
      <anchor>acb3c4769cdbbd363438206168821ab3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RSVP::PathStateBlock_t</name>
    <filename>struct_r_s_v_p_1_1_path_state_block__t.html</filename>
    <member kind="variable">
      <type>SessionObj_t</type>
      <name>Session_Object</name>
      <anchorfile>struct_r_s_v_p_1_1_path_state_block__t.html</anchorfile>
      <anchor>a029704000bffb2ca4e8fc9ad275d1539</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SenderTemplateObj_t</type>
      <name>Sender_Template_Object</name>
      <anchorfile>struct_r_s_v_p_1_1_path_state_block__t.html</anchorfile>
      <anchor>a82d42675341b1f7220fed7daca8bd673</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SenderTspecObj_t</type>
      <name>Sender_Tspec_Object</name>
      <anchorfile>struct_r_s_v_p_1_1_path_state_block__t.html</anchorfile>
      <anchor>ab9d310312a0f44c81789286fcc241319</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>Previous_Hop_Address</name>
      <anchorfile>struct_r_s_v_p_1_1_path_state_block__t.html</anchorfile>
      <anchor>aa92ad22dd28409509e5d9fc72c191ab4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>OutInterface</name>
      <anchorfile>struct_r_s_v_p_1_1_path_state_block__t.html</anchorfile>
      <anchor>a2208f323c7d2980bb0a2c684777ad9a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EroVector</type>
      <name>ERO</name>
      <anchorfile>struct_r_s_v_p_1_1_path_state_block__t.html</anchorfile>
      <anchor>a78ed7b65167212823049d286d02b1aef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>id</name>
      <anchorfile>struct_r_s_v_p_1_1_path_state_block__t.html</anchorfile>
      <anchor>a7f98527c26b194b54d2892999a3b0e00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>color</name>
      <anchorfile>struct_r_s_v_p_1_1_path_state_block__t.html</anchorfile>
      <anchor>a5b68af633bc9a8e1c18f5316d26e7dec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PsbTimerMsg *</type>
      <name>timerMsg</name>
      <anchorfile>struct_r_s_v_p_1_1_path_state_block__t.html</anchorfile>
      <anchor>af4b75764bf72f63617a543ca5544e359</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PsbTimeoutMsg *</type>
      <name>timeoutMsg</name>
      <anchorfile>struct_r_s_v_p_1_1_path_state_block__t.html</anchorfile>
      <anchor>a1c861893432c7529adab518e565c777f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>handler</name>
      <anchorfile>struct_r_s_v_p_1_1_path_state_block__t.html</anchorfile>
      <anchor>af5dc5ac9b2b89a65ee6794fd54151449</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RSVP::ResvStateBlock_t</name>
    <filename>struct_r_s_v_p_1_1_resv_state_block__t.html</filename>
    <member kind="variable">
      <type>SessionObj_t</type>
      <name>Session_Object</name>
      <anchorfile>struct_r_s_v_p_1_1_resv_state_block__t.html</anchorfile>
      <anchor>ad12ddb651d0aed70ba153731ff02bdd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>Next_Hop_Address</name>
      <anchorfile>struct_r_s_v_p_1_1_resv_state_block__t.html</anchorfile>
      <anchor>a03ae9f7359c7326eaae3b42a3aca986f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>OI</name>
      <anchorfile>struct_r_s_v_p_1_1_resv_state_block__t.html</anchorfile>
      <anchor>ac190be6c55162fb6a9685b4eafc400a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FlowDescriptorVector</type>
      <name>FlowDescriptor</name>
      <anchorfile>struct_r_s_v_p_1_1_resv_state_block__t.html</anchorfile>
      <anchor>a304d9c947a33e036bce72ef489b59718</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>inLabelVector</name>
      <anchorfile>struct_r_s_v_p_1_1_resv_state_block__t.html</anchorfile>
      <anchor>ac4a11e20e0f5cbb40a6667c9a73e0db8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FlowSpecObj_t</type>
      <name>Flowspec_Object</name>
      <anchorfile>struct_r_s_v_p_1_1_resv_state_block__t.html</anchorfile>
      <anchor>a51d8ad759bdbf534db648bf09afd7731</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>id</name>
      <anchorfile>struct_r_s_v_p_1_1_resv_state_block__t.html</anchorfile>
      <anchor>aeca8764a9b5876bbe6640cffad9fd2aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RsbRefreshTimerMsg *</type>
      <name>refreshTimerMsg</name>
      <anchorfile>struct_r_s_v_p_1_1_resv_state_block__t.html</anchorfile>
      <anchor>a6f15be31db99047e63f7dd644a71726a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RsbCommitTimerMsg *</type>
      <name>commitTimerMsg</name>
      <anchorfile>struct_r_s_v_p_1_1_resv_state_block__t.html</anchorfile>
      <anchor>a88b8a9deef9298f827fe4f17b16d5e7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RsbTimeoutMsg *</type>
      <name>timeoutMsg</name>
      <anchorfile>struct_r_s_v_p_1_1_resv_state_block__t.html</anchorfile>
      <anchor>ad725549fb1610bd7f9246ca0c933e0d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RSVP::traffic_path_t</name>
    <filename>struct_r_s_v_p_1_1traffic__path__t.html</filename>
    <member kind="variable">
      <type>SenderTemplateObj_t</type>
      <name>sender</name>
      <anchorfile>struct_r_s_v_p_1_1traffic__path__t.html</anchorfile>
      <anchor>a4b5fec945e3ef0dd8eda8d674c9cd4b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SenderTspecObj_t</type>
      <name>tspec</name>
      <anchorfile>struct_r_s_v_p_1_1traffic__path__t.html</anchorfile>
      <anchor>af57ba75bf09308a3b02f23ab67237054</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EroVector</type>
      <name>ERO</name>
      <anchorfile>struct_r_s_v_p_1_1traffic__path__t.html</anchorfile>
      <anchor>acb5689625eb0aff89bcf5db0cce0c926</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>max_delay</name>
      <anchorfile>struct_r_s_v_p_1_1traffic__path__t.html</anchorfile>
      <anchor>a74c0f0522fc23e5e5159e491e907d6e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>owner</name>
      <anchorfile>struct_r_s_v_p_1_1traffic__path__t.html</anchorfile>
      <anchor>a08b564299850dff8a2f4356cba324c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>permanent</name>
      <anchorfile>struct_r_s_v_p_1_1traffic__path__t.html</anchorfile>
      <anchor>af7210d41ddc8955673fec0223919228c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>color</name>
      <anchorfile>struct_r_s_v_p_1_1traffic__path__t.html</anchorfile>
      <anchor>a259fd3a468eac027b2b7f710a3699333</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RSVP::traffic_session_t</name>
    <filename>struct_r_s_v_p_1_1traffic__session__t.html</filename>
    <member kind="variable">
      <type>SessionObj_t</type>
      <name>sobj</name>
      <anchorfile>struct_r_s_v_p_1_1traffic__session__t.html</anchorfile>
      <anchor>a935ee7426c938da9b484af5024103107</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; traffic_path_t &gt;</type>
      <name>paths</name>
      <anchorfile>struct_r_s_v_p_1_1traffic__session__t.html</anchorfile>
      <anchor>ae39585e31335c29cb576fe4b23ec2fd9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPAccess</name>
    <filename>class_r_s_v_p_access.html</filename>
    <base>ModuleAccess&lt; RSVP &gt;</base>
    <member kind="function">
      <type></type>
      <name>RSVPAccess</name>
      <anchorfile>class_r_s_v_p_access.html</anchorfile>
      <anchor>ade68e57770cb1a161fb4690310ed08bc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPHelloMsg</name>
    <filename>class_r_s_v_p_hello_msg.html</filename>
    <base>RSVPHelloMsg_Base</base>
    <member kind="function">
      <type></type>
      <name>RSVPHelloMsg</name>
      <anchorfile>class_r_s_v_p_hello_msg.html</anchorfile>
      <anchor>ab4d4c15ba3d13389711a3d84e85124d4</anchor>
      <arglist>(const char *name=NULL, int kind=RSVP_TRAFFIC)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RSVPHelloMsg</name>
      <anchorfile>class_r_s_v_p_hello_msg.html</anchorfile>
      <anchor>a01fae1c5bff66b87867977cd360aed70</anchor>
      <arglist>(const RSVPHelloMsg &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>RSVPHelloMsg &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_s_v_p_hello_msg.html</anchorfile>
      <anchor>a9d820098d6940b913b1418654670b8e1</anchor>
      <arglist>(const RSVPHelloMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RSVPHelloMsg *</type>
      <name>dup</name>
      <anchorfile>class_r_s_v_p_hello_msg.html</anchorfile>
      <anchor>ad5a24a28e8396004e86a5992e7d7067b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPHelloMsg_Base</name>
    <filename>class_r_s_v_p_hello_msg___base.html</filename>
    <base>RSVPMessage</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RSVPHelloMsg_Base</name>
      <anchorfile>class_r_s_v_p_hello_msg___base.html</anchorfile>
      <anchor>a913fe72b0fc95b0027bd7817e2440ff7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RSVPHelloMsg_Base *</type>
      <name>dup</name>
      <anchorfile>class_r_s_v_p_hello_msg___base.html</anchorfile>
      <anchor>a56608140e49a55dca7c5843a5421f684</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_r_s_v_p_hello_msg___base.html</anchorfile>
      <anchor>a2e449d1feafb616f6e56ebdc966cce52</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_r_s_v_p_hello_msg___base.html</anchorfile>
      <anchor>a338870d182c76b91b185bf8029ef0cfc</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRequest</name>
      <anchorfile>class_r_s_v_p_hello_msg___base.html</anchorfile>
      <anchor>a7c67a6bc8ad05afaa379de084880cb02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRequest</name>
      <anchorfile>class_r_s_v_p_hello_msg___base.html</anchorfile>
      <anchor>ada8c4724bbda9f204135ccddbcb33f7a</anchor>
      <arglist>(bool request_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getAck</name>
      <anchorfile>class_r_s_v_p_hello_msg___base.html</anchorfile>
      <anchor>a6a906c8f204fed210d00be85e5483f09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAck</name>
      <anchorfile>class_r_s_v_p_hello_msg___base.html</anchorfile>
      <anchor>a9a4acb41b74a1b87f2571b82c58924b4</anchor>
      <arglist>(bool ack_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSrcInstance</name>
      <anchorfile>class_r_s_v_p_hello_msg___base.html</anchorfile>
      <anchor>a50aac60b82f791acacf2b06fb60e886f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcInstance</name>
      <anchorfile>class_r_s_v_p_hello_msg___base.html</anchorfile>
      <anchor>af1ad1d5fefb20009daa69b3380624472</anchor>
      <arglist>(int srcInstance_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDstInstance</name>
      <anchorfile>class_r_s_v_p_hello_msg___base.html</anchorfile>
      <anchor>a460338b49166ef4fc7e001977f1e69dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDstInstance</name>
      <anchorfile>class_r_s_v_p_hello_msg___base.html</anchorfile>
      <anchor>a8a940c1b98c9600e1b286b6052fe3b81</anchor>
      <arglist>(int dstInstance_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRsvpKind</name>
      <anchorfile>class_r_s_v_p_hello_msg___base.html</anchorfile>
      <anchor>aa5f02be4f8597690f2bca2990154b2bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRsvpKind</name>
      <anchorfile>class_r_s_v_p_hello_msg___base.html</anchorfile>
      <anchor>a9d3765323632feeebf99303ed409f4c4</anchor>
      <arglist>(int rsvpKind_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_r_s_v_p_hello_msg___base.html</anchorfile>
      <anchor>a5751d5281485fc3278f937cacc5114de</anchor>
      <arglist>(const RSVPHelloMsg_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPHelloMsg_Base</name>
      <anchorfile>class_r_s_v_p_hello_msg___base.html</anchorfile>
      <anchor>a4f38396be40570979874af1e5b10557b</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPHelloMsg_Base</name>
      <anchorfile>class_r_s_v_p_hello_msg___base.html</anchorfile>
      <anchor>a8ff1c71a1656112a73933d796b91102d</anchor>
      <arglist>(const RSVPHelloMsg_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RSVPHelloMsg_Base &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_s_v_p_hello_msg___base.html</anchorfile>
      <anchor>a22e0d92e3449f14d4700c2c1d83c35a6</anchor>
      <arglist>(const RSVPHelloMsg_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>request_var</name>
      <anchorfile>class_r_s_v_p_hello_msg___base.html</anchorfile>
      <anchor>a08f7ad4aa20113f7cc64b0b7ea4b7afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ack_var</name>
      <anchorfile>class_r_s_v_p_hello_msg___base.html</anchorfile>
      <anchor>a6bb87733bafb30c0b5b8507cb60e8474</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>srcInstance_var</name>
      <anchorfile>class_r_s_v_p_hello_msg___base.html</anchorfile>
      <anchor>ac2de40a18d5450be3f8aadd8721d8b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dstInstance_var</name>
      <anchorfile>class_r_s_v_p_hello_msg___base.html</anchorfile>
      <anchor>a59cf7d4126921f13b94564ede334eefb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>rsvpKind_var</name>
      <anchorfile>class_r_s_v_p_hello_msg___base.html</anchorfile>
      <anchor>ab10bf3e9481348535f58a0b2d76dbac8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RsvpHopObj_t</name>
    <filename>struct_rsvp_hop_obj__t.html</filename>
    <member kind="function">
      <type></type>
      <name>RsvpHopObj_t</name>
      <anchorfile>struct_rsvp_hop_obj__t.html</anchorfile>
      <anchor>a462299296a7dc885d4b8025a29117c06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>::IPAddress</type>
      <name>Next_Hop_Address</name>
      <anchorfile>struct_rsvp_hop_obj__t.html</anchorfile>
      <anchor>a663f10df0504d1ff6f8e6f9caa1ddf3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::IPAddress</type>
      <name>Logical_Interface_Handle</name>
      <anchorfile>struct_rsvp_hop_obj__t.html</anchorfile>
      <anchor>a210e57bcf7bc0a3b0792271e538ba766</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPMessage</name>
    <filename>class_r_s_v_p_message.html</filename>
    <member kind="function">
      <type></type>
      <name>RSVPMessage</name>
      <anchorfile>class_r_s_v_p_message.html</anchorfile>
      <anchor>add7a408eefd09f066e88abe1c330ee8d</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RSVPMessage</name>
      <anchorfile>class_r_s_v_p_message.html</anchorfile>
      <anchor>a4efd20133734eaf31161175848716b01</anchor>
      <arglist>(const RSVPMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RSVPMessage</name>
      <anchorfile>class_r_s_v_p_message.html</anchorfile>
      <anchor>a652dcdf897738c33a3efd2f44cac4e65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RSVPMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_s_v_p_message.html</anchorfile>
      <anchor>acdd4ae35578f11eec1121aeb1ad0a5bb</anchor>
      <arglist>(const RSVPMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RSVPMessage *</type>
      <name>dup</name>
      <anchorfile>class_r_s_v_p_message.html</anchorfile>
      <anchor>a837cad25529a3a52d996c3a3c5d506ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_r_s_v_p_message.html</anchorfile>
      <anchor>adfbd2834a0c804b447846b6f8aeadf17</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_r_s_v_p_message.html</anchorfile>
      <anchor>acb478e14bde93bb0d2bee92d3b5ccd73</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRsvpKind</name>
      <anchorfile>class_r_s_v_p_message.html</anchorfile>
      <anchor>acb2684e687c472b46d089d38ff64ef6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRsvpKind</name>
      <anchorfile>class_r_s_v_p_message.html</anchorfile>
      <anchor>a0a575c1d71b838b2f088d6940ed1c49b</anchor>
      <arglist>(int rsvpKind_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_r_s_v_p_message.html</anchorfile>
      <anchor>a2db0875f4c2df487e58afeeef9afb572</anchor>
      <arglist>(const RSVPMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>rsvpKind_var</name>
      <anchorfile>class_r_s_v_p_message.html</anchorfile>
      <anchor>a424eb26b776c11e9955c9261ee58e3ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPPacket</name>
    <filename>class_r_s_v_p_packet.html</filename>
    <base>RSVPPacket_Base</base>
    <member kind="function">
      <type></type>
      <name>RSVPPacket</name>
      <anchorfile>class_r_s_v_p_packet.html</anchorfile>
      <anchor>ad6a255175f85b5f22a7f32509e4754ff</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RSVPPacket</name>
      <anchorfile>class_r_s_v_p_packet.html</anchorfile>
      <anchor>ace18893c12b2879e6bdd927f5301df68</anchor>
      <arglist>(const RSVPPacket &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>RSVPPacket &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_s_v_p_packet.html</anchorfile>
      <anchor>a87485dbd0bf3b9cc7e1c2715609e509d</anchor>
      <arglist>(const RSVPPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RSVPPacket *</type>
      <name>dup</name>
      <anchorfile>class_r_s_v_p_packet.html</anchorfile>
      <anchor>a02c040324aece8e0b683829d172c5e6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getDestAddress</name>
      <anchorfile>class_r_s_v_p_packet.html</anchorfile>
      <anchor>ac30adeaa0be09e94f37f017a60659ce0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTunnelId</name>
      <anchorfile>class_r_s_v_p_packet.html</anchorfile>
      <anchor>a3888857be8958437952795e54e07b3a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getExTunnelId</name>
      <anchorfile>class_r_s_v_p_packet.html</anchorfile>
      <anchor>a3be8b4f726862ec77758bbcdc1ea28ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSetupPri</name>
      <anchorfile>class_r_s_v_p_packet.html</anchorfile>
      <anchor>ae7fc1df0d9e713cc8e497e533a2960ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHoldingPri</name>
      <anchorfile>class_r_s_v_p_packet.html</anchorfile>
      <anchor>a5c15911954240e9afef0029ce1fdd7f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInSession</name>
      <anchorfile>class_r_s_v_p_packet.html</anchorfile>
      <anchor>a5b095f28be55b893682ae080064d7714</anchor>
      <arglist>(SessionObj_t *s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPPacket_Base</name>
    <filename>class_r_s_v_p_packet___base.html</filename>
    <base>RSVPMessage</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RSVPPacket_Base</name>
      <anchorfile>class_r_s_v_p_packet___base.html</anchorfile>
      <anchor>aa330e2ad4c06ba71f427e7249681419d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RSVPPacket_Base *</type>
      <name>dup</name>
      <anchorfile>class_r_s_v_p_packet___base.html</anchorfile>
      <anchor>afaff074e22304bed448ecf16ad7199ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_r_s_v_p_packet___base.html</anchorfile>
      <anchor>a5219cd1bb66592787c7aaed6f27717af</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_r_s_v_p_packet___base.html</anchorfile>
      <anchor>a140b9082a333c35aa4611f3dcf68e4a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SessionObj_t &amp;</type>
      <name>getSession</name>
      <anchorfile>class_r_s_v_p_packet___base.html</anchorfile>
      <anchor>ab333a8fa8e37b8ec3c6976e46587db4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SessionObj_t &amp;</type>
      <name>getSession</name>
      <anchorfile>class_r_s_v_p_packet___base.html</anchorfile>
      <anchor>aa7c97970a462106db8793ac563464e05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSession</name>
      <anchorfile>class_r_s_v_p_packet___base.html</anchorfile>
      <anchor>abd2b435059f110007d9009c7751b86de</anchor>
      <arglist>(const SessionObj_t &amp;session_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getChecksumValid</name>
      <anchorfile>class_r_s_v_p_packet___base.html</anchorfile>
      <anchor>a8fc041b825501ca839834f68c3a86254</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChecksumValid</name>
      <anchorfile>class_r_s_v_p_packet___base.html</anchorfile>
      <anchor>a86266e2b982035156561e5d0d0115f7c</anchor>
      <arglist>(bool checksumValid_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_r_s_v_p_packet___base.html</anchorfile>
      <anchor>a2c9fe0bf836c07a1bcc70ed36a4e2b93</anchor>
      <arglist>(const RSVPPacket_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPPacket_Base</name>
      <anchorfile>class_r_s_v_p_packet___base.html</anchorfile>
      <anchor>a5359862af6e0c9846e01d9bcb17524bc</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPPacket_Base</name>
      <anchorfile>class_r_s_v_p_packet___base.html</anchorfile>
      <anchor>ade93dfe64eeab8f91d0c58be104a1b54</anchor>
      <arglist>(const RSVPPacket_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RSVPPacket_Base &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_s_v_p_packet___base.html</anchorfile>
      <anchor>ad4873e391791fbf7487edbdad75f37e1</anchor>
      <arglist>(const RSVPPacket_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::SessionObj_t</type>
      <name>session_var</name>
      <anchorfile>class_r_s_v_p_packet___base.html</anchorfile>
      <anchor>a7c9c79bcc648bf6bfd5d057553c8f81d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>checksumValid_var</name>
      <anchorfile>class_r_s_v_p_packet___base.html</anchorfile>
      <anchor>a676ee96bf01ebe90723a21ed51a63bc5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPPathError</name>
    <filename>class_r_s_v_p_path_error.html</filename>
    <base>RSVPPathError_Base</base>
    <member kind="function">
      <type></type>
      <name>RSVPPathError</name>
      <anchorfile>class_r_s_v_p_path_error.html</anchorfile>
      <anchor>a27eadae74d29c9fd3389d15da19fb642</anchor>
      <arglist>(const char *name=NULL, int kind=PERROR_MESSAGE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RSVPPathError</name>
      <anchorfile>class_r_s_v_p_path_error.html</anchorfile>
      <anchor>a025061f6bc469489b23856318960eea6</anchor>
      <arglist>(const RSVPPathError &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>RSVPPathError &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_s_v_p_path_error.html</anchorfile>
      <anchor>a0b41f7cf49a4e37a6cc3d397168a0ce1</anchor>
      <arglist>(const RSVPPathError &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RSVPPathError *</type>
      <name>dup</name>
      <anchorfile>class_r_s_v_p_path_error.html</anchorfile>
      <anchor>af5e10134f4dcd651f76aa4cf9282b502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getSrcAddress</name>
      <anchorfile>class_r_s_v_p_path_error.html</anchorfile>
      <anchor>a4c27cd07a857f02a3a0a9d584b5daad0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLspId</name>
      <anchorfile>class_r_s_v_p_path_error.html</anchorfile>
      <anchor>aacf5969d65d48ac1aaea028812622587</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBW</name>
      <anchorfile>class_r_s_v_p_path_error.html</anchorfile>
      <anchor>a3bd17e184697e95dbd8c08c93d695a38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SenderTemplateObj_t &amp;</type>
      <name>getSenderTemplate</name>
      <anchorfile>class_r_s_v_p_path_error.html</anchorfile>
      <anchor>ac59648576f1942a8ec7ae2780c6a039d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSenderTemplate</name>
      <anchorfile>class_r_s_v_p_path_error.html</anchorfile>
      <anchor>a17794a1cc352ce3b51245b7d40d19809</anchor>
      <arglist>(const SenderTemplateObj_t &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>SenderTspecObj_t &amp;</type>
      <name>getSenderTspec</name>
      <anchorfile>class_r_s_v_p_path_error.html</anchorfile>
      <anchor>a606d04def9cba478a74e5cb7ba9b2aa8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSenderTspec</name>
      <anchorfile>class_r_s_v_p_path_error.html</anchorfile>
      <anchor>a3f681c6eec986afee423c8f144c16abe</anchor>
      <arglist>(const SenderTspecObj_t &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPPathError_Base</name>
    <filename>class_r_s_v_p_path_error___base.html</filename>
    <base>RSVPPacket</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RSVPPathError_Base</name>
      <anchorfile>class_r_s_v_p_path_error___base.html</anchorfile>
      <anchor>a6c889bccd60b57c54f993d38d72617df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RSVPPathError_Base *</type>
      <name>dup</name>
      <anchorfile>class_r_s_v_p_path_error___base.html</anchorfile>
      <anchor>a924ee3810f15e508980e5dc49201ebb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_r_s_v_p_path_error___base.html</anchorfile>
      <anchor>ad31c33e5bd544f23e736e82dcfc633a0</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_r_s_v_p_path_error___base.html</anchorfile>
      <anchor>a0be2fac6c1c3422df138f6c3cb236930</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getErrorNode</name>
      <anchorfile>class_r_s_v_p_path_error___base.html</anchorfile>
      <anchor>acd549adb8d34a3bb37493d0e23db9b82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getErrorNode</name>
      <anchorfile>class_r_s_v_p_path_error___base.html</anchorfile>
      <anchor>ad54e47bfa49f57fc31c30bd7c5fda256</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setErrorNode</name>
      <anchorfile>class_r_s_v_p_path_error___base.html</anchorfile>
      <anchor>af54687c29301e074234b81fcf717bb10</anchor>
      <arglist>(const IPAddress &amp;errorNode_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getErrorCode</name>
      <anchorfile>class_r_s_v_p_path_error___base.html</anchorfile>
      <anchor>ab3c278a07ec843f20f7c57ba89693513</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setErrorCode</name>
      <anchorfile>class_r_s_v_p_path_error___base.html</anchorfile>
      <anchor>a6fa03e4ff28d7d229100154241c90a9f</anchor>
      <arglist>(int errorCode_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SenderDescriptor_t &amp;</type>
      <name>getSender_descriptor</name>
      <anchorfile>class_r_s_v_p_path_error___base.html</anchorfile>
      <anchor>a06a9b5211d5332e96e68675623f29c2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SenderDescriptor_t &amp;</type>
      <name>getSender_descriptor</name>
      <anchorfile>class_r_s_v_p_path_error___base.html</anchorfile>
      <anchor>a252ed63b24d8ed932316e1905e3719fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSender_descriptor</name>
      <anchorfile>class_r_s_v_p_path_error___base.html</anchorfile>
      <anchor>a6344b6bf5a0c7b8ee674d78f53a723ac</anchor>
      <arglist>(const SenderDescriptor_t &amp;sender_descriptor_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRsvpKind</name>
      <anchorfile>class_r_s_v_p_path_error___base.html</anchorfile>
      <anchor>a5eb1cae110949b4c9f685e1fc07d41e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRsvpKind</name>
      <anchorfile>class_r_s_v_p_path_error___base.html</anchorfile>
      <anchor>a71aa8f599e4fda0e53a442e3797b6873</anchor>
      <arglist>(int rsvpKind_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_r_s_v_p_path_error___base.html</anchorfile>
      <anchor>ab63196b198fe8434593037f12d1aae34</anchor>
      <arglist>(const RSVPPathError_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPPathError_Base</name>
      <anchorfile>class_r_s_v_p_path_error___base.html</anchorfile>
      <anchor>a7d6c1ebd80f752e4eab89a20ac02c2ec</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPPathError_Base</name>
      <anchorfile>class_r_s_v_p_path_error___base.html</anchorfile>
      <anchor>a8c26e422b0489c1234c0b25f1fd05114</anchor>
      <arglist>(const RSVPPathError_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RSVPPathError_Base &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_s_v_p_path_error___base.html</anchorfile>
      <anchor>a5a0664e918b692cc85baff4023415259</anchor>
      <arglist>(const RSVPPathError_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>errorNode_var</name>
      <anchorfile>class_r_s_v_p_path_error___base.html</anchorfile>
      <anchor>af4ce38d4a1dfd5ac811b117bac9039aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>errorCode_var</name>
      <anchorfile>class_r_s_v_p_path_error___base.html</anchorfile>
      <anchor>a30c7cc327d1296f03bf7ac20552b9722</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::SenderDescriptor_t</type>
      <name>sender_descriptor_var</name>
      <anchorfile>class_r_s_v_p_path_error___base.html</anchorfile>
      <anchor>a1864f0ab6c97e9cdc5198ac06b6968e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>rsvpKind_var</name>
      <anchorfile>class_r_s_v_p_path_error___base.html</anchorfile>
      <anchor>af6c6035b5aadd8b937d51153fecfa7ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPPathMsg</name>
    <filename>class_r_s_v_p_path_msg.html</filename>
    <base>RSVPPathMsg_Base</base>
    <member kind="function">
      <type></type>
      <name>RSVPPathMsg</name>
      <anchorfile>class_r_s_v_p_path_msg.html</anchorfile>
      <anchor>a921753639978245ae028e00d972d46cc</anchor>
      <arglist>(const char *name=NULL, int kind=PATH_MESSAGE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RSVPPathMsg</name>
      <anchorfile>class_r_s_v_p_path_msg.html</anchorfile>
      <anchor>af5fed406c1f8c3d42e4efbcca1736bad</anchor>
      <arglist>(const RSVPPathMsg &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>RSVPPathMsg &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_s_v_p_path_msg.html</anchorfile>
      <anchor>ae2403a36adea1ba6c29d8e7cf19951e1</anchor>
      <arglist>(const RSVPPathMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RSVPPathMsg *</type>
      <name>dup</name>
      <anchorfile>class_r_s_v_p_path_msg.html</anchorfile>
      <anchor>a57421abb6220de2fc6790b60ac7ce148</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getSrcAddress</name>
      <anchorfile>class_r_s_v_p_path_msg.html</anchorfile>
      <anchor>a3cee5eb7086f7981317147413f26148d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLspId</name>
      <anchorfile>class_r_s_v_p_path_msg.html</anchorfile>
      <anchor>aca22e0fb8de172b46a76a7eff4c46773</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getNHOP</name>
      <anchorfile>class_r_s_v_p_path_msg.html</anchorfile>
      <anchor>a3c732fc83aa501ffd914cc1294d2caf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getLIH</name>
      <anchorfile>class_r_s_v_p_path_msg.html</anchorfile>
      <anchor>a6c2683a2b75c50543b807cab4ef61996</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBW</name>
      <anchorfile>class_r_s_v_p_path_msg.html</anchorfile>
      <anchor>ab8f057a81e87fd49daa07be278c4f113</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SenderTemplateObj_t &amp;</type>
      <name>getSenderTemplate</name>
      <anchorfile>class_r_s_v_p_path_msg.html</anchorfile>
      <anchor>a464ac49e22b9c21e971bf15634ea0626</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSenderTemplate</name>
      <anchorfile>class_r_s_v_p_path_msg.html</anchorfile>
      <anchor>a607370b06bf1d3175301f4f5e7ad2df2</anchor>
      <arglist>(const SenderTemplateObj_t &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>SenderTspecObj_t &amp;</type>
      <name>getSenderTspec</name>
      <anchorfile>class_r_s_v_p_path_msg.html</anchorfile>
      <anchor>ae076819f0798afd76bd5ab68453fcdb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSenderTspec</name>
      <anchorfile>class_r_s_v_p_path_msg.html</anchorfile>
      <anchor>a95f4fec353322deb0a9312d4c6744baa</anchor>
      <arglist>(const SenderTspecObj_t &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPPathMsg_Base</name>
    <filename>class_r_s_v_p_path_msg___base.html</filename>
    <base>RSVPPacket</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RSVPPathMsg_Base</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>aeea84a25268ee8a047d2254174d6d945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RSVPPathMsg_Base *</type>
      <name>dup</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>a0589e0bddf0642defc8c71d157d5653f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>a7a1c82d2f9dd106d4db9755180f17e56</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>a9887633dc2cd4e6d7bfb6fb1f1246bef</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RsvpHopObj_t &amp;</type>
      <name>getHop</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>a7b7e9ecb81797b2f50316da74f19bd06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const RsvpHopObj_t &amp;</type>
      <name>getHop</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>ac96fb26e4505f20cebf040e2c688dacb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHop</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>a77ee6c868a97cc1818951a4ab034404e</anchor>
      <arglist>(const RsvpHopObj_t &amp;hop_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LabelRequestObj_t &amp;</type>
      <name>getLabel_request</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>a3b75be8f8c258d293f764011b503a210</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LabelRequestObj_t &amp;</type>
      <name>getLabel_request</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>a9eaf0e5b63fbf31a562a02f7ce88dbf5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLabel_request</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>a79279ec7572c5e99682d173e9a719dca</anchor>
      <arglist>(const LabelRequestObj_t &amp;label_request_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SenderDescriptor_t &amp;</type>
      <name>getSender_descriptor</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>adb04a859b069a84996dad977b34a8e93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SenderDescriptor_t &amp;</type>
      <name>getSender_descriptor</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>acf7a918393dfca18af158e3fe4dd4f10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSender_descriptor</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>a24543477a5f4b55e810644575e803dd5</anchor>
      <arglist>(const SenderDescriptor_t &amp;sender_descriptor_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EroVector &amp;</type>
      <name>getERO</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>ade0b6740b8fed5f38f2de4fd8a8037b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const EroVector &amp;</type>
      <name>getERO</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>a62ae1fc6c7e7fee653e8fd0b71308ca6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setERO</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>a1d797697040a1618950df7b1961f9074</anchor>
      <arglist>(const EroVector &amp;ERO_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getColor</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>a70a42552a35513df77e8f9da9eee3dbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setColor</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>af862105ccf474ba2e190677c6d75dfd7</anchor>
      <arglist>(int color_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRsvpKind</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>a55b4bcc8410e9d69aeaaabbdbd7684a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRsvpKind</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>a64ff7c1bdfe92523053fc7c2fd95e3b4</anchor>
      <arglist>(int rsvpKind_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>ae97db686d27d28b1bad93f1f1d895f99</anchor>
      <arglist>(const RSVPPathMsg_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPPathMsg_Base</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>a4b9d97aa0c11963ec87ea057c303b568</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPPathMsg_Base</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>ad14c6f65912ae468f9502a35956e7b70</anchor>
      <arglist>(const RSVPPathMsg_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RSVPPathMsg_Base &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>a35b9b6be7c26c574ff4e611ba9a8a05c</anchor>
      <arglist>(const RSVPPathMsg_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::RsvpHopObj_t</type>
      <name>hop_var</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>a3af586d52089a374f56acef114037622</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::LabelRequestObj_t</type>
      <name>label_request_var</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>ab1def9fc4d78ece95f0e7d1f45bcc0fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::SenderDescriptor_t</type>
      <name>sender_descriptor_var</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>a98312bb818658af4e45039ec4a151a2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::EroVector</type>
      <name>ERO_var</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>ad598318d51a73d1473e80930f485a636</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>color_var</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>a43e0d1c5bb2e7a2140c6fd604389f4b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>rsvpKind_var</name>
      <anchorfile>class_r_s_v_p_path_msg___base.html</anchorfile>
      <anchor>a66a5c064f3fab7a86f64c747ee5dec34</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPPathTear</name>
    <filename>class_r_s_v_p_path_tear.html</filename>
    <base>RSVPPathTear_Base</base>
    <member kind="function">
      <type></type>
      <name>RSVPPathTear</name>
      <anchorfile>class_r_s_v_p_path_tear.html</anchorfile>
      <anchor>ae661fb871d954a5ef247c0ad0efaecae</anchor>
      <arglist>(const char *name=NULL, int kind=PTEAR_MESSAGE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RSVPPathTear</name>
      <anchorfile>class_r_s_v_p_path_tear.html</anchorfile>
      <anchor>a57cbdceea8332d4913bcdbb9e8fc8e26</anchor>
      <arglist>(const RSVPPathTear &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>RSVPPathTear &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_s_v_p_path_tear.html</anchorfile>
      <anchor>ad6304611a36c2ad34ca0fd2a1d950db4</anchor>
      <arglist>(const RSVPPathTear &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RSVPPathTear *</type>
      <name>dup</name>
      <anchorfile>class_r_s_v_p_path_tear.html</anchorfile>
      <anchor>aa4c36a2512b7e1586eedc004bfaca119</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getNHOP</name>
      <anchorfile>class_r_s_v_p_path_tear.html</anchorfile>
      <anchor>a3c0b6d7cd09204108092f26eb6907df5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getLIH</name>
      <anchorfile>class_r_s_v_p_path_tear.html</anchorfile>
      <anchor>a013b85d9634e39cc336f34329c2b76f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getSrcAddress</name>
      <anchorfile>class_r_s_v_p_path_tear.html</anchorfile>
      <anchor>abd9fdb7edb3d1b020ae09d6d40c0f129</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLspId</name>
      <anchorfile>class_r_s_v_p_path_tear.html</anchorfile>
      <anchor>a29c79a6f53d19934813fc600739b03db</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPPathTear_Base</name>
    <filename>class_r_s_v_p_path_tear___base.html</filename>
    <base>RSVPPacket</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RSVPPathTear_Base</name>
      <anchorfile>class_r_s_v_p_path_tear___base.html</anchorfile>
      <anchor>a5ca802a5a3a24d48c0678b35df495d4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RSVPPathTear_Base *</type>
      <name>dup</name>
      <anchorfile>class_r_s_v_p_path_tear___base.html</anchorfile>
      <anchor>a57ca1431116bc4447e1a78c8981e77a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_r_s_v_p_path_tear___base.html</anchorfile>
      <anchor>ae1b1ba0cc5eae854121907b02e82f8d3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_r_s_v_p_path_tear___base.html</anchorfile>
      <anchor>ad0fa1c7f566ae3b8a3a503a17467224f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RsvpHopObj_t &amp;</type>
      <name>getHop</name>
      <anchorfile>class_r_s_v_p_path_tear___base.html</anchorfile>
      <anchor>acb74b46aa7bd939ade0644bb4d0ca97e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const RsvpHopObj_t &amp;</type>
      <name>getHop</name>
      <anchorfile>class_r_s_v_p_path_tear___base.html</anchorfile>
      <anchor>a5eba83e7227bf42b2d5f44111c8127f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHop</name>
      <anchorfile>class_r_s_v_p_path_tear___base.html</anchorfile>
      <anchor>a9941c5c1547413283b9cf0de2808ca9e</anchor>
      <arglist>(const RsvpHopObj_t &amp;hop_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SenderTemplateObj_t &amp;</type>
      <name>getSenderTemplate</name>
      <anchorfile>class_r_s_v_p_path_tear___base.html</anchorfile>
      <anchor>a4edaeb9cd8f06fe2e9ce90c2518c75b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SenderTemplateObj_t &amp;</type>
      <name>getSenderTemplate</name>
      <anchorfile>class_r_s_v_p_path_tear___base.html</anchorfile>
      <anchor>a1cf38d21264e8badbb075eb4dfde4f41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSenderTemplate</name>
      <anchorfile>class_r_s_v_p_path_tear___base.html</anchorfile>
      <anchor>a5f089e57e977289d364d7ce544bfc0b0</anchor>
      <arglist>(const SenderTemplateObj_t &amp;senderTemplate_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getForce</name>
      <anchorfile>class_r_s_v_p_path_tear___base.html</anchorfile>
      <anchor>a0148d077429b9c2fea8d1f0090764071</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setForce</name>
      <anchorfile>class_r_s_v_p_path_tear___base.html</anchorfile>
      <anchor>af75a272ccf718d9171c2f2155e9535c4</anchor>
      <arglist>(bool force_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRsvpKind</name>
      <anchorfile>class_r_s_v_p_path_tear___base.html</anchorfile>
      <anchor>a5d7f54b4d4c5eeba44901c8aea8ced71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRsvpKind</name>
      <anchorfile>class_r_s_v_p_path_tear___base.html</anchorfile>
      <anchor>adb1746eaf0295c8cc7169cbb648e10ec</anchor>
      <arglist>(int rsvpKind_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_r_s_v_p_path_tear___base.html</anchorfile>
      <anchor>a0275b0b869f46b2bc11990bda620942b</anchor>
      <arglist>(const RSVPPathTear_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPPathTear_Base</name>
      <anchorfile>class_r_s_v_p_path_tear___base.html</anchorfile>
      <anchor>a80ef52cee0a23587e1324e2481dee297</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPPathTear_Base</name>
      <anchorfile>class_r_s_v_p_path_tear___base.html</anchorfile>
      <anchor>a3c20b302d43fbd8fd2869149d619e0a2</anchor>
      <arglist>(const RSVPPathTear_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RSVPPathTear_Base &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_s_v_p_path_tear___base.html</anchorfile>
      <anchor>a7b9e9fd352505deee8d20a3fd9d9b8e6</anchor>
      <arglist>(const RSVPPathTear_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::RsvpHopObj_t</type>
      <name>hop_var</name>
      <anchorfile>class_r_s_v_p_path_tear___base.html</anchorfile>
      <anchor>aab6da17e6da4beaf6daae38f5f870bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::SenderTemplateObj_t</type>
      <name>senderTemplate_var</name>
      <anchorfile>class_r_s_v_p_path_tear___base.html</anchorfile>
      <anchor>a4f04f415f7bc34a8b61b2522c7e0b66d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>force_var</name>
      <anchorfile>class_r_s_v_p_path_tear___base.html</anchorfile>
      <anchor>a247e4364d8a942c139b90cc4d2bfa34b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>rsvpKind_var</name>
      <anchorfile>class_r_s_v_p_path_tear___base.html</anchorfile>
      <anchor>af03cca819fdd0095c844c629691471b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPResvError</name>
    <filename>class_r_s_v_p_resv_error.html</filename>
    <base>RSVPResvError_Base</base>
    <member kind="function">
      <type></type>
      <name>RSVPResvError</name>
      <anchorfile>class_r_s_v_p_resv_error.html</anchorfile>
      <anchor>aafc9c9419c87dfe9efc85e9c46a4cfe4</anchor>
      <arglist>(const char *name=NULL, int kind=RERROR_MESSAGE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RSVPResvError</name>
      <anchorfile>class_r_s_v_p_resv_error.html</anchorfile>
      <anchor>ab1f2b83a2e09d0a9e97c6538786442e2</anchor>
      <arglist>(const RSVPResvError &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>RSVPResvError &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_s_v_p_resv_error.html</anchorfile>
      <anchor>aeba1f60899f91514715b1a09edc3f466</anchor>
      <arglist>(const RSVPResvError &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RSVPResvError *</type>
      <name>dup</name>
      <anchorfile>class_r_s_v_p_resv_error.html</anchorfile>
      <anchor>a031273f11afa2e120f64398972c0581c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getNHOP</name>
      <anchorfile>class_r_s_v_p_resv_error.html</anchorfile>
      <anchor>ac9b5e5f9d9fc1302275be6f8ccead90b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getLIH</name>
      <anchorfile>class_r_s_v_p_resv_error.html</anchorfile>
      <anchor>ae208fdc28b002ed743a890f9d289477f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPResvError_Base</name>
    <filename>class_r_s_v_p_resv_error___base.html</filename>
    <base>RSVPPacket</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RSVPResvError_Base</name>
      <anchorfile>class_r_s_v_p_resv_error___base.html</anchorfile>
      <anchor>ac8cf2cb82aefc95127033b8c33c8a0c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RSVPResvError_Base *</type>
      <name>dup</name>
      <anchorfile>class_r_s_v_p_resv_error___base.html</anchorfile>
      <anchor>a350b16b81f501f2decf27ce117334770</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_r_s_v_p_resv_error___base.html</anchorfile>
      <anchor>ab119cf59da3b7662688656f4330d4c24</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_r_s_v_p_resv_error___base.html</anchorfile>
      <anchor>af259ff93a00fd8782ec3bbdcc09a529f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RsvpHopObj_t &amp;</type>
      <name>getHop</name>
      <anchorfile>class_r_s_v_p_resv_error___base.html</anchorfile>
      <anchor>ab0e86b5e8e91b39d4e987a9e7210a3ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const RsvpHopObj_t &amp;</type>
      <name>getHop</name>
      <anchorfile>class_r_s_v_p_resv_error___base.html</anchorfile>
      <anchor>a167d60a43caf540501b487272d992448</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHop</name>
      <anchorfile>class_r_s_v_p_resv_error___base.html</anchorfile>
      <anchor>a49449eb24e05631686395bbdc2a64ad4</anchor>
      <arglist>(const RsvpHopObj_t &amp;hop_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getErrorNode</name>
      <anchorfile>class_r_s_v_p_resv_error___base.html</anchorfile>
      <anchor>a23320351ff80a1822308509f4a19e03a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getErrorNode</name>
      <anchorfile>class_r_s_v_p_resv_error___base.html</anchorfile>
      <anchor>a41d23f81ddde76a3bdb4f09c065dba8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setErrorNode</name>
      <anchorfile>class_r_s_v_p_resv_error___base.html</anchorfile>
      <anchor>a2e54356fa01016aeaa0ccf84cb2f39b4</anchor>
      <arglist>(const IPAddress &amp;errorNode_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getErrorCode</name>
      <anchorfile>class_r_s_v_p_resv_error___base.html</anchorfile>
      <anchor>aa037d5257b1e83c9aeaa52424a1825a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setErrorCode</name>
      <anchorfile>class_r_s_v_p_resv_error___base.html</anchorfile>
      <anchor>ab424174597d2fbc2e792f3d895669eb9</anchor>
      <arglist>(int errorCode_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRsvpKind</name>
      <anchorfile>class_r_s_v_p_resv_error___base.html</anchorfile>
      <anchor>a9ae7688a1db93745ed74998f8dc4c62d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRsvpKind</name>
      <anchorfile>class_r_s_v_p_resv_error___base.html</anchorfile>
      <anchor>a42ae39dd461750f07bd1df4a6b48fa32</anchor>
      <arglist>(int rsvpKind_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_r_s_v_p_resv_error___base.html</anchorfile>
      <anchor>a0d92a2405b3c2897e9227f0f5a8bc27d</anchor>
      <arglist>(const RSVPResvError_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPResvError_Base</name>
      <anchorfile>class_r_s_v_p_resv_error___base.html</anchorfile>
      <anchor>ae6d388b04ed6252b6195de86793442f1</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPResvError_Base</name>
      <anchorfile>class_r_s_v_p_resv_error___base.html</anchorfile>
      <anchor>a4815deaa6faacc2ed3b278ae6e0cab72</anchor>
      <arglist>(const RSVPResvError_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RSVPResvError_Base &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_s_v_p_resv_error___base.html</anchorfile>
      <anchor>aadf4056782709e10671c145688362623</anchor>
      <arglist>(const RSVPResvError_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::RsvpHopObj_t</type>
      <name>hop_var</name>
      <anchorfile>class_r_s_v_p_resv_error___base.html</anchorfile>
      <anchor>adf65269a309673a7dd50500f0b79a15c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPAddress</type>
      <name>errorNode_var</name>
      <anchorfile>class_r_s_v_p_resv_error___base.html</anchorfile>
      <anchor>a945251ac5239e9f9e200345c8c438c11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>errorCode_var</name>
      <anchorfile>class_r_s_v_p_resv_error___base.html</anchorfile>
      <anchor>a22028a220552f8a72bb7a1554cd6942a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>rsvpKind_var</name>
      <anchorfile>class_r_s_v_p_resv_error___base.html</anchorfile>
      <anchor>acc783d8e013fac747db1aca4c952562a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPResvMsg</name>
    <filename>class_r_s_v_p_resv_msg.html</filename>
    <base>RSVPResvMsg_Base</base>
    <member kind="function">
      <type></type>
      <name>RSVPResvMsg</name>
      <anchorfile>class_r_s_v_p_resv_msg.html</anchorfile>
      <anchor>adf48fbd265262800d857ac03ba2c8493</anchor>
      <arglist>(const char *name=NULL, int kind=RESV_MESSAGE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RSVPResvMsg</name>
      <anchorfile>class_r_s_v_p_resv_msg.html</anchorfile>
      <anchor>a1d5927240679f4abda2a9c4ea96e0cb1</anchor>
      <arglist>(const RSVPResvMsg &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>RSVPResvMsg &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_s_v_p_resv_msg.html</anchorfile>
      <anchor>a3cde2fabaaf9292800214049d80f155d</anchor>
      <arglist>(const RSVPResvMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RSVPResvMsg *</type>
      <name>dup</name>
      <anchorfile>class_r_s_v_p_resv_msg.html</anchorfile>
      <anchor>a1c45634873bdf7a20a7db2d2230fa05c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getNHOP</name>
      <anchorfile>class_r_s_v_p_resv_msg.html</anchorfile>
      <anchor>acba305cab60cbda25aabda67c227e8f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getLIH</name>
      <anchorfile>class_r_s_v_p_resv_msg.html</anchorfile>
      <anchor>a256dcad2154833acf6b0658aef2a9541</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPResvMsg_Base</name>
    <filename>class_r_s_v_p_resv_msg___base.html</filename>
    <base>RSVPPacket</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RSVPResvMsg_Base</name>
      <anchorfile>class_r_s_v_p_resv_msg___base.html</anchorfile>
      <anchor>a81b791857304270f23e0ba05bb7ae1ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RSVPResvMsg_Base *</type>
      <name>dup</name>
      <anchorfile>class_r_s_v_p_resv_msg___base.html</anchorfile>
      <anchor>a451765f1ad2542e55061577f5a438126</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_r_s_v_p_resv_msg___base.html</anchorfile>
      <anchor>abc5352b8102c251cc7c567c0224a3e35</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_r_s_v_p_resv_msg___base.html</anchorfile>
      <anchor>ab87811a1ce3f1548762376550208386f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RsvpHopObj_t &amp;</type>
      <name>getHop</name>
      <anchorfile>class_r_s_v_p_resv_msg___base.html</anchorfile>
      <anchor>ae11f656869951c2117b7969dfd1be007</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const RsvpHopObj_t &amp;</type>
      <name>getHop</name>
      <anchorfile>class_r_s_v_p_resv_msg___base.html</anchorfile>
      <anchor>a2556b1ffa6806b27b2fba7c7a87edad7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHop</name>
      <anchorfile>class_r_s_v_p_resv_msg___base.html</anchorfile>
      <anchor>a78934a725f5607deb82dc9355557d1cb</anchor>
      <arglist>(const RsvpHopObj_t &amp;hop_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FlowDescriptorVector &amp;</type>
      <name>getFlowDescriptor</name>
      <anchorfile>class_r_s_v_p_resv_msg___base.html</anchorfile>
      <anchor>a8345fb7ba0f007262882bfbaa6271bfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const FlowDescriptorVector &amp;</type>
      <name>getFlowDescriptor</name>
      <anchorfile>class_r_s_v_p_resv_msg___base.html</anchorfile>
      <anchor>aba5f51689c458829689cd9744ac773cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFlowDescriptor</name>
      <anchorfile>class_r_s_v_p_resv_msg___base.html</anchorfile>
      <anchor>af5b49444c96b4dc81e5dcff92aba0eab</anchor>
      <arglist>(const FlowDescriptorVector &amp;flowDescriptor_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRsvpKind</name>
      <anchorfile>class_r_s_v_p_resv_msg___base.html</anchorfile>
      <anchor>aba2fb8a7a543e868123cc9f764eee4ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRsvpKind</name>
      <anchorfile>class_r_s_v_p_resv_msg___base.html</anchorfile>
      <anchor>a5c2f5dd2c39070feb02c5caf9563e9ac</anchor>
      <arglist>(int rsvpKind_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_r_s_v_p_resv_msg___base.html</anchorfile>
      <anchor>acbc1887c195d2352ed8203a4f200a497</anchor>
      <arglist>(const RSVPResvMsg_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPResvMsg_Base</name>
      <anchorfile>class_r_s_v_p_resv_msg___base.html</anchorfile>
      <anchor>a43e0f3433dd275aa7b380f7954cd84f2</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPResvMsg_Base</name>
      <anchorfile>class_r_s_v_p_resv_msg___base.html</anchorfile>
      <anchor>a97f392ec99034363507f000935939ea8</anchor>
      <arglist>(const RSVPResvMsg_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RSVPResvMsg_Base &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_s_v_p_resv_msg___base.html</anchorfile>
      <anchor>afc563a0fcb3c559c1194e25afc522039</anchor>
      <arglist>(const RSVPResvMsg_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::RsvpHopObj_t</type>
      <name>hop_var</name>
      <anchorfile>class_r_s_v_p_resv_msg___base.html</anchorfile>
      <anchor>a96a1327a6a50c724dfce5e9b5d64dfa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::FlowDescriptorVector</type>
      <name>flowDescriptor_var</name>
      <anchorfile>class_r_s_v_p_resv_msg___base.html</anchorfile>
      <anchor>abed7f9d27acedb5a94655a8dcc1098b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>rsvpKind_var</name>
      <anchorfile>class_r_s_v_p_resv_msg___base.html</anchorfile>
      <anchor>a602da03c25b69c2e6bbd9b4cfbcf5008</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPResvTear</name>
    <filename>class_r_s_v_p_resv_tear.html</filename>
    <base>RSVPResvTear_Base</base>
    <member kind="function">
      <type></type>
      <name>RSVPResvTear</name>
      <anchorfile>class_r_s_v_p_resv_tear.html</anchorfile>
      <anchor>a1b5fa9d5c787cf6d07d3b333d0003a2b</anchor>
      <arglist>(const char *name=NULL, int kind=RTEAR_MESSAGE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RSVPResvTear</name>
      <anchorfile>class_r_s_v_p_resv_tear.html</anchorfile>
      <anchor>ad85db7c89fcbeca14326406fc13ce5be</anchor>
      <arglist>(const RSVPResvTear &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>RSVPResvTear &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_s_v_p_resv_tear.html</anchorfile>
      <anchor>a0991c415bf26b134d412a74b64b978c5</anchor>
      <arglist>(const RSVPResvTear &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RSVPResvTear *</type>
      <name>dup</name>
      <anchorfile>class_r_s_v_p_resv_tear.html</anchorfile>
      <anchor>a8cde7beeb88adaddd8ebf46d78a448b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getNHOP</name>
      <anchorfile>class_r_s_v_p_resv_tear.html</anchorfile>
      <anchor>a8f607cc1c77cd1a4672cab167f6871d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getLIH</name>
      <anchorfile>class_r_s_v_p_resv_tear.html</anchorfile>
      <anchor>ab1c067c2e46672378b49758aa3c97795</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPResvTear_Base</name>
    <filename>class_r_s_v_p_resv_tear___base.html</filename>
    <base>RSVPPacket</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RSVPResvTear_Base</name>
      <anchorfile>class_r_s_v_p_resv_tear___base.html</anchorfile>
      <anchor>a91ebc497d530eed202c872d876e19d07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RSVPResvTear_Base *</type>
      <name>dup</name>
      <anchorfile>class_r_s_v_p_resv_tear___base.html</anchorfile>
      <anchor>a51c77c2fdd241a18e5d967b04084c07a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_r_s_v_p_resv_tear___base.html</anchorfile>
      <anchor>aa03d996b91dc6b39dc8f8a67cefd8532</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_r_s_v_p_resv_tear___base.html</anchorfile>
      <anchor>a678636938ce7850115d778f866367544</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RsvpHopObj_t &amp;</type>
      <name>getHop</name>
      <anchorfile>class_r_s_v_p_resv_tear___base.html</anchorfile>
      <anchor>a765a24899fd3ace3943c051ab73326ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const RsvpHopObj_t &amp;</type>
      <name>getHop</name>
      <anchorfile>class_r_s_v_p_resv_tear___base.html</anchorfile>
      <anchor>acff35e08654b7de5db3b07ec912bd422</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHop</name>
      <anchorfile>class_r_s_v_p_resv_tear___base.html</anchorfile>
      <anchor>a8c34173bee38a05ea319c14eca429697</anchor>
      <arglist>(const RsvpHopObj_t &amp;hop_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FlowDescriptorVector &amp;</type>
      <name>getFlowDescriptor</name>
      <anchorfile>class_r_s_v_p_resv_tear___base.html</anchorfile>
      <anchor>afe4eb781563c84cf058452029f63c1f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const FlowDescriptorVector &amp;</type>
      <name>getFlowDescriptor</name>
      <anchorfile>class_r_s_v_p_resv_tear___base.html</anchorfile>
      <anchor>a8cb52ba22a05bd18d9d69fb235689e83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFlowDescriptor</name>
      <anchorfile>class_r_s_v_p_resv_tear___base.html</anchorfile>
      <anchor>abacc8a22410f9bc02144f77067a2d2f5</anchor>
      <arglist>(const FlowDescriptorVector &amp;flowDescriptor_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRsvpKind</name>
      <anchorfile>class_r_s_v_p_resv_tear___base.html</anchorfile>
      <anchor>ad6df5154e25fa7452bdebd6016abbd9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRsvpKind</name>
      <anchorfile>class_r_s_v_p_resv_tear___base.html</anchorfile>
      <anchor>aae6b98427cbb83287dbf1d7e5b55ef97</anchor>
      <arglist>(int rsvpKind_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_r_s_v_p_resv_tear___base.html</anchorfile>
      <anchor>a397332c06e9169917a46473563de4ae1</anchor>
      <arglist>(const RSVPResvTear_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPResvTear_Base</name>
      <anchorfile>class_r_s_v_p_resv_tear___base.html</anchorfile>
      <anchor>af68a13c37c8dd35bc8e7c83fd6c5f00b</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPResvTear_Base</name>
      <anchorfile>class_r_s_v_p_resv_tear___base.html</anchorfile>
      <anchor>a3510ef24e2696a2ce4a1d8b4a0e58c6b</anchor>
      <arglist>(const RSVPResvTear_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RSVPResvTear_Base &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_s_v_p_resv_tear___base.html</anchorfile>
      <anchor>a5fac70a0a01dc443a0f7fd4934aaa5cb</anchor>
      <arglist>(const RSVPResvTear_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::RsvpHopObj_t</type>
      <name>hop_var</name>
      <anchorfile>class_r_s_v_p_resv_tear___base.html</anchorfile>
      <anchor>a6d4b46252fd93a082459135b15f682e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::FlowDescriptorVector</type>
      <name>flowDescriptor_var</name>
      <anchorfile>class_r_s_v_p_resv_tear___base.html</anchorfile>
      <anchor>a40661fdba6216fd843e8afd96b29985f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>rsvpKind_var</name>
      <anchorfile>class_r_s_v_p_resv_tear___base.html</anchorfile>
      <anchor>a3706c9a470e7b7d1cd8f580e6b22767e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTCP</name>
    <filename>class_r_t_c_p.html</filename>
    <member kind="function">
      <type></type>
      <name>RTCP</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>ae47dff2f8e8e2810242c85920aa1ee65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>a3e235e77d30ea267a343b1a004af00c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~RTCP</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>ab9a1ae0bfe0eeec26865849c35b72295</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>ae9376f3daed572f57e4f95951a992eef</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessageFromRTP</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>a45c9f2d30acd3d63602c1086d07aecfc</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessageFromUDP</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>aac36ed16b31f33e8eefd5236b44bd32f</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMessage</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>aacabb9bc545685dc97a2ffe380a6de41</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeRTCP</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>a030ff0bbd87d4eb8b2468171484c8ad1</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleInitialized</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>ac9cac5c0e069ad71fdfbea85965afb1f</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>dataOut</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>a8e1974da707407c20944f52d3e6d684c</anchor>
      <arglist>(RTPInnerPacket *packet)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>dataIn</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>aa1240cef092398ea0b2c4bba82ca28b2</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>leaveSession</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>a2610172ad88f25c94fba8d0ad40d119e</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>connectRet</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>a19a9c3795f2cd2f47d29ffc295f7927f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>readRet</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>aba758ab1ab089113257066ed604f592d</anchor>
      <arglist>(cPacket *sifpIn)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>createSocket</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>a8b5d9bbd0415a34d04522a65a080fede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>chooseSSRC</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>ae740cefae3be02ec4ff778aff176df85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleInterval</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>ad0c374e283d184b19c7c67f0cef8a82b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>createPacket</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>a2cc04b02279a36be154bac046869bdd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processOutgoingRTPPacket</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>a8799abb9a95f0c3e6c884df9daa3735f</anchor>
      <arglist>(RTPPacket *packet)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processIncomingRTPPacket</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>afd8c3688162068e8e82ff99e1dc4c93b</anchor>
      <arglist>(RTPPacket *packet, IPAddress address, int port)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processIncomingRTCPPacket</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>a8ac3a8c05cbd68c631cf99e417b3ab0a</anchor>
      <arglist>(RTCPCompoundPacket *packet, IPAddress address, int port)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual RTPParticipantInfo *</type>
      <name>findParticipantInfo</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>afcf77f17784f2636811703bb0c78b47a</anchor>
      <arglist>(uint32 ssrc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>calculateAveragePacketSize</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>a9911519c66f47604df0e8bff0d0670d1</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_mtu</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>a37a772bdd0760827d4ec3854dbc29228</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_bandwidth</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>ac0c26bf355a113db3fc7516e5ef9f6f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_rtcpPercentage</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>aba2346f5ac50ddbce83c972712113611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>_destinationAddress</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>a821bbdef483a7dc0a8793d8f4020cbcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_port</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>a5e94424b09d99ecd8bfa7a9bf9584a0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_ssrcChosen</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>a312d956dfe0cee660f64c7eff866f97f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_leaveSession</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>a15f6dc294a91b2366caf4d781c7ec7c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RTPSenderInfo *</type>
      <name>_senderInfo</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>a24fc77e46e9ef00d873a5197694681ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cArray *</type>
      <name>_participantInfos</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>a1bd493c0345308c51d020001b7e79ee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_socketFdIn</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>a3156bbe02720bd521d253ef8497bf0b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_socketFdOut</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>af32f3ab0cf350b43f5cb606d5c275d86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_packetsCalculated</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>a71ec6dc615cd6418db3ed9bf24f4c586</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_averagePacketSize</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>a3e059e5417461a9698d70366c486041d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>_rtcpIntervalOutVector</name>
      <anchorfile>class_r_t_c_p.html</anchorfile>
      <anchor>a165677f6f01930cd573e5d60f4daf0a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTCPByePacket</name>
    <filename>class_r_t_c_p_bye_packet.html</filename>
    <base>RTCPPacket</base>
    <member kind="function">
      <type></type>
      <name>RTCPByePacket</name>
      <anchorfile>class_r_t_c_p_bye_packet.html</anchorfile>
      <anchor>a313301663e0115983cecfbb93d46a166</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTCPByePacket</name>
      <anchorfile>class_r_t_c_p_bye_packet.html</anchorfile>
      <anchor>a87700dda76e3139e7681a222e0021f34</anchor>
      <arglist>(const RTCPByePacket &amp;rtcpByePacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTCPByePacket</name>
      <anchorfile>class_r_t_c_p_bye_packet.html</anchorfile>
      <anchor>a3767eb14ccd1d7806eba04fd0664ecdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTCPByePacket &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_t_c_p_bye_packet.html</anchorfile>
      <anchor>ae8aa345ca0358ef8a1cecdcc7e857e36</anchor>
      <arglist>(const RTCPByePacket &amp;rtcpByePacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RTCPByePacket *</type>
      <name>dup</name>
      <anchorfile>class_r_t_c_p_bye_packet.html</anchorfile>
      <anchor>a269e455d6e5dfc786c7b42e90383edf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getSSRC</name>
      <anchorfile>class_r_t_c_p_bye_packet.html</anchorfile>
      <anchor>ab91e8bdf1a2862d424eeb1f34a702fa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSSRC</name>
      <anchorfile>class_r_t_c_p_bye_packet.html</anchorfile>
      <anchor>a8cbf2a161fadd31a14dd0e5453c94e91</anchor>
      <arglist>(uint32 ssrc)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>_ssrc</name>
      <anchorfile>class_r_t_c_p_bye_packet.html</anchorfile>
      <anchor>a8efbe8533012cea34573cb08d4db0ca1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTCPCompoundPacket</name>
    <filename>class_r_t_c_p_compound_packet.html</filename>
    <member kind="function">
      <type></type>
      <name>RTCPCompoundPacket</name>
      <anchorfile>class_r_t_c_p_compound_packet.html</anchorfile>
      <anchor>a7560a465eb32fa427d92fe892ab61ee8</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTCPCompoundPacket</name>
      <anchorfile>class_r_t_c_p_compound_packet.html</anchorfile>
      <anchor>aa066271f2796236e0d913ebc3a2d7653</anchor>
      <arglist>(const RTCPCompoundPacket &amp;rtcpCompoundPacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTCPCompoundPacket</name>
      <anchorfile>class_r_t_c_p_compound_packet.html</anchorfile>
      <anchor>ae9c718b7cb5572b61ed3fdd16e8964b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTCPCompoundPacket &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_t_c_p_compound_packet.html</anchorfile>
      <anchor>a9dd621ebd5f06e29d8def44348e1daff</anchor>
      <arglist>(const RTCPCompoundPacket &amp;rtcpCompoundPacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RTCPCompoundPacket *</type>
      <name>dup</name>
      <anchorfile>class_r_t_c_p_compound_packet.html</anchorfile>
      <anchor>a5d18045924c7b9f3da266aa57feff359</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>class_r_t_c_p_compound_packet.html</anchorfile>
      <anchor>a59a294afe0788a6192a09d3e85230573</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>class_r_t_c_p_compound_packet.html</anchorfile>
      <anchor>aab65d482588574474f523e0e07098565</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addRTCPPacket</name>
      <anchorfile>class_r_t_c_p_compound_packet.html</anchorfile>
      <anchor>a39b607e24de376606edfc539c9ad16f9</anchor>
      <arglist>(RTCPPacket *rtcpPacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cArray *</type>
      <name>getRtcpPackets</name>
      <anchorfile>class_r_t_c_p_compound_packet.html</anchorfile>
      <anchor>ab85d13a1c00084cb73aa920bbc15f9bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cArray *</type>
      <name>_rtcpPackets</name>
      <anchorfile>class_r_t_c_p_compound_packet.html</anchorfile>
      <anchor>a0c1ba0ca5046f3a9cb252a78be6f3e22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTCPPacket</name>
    <filename>class_r_t_c_p_packet.html</filename>
    <member kind="enumeration">
      <name>RTCP_PACKET_TYPE</name>
      <anchorfile>class_r_t_c_p_packet.html</anchorfile>
      <anchor>a98ec68fc260027c7516b8557b1db19d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTCP_PT_UNDEF</name>
      <anchorfile>class_r_t_c_p_packet.html</anchorfile>
      <anchor>a98ec68fc260027c7516b8557b1db19d8a7502a2aed4663d3258a3094dc5f6ca8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTCP_PT_SR</name>
      <anchorfile>class_r_t_c_p_packet.html</anchorfile>
      <anchor>a98ec68fc260027c7516b8557b1db19d8a10ef15a0e7d4a9786090682e80e95155</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTCP_PT_RR</name>
      <anchorfile>class_r_t_c_p_packet.html</anchorfile>
      <anchor>a98ec68fc260027c7516b8557b1db19d8a2612b897b7ad4b49abea1afe94195e1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTCP_PT_SDES</name>
      <anchorfile>class_r_t_c_p_packet.html</anchorfile>
      <anchor>a98ec68fc260027c7516b8557b1db19d8ab7976cf73e226c418b2d055def4bcbee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTCP_PT_BYE</name>
      <anchorfile>class_r_t_c_p_packet.html</anchorfile>
      <anchor>a98ec68fc260027c7516b8557b1db19d8a9762de482a05d60b5dd85fa9574cbee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTCPPacket</name>
      <anchorfile>class_r_t_c_p_packet.html</anchorfile>
      <anchor>ab75e601cf44b5e98fddc33b770b261d6</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTCPPacket</name>
      <anchorfile>class_r_t_c_p_packet.html</anchorfile>
      <anchor>a3ff3b9da4c5fd49f1f91da8a157efa23</anchor>
      <arglist>(const RTCPPacket &amp;rtcpPacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTCPPacket</name>
      <anchorfile>class_r_t_c_p_packet.html</anchorfile>
      <anchor>a8ed916168f589e18271a1cd6d7c9d6c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTCPPacket &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_t_c_p_packet.html</anchorfile>
      <anchor>ad812a3d22d9654f8b3a8e6c7fc386cd2</anchor>
      <arglist>(const RTCPPacket &amp;rtcpPacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RTCPPacket *</type>
      <name>dup</name>
      <anchorfile>class_r_t_c_p_packet.html</anchorfile>
      <anchor>a6c0e6fd8caa359d1d52a5678f3495a07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>class_r_t_c_p_packet.html</anchorfile>
      <anchor>a28fdbd9de68af089416f46b974df221f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>class_r_t_c_p_packet.html</anchorfile>
      <anchor>adbce945c77bf066ee7ec74644905c4ee</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getVersion</name>
      <anchorfile>class_r_t_c_p_packet.html</anchorfile>
      <anchor>a4e9216e941aa42bce0b6279037db7323</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPadding</name>
      <anchorfile>class_r_t_c_p_packet.html</anchorfile>
      <anchor>a7b9cf517860fb9be798dff66878aad4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCount</name>
      <anchorfile>class_r_t_c_p_packet.html</anchorfile>
      <anchor>ab0c0ed89ab4a742562b6a34435ccff4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RTCP_PACKET_TYPE</type>
      <name>getPacketType</name>
      <anchorfile>class_r_t_c_p_packet.html</anchorfile>
      <anchor>a75f5962cc1f5d92a190e9f70dedccf50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRtcpLength</name>
      <anchorfile>class_r_t_c_p_packet.html</anchorfile>
      <anchor>a4390c450ddb4ed2c0828909b10f9e27b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_version</name>
      <anchorfile>class_r_t_c_p_packet.html</anchorfile>
      <anchor>a59670a916a1e3cc7de0c282e135911a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_padding</name>
      <anchorfile>class_r_t_c_p_packet.html</anchorfile>
      <anchor>a2610b6580230f04753999a1b626de412</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_count</name>
      <anchorfile>class_r_t_c_p_packet.html</anchorfile>
      <anchor>abed91be10df7b5094799fd2952baa3b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RTCP_PACKET_TYPE</type>
      <name>_packetType</name>
      <anchorfile>class_r_t_c_p_packet.html</anchorfile>
      <anchor>aa20254f7eab9064006a4755beba61af4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTCPReceiverReportPacket</name>
    <filename>class_r_t_c_p_receiver_report_packet.html</filename>
    <base>RTCPPacket</base>
    <member kind="function">
      <type></type>
      <name>RTCPReceiverReportPacket</name>
      <anchorfile>class_r_t_c_p_receiver_report_packet.html</anchorfile>
      <anchor>abcbe14f644ad24f19ca1fe0f23de72f6</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTCPReceiverReportPacket</name>
      <anchorfile>class_r_t_c_p_receiver_report_packet.html</anchorfile>
      <anchor>aec4bc5333219b52e38c7bb6b07140e34</anchor>
      <arglist>(const RTCPReceiverReportPacket &amp;rtcpReceiverReportPacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTCPReceiverReportPacket</name>
      <anchorfile>class_r_t_c_p_receiver_report_packet.html</anchorfile>
      <anchor>a18814ebfcb4a1925c81cef064b456b40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTCPReceiverReportPacket &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_t_c_p_receiver_report_packet.html</anchorfile>
      <anchor>a7ff4d2ed02ed019df08a431274741c11</anchor>
      <arglist>(const RTCPReceiverReportPacket &amp;rtcpReceiverReportPacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RTCPReceiverReportPacket *</type>
      <name>dup</name>
      <anchorfile>class_r_t_c_p_receiver_report_packet.html</anchorfile>
      <anchor>ae060941a7725d2e4dd0ee2881c474267</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>class_r_t_c_p_receiver_report_packet.html</anchorfile>
      <anchor>a2d5e9ba39ad30d69c18190b479e5e61d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>class_r_t_c_p_receiver_report_packet.html</anchorfile>
      <anchor>ad92109041b73efde61311de12b0ac365</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getSSRC</name>
      <anchorfile>class_r_t_c_p_receiver_report_packet.html</anchorfile>
      <anchor>a3bda5758c2e150a46964a9590d2a5683</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSSRC</name>
      <anchorfile>class_r_t_c_p_receiver_report_packet.html</anchorfile>
      <anchor>a43606d9fcf02bdc5d5b17bc84df9a1a5</anchor>
      <arglist>(uint32 ssrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addReceptionReport</name>
      <anchorfile>class_r_t_c_p_receiver_report_packet.html</anchorfile>
      <anchor>a1e0ca4e59064efaa6f06e44ee469ece3</anchor>
      <arglist>(ReceptionReport *report)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cArray *</type>
      <name>getReceptionReports</name>
      <anchorfile>class_r_t_c_p_receiver_report_packet.html</anchorfile>
      <anchor>af9a6cf813c52f33eb228701b5b684c50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>_ssrc</name>
      <anchorfile>class_r_t_c_p_receiver_report_packet.html</anchorfile>
      <anchor>a22897bfbb8b47c2d6471a811612d780c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cArray *</type>
      <name>_receptionReports</name>
      <anchorfile>class_r_t_c_p_receiver_report_packet.html</anchorfile>
      <anchor>ac64d9df8187b819f34387625983313ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTCPSDESPacket</name>
    <filename>class_r_t_c_p_s_d_e_s_packet.html</filename>
    <base>RTCPPacket</base>
    <member kind="function">
      <type></type>
      <name>RTCPSDESPacket</name>
      <anchorfile>class_r_t_c_p_s_d_e_s_packet.html</anchorfile>
      <anchor>ad8bb8d408757a572d5028722db0067d0</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTCPSDESPacket</name>
      <anchorfile>class_r_t_c_p_s_d_e_s_packet.html</anchorfile>
      <anchor>a4bb1b23a7a471ea1ae0f0c25b502d9f0</anchor>
      <arglist>(const RTCPSDESPacket &amp;rtcpSDESPacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTCPSDESPacket</name>
      <anchorfile>class_r_t_c_p_s_d_e_s_packet.html</anchorfile>
      <anchor>a6674ba96b9dec3951d77068f41299355</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTCPSDESPacket &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_t_c_p_s_d_e_s_packet.html</anchorfile>
      <anchor>ae5173df58d1fc861b8c034c2753a8e14</anchor>
      <arglist>(const RTCPSDESPacket &amp;rtcpSDESPacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RTCPSDESPacket *</type>
      <name>dup</name>
      <anchorfile>class_r_t_c_p_s_d_e_s_packet.html</anchorfile>
      <anchor>a942b6024c7968c6ef2d109a9749bafc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>class_r_t_c_p_s_d_e_s_packet.html</anchorfile>
      <anchor>aba1b7b136d711d866538763dd82ea385</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>class_r_t_c_p_s_d_e_s_packet.html</anchorfile>
      <anchor>a03a19b8fc4fbc29e94bd81a2e658803a</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cArray *</type>
      <name>getSdesChunks</name>
      <anchorfile>class_r_t_c_p_s_d_e_s_packet.html</anchorfile>
      <anchor>a85fb3e667fd7aa3cd29f5d61e4e0d759</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSDESChunk</name>
      <anchorfile>class_r_t_c_p_s_d_e_s_packet.html</anchorfile>
      <anchor>aad4bed0e2efc76b83a75c355104843ff</anchor>
      <arglist>(SDESChunk *sdesChunk)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cArray *</type>
      <name>_sdesChunks</name>
      <anchorfile>class_r_t_c_p_s_d_e_s_packet.html</anchorfile>
      <anchor>ac4e4fa4a8663947017085359fffbfba7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTCPSenderReportPacket</name>
    <filename>class_r_t_c_p_sender_report_packet.html</filename>
    <base>RTCPReceiverReportPacket</base>
    <member kind="function">
      <type></type>
      <name>RTCPSenderReportPacket</name>
      <anchorfile>class_r_t_c_p_sender_report_packet.html</anchorfile>
      <anchor>a8073c78041ce2084fe0f6a775b2f180f</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTCPSenderReportPacket</name>
      <anchorfile>class_r_t_c_p_sender_report_packet.html</anchorfile>
      <anchor>adbadf5345917d4291368d38d0a7edc57</anchor>
      <arglist>(const RTCPSenderReportPacket &amp;rtcpSenderReportPacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTCPSenderReportPacket</name>
      <anchorfile>class_r_t_c_p_sender_report_packet.html</anchorfile>
      <anchor>a82216aecb703f103c4b5def3867b3e51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTCPSenderReportPacket &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_t_c_p_sender_report_packet.html</anchorfile>
      <anchor>a7ed88ea6587bbdff03a6545e3df26e68</anchor>
      <arglist>(const RTCPSenderReportPacket &amp;rtcpSenderReportPacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RTCPSenderReportPacket *</type>
      <name>dup</name>
      <anchorfile>class_r_t_c_p_sender_report_packet.html</anchorfile>
      <anchor>a09db4ea22a192cde74c26f7f183f3bba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>class_r_t_c_p_sender_report_packet.html</anchorfile>
      <anchor>af1ee542cfcaed586b8adc5e5d3a8132d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>class_r_t_c_p_sender_report_packet.html</anchorfile>
      <anchor>a02d73d70be199adc4bcaf7b1d8ec1b44</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SenderReport *</type>
      <name>getSenderReport</name>
      <anchorfile>class_r_t_c_p_sender_report_packet.html</anchorfile>
      <anchor>a70d965fecd78f7111f5c848e5c65b36e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSenderReport</name>
      <anchorfile>class_r_t_c_p_sender_report_packet.html</anchorfile>
      <anchor>aa84410692fb821605b54014cd75d333e</anchor>
      <arglist>(SenderReport *senderReport)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SenderReport *</type>
      <name>_senderReport</name>
      <anchorfile>class_r_t_c_p_sender_report_packet.html</anchorfile>
      <anchor>ae4008818fed62fdef96300de417ed0c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTP</name>
    <filename>class_r_t_p.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>a87c621f50bcd852bb6d420989fda493f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>a392db59ae4f4f5b3702af009e3adc96c</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessageFromApp</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>ab999f8e488ff8d8f476535995104f97d</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessageFromProfile</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>a38a74515ef37048ae43844b00fda94d9</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessageFromRTCP</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>aeb6a0adf98e60d3e026d96a3172b6875</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessagefromUDP</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>ad8c14b2cb637e19a4707201e343e6a3f</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>enterSession</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>a90f3eed476a7c1dffc090c7382c66966</anchor>
      <arglist>(RTPInterfacePacket *rifp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>leaveSession</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>af5f5fc2627b8013d0b8c4d35bca51f9b</anchor>
      <arglist>(RTPInterfacePacket *rifp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>createSenderModule</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>a9ec6123f9017318bc971114f717e32b2</anchor>
      <arglist>(RTPInterfacePacket *rifp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteSenderModule</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>a602760e4d0e8ba927d19621ecc85fb72</anchor>
      <arglist>(RTPInterfacePacket *rifp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleControl</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>a0368378d08f32077172902d0d3768204</anchor>
      <arglist>(RTPInterfacePacket *rifp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>profileInitialized</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>a9464b80570929e0ae8aad9f2123b3033</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleCreated</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>a152ba683fe7133fdaa3dfa8f09fab643</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleDeleted</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>a5ca35ae53a665d2889fd6be76be94790</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleInitialized</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>a0381650a6dc886e4944dcc91c03f8c1f</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleStatus</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>aabfb0abd8d1c532e71f2b492ade23e84</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>dataOut</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>af9e712ac4bfb20d205de599036f6257d</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>rtcpInitialized</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>a034bff5001251510638649a87b101802</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sessionLeft</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>a665b992d3de33f580c9c7fcc8d7fcdc5</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>createProfile</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>a7827baa1089b68c5332fd546e36a6c94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>createSocket</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>a07922ede1038b3716eb20e0080b99f80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketRet</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>a0423a242b208b762946a2fd24cbbccf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>connectRet</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>ab20735eb91149be160066afbeebd68ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>readRet</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>a8ac8d83c64b3efa4901031083a372d23</anchor>
      <arglist>(cMessage *sifp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeProfile</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>ae089ed86755eb9904102a5a55f45c513</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeRTCP</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>aac85d584c5af877a7157b8910bc5c90d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>resolveMTU</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>ab28f66eafc7c17836226d9f019130255</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_commonName</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>a38ee342575dd807c33f67d3cad2635e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_profileName</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>a915cb3cb5538d19c5fd50d5b918c176b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_bandwidth</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>ae2088edbe467e7e74a5f1b8f8280ad26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>_destinationAddress</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>a95662f44615a4ad21f6ea3fd72896777</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_port</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>a9d888459f8d91b72698327aa7b571e76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_mtu</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>a08a4b65308ddbdfafe61b290bad93e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_rtcpPercentage</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>a14bb58ade606d1da3346c2910fa0033f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_socketFdIn</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>ae5eb75a9b4a596e5208b270118a98b8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_socketFdOut</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>adb2c4c2880dc26efaabfca5ca655d30d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_leaveSession</name>
      <anchorfile>class_r_t_p.html</anchorfile>
      <anchor>ab5d03c614ac646800620d289af6dfbbc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPApplication</name>
    <filename>class_r_t_p_application.html</filename>
    <member kind="function">
      <type></type>
      <name>RTPApplication</name>
      <anchorfile>class_r_t_p_application.html</anchorfile>
      <anchor>a40562627dd62fdefff1f05bf44cba760</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_r_t_p_application.html</anchorfile>
      <anchor>a81f0df86019b7352ad8e161d4797deb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activity</name>
      <anchorfile>class_r_t_p_application.html</anchorfile>
      <anchor>aaa3235c9e85c266171a399dc8ee27e48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_commonName</name>
      <anchorfile>class_r_t_p_application.html</anchorfile>
      <anchor>af97467f0380d8123891f744f6ecd4997</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_profileName</name>
      <anchorfile>class_r_t_p_application.html</anchorfile>
      <anchor>a733608d4f749a1b3f60b76ce3f60d707</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_bandwidth</name>
      <anchorfile>class_r_t_p_application.html</anchorfile>
      <anchor>a356f3a4db5301bbdf88c4ffddf5f8cd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>_destinationAddress</name>
      <anchorfile>class_r_t_p_application.html</anchorfile>
      <anchor>ad488f240e37858e2fc4519fc6a3c4c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_port</name>
      <anchorfile>class_r_t_p_application.html</anchorfile>
      <anchor>ae035880ebf8b71a1254db9165e5ca053</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_fileName</name>
      <anchorfile>class_r_t_p_application.html</anchorfile>
      <anchor>acda837556c82fd4a2e89dabde98f189d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_payloadType</name>
      <anchorfile>class_r_t_p_application.html</anchorfile>
      <anchor>ae20b262efd41993eae1cb4b3b814c602</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>_sessionEnterDelay</name>
      <anchorfile>class_r_t_p_application.html</anchorfile>
      <anchor>a81954e2436a1ad1c34854021f651052c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>_transmissionStartDelay</name>
      <anchorfile>class_r_t_p_application.html</anchorfile>
      <anchor>a1ed3601f333a8ff5fc30bd8390f92da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>_transmissionStopDelay</name>
      <anchorfile>class_r_t_p_application.html</anchorfile>
      <anchor>a5b8322b2093257fa73f40d9b9b845d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>_sessionLeaveDelay</name>
      <anchorfile>class_r_t_p_application.html</anchorfile>
      <anchor>ad5d32d4eaf850798318d01ac5c826505</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPAVProfile</name>
    <filename>class_r_t_p_a_v_profile.html</filename>
    <base>RTPProfile</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_r_t_p_a_v_profile.html</anchorfile>
      <anchor>a284860e49a143a8013aa767e05603754</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPAVProfilePayload32Receiver</name>
    <filename>class_r_t_p_a_v_profile_payload32_receiver.html</filename>
    <base>RTPPayloadReceiver</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~RTPAVProfilePayload32Receiver</name>
      <anchorfile>class_r_t_p_a_v_profile_payload32_receiver.html</anchorfile>
      <anchor>a37316eaa89cc92e74a640b57153e8347</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_r_t_p_a_v_profile_payload32_receiver.html</anchorfile>
      <anchor>aa5d590b8f6ee7faffe13f2b78a5a867d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPacket</name>
      <anchorfile>class_r_t_p_a_v_profile_payload32_receiver.html</anchorfile>
      <anchor>a1b812ee439284c1dc5b2d3ddc011f26c</anchor>
      <arglist>(RTPPacket *packet)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cQueue *</type>
      <name>_queue</name>
      <anchorfile>class_r_t_p_a_v_profile_payload32_receiver.html</anchorfile>
      <anchor>afbd409f436f2fdf83d9fbafa0668d99a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>_lowestAllowedTimeStamp</name>
      <anchorfile>class_r_t_p_a_v_profile_payload32_receiver.html</anchorfile>
      <anchor>a34eb51fe703de6417c266ef0ecbe4e44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>_highestSequenceNumber</name>
      <anchorfile>class_r_t_p_a_v_profile_payload32_receiver.html</anchorfile>
      <anchor>ab7bac29992b261312bb7031d8c24ca87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPAVProfilePayload32Sender</name>
    <filename>class_r_t_p_a_v_profile_payload32_sender.html</filename>
    <base>RTPPayloadSender</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_r_t_p_a_v_profile_payload32_sender.html</anchorfile>
      <anchor>a659955ebcef6b036f57a503607e6472f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeSenderModule</name>
      <anchorfile>class_r_t_p_a_v_profile_payload32_sender.html</anchorfile>
      <anchor>a8bbc7ffcabe829c7e29e183d422c50cb</anchor>
      <arglist>(RTPInnerPacket *rinpIn)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>sendPacket</name>
      <anchorfile>class_r_t_p_a_v_profile_payload32_sender.html</anchorfile>
      <anchor>abcffc8019d25b3a660220c0759747629</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_initialDelay</name>
      <anchorfile>class_r_t_p_a_v_profile_payload32_sender.html</anchorfile>
      <anchor>adcc1b6856fa7a157967595db4ed37be2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_framesPerSecond</name>
      <anchorfile>class_r_t_p_a_v_profile_payload32_sender.html</anchorfile>
      <anchor>a49e5da6888947911766f3020ea5543ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_frameNumber</name>
      <anchorfile>class_r_t_p_a_v_profile_payload32_sender.html</anchorfile>
      <anchor>a526ed5b166373e08b54a4ed468fbed58</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPInnerPacket</name>
    <filename>class_r_t_p_inner_packet.html</filename>
    <member kind="enumeration">
      <name>RTP_INP_TYPE</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>abaed016d76395b99a11347dd05fd8888</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_UNDEF</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>abaed016d76395b99a11347dd05fd8888ad0ced44087eda2609f5b8a0e70f76cc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_INITIALIZE_PROFILE</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>abaed016d76395b99a11347dd05fd8888aa7f58779082aabfcb98201975f253e23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_PROFILE_INITIALIZED</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>abaed016d76395b99a11347dd05fd8888ae1f78d9bba590a57739a752123e7bf76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_INITIALIZE_RTCP</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>abaed016d76395b99a11347dd05fd8888a5288c999e7efcec542c5a78d3e5133de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_RTCP_INITIALIZED</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>abaed016d76395b99a11347dd05fd8888aa15a0f828a19ab7dcddae100212f0bf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_CREATE_SENDER_MODULE</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>abaed016d76395b99a11347dd05fd8888a39dd32720d5af4d58276b3a596c676e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_SENDER_MODULE_CREATED</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>abaed016d76395b99a11347dd05fd8888ac5968cd92c06811f3a5b6f0ecc3ddfef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_DELETE_SENDER_MODULE</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>abaed016d76395b99a11347dd05fd8888ac2a8241cd4562aaed682eb52d34fa90e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_SENDER_MODULE_DELETED</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>abaed016d76395b99a11347dd05fd8888a5e52b4b7b5fb5a4f208bcc03a638efa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_INITIALIZE_SENDER_MODULE</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>abaed016d76395b99a11347dd05fd8888a43cb0a1732c130c1a459c6693d40a479</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_SENDER_MODULE_INITIALIZED</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>abaed016d76395b99a11347dd05fd8888aa7cdbe45405af9b4532642c98bc45358</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_SENDER_MODULE_CONTROL</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>abaed016d76395b99a11347dd05fd8888afef73ca182e050207a0384b9684dbe3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_SENDER_MODULE_STATUS</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>abaed016d76395b99a11347dd05fd8888acc1668bccb57b68572a99406553db514</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_LEAVE_SESSION</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>abaed016d76395b99a11347dd05fd8888a901b072177df54efe0296f2a3a40e207</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_SESSION_LEFT</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>abaed016d76395b99a11347dd05fd8888a042ac5071dbdc50ce390bdd10ca01194</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_DATA_OUT</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>abaed016d76395b99a11347dd05fd8888ad9e60ccc5022412d2cbbcc82bf78ba67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_DATA_IN</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>abaed016d76395b99a11347dd05fd8888afd9da6decfe75fcbfcfacfc57143adcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTPInnerPacket</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a391466cd2c77ce6ab6dcc238037399a3</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTPInnerPacket</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a9c39be7bf538cb556b8f5194efa45681</anchor>
      <arglist>(const RTPInnerPacket &amp;rinp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTPInnerPacket</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a1b62fca84739b573c79e363af9d970e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTPInnerPacket &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>aa6fd7dc6190ac8c138ea106ca44e3930</anchor>
      <arglist>(const RTPInnerPacket &amp;rinp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RTPInnerPacket *</type>
      <name>dup</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a071d7df7bf5b6a8dd2f2c9ab67cbab65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>ab6b9208d3c88a34412cb43fd073bdcd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a0689d488c47d646cda0b66ff7c9adb47</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeProfile</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a039ffdd52b5e98e12841c9771134e436</anchor>
      <arglist>(int mtu)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>profileInitialized</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a7b3b519afcc4207f39d354a009393938</anchor>
      <arglist>(int rtcpPercentage, int port)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeRTCP</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>adb2bd2c06f8bbec3a7c446514cc370bd</anchor>
      <arglist>(const char *commonName, int mtu, int bandwidth, int rtcpPercentage, IPAddress address, int port)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rtcpInitialized</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a68dbbcee1910c17967f6b5565595860b</anchor>
      <arglist>(uint32 ssrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>createSenderModule</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>ab136d4c72e19a7bb75febbf50cd40837</anchor>
      <arglist>(uint32 ssrc, int payloadType, const char *fileName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleCreated</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a81a31575c8ee1363c0a01e4532d0ba13</anchor>
      <arglist>(uint32 ssrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteSenderModule</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a40fff5a13cca8eaa6419124a586328b3</anchor>
      <arglist>(uint32 ssrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleDeleted</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a552ea3d0e5e2ae274eece44cd28ab12a</anchor>
      <arglist>(uint32 ssrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeSenderModule</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>aba76bd359381ad3f68bc002ca208e1c1</anchor>
      <arglist>(uint32 ssrc, const char *fileName, int mtu)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleInitialized</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a73c5f78d56cca62db49cc6ba54ad524f</anchor>
      <arglist>(uint32 ssrc, int payloadType, int clockRate, int timeStampBase, int sequenceNumberBase)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleControl</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a47657d5f6b0d697802b5687d5509c5b4</anchor>
      <arglist>(uint32 ssrc, RTPSenderControlMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleStatus</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>ad96315d76da3e4068c6107b886884506</anchor>
      <arglist>(uint32 ssrc, RTPSenderStatusMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>leaveSession</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a15cbc79c5a9b381854ed9094d23e6143</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sessionLeft</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a99a575d15fc3f0e38103405b7bf5630a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dataOut</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>ab9905bd890c4a701cd37534645e67feb</anchor>
      <arglist>(RTPPacket *packet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dataIn</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>af7e24e69628c578d2952bd6d92265939</anchor>
      <arglist>(RTPPacket *packet, IPAddress address, int port)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RTP_INP_TYPE</type>
      <name>getType</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a8de46bdf80e04331223d83af5f507d80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getCommonName</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a35bb9c6e60ced0c71eaf49ed8ae5715d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMTU</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>af622535a6cc9b941389bf20845b23290</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getBandwidth</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a8a3a5527f5a42e6a1ccb1cf86c7d55d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRtcpPercentage</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a13da1d6b34e56f32750bea7775160000</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress</type>
      <name>getAddress</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a7c2935515610e3115a422cba8a9b0ae7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPort</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>aaea79a8df1d5041967adde45e2162c69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getSSRC</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a0b2377650bf813c8e0a0bf8bd8711505</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPayloadType</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>ad4097a184e31330e823a97d346221754</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFileName</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a04a6281b1735bf22e9a5dff46681c124</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getClockRate</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>aeea95a47abc9d6f82aa402f55b64424c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTimeStampBase</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a713d7c6f5267b6190000dab770d32706</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSequenceNumberBase</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a43192598ab8517ff98c1cbab4a8785bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RTP_INP_TYPE</type>
      <name>_type</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a258db755328eddfbcf542151527ceb65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_commonName</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a89c20e5afb600314674d6eada18a0dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_mtu</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a85ef5e5e2e0bddcf9a51314a6a2bd031</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_bandwidth</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a541c7d6f462a13015dfe32a1cb857832</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_rtcpPercentage</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a4d40b062f6e851fd81dd48df4a691439</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>_address</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>aeeb006c523869e1239f9bf5c8b9ab498</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_port</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a1be10333d8e93eb1cee9b09ecb1cad46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>_ssrc</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a57d7da48996278bafc2b8c8b0f71ec35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_payloadType</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>adc5c5faae913ecce79a7b059ddceb0d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_fileName</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a6d6a46ef56fad53c58c0e6d6e982f27e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_clockRate</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>aa26b2fbeb17140a431dc057b877e24ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_timeStampBase</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a9a98009b6ecfd0407c5add8578fa8a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_sequenceNumberBase</name>
      <anchorfile>class_r_t_p_inner_packet.html</anchorfile>
      <anchor>a6faf7881b6c382cbb62dfcc5086ce2f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPInterfacePacket</name>
    <filename>class_r_t_p_interface_packet.html</filename>
    <member kind="enumeration">
      <name>RTP_IFP_TYPE</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>af9e9239ab05c1b2f856ddcb7f778919d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_IFP_UNDEF</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>af9e9239ab05c1b2f856ddcb7f778919dadff6051803bfff9e5d82e04bd0f973ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_IFP_ENTER_SESSION</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>af9e9239ab05c1b2f856ddcb7f778919da745956b327e8fcaaf779d85e2c60d026</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_IFP_SESSION_ENTERED</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>af9e9239ab05c1b2f856ddcb7f778919da235bec5a46ece679a9f0197503191d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_IFP_CREATE_SENDER_MODULE</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>af9e9239ab05c1b2f856ddcb7f778919da67ebd9b58e37e87bd916f384096b8934</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_IFP_SENDER_MODULE_CREATED</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>af9e9239ab05c1b2f856ddcb7f778919da3c8312a94e5c7d037d0522f3f37af9af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_IFP_DELETE_SENDER_MODULE</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>af9e9239ab05c1b2f856ddcb7f778919dadeb424a8bc2c8748c649df5029761450</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_IFP_SENDER_MODULE_DELETED</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>af9e9239ab05c1b2f856ddcb7f778919da3329c4c5673c9849a3a8e249ae738670</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_IFP_SENDER_CONTROL</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>af9e9239ab05c1b2f856ddcb7f778919dab35ba5b2e1794c196581076d23066423</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_IFP_SENDER_STATUS</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>af9e9239ab05c1b2f856ddcb7f778919da6581d333865ce8595241c547bbb27215</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_IFP_LEAVE_SESSION</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>af9e9239ab05c1b2f856ddcb7f778919da93d56c38c4819fc437bc2df44fcd5449</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_IFP_SESSION_LEFT</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>af9e9239ab05c1b2f856ddcb7f778919da2178e34fdb4d8e290247730b8beb5f81</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTPInterfacePacket</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>ac5d66a28328f61de9a5dadd82e2d6018</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTPInterfacePacket</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>a589480eb6ff5e5d313790c671478bc96</anchor>
      <arglist>(const RTPInterfacePacket &amp;rifp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTPInterfacePacket</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>af524a3712451d87232b30213f8dd0b84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTPInterfacePacket &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>a11cb7e65a213de188849e8e7176bac52</anchor>
      <arglist>(const RTPInterfacePacket &amp;rifp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RTPInterfacePacket *</type>
      <name>dup</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>a9b8c99fadf7e448f248d7e25393ab6ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>a046fe410135cc56c14d397363fcbb979</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>afd747ae97a9c4585d2956f9c230b207b</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enterSession</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>a87d54446cac4fcd0fac3d4f4f74eecbf</anchor>
      <arglist>(const char *commonName, const char *profileName, int bandwidth, IPAddress destinationAddress, int port)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sessionEntered</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>a1cbe2faa89fc23f6453207fce3f2225a</anchor>
      <arglist>(uint32 ssrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>createSenderModule</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>a8d64447eae1d3a769848d40c540ea887</anchor>
      <arglist>(uint32 ssrc, int payloadType, const char *fileName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleCreated</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>a529710e7fefa261507a853f1a60ab3ea</anchor>
      <arglist>(uint32 ssrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteSenderModule</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>aead7f3094f3a02be5c5deaa661fc3427</anchor>
      <arglist>(uint32 ssrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleDeleted</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>a4c508efd4e5c47ec8f47221c8c0853a8</anchor>
      <arglist>(uint32 ssrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleControl</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>aa2e23347c6ec2e13f48427b22b177605</anchor>
      <arglist>(uint32 ssrc, RTPSenderControlMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleStatus</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>abc9012c4a4e3ad8e2503395ea708c4d9</anchor>
      <arglist>(uint32 ssrc, RTPSenderStatusMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>leaveSession</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>a2f97b4e2c15c69fa198a298af1d5c081</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sessionLeft</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>ab18cc7d18d5c330e67f101c317aa5329</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RTP_IFP_TYPE</type>
      <name>getType</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>a8c0246a4817d40ee0097a952d722ac0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getCommonName</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>ad937b9e9e675957f7f287091f3af6a0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getProfileName</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>a1049f46c79c57b9aabd34ce3c28ddb73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getBandwidth</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>a43af84eccd9d8c1985abdc41fead216a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress</type>
      <name>getDestinationAddress</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>a7ea43d786fec657fee0d6811e27f4649</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPort</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>a547491748934686a7456d84c282b17b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getSSRC</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>a9aade4021df48f073c5ff6317c43d12a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPayloadType</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>abc3d7d5a220a80c07be2e05b505e7ba5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFileName</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>a4c216afb7db603080773b4aa9781b4ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RTP_IFP_TYPE</type>
      <name>_type</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>a701bbafd647de8d6e3af8a3c2ac67f46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_commonName</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>ad722e01c89608243f79615c71fcebc09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_profileName</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>ac369207d432f7f8ed2e7bf9c21b17258</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_bandwidth</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>a955059c4447f8e9c878ea8b6b7cd5214</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>_destinationAddress</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>a9c55d1d10690c61af4b38ade2c421f06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_port</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>a7e3b8015f7ecaaf482fe614e3000fc26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>_ssrc</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>a38a5eeb6143cb332b9a0bfa120ddd4d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_payloadType</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>a31cd18144a8383e01fdefe3e5531fe03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_fileName</name>
      <anchorfile>class_r_t_p_interface_packet.html</anchorfile>
      <anchor>a1cf1872fb954c93601d8cc6d546cb090</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPMpegPacket</name>
    <filename>class_r_t_p_mpeg_packet.html</filename>
    <member kind="function">
      <type></type>
      <name>RTPMpegPacket</name>
      <anchorfile>class_r_t_p_mpeg_packet.html</anchorfile>
      <anchor>a6c0f8783ce5349960b4c8b4d6ff124ce</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTPMpegPacket</name>
      <anchorfile>class_r_t_p_mpeg_packet.html</anchorfile>
      <anchor>aec896aaaf4067dd2eaf153e4c933ece6</anchor>
      <arglist>(const RTPMpegPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTPMpegPacket</name>
      <anchorfile>class_r_t_p_mpeg_packet.html</anchorfile>
      <anchor>a1e8b10069a6ead99c2d25a9f1803d107</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTPMpegPacket &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_t_p_mpeg_packet.html</anchorfile>
      <anchor>a69120eebf73b41abe5f218cd7cba8200</anchor>
      <arglist>(const RTPMpegPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RTPMpegPacket *</type>
      <name>dup</name>
      <anchorfile>class_r_t_p_mpeg_packet.html</anchorfile>
      <anchor>a7b7b12a11daa174d943642bdf258c33d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_r_t_p_mpeg_packet.html</anchorfile>
      <anchor>add1fec2743e93d11aa50c4fa3c8fccd2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_r_t_p_mpeg_packet.html</anchorfile>
      <anchor>aa622bd89a2cc7b578c54895c46bd9517</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getHeaderLength</name>
      <anchorfile>class_r_t_p_mpeg_packet.html</anchorfile>
      <anchor>a75ddfeb67e26be09291e45bca5bdc086</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHeaderLength</name>
      <anchorfile>class_r_t_p_mpeg_packet.html</anchorfile>
      <anchor>a51279cd0dc7e0349820c35860c1bc348</anchor>
      <arglist>(int headerLength_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPayloadLength</name>
      <anchorfile>class_r_t_p_mpeg_packet.html</anchorfile>
      <anchor>a145c28e37d8e8aef2817b91e45538c43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPayloadLength</name>
      <anchorfile>class_r_t_p_mpeg_packet.html</anchorfile>
      <anchor>a1aa7dde4a3272d2e1e3a450556b542aa</anchor>
      <arglist>(int payloadLength_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPictureType</name>
      <anchorfile>class_r_t_p_mpeg_packet.html</anchorfile>
      <anchor>ab97e99d24a52d2b654fef50b6ff864bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPictureType</name>
      <anchorfile>class_r_t_p_mpeg_packet.html</anchorfile>
      <anchor>a40d2e8d1559e2136cad04043f4555b35</anchor>
      <arglist>(int pictureType_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_r_t_p_mpeg_packet.html</anchorfile>
      <anchor>aa80f6742dad6cbb6a32b8f2d6da9c9c6</anchor>
      <arglist>(const RTPMpegPacket &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength_var</name>
      <anchorfile>class_r_t_p_mpeg_packet.html</anchorfile>
      <anchor>ad3cbfdf640c10c7716f8a4ba73148878</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>payloadLength_var</name>
      <anchorfile>class_r_t_p_mpeg_packet.html</anchorfile>
      <anchor>abf305f7d578f7236a62f1963ffb24509</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>pictureType_var</name>
      <anchorfile>class_r_t_p_mpeg_packet.html</anchorfile>
      <anchor>a38422ca371c5f1aa3272e4587218a928</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPPacket</name>
    <filename>class_r_t_p_packet.html</filename>
    <member kind="function">
      <type></type>
      <name>RTPPacket</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>a33e6cc9b754e0dc628002bc3d76018ef</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTPPacket</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>aac63830bcdf123a738ed0001e9c38236</anchor>
      <arglist>(const RTPPacket &amp;packet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTPPacket</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>aeb7b04f72d3576ca312c06e2f85b02a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTPPacket &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>ac72b5377bb4b5b3fa672780e34f6788d</anchor>
      <arglist>(const RTPPacket &amp;packet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RTPPacket *</type>
      <name>dup</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>a0e16f6005db50d5754865b0e69b94f5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>ae710a7d7628ae808265c63f20a86224f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>ad42be2ccfdb7a9d98db6fb16e2a5cca1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMarker</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>ac44098e428c5cb2e451cb3076d57ea92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMarker</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>a50cb863f039b03f20556c4547026d3f5</anchor>
      <arglist>(int marker)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPayloadType</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>a71ea538cc47182b3a1b0e7a55ece94bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPayloadType</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>a9dff9696f62434e9573f4259f3fb455c</anchor>
      <arglist>(int payloadType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint16</type>
      <name>getSequenceNumber</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>afc2b887f2de5633e16efa6b91738a9e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSequenceNumber</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>ad6df737b4f4666bc30d8a1cde4dea9ef</anchor>
      <arglist>(uint16 sequenceNumber)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getTimeStamp</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>a75611b53e5e3e6c8ccc8f0903be7254b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeStamp</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>af1936b430834df4b182f1ed3ee75fb81</anchor>
      <arglist>(uint32 timeStamp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getSSRC</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>a3f12154608f2c3d1a94b3153da23ffd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSSRC</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>a3b48defc5a6375f94dcb3ad389ace59c</anchor>
      <arglist>(uint32 ssrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getHeaderLength</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>a530dda5e7d1a88dbf0a4f0bb31d4bbd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPayloadLength</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>a9565e412f4da0c7fe53c5d714207f7ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getFixedHeaderLength</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>ac4e9f942c71202c5d067a261739857f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_version</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>ad50c71d4719247ef9c92935b39f79df8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_padding</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>a8a46b1a7237873f5589c02c471a8b1de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_extension</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>ab4b3f87c6bdf8e37518f242131ba89a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_csrcCount</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>a77b586ab3492864b5bc877d7f5cd7da0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_marker</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>a2e75d51704828bf1c6cd9f8dc9e6d8f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_payloadType</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>a5bded27a0761f4323980b13778e7a89c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16</type>
      <name>_sequenceNumber</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>a1bdea7bf3ea24f0beec92314f7a3b018</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>_timeStamp</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>a80e736026c9692d6857a5ded93028a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>_ssrc</name>
      <anchorfile>class_r_t_p_packet.html</anchorfile>
      <anchor>a46ab9fa550acdfb28a0a918b8e0fea72</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPParticipantInfo</name>
    <filename>class_r_t_p_participant_info.html</filename>
    <member kind="function">
      <type></type>
      <name>RTPParticipantInfo</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>a80ebae5e2cdcb0968e37e6b36d0db818</anchor>
      <arglist>(uint32 ssrc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTPParticipantInfo</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>a29a2ab69181889097b3e82b7be5efedb</anchor>
      <arglist>(const RTPParticipantInfo &amp;participantInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTPParticipantInfo</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>a7d99bd21e1e723c854a0212f2adf2ef8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTPParticipantInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>a1a820b1321a039989961161b1242b523</anchor>
      <arglist>(const RTPParticipantInfo &amp;participantInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RTPParticipantInfo *</type>
      <name>dup</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>af4de2e84475873ba243af455f471d9f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processRTPPacket</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>a885542e6091b42105033ae66d7850d91</anchor>
      <arglist>(RTPPacket *packet, int id, simtime_t arrivalTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processSenderReport</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>a74e5147325d35ecec0daeb69a90a72cd</anchor>
      <arglist>(SenderReport *report, simtime_t arrivalTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processReceptionReport</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>a7b3d55bdda9299440365ca27f590737d</anchor>
      <arglist>(ReceptionReport *report, simtime_t arrivalTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processSDESChunk</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>a67a2ca840ffebca6ffb064ad16bc37b2</anchor>
      <arglist>(SDESChunk *sdesChunk, simtime_t arrivalTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SDESChunk *</type>
      <name>getSDESChunk</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>a2b2c35d6ba75ce5c6de079dc4cc64aa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSDESItem</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>a77ca14d2ef8a28b1e7725f2923902dae</anchor>
      <arglist>(SDESItem *sdesItem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ReceptionReport *</type>
      <name>receptionReport</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>a4c72efe623a67ccd720be4671aeca64f</anchor>
      <arglist>(simtime_t now)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SenderReport *</type>
      <name>senderReport</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>ae0e3a4cceda6ec45cc6a1235d6ec1619</anchor>
      <arglist>(simtime_t now)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nextInterval</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>adf514b2c4e9d39b048c04ea352858730</anchor>
      <arglist>(simtime_t now)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>toBeDeleted</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>a0d06aeea1debd1107de412d3778b7993</anchor>
      <arglist>(simtime_t now)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSender</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>a45525d038fe36283e57c9be39804120b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getSSRC</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>aa571cb44afcaac38d9d91cb678b229c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSSRC</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>a7177dc7905b7c1c5daab5f57f0b1c90a</anchor>
      <arglist>(uint32 ssrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress</type>
      <name>getAddress</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>a8706e6bf55147488badf1a4fe0e01fba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>abcc22ceeee417b82cf689bb19e88bccc</anchor>
      <arglist>(IPAddress address)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRTPPort</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>a6a5c1784bca7d27be46ad8a6f6542357</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRTPPort</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>ad6e2ee4a5e394d640e69327a1f724996</anchor>
      <arglist>(int rtpPort)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRTCPPort</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>ab7eb326d3ca3fd7169b1c0f62b7ead4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRTCPPort</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>a66d287cf74135ee0080072d3716f06b8</anchor>
      <arglist>(int rtpPort)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>a528e6113ece79cb08f6194321e1943e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char *</type>
      <name>ssrcToName</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>aadc8ba99aff7c392738703dc4a8c4797</anchor>
      <arglist>(uint32 ssrc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addSDESItem</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>a1fc492e8757ead20f24b65149355dd53</anchor>
      <arglist>(SDESItem::SDES_ITEM_TYPE type, const char *content)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SDESChunk *</type>
      <name>_sdesChunk</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>ac2c1f06d1dca0da971167b65ff0ad2b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>_address</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>a2425ff45083a4634c4a575fc1142ff73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_rtpPort</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>a7b9520830a99eec72b6969e5046dbae8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_rtcpPort</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>a0288aba0165d22666ddff68f33ec04b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_silentIntervals</name>
      <anchorfile>class_r_t_p_participant_info.html</anchorfile>
      <anchor>a1c7826da426167f50d583b064c333ef2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPPayloadReceiver</name>
    <filename>class_r_t_p_payload_receiver.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~RTPPayloadReceiver</name>
      <anchorfile>class_r_t_p_payload_receiver.html</anchorfile>
      <anchor>a0e4e7f3fb55fe3689ade3797118e1ee3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_r_t_p_payload_receiver.html</anchorfile>
      <anchor>a5603eb1ef183203fbc320410806320b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_r_t_p_payload_receiver.html</anchorfile>
      <anchor>ab9c0f56aac2457b5ca2b6e86d0c46e6f</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPacket</name>
      <anchorfile>class_r_t_p_payload_receiver.html</anchorfile>
      <anchor>ab229dba94a3145cf424c8d62b4c0b60e</anchor>
      <arglist>(RTPPacket *packet)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>openOutputFile</name>
      <anchorfile>class_r_t_p_payload_receiver.html</anchorfile>
      <anchor>a9fb3f2d834b4acdec9092657e6472b91</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>closeOutputFile</name>
      <anchorfile>class_r_t_p_payload_receiver.html</anchorfile>
      <anchor>a89156ad135703f730c44d47fa062562b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ofstream</type>
      <name>_outputFileStream</name>
      <anchorfile>class_r_t_p_payload_receiver.html</anchorfile>
      <anchor>a3f8fce923878655c4e402876668c02fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ofstream</type>
      <name>_outputLogLoss</name>
      <anchorfile>class_r_t_p_payload_receiver.html</anchorfile>
      <anchor>a427edf16abb296b73ac3f8ee6ed41c39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_payloadType</name>
      <anchorfile>class_r_t_p_payload_receiver.html</anchorfile>
      <anchor>a704892143f6b872017557a0374264ba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>_packetArrival</name>
      <anchorfile>class_r_t_p_payload_receiver.html</anchorfile>
      <anchor>a4884d7f881c16a8fa981baaf969a533a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPPayloadSender</name>
    <filename>class_r_t_p_payload_sender.html</filename>
    <member kind="enumeration">
      <name>SenderStatus</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>ac59256e616e553048c7fadfae798933d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STOPPED</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>ac59256e616e553048c7fadfae798933da270de7595d9590d548963a3ab8dbb8f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PLAYING</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>ac59256e616e553048c7fadfae798933dabc5a7b0a6d991ffde3d9c678d7d2b700</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTPPayloadSender</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>a6990d34d13be7e9851d6341d251e6c22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTPPayloadSender</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>a86725b3d955310caffe95170e482fffe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>a3d89be915b854cf2655a68c68cec0ba1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activity</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>a31653f5519ad70937f044eecba57ecac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeSenderModule</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>a1f8653338d14096e4296243ab0821ff1</anchor>
      <arglist>(RTPInnerPacket *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>openSourceFile</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>acdd1e2f6a2e8a17cdb576aa86168292a</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>closeSourceFile</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>a578ae414c38747252b0cfc7d717deb2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>play</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>a9538606bf2b0d873cd0a0cd7754f7ce9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>playUntilTime</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>aa5c19f1b88c1e88f0eeb42fc486471b3</anchor>
      <arglist>(simtime_t moment)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>playUntilByte</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>a4ce92002f68b9a5308df0a269ac95246</anchor>
      <arglist>(int position)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>pause</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>a1076c39c68c6583d224af968c840acc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>seekTime</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>a1192ffd879c11dc9a881d6b28929df9e</anchor>
      <arglist>(simtime_t moment)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>seekByte</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>a11612dd7a6cda674f8d79a8cdf2d8b5c</anchor>
      <arglist>(int position)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>ad9cd79ff818c987d07c1f21b70678588</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>endOfFile</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>aa8d3c549b50edb6e9c17db691d7e726e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>sendPacket</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>a3738b1a68ff9929c50fd798a74ee8b54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ifstream</type>
      <name>_inputFileStream</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>aabee3f800e5e676d2b297ff6a571c259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_mtu</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>a32ec374991c6a22751fac7db79a3f465</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>_ssrc</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>a98d0eb2439d2eab6606741445590b513</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_payloadType</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>a39af1b84253a34a9903f9c718bd66b1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_clockRate</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>a8674ccb970be216091f20e60c41c9e9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>_timeStampBase</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>aaa174d6ff76832088142302de2e7deb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>_timeStamp</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>a0ac319d6695cad406c6ecda2a0b4c27c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16</type>
      <name>_sequenceNumberBase</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>a8d2e99636e2bb7baee5e468b1e3c2a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16</type>
      <name>_sequenceNumber</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>aa640a9b2867c042f2cc48f0f9489e870</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SenderStatus</type>
      <name>_status</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>a881b74af0edb1793055bcd1a2912c4ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>_reminderMessage</name>
      <anchorfile>class_r_t_p_payload_sender.html</anchorfile>
      <anchor>a7dfada70b7fab61bcf43dcf687e506d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPProfile</name>
    <filename>class_r_t_p_profile.html</filename>
    <class kind="class">RTPProfile::SSRCGate</class>
    <member kind="function">
      <type></type>
      <name>RTPProfile</name>
      <anchorfile>class_r_t_p_profile.html</anchorfile>
      <anchor>ac6cbc428dfd87cac4fb500947367c79f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_r_t_p_profile.html</anchorfile>
      <anchor>ad1dcdc538ffd41da0fb583493d053563</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~RTPProfile</name>
      <anchorfile>class_r_t_p_profile.html</anchorfile>
      <anchor>a3ea355737d0c82566d64aa56e5d10ac4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_r_t_p_profile.html</anchorfile>
      <anchor>a366a2775e806806662a9fc3e7f6760ce</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessageFromRTP</name>
      <anchorfile>class_r_t_p_profile.html</anchorfile>
      <anchor>af98f35598d60a25ae9706a851b2ea20b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessageFromPayloadSender</name>
      <anchorfile>class_r_t_p_profile.html</anchorfile>
      <anchor>a722e66b0071b4e615d6833d93fb16dcd</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessageFromPayloadReceiver</name>
      <anchorfile>class_r_t_p_profile.html</anchorfile>
      <anchor>a6a7e9dd452d86298016515aff8ce4de3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeProfile</name>
      <anchorfile>class_r_t_p_profile.html</anchorfile>
      <anchor>a26fe2d5ac389602484360c4ae5a62fb8</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>createSenderModule</name>
      <anchorfile>class_r_t_p_profile.html</anchorfile>
      <anchor>ac55a295bec1621301238be1257e43069</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteSenderModule</name>
      <anchorfile>class_r_t_p_profile.html</anchorfile>
      <anchor>ab343e6cb950fcef8427e81e2ddcdcebe</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleControl</name>
      <anchorfile>class_r_t_p_profile.html</anchorfile>
      <anchor>adfa52a4657ddc268ea7d46699376a60c</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>dataIn</name>
      <anchorfile>class_r_t_p_profile.html</anchorfile>
      <anchor>a4e6ede77fe9cfd2f2f4b041069a05b72</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleInitialized</name>
      <anchorfile>class_r_t_p_profile.html</anchorfile>
      <anchor>a66a640c0dc518fb4f8ecc20d78e4af79</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleStatus</name>
      <anchorfile>class_r_t_p_profile.html</anchorfile>
      <anchor>acdd41de37ebd65413b9bc7ecdd77bdb7</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>dataOut</name>
      <anchorfile>class_r_t_p_profile.html</anchorfile>
      <anchor>ace677238b86673b1b08cc0f581dbf359</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processIncomingPacket</name>
      <anchorfile>class_r_t_p_profile.html</anchorfile>
      <anchor>ac2f7ba01a34531a27874f1d5c170de0b</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processOutgoingPacket</name>
      <anchorfile>class_r_t_p_profile.html</anchorfile>
      <anchor>a5e1b10a46dfde95414f58bd61a6ddc92</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SSRCGate *</type>
      <name>findSSRCGate</name>
      <anchorfile>class_r_t_p_profile.html</anchorfile>
      <anchor>a742cb3fdb249d0b664cdf3fffed12f01</anchor>
      <arglist>(uint32 ssrc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SSRCGate *</type>
      <name>newSSRCGate</name>
      <anchorfile>class_r_t_p_profile.html</anchorfile>
      <anchor>a2ad378749c1f5cf96a982b3601e5c565</anchor>
      <arglist>(uint32 ssrc)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_profileName</name>
      <anchorfile>class_r_t_p_profile.html</anchorfile>
      <anchor>aaeb4283e0309c0b6c9957476c9f895a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_maxReceivers</name>
      <anchorfile>class_r_t_p_profile.html</anchorfile>
      <anchor>a2191aad02f7be47356d96645088a4746</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cArray *</type>
      <name>_ssrcGates</name>
      <anchorfile>class_r_t_p_profile.html</anchorfile>
      <anchor>abef1ddbd1d8b483d960a181d0c739fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_rtcpPercentage</name>
      <anchorfile>class_r_t_p_profile.html</anchorfile>
      <anchor>a854c83b19a9e3f26c524de8bef675f91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_preferredPort</name>
      <anchorfile>class_r_t_p_profile.html</anchorfile>
      <anchor>a5bffaf52b0530f4f830914d7880c7690</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_mtu</name>
      <anchorfile>class_r_t_p_profile.html</anchorfile>
      <anchor>a6b28967e71f14e75f5f3d75510e4b88e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_autoOutputFileNames</name>
      <anchorfile>class_r_t_p_profile.html</anchorfile>
      <anchor>a75f9767778cecdca9352a1ede4d0263e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPProfile::SSRCGate</name>
    <filename>class_r_t_p_profile_1_1_s_s_r_c_gate.html</filename>
    <member kind="function">
      <type></type>
      <name>SSRCGate</name>
      <anchorfile>class_r_t_p_profile_1_1_s_s_r_c_gate.html</anchorfile>
      <anchor>ae775f37a826e7b24133d2659da33a1a5</anchor>
      <arglist>(uint32 ssrc=0)</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getSSRC</name>
      <anchorfile>class_r_t_p_profile_1_1_s_s_r_c_gate.html</anchorfile>
      <anchor>ae3546ebe1f0bc2bb71d364eac5b4e59d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSSRC</name>
      <anchorfile>class_r_t_p_profile_1_1_s_s_r_c_gate.html</anchorfile>
      <anchor>a6b964a719bcb7b736b41444c2481968c</anchor>
      <arglist>(uint32 ssrc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGateId</name>
      <anchorfile>class_r_t_p_profile_1_1_s_s_r_c_gate.html</anchorfile>
      <anchor>aa034d0ac36ae3eec5c3e8850eec43bc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGateId</name>
      <anchorfile>class_r_t_p_profile_1_1_s_s_r_c_gate.html</anchorfile>
      <anchor>a10d5dc130bacf4316a80e5e8e93552d3</anchor>
      <arglist>(int gateId)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>ssrc</name>
      <anchorfile>class_r_t_p_profile_1_1_s_s_r_c_gate.html</anchorfile>
      <anchor>a6b72188ba2fcfa8947d84509c969f125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>gateId</name>
      <anchorfile>class_r_t_p_profile_1_1_s_s_r_c_gate.html</anchorfile>
      <anchor>a32f254866b43bbab962e7afe0bbf7dd4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPReceiverInfo</name>
    <filename>class_r_t_p_receiver_info.html</filename>
    <base>RTPParticipantInfo</base>
    <member kind="function">
      <type></type>
      <name>RTPReceiverInfo</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>a2f201fa43acd865ce2544813e66b7a44</anchor>
      <arglist>(uint32 ssrc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTPReceiverInfo</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>a207c7d7ab00c70394f2dc9466128a8ce</anchor>
      <arglist>(const RTPReceiverInfo &amp;receiverInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTPReceiverInfo</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>a2b3325d99f60226266559e5e7dbe349e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTPReceiverInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>a2f6c18805e0b7a0bfcee885bb3d37f70</anchor>
      <arglist>(const RTPReceiverInfo &amp;receiverInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RTPReceiverInfo *</type>
      <name>dup</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>a5b7b6b275228fb81643ee180fcf95248</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processRTPPacket</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>a6e2e484159d1e84c5d2ef6bc78ea8806</anchor>
      <arglist>(RTPPacket *packet, int id, simtime_t arrivalTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processSenderReport</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>a9962e27dc5bb51cc35be407f43ebf5e6</anchor>
      <arglist>(SenderReport *report, simtime_t arrivalTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processSDESChunk</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>a9ed393939a7bf214c40dd55dea3aff18</anchor>
      <arglist>(SDESChunk *sdesChunk, simtime_t arrivalTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ReceptionReport *</type>
      <name>receptionReport</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>a5024f3e272c8e1fe335bc76eea473b50</anchor>
      <arglist>(simtime_t now)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nextInterval</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>a480d67cdfdabd5ffe52b37d0c05dc55b</anchor>
      <arglist>(simtime_t now)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isActive</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>a9211e9cf6075530a668209b5f0798179</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>aa884a5cedb16086387e0186e3103f56f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>toBeDeleted</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>a7b5b17d3b9e3c2aefc61d75ce3a658fd</anchor>
      <arglist>(simtime_t now)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16</type>
      <name>_sequenceNumberBase</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>a86274a930bb9455e4e37caed058201d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16</type>
      <name>_highestSequenceNumber</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>a46b0fbeed5a0aac1e731ababfd04dfc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>_highestSequenceNumberPrior</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>ae8d5b5e44a9579ac1a70ac5fba2b7a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>_sequenceNumberCycles</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>a9fa3c0e6b8dbcbec118c0039b5114ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>_packetsReceived</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>a38d429103273485dc3895d6709e9481f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>_packetsReceivedPrior</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>ad0103b1a567b4063d2f57afa272f1208</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>_jitter</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>ac5b6f8aec4308a706ed571b569983f43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>_jitterOutVector</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>af9ce8a16d0a17c42c144f79d15c472c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>_packetLostOutVector</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>a53ba239449c4c9fc5e2995feb54b9ca1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_clockRate</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>ac5f7ab88a9adb8cf489ea3ec8990f904</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>_lastSenderReportRTPTimeStamp</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>a4f45332a1068e28a178e015eda692cd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint64</type>
      <name>_lastSenderReportNTPTimeStamp</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>ae830e36140c32b9e1731712b6b2f7499</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>_lastPacketRTPTimeStamp</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>a7a5725d5e96711d8adfdc6838329d85f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>_lastPacketArrivalTime</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>a8a9dcd5399aeaee962f7e5ee94d01d35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>_lastSenderReportArrivalTime</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>a4f675ba1a4ef2be5545f0dab84abd7cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_inactiveIntervals</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>a37fab375fb84b73a676241b06988e4c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>_startOfInactivity</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>a295db577b7f76307afe717c7d9a2c199</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_itemsReceived</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>ae5a89bdec03b463af11fa01c75d22fd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>packetLoss</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>a2ce4ced04c38b7f7a47d0a8b7a0529b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FILE *</type>
      <name>packetSequenceLostLogFile</name>
      <anchorfile>class_r_t_p_receiver_info.html</anchorfile>
      <anchor>adbb95410f0a09437a2809aabb160d29f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPSenderControlMessage</name>
    <filename>class_r_t_p_sender_control_message.html</filename>
    <member kind="function">
      <type></type>
      <name>RTPSenderControlMessage</name>
      <anchorfile>class_r_t_p_sender_control_message.html</anchorfile>
      <anchor>af5efc9ed579f27ca1b0436d73f935680</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTPSenderControlMessage</name>
      <anchorfile>class_r_t_p_sender_control_message.html</anchorfile>
      <anchor>a5fd4b83e75ef60f5967a37be55fbc2d6</anchor>
      <arglist>(const RTPSenderControlMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTPSenderControlMessage</name>
      <anchorfile>class_r_t_p_sender_control_message.html</anchorfile>
      <anchor>af3267ac4c5e783a2ab12f25a7a61fbda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTPSenderControlMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_t_p_sender_control_message.html</anchorfile>
      <anchor>aab6d854aa5d7c44f2554d7f3c7f73ecd</anchor>
      <arglist>(const RTPSenderControlMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RTPSenderControlMessage *</type>
      <name>dup</name>
      <anchorfile>class_r_t_p_sender_control_message.html</anchorfile>
      <anchor>ad889f456a7bb7fc0d799b134476aa707</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_r_t_p_sender_control_message.html</anchorfile>
      <anchor>ac5d8518c57c7c337a8bb1de6a22bb642</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_r_t_p_sender_control_message.html</anchorfile>
      <anchor>ad06f64c10ebb6f503abf82527e459430</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getCommand</name>
      <anchorfile>class_r_t_p_sender_control_message.html</anchorfile>
      <anchor>a3c1c39eadad529ddb8b5f18d9c0bf24b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchorfile>class_r_t_p_sender_control_message.html</anchorfile>
      <anchor>a7cbc6e583f7f8cbc9c9258ee911c1ad7</anchor>
      <arglist>(const char *command_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getCommandParameter1</name>
      <anchorfile>class_r_t_p_sender_control_message.html</anchorfile>
      <anchor>a0fbb12b5d3b69b9c3c2e8d54e872616b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommandParameter1</name>
      <anchorfile>class_r_t_p_sender_control_message.html</anchorfile>
      <anchor>ac03c7900d7110440f1e59dec73b0d20e</anchor>
      <arglist>(float commandParameter1_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getCommandParameter2</name>
      <anchorfile>class_r_t_p_sender_control_message.html</anchorfile>
      <anchor>a11dec23dd234e87e05a4b3571a8d7db8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommandParameter2</name>
      <anchorfile>class_r_t_p_sender_control_message.html</anchorfile>
      <anchor>a98a4a098b68dc4906db26ca735760c0a</anchor>
      <arglist>(float commandParameter2_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_r_t_p_sender_control_message.html</anchorfile>
      <anchor>a43b00ad2ce6f805a092d89d92895cf84</anchor>
      <arglist>(const RTPSenderControlMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>command_var</name>
      <anchorfile>class_r_t_p_sender_control_message.html</anchorfile>
      <anchor>adf7626ca62ba383dfae21fac60314a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>commandParameter1_var</name>
      <anchorfile>class_r_t_p_sender_control_message.html</anchorfile>
      <anchor>a8e93d2e2ad53edbf286a99c1f7979f4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>commandParameter2_var</name>
      <anchorfile>class_r_t_p_sender_control_message.html</anchorfile>
      <anchor>ac57a30ec5edeea5c2aa40e110dab307e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPSenderInfo</name>
    <filename>class_r_t_p_sender_info.html</filename>
    <base>RTPParticipantInfo</base>
    <member kind="function">
      <type></type>
      <name>RTPSenderInfo</name>
      <anchorfile>class_r_t_p_sender_info.html</anchorfile>
      <anchor>a60b413e48de8191569b1c92b0593976b</anchor>
      <arglist>(uint32 ssrc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTPSenderInfo</name>
      <anchorfile>class_r_t_p_sender_info.html</anchorfile>
      <anchor>a8d6efaf7a06bd1870c15cfa76bdf38a1</anchor>
      <arglist>(const RTPSenderInfo &amp;senderInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTPSenderInfo</name>
      <anchorfile>class_r_t_p_sender_info.html</anchorfile>
      <anchor>af5249637abda1562dfc04025184976f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTPSenderInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_t_p_sender_info.html</anchorfile>
      <anchor>a6d32ae0fca829ce0f5113014d8563bc0</anchor>
      <arglist>(const RTPSenderInfo &amp;senderInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RTPSenderInfo *</type>
      <name>dup</name>
      <anchorfile>class_r_t_p_sender_info.html</anchorfile>
      <anchor>a530fbd25ed0a73a247312ce61285e7c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processRTPPacket</name>
      <anchorfile>class_r_t_p_sender_info.html</anchorfile>
      <anchor>a70690a4364d8ac55b306f79f0b2cf834</anchor>
      <arglist>(RTPPacket *packet, int id, simtime_t arrivalTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processReceptionReport</name>
      <anchorfile>class_r_t_p_sender_info.html</anchorfile>
      <anchor>a3b4091b1a8649503067aafecbe07199c</anchor>
      <arglist>(ReceptionReport *report, simtime_t arrivalTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SenderReport *</type>
      <name>senderReport</name>
      <anchorfile>class_r_t_p_sender_info.html</anchorfile>
      <anchor>ad3adce49b84ea2ac18f4e1b8aa599904</anchor>
      <arglist>(simtime_t now)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStartTime</name>
      <anchorfile>class_r_t_p_sender_info.html</anchorfile>
      <anchor>ac4ce23ce45b86179cd97e47bfe0dffcf</anchor>
      <arglist>(simtime_t startTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setClockRate</name>
      <anchorfile>class_r_t_p_sender_info.html</anchorfile>
      <anchor>a92394f8ef91777fcf18fdde60d639f6a</anchor>
      <arglist>(int clockRate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeStampBase</name>
      <anchorfile>class_r_t_p_sender_info.html</anchorfile>
      <anchor>a1a19d4b88512c9065930fa49f9640da7</anchor>
      <arglist>(uint32 timeStampBase)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSequenceNumberBase</name>
      <anchorfile>class_r_t_p_sender_info.html</anchorfile>
      <anchor>ae8a19011c7e314e1a6f50f2536e29039</anchor>
      <arglist>(uint16 sequenceNumberBase)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>toBeDeleted</name>
      <anchorfile>class_r_t_p_sender_info.html</anchorfile>
      <anchor>a53c7667136814f2200c5460a8ceb26fc</anchor>
      <arglist>(simtime_t now)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>_startTime</name>
      <anchorfile>class_r_t_p_sender_info.html</anchorfile>
      <anchor>aff22aa1612b17b0d2bb6037466596969</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_clockRate</name>
      <anchorfile>class_r_t_p_sender_info.html</anchorfile>
      <anchor>ac2d52fee887ed78f5d8bf52507f47e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>_timeStampBase</name>
      <anchorfile>class_r_t_p_sender_info.html</anchorfile>
      <anchor>a3e375087d5b6605f343c372a7feefe11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16</type>
      <name>_sequenceNumberBase</name>
      <anchorfile>class_r_t_p_sender_info.html</anchorfile>
      <anchor>a41864e6a50a7ae0c6c2ba3c4455aaecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>_packetsSent</name>
      <anchorfile>class_r_t_p_sender_info.html</anchorfile>
      <anchor>ae12b15d85d599578b34676615e17ce6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>_bytesSent</name>
      <anchorfile>class_r_t_p_sender_info.html</anchorfile>
      <anchor>a475eafc042aab99bfe484cdd1ed172b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPSenderStatusMessage</name>
    <filename>class_r_t_p_sender_status_message.html</filename>
    <member kind="function">
      <type></type>
      <name>RTPSenderStatusMessage</name>
      <anchorfile>class_r_t_p_sender_status_message.html</anchorfile>
      <anchor>a3e91d6e26a01f00bd2527b95ae502226</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTPSenderStatusMessage</name>
      <anchorfile>class_r_t_p_sender_status_message.html</anchorfile>
      <anchor>a43bebb8691c707bad98202022c6c19f5</anchor>
      <arglist>(const RTPSenderStatusMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTPSenderStatusMessage</name>
      <anchorfile>class_r_t_p_sender_status_message.html</anchorfile>
      <anchor>a0d73aa2573128051468e9787fde951ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTPSenderStatusMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>class_r_t_p_sender_status_message.html</anchorfile>
      <anchor>a5a4c9e7fb3929c2ee0956e10931cdfef</anchor>
      <arglist>(const RTPSenderStatusMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RTPSenderStatusMessage *</type>
      <name>dup</name>
      <anchorfile>class_r_t_p_sender_status_message.html</anchorfile>
      <anchor>aeb1fe5fcd6e6dade1de72425c1a569b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_r_t_p_sender_status_message.html</anchorfile>
      <anchor>a131c391144a5093648bb2cb6d054f951</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_r_t_p_sender_status_message.html</anchorfile>
      <anchor>a1daa510f1a8299d69c632d493af26631</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getStatus</name>
      <anchorfile>class_r_t_p_sender_status_message.html</anchorfile>
      <anchor>a1f64151911f73da9e734fe02c0016aae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStatus</name>
      <anchorfile>class_r_t_p_sender_status_message.html</anchorfile>
      <anchor>aa699d4f7ad2adc2420a232b96ec4de42</anchor>
      <arglist>(const char *status_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getTimeStamp</name>
      <anchorfile>class_r_t_p_sender_status_message.html</anchorfile>
      <anchor>a0d5f61ccf914ffd918af9b1cba8c03da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeStamp</name>
      <anchorfile>class_r_t_p_sender_status_message.html</anchorfile>
      <anchor>a3885aa0d08cf4e404124804ef8ead379</anchor>
      <arglist>(uint32 timeStamp_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_r_t_p_sender_status_message.html</anchorfile>
      <anchor>ac22384ec101a3e03f5159fedc420d753</anchor>
      <arglist>(const RTPSenderStatusMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>status_var</name>
      <anchorfile>class_r_t_p_sender_status_message.html</anchorfile>
      <anchor>a56cb6299c8c7bf3720722f3235b609ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>timeStamp_var</name>
      <anchorfile>class_r_t_p_sender_status_message.html</anchorfile>
      <anchor>a291e6fc66ae401c0014ae40d9d932ed5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sack</name>
    <filename>class_sack.html</filename>
    <member kind="function">
      <type></type>
      <name>Sack</name>
      <anchorfile>class_sack.html</anchorfile>
      <anchor>a9e6d4e0b21c6b7d8bbae2e2752c84100</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sack</name>
      <anchorfile>class_sack.html</anchorfile>
      <anchor>afdfbd36b6197fcdc5f646f1f5e4629e5</anchor>
      <arglist>(const Sack &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Sack</name>
      <anchorfile>class_sack.html</anchorfile>
      <anchor>a6d98812065f85b52f2514d26011df086</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Sack &amp;</type>
      <name>operator=</name>
      <anchorfile>class_sack.html</anchorfile>
      <anchor>a8f12be55cb6e51036f4b8bb205635ea6</anchor>
      <arglist>(const Sack &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Sack *</type>
      <name>dup</name>
      <anchorfile>class_sack.html</anchorfile>
      <anchor>aeb8184954ee5d00cbe2e25c5794dc880</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_sack.html</anchorfile>
      <anchor>a4871ba9a848f586aeba220dc8faef896</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_sack.html</anchorfile>
      <anchor>aecf074b8da263f13d05b1e82ecdd655b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getStart</name>
      <anchorfile>class_sack.html</anchorfile>
      <anchor>af78da6f09ec4b292da4c5231982bc013</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStart</name>
      <anchorfile>class_sack.html</anchorfile>
      <anchor>a1b55a1f0609ee10fa7c92167756fa591</anchor>
      <arglist>(unsigned int start_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getEnd</name>
      <anchorfile>class_sack.html</anchorfile>
      <anchor>a2f44a62273de5ca6a561ed6caf66e229</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEnd</name>
      <anchorfile>class_sack.html</anchorfile>
      <anchor>ae1479a704dcc04eeb0d34a0dddaa6912</anchor>
      <arglist>(unsigned int end_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_sack.html</anchorfile>
      <anchor>ae5b3e54895dfc397e416bf3456bb54e4</anchor>
      <arglist>(const Sack &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>start_var</name>
      <anchorfile>class_sack.html</anchorfile>
      <anchor>ac2daecdb5eed9d0cc76785f40faf4e91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>end_var</name>
      <anchorfile>class_sack.html</anchorfile>
      <anchor>a804fc7306ec3db892f507ed8dd1be59a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sack_chunk</name>
    <filename>structsack__chunk.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>structsack__chunk.html</anchorfile>
      <anchor>a0bb3cad3f993ef45e8dd1de7c87ae953</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>flags</name>
      <anchorfile>structsack__chunk.html</anchorfile>
      <anchor>a1796cf55471fa712278d88a638d5c40b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>structsack__chunk.html</anchorfile>
      <anchor>a0c5e6706378f33c5e88976e7877d5523</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>cum_tsn_ack</name>
      <anchorfile>structsack__chunk.html</anchorfile>
      <anchor>a4db585b4321d21436be493357fa5efa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>a_rwnd</name>
      <anchorfile>structsack__chunk.html</anchorfile>
      <anchor>aa53e3113c6485c12ad50096f344be4fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>nr_of_gaps</name>
      <anchorfile>structsack__chunk.html</anchorfile>
      <anchor>a21c133d1a8b96986e4468232c614247d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>nr_of_dups</name>
      <anchorfile>structsack__chunk.html</anchorfile>
      <anchor>a69d694e381c60f23b2d44c30b6f02387</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>tsns</name>
      <anchorfile>structsack__chunk.html</anchorfile>
      <anchor>a4cc9e145452fe85f1af6af00b93aae1e</anchor>
      <arglist>[0]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sack_duptsn</name>
    <filename>structsack__duptsn.html</filename>
    <member kind="variable">
      <type>unsigned int</type>
      <name>tsn</name>
      <anchorfile>structsack__duptsn.html</anchorfile>
      <anchor>a8be1bd2cc646cff55b687eda490ef2eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sack_gap</name>
    <filename>structsack__gap.html</filename>
    <member kind="variable">
      <type>unsigned short</type>
      <name>start</name>
      <anchorfile>structsack__gap.html</anchorfile>
      <anchor>ae4a2b3b2f4ce1bdc8646b2345cda2f34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>stop</name>
      <anchorfile>structsack__gap.html</anchorfile>
      <anchor>ad96db167c3efaf6d153423d9bdcc634c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScenarioManager</name>
    <filename>class_scenario_manager.html</filename>
    <member kind="function">
      <type></type>
      <name>ScenarioManager</name>
      <anchorfile>class_scenario_manager.html</anchorfile>
      <anchor>a970edeea2bd815084008f15c11d1bf9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>getRequiredAttribute</name>
      <anchorfile>class_scenario_manager.html</anchorfile>
      <anchor>af22ea8634761dfe326f2e2f64e7af1cf</anchor>
      <arglist>(cXMLElement *node, const char *attr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getRequiredModule</name>
      <anchorfile>class_scenario_manager.html</anchorfile>
      <anchor>a9522f32e03fbe6a08f8d38ed935d13d9</anchor>
      <arglist>(cXMLElement *node, const char *attr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>getRequiredGate</name>
      <anchorfile>class_scenario_manager.html</anchorfile>
      <anchor>a139bbb4e2b05debbef02ce75f430b83a</anchor>
      <arglist>(cXMLElement *node, const char *modattr, const char *gateattr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processCommand</name>
      <anchorfile>class_scenario_manager.html</anchorfile>
      <anchor>acc065e400b0de507b30122d476b372ed</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processAtCommand</name>
      <anchorfile>class_scenario_manager.html</anchorfile>
      <anchor>a7d14dc157d15b0ab2c989befeb046670</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processSetParamCommand</name>
      <anchorfile>class_scenario_manager.html</anchorfile>
      <anchor>ad13f90ea13807abc8f8cd1fca0fb5a92</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processSetChannelAttrCommand</name>
      <anchorfile>class_scenario_manager.html</anchorfile>
      <anchor>aaab0fceb5fedcad85b2ad007368dd92a</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processCreateModuleCommand</name>
      <anchorfile>class_scenario_manager.html</anchorfile>
      <anchor>a6eaba531bf86a3ec9e8994b63d2d3499</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processDeleteModuleCommand</name>
      <anchorfile>class_scenario_manager.html</anchorfile>
      <anchor>ad2f6d58e59e14cf438ba836207ea11a9</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processConnectCommand</name>
      <anchorfile>class_scenario_manager.html</anchorfile>
      <anchor>a52889ace678a37df673a10648f642780</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processDisconnectCommand</name>
      <anchorfile>class_scenario_manager.html</anchorfile>
      <anchor>aa18e1699ba27aaaf08f3714c7eaf4969</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processModuleSpecificCommand</name>
      <anchorfile>class_scenario_manager.html</anchorfile>
      <anchor>a897a013b81e99d9dc039674a4de84c5b</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_scenario_manager.html</anchorfile>
      <anchor>a79427e77631d1bf670e7f7fbcd586af4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_scenario_manager.html</anchorfile>
      <anchor>a132266fc34fd9cbb824602ee1a1920f6</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDisplayString</name>
      <anchorfile>class_scenario_manager.html</anchorfile>
      <anchor>ac8cb94b677cfae862f0937ac3f9f8172</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numChanges</name>
      <anchorfile>class_scenario_manager.html</anchorfile>
      <anchor>ad121e5ea5d4241760c0a7a547057f749</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numDone</name>
      <anchorfile>class_scenario_manager.html</anchorfile>
      <anchor>af95a9cc6a97f813dd202ac46dad98b02</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTP</name>
    <filename>class_s_c_t_p.html</filename>
    <class kind="struct">SCTP::AppConnKey</class>
    <class kind="struct">SCTP::AssocStat</class>
    <class kind="struct">SCTP::SockPair</class>
    <class kind="struct">SCTP::VTagPair</class>
    <member kind="typedef">
      <type>std::map&lt; int32, AssocStat &gt;</type>
      <name>AssocStatMap</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>a439de408c0d516fec889a8e67172156a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; int32, VTagPair &gt;</type>
      <name>SctpVTagMap</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>acdebc4566eea2a17e3a309be272423c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; AppConnKey, SCTPAssociation * &gt;</type>
      <name>SctpAppConnMap</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>ae31035be18163654260221f1d31ccbc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; SockPair, SCTPAssociation * &gt;</type>
      <name>SctpConnMap</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>a119ab387204716b81562e9ea58789eab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printInfoConnMap</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>a84f317375ec11a83b15062a0d77694d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printVTagMap</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>afbb694a62bd6c7c911275ba3a6ce38db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAssociation</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>a4848bf1f15a9f7aac6e53cd1889f9345</anchor>
      <arglist>(SCTPAssociation *assoc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTP</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>a592a2d4ff219d86d6665d7a1a65fe8e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>a7c9cce2a01f191ddeb3c4ed21f413339</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>a305de6ada20d2db21ddd19ad19cac3a1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>a7547ab07373b78775ff3ec27eb704ae3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AssocStat *</type>
      <name>getAssocStat</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>ac0d7608e4fb9d3d5cc41d98ac2cd66de</anchor>
      <arglist>(uint32 assocId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateSockPair</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>a2ee4aaa2e36516a679b8c4a0748ecd9a</anchor>
      <arglist>(SCTPAssociation *assoc, IPvXAddress localAddr, IPvXAddress remoteAddr, int32 localPort, int32 remotePort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLocalAddress</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>aeb3f468f36416f953ab7e647540f75e4</anchor>
      <arglist>(SCTPAssociation *conn, IPvXAddress address)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLocalAddressToAllRemoteAddresses</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>a476b640dbefbde3ee8029eef4393800e</anchor>
      <arglist>(SCTPAssociation *conn, IPvXAddress address, std::vector&lt; IPvXAddress &gt; remAddresses)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRemoteAddress</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>a34e3e284fe397118d5e69b56e497ed45</anchor>
      <arglist>(SCTPAssociation *conn, IPvXAddress localAddress, IPvXAddress remoteAddress)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeLocalAddressFromAllRemoteAddresses</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>abd09eaf1572e207a25aff6988091ca0f</anchor>
      <arglist>(SCTPAssociation *conn, IPvXAddress address, std::vector&lt; IPvXAddress &gt; remAddresses)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRemoteAddressFromAllConnections</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>a2d162fde6e9246ce9db340f1824187a1</anchor>
      <arglist>(SCTPAssociation *conn, IPvXAddress address, std::vector&lt; IPvXAddress &gt; locAddresses)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addForkedAssociation</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>a8e139c401cbd596810592e62be90a21e</anchor>
      <arglist>(SCTPAssociation *assoc, SCTPAssociation *newAssoc, IPvXAddress localAddr, IPvXAddress remoteAddr, int32 localPort, int32 remotePort)</arglist>
    </member>
    <member kind="function">
      <type>int16</type>
      <name>getEphemeralPort</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>a1fc797c096f955556e374a8d681d03af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPAssociation *</type>
      <name>getAssoc</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>a399d0ce6826ad6cc3bd4656be35bc5e7</anchor>
      <arglist>(int32 assocId)</arglist>
    </member>
    <member kind="function">
      <type>SCTPAssociation *</type>
      <name>findAssocWithVTag</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>a09e0381fe0039c77faf2a2d17736201e</anchor>
      <arglist>(uint32 peerVTag, uint32 remotePort, uint32 localPort)</arglist>
    </member>
    <member kind="function">
      <type>SctpVTagMap</type>
      <name>getVTagMap</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>ab1523f02b1b32c1a42ca04a028948ad0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bindPortForUDP</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>a7102d8279e65efb42c25c3e79bbaa492</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32</type>
      <name>getNewConnId</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>a3eddd3a5ef9f40583d51b4eac4204f5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>AssocStatMap</type>
      <name>assocStatMap</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>a43c9f3107b99f1c969a4d5ca9c168bd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SctpVTagMap</type>
      <name>sctpVTagMap</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>ad27c44853f019878d8c9be020c56f8d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SctpAppConnMap</type>
      <name>sctpAppConnMap</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>a0bdbaac417e09631312a82718184fca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SctpConnMap</type>
      <name>sctpConnMap</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>aa7f1b6e9c58bb2e49f644cc4fad58af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; SCTPAssociation * &gt;</type>
      <name>assocList</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>affa2f26db6bbbf00938fa27e35b8f567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>testTimeout</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>a35089977465533256142ee442021b18d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>numGapReports</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>ac9a52a17f3bf53576459c72587f36dc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>numPacketsReceived</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>ab63c2cdb48459ff2da4de9dd8be20651</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>numPacketsDropped</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>a08ec3d0f806364ad7d97ec0349b9d815</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>testing</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>a0c82ce1676bd810f2defcce17bd1bd0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>logverbose</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>afd8d177039fd50dc468ce8c4231d59f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SCTPAssociation *</type>
      <name>findAssocForMessage</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>ad481f51413de9f5cf1070ea507ffb345</anchor>
      <arglist>(IPvXAddress srcAddr, IPvXAddress destAddr, uint32 srcPort, uint32 destPort, bool findListen)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SCTPAssociation *</type>
      <name>findAssocForApp</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>aae97b24ba4ed4bb4950c3117f4c101d1</anchor>
      <arglist>(int32 appGateIndex, int32 assocId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendAbortFromMain</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>a8a189047a5fbd254dcd9d9283ba08836</anchor>
      <arglist>(SCTPMessage *sctpmsg, IPvXAddress srcAddr, IPvXAddress destAddr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendShutdownCompleteFromMain</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>aa184b3126dcf702901f1c1f0bc3529f4</anchor>
      <arglist>(SCTPMessage *sctpmsg, IPvXAddress srcAddr, IPvXAddress destAddr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplayString</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>a47a90c0d2a89f45862e0a21004c11bdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>sizeConnMap</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>a5c27765c60c9634a47b00c4de6137809</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16</type>
      <name>nextEphemeralPort</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>aaa0391c9c63435dee2ca1da5610bf697</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static int32</type>
      <name>nextConnId</name>
      <anchorfile>class_s_c_t_p.html</anchorfile>
      <anchor>adcb74cef25ffed39e3825f2181f488f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SCTP::AppConnKey</name>
    <filename>struct_s_c_t_p_1_1_app_conn_key.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>struct_s_c_t_p_1_1_app_conn_key.html</anchorfile>
      <anchor>ab4a4177f1d8299b19e8616396e415f49</anchor>
      <arglist>(const AppConnKey &amp;b) const </arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>appGateIndex</name>
      <anchorfile>struct_s_c_t_p_1_1_app_conn_key.html</anchorfile>
      <anchor>a626521b2c8d3fdc35115c60815b9cc23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>assocId</name>
      <anchorfile>struct_s_c_t_p_1_1_app_conn_key.html</anchorfile>
      <anchor>abab47f92e2fb9224bbe6575f5562f979</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SCTP::AssocStat</name>
    <filename>struct_s_c_t_p_1_1_assoc_stat.html</filename>
    <member kind="variable">
      <type>int32</type>
      <name>assocId</name>
      <anchorfile>struct_s_c_t_p_1_1_assoc_stat.html</anchorfile>
      <anchor>af6d2b88d12009123a90976f56451a43f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>start</name>
      <anchorfile>struct_s_c_t_p_1_1_assoc_stat.html</anchorfile>
      <anchor>adb6d3d3bab2e33cd79cf26363c7fe6fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>stop</name>
      <anchorfile>struct_s_c_t_p_1_1_assoc_stat.html</anchorfile>
      <anchor>a8350bc0756ad1c9d9c4b221e0f3cbde8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64</type>
      <name>rcvdBytes</name>
      <anchorfile>struct_s_c_t_p_1_1_assoc_stat.html</anchorfile>
      <anchor>a3d4a454aff95cc5338209a5b55539083</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64</type>
      <name>sentBytes</name>
      <anchorfile>struct_s_c_t_p_1_1_assoc_stat.html</anchorfile>
      <anchor>ae2d4f4001028f1aa570bdb4c68818a8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64</type>
      <name>transmittedBytes</name>
      <anchorfile>struct_s_c_t_p_1_1_assoc_stat.html</anchorfile>
      <anchor>a456a49c0acd0315753b9900ab720f272</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64</type>
      <name>ackedBytes</name>
      <anchorfile>struct_s_c_t_p_1_1_assoc_stat.html</anchorfile>
      <anchor>acc55fd8a06afd95c5fd58930e5537cf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>numFastRtx</name>
      <anchorfile>struct_s_c_t_p_1_1_assoc_stat.html</anchorfile>
      <anchor>a375a63659531c9124b90e7dfa527d34b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>numDups</name>
      <anchorfile>struct_s_c_t_p_1_1_assoc_stat.html</anchorfile>
      <anchor>a241f15afb831c0c4750e59ed00e8a794</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>numT3Rtx</name>
      <anchorfile>struct_s_c_t_p_1_1_assoc_stat.html</anchorfile>
      <anchor>a4106523ad51fd8ed0b51008b63333e0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>numPathFailures</name>
      <anchorfile>struct_s_c_t_p_1_1_assoc_stat.html</anchorfile>
      <anchor>a9b881501500b50607d80c7e1420b70f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>numForwardTsn</name>
      <anchorfile>struct_s_c_t_p_1_1_assoc_stat.html</anchorfile>
      <anchor>a347d3a84ee0bd7c151761d96140059dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>throughput</name>
      <anchorfile>struct_s_c_t_p_1_1_assoc_stat.html</anchorfile>
      <anchor>aefab702936b7f133023cab351f1578ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>lifeTime</name>
      <anchorfile>struct_s_c_t_p_1_1_assoc_stat.html</anchorfile>
      <anchor>a5fb723fc12d2858561865a432267244c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SCTP::SockPair</name>
    <filename>struct_s_c_t_p_1_1_sock_pair.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>struct_s_c_t_p_1_1_sock_pair.html</anchorfile>
      <anchor>acc41b897b4da346bf3f4637f906290a5</anchor>
      <arglist>(const SockPair &amp;b) const </arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>localAddr</name>
      <anchorfile>struct_s_c_t_p_1_1_sock_pair.html</anchorfile>
      <anchor>a25d00f7762ed165209da561f27bae238</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>remoteAddr</name>
      <anchorfile>struct_s_c_t_p_1_1_sock_pair.html</anchorfile>
      <anchor>a408f708d36974139419a012f56a11dd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>localPort</name>
      <anchorfile>struct_s_c_t_p_1_1_sock_pair.html</anchorfile>
      <anchor>acbd2e141ab7e81ed217c0523d2cbca45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>remotePort</name>
      <anchorfile>struct_s_c_t_p_1_1_sock_pair.html</anchorfile>
      <anchor>aa42ad41f28fe73094559a1e0ff7e555e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SCTP::VTagPair</name>
    <filename>struct_s_c_t_p_1_1_v_tag_pair.html</filename>
    <member kind="variable">
      <type>uint32</type>
      <name>peerVTag</name>
      <anchorfile>struct_s_c_t_p_1_1_v_tag_pair.html</anchorfile>
      <anchor>a136cc70e0344af9a4f0388b1ffeb9e12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>localVTag</name>
      <anchorfile>struct_s_c_t_p_1_1_v_tag_pair.html</anchorfile>
      <anchor>a67fc2778b273030c911b9fc683d3510c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>localPort</name>
      <anchorfile>struct_s_c_t_p_1_1_v_tag_pair.html</anchorfile>
      <anchor>a9b3b16f4dfff829a87b3e698fa5e21ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>remotePort</name>
      <anchorfile>struct_s_c_t_p_1_1_v_tag_pair.html</anchorfile>
      <anchor>a84ab11845673e58189b16c6053b9d24a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPAbortChunk</name>
    <filename>class_s_c_t_p_abort_chunk.html</filename>
    <base>SCTPChunk</base>
    <member kind="function">
      <type></type>
      <name>SCTPAbortChunk</name>
      <anchorfile>class_s_c_t_p_abort_chunk.html</anchorfile>
      <anchor>af01fb5397228d03afa51153fe5e618db</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPAbortChunk</name>
      <anchorfile>class_s_c_t_p_abort_chunk.html</anchorfile>
      <anchor>a7a48bf321b442d1ca65be89e09a9eec2</anchor>
      <arglist>(const SCTPAbortChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPAbortChunk</name>
      <anchorfile>class_s_c_t_p_abort_chunk.html</anchorfile>
      <anchor>ab476befdb77920a69be959d81b190223</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPAbortChunk &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_abort_chunk.html</anchorfile>
      <anchor>a113c3279f4cfe475eb2814bb3adf2bdc</anchor>
      <arglist>(const SCTPAbortChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPAbortChunk *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_abort_chunk.html</anchorfile>
      <anchor>a1f2a3ba0307a56731447d1d75b837eac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_abort_chunk.html</anchorfile>
      <anchor>a9c7bac5f690c81c092e031fd788b0580</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_abort_chunk.html</anchorfile>
      <anchor>a5a5e0aa883badeed0ca17d9944a8424b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getT_Bit</name>
      <anchorfile>class_s_c_t_p_abort_chunk.html</anchorfile>
      <anchor>adc385c709185844a9d2104026c41f835</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setT_Bit</name>
      <anchorfile>class_s_c_t_p_abort_chunk.html</anchorfile>
      <anchor>a992f6e445630f0cb902d00dba0ba1ffe</anchor>
      <arglist>(bool T_Bit_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_abort_chunk.html</anchorfile>
      <anchor>aefa71a1904d43905494051c70544539b</anchor>
      <arglist>(const SCTPAbortChunk &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>T_Bit_var</name>
      <anchorfile>class_s_c_t_p_abort_chunk.html</anchorfile>
      <anchor>a8efdd2a65b29f5175ba6218336924a50</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPAlg</name>
    <filename>class_s_c_t_p_alg.html</filename>
    <base>SCTPAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>SCTPAlg</name>
      <anchorfile>class_s_c_t_p_alg.html</anchorfile>
      <anchor>a6738b1b3cf3773f6ce120a7b3e3f9b46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPAlg</name>
      <anchorfile>class_s_c_t_p_alg.html</anchorfile>
      <anchor>ab0121a1a6b3236df8d780bb178b52c13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPStateVariables *</type>
      <name>createStateVariables</name>
      <anchorfile>class_s_c_t_p_alg.html</anchorfile>
      <anchor>a3afe50a4865142c67de11231d15df753</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>established</name>
      <anchorfile>class_s_c_t_p_alg.html</anchorfile>
      <anchor>a35c3999c173b844286799d7070fb8b53</anchor>
      <arglist>(bool active)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectionClosed</name>
      <anchorfile>class_s_c_t_p_alg.html</anchorfile>
      <anchor>a2dbe1cd9aa6c05248390692008797440</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processTimer</name>
      <anchorfile>class_s_c_t_p_alg.html</anchorfile>
      <anchor>aa5898ca2f945854098ee3fc1dec6b67f</anchor>
      <arglist>(cMessage *timer, SCTPEventCode &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendCommandInvoked</name>
      <anchorfile>class_s_c_t_p_alg.html</anchorfile>
      <anchor>a2d0ef0333dbadbb9ecd92f90aa204f29</anchor>
      <arglist>(SCTPPathVariables *path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDataAck</name>
      <anchorfile>class_s_c_t_p_alg.html</anchorfile>
      <anchor>a06048ec4c1c6017958b01ebaea3d502a</anchor>
      <arglist>(uint32 firstSeqAcked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDuplicateAck</name>
      <anchorfile>class_s_c_t_p_alg.html</anchorfile>
      <anchor>a43dc8e474691f991efaca4dc3985f2a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedAckForDataNotYetSent</name>
      <anchorfile>class_s_c_t_p_alg.html</anchorfile>
      <anchor>ab5be77270762e99abf785679c6cd8656</anchor>
      <arglist>(uint32 seq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sackSent</name>
      <anchorfile>class_s_c_t_p_alg.html</anchorfile>
      <anchor>a9c72d7887eb8f5efae0c2d47692f395b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dataSent</name>
      <anchorfile>class_s_c_t_p_alg.html</anchorfile>
      <anchor>a271257a1a21a1d4481223c220182aaee</anchor>
      <arglist>(uint32 fromseq)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SCTPAlgStateVariables *</type>
      <name>state</name>
      <anchorfile>class_s_c_t_p_alg.html</anchorfile>
      <anchor>ab91de332eef7da45e36321a33c81805a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPAlgorithm</name>
    <filename>class_s_c_t_p_algorithm.html</filename>
    <member kind="function">
      <type></type>
      <name>SCTPAlgorithm</name>
      <anchorfile>class_s_c_t_p_algorithm.html</anchorfile>
      <anchor>a9c35bbb05fa1fbb2ac127da51e30be4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPAlgorithm</name>
      <anchorfile>class_s_c_t_p_algorithm.html</anchorfile>
      <anchor>aeb753bac6e648a1e3772709538844e18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAssociation</name>
      <anchorfile>class_s_c_t_p_algorithm.html</anchorfile>
      <anchor>aaef644b59f18aa40cea754616c8f9f61</anchor>
      <arglist>(SCTPAssociation *_assoc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_s_c_t_p_algorithm.html</anchorfile>
      <anchor>a2061a42140d0acd50454a93799f58974</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SCTPStateVariables *</type>
      <name>createStateVariables</name>
      <anchorfile>class_s_c_t_p_algorithm.html</anchorfile>
      <anchor>aaca16656400d64a60d3f29e838c08ca1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>established</name>
      <anchorfile>class_s_c_t_p_algorithm.html</anchorfile>
      <anchor>a7a065477d0c95dad6383167b0f4fd1af</anchor>
      <arglist>(bool active)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connectionClosed</name>
      <anchorfile>class_s_c_t_p_algorithm.html</anchorfile>
      <anchor>adfd8803495bf69e8646abaef9086e550</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>processTimer</name>
      <anchorfile>class_s_c_t_p_algorithm.html</anchorfile>
      <anchor>a1829a98985752d015733b71fd058c10d</anchor>
      <arglist>(cMessage *timer, SCTPEventCode &amp;event)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sendCommandInvoked</name>
      <anchorfile>class_s_c_t_p_algorithm.html</anchorfile>
      <anchor>a533d56c5b058b605c61d813339987e39</anchor>
      <arglist>(SCTPPathVariables *path)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receivedDataAck</name>
      <anchorfile>class_s_c_t_p_algorithm.html</anchorfile>
      <anchor>ac5723493a9780acde5aeb0b8ab260edc</anchor>
      <arglist>(uint32 firstSeqAcked)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receivedDuplicateAck</name>
      <anchorfile>class_s_c_t_p_algorithm.html</anchorfile>
      <anchor>a239f0b25ebefdb7190eebfdf1880727b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receivedAckForDataNotYetSent</name>
      <anchorfile>class_s_c_t_p_algorithm.html</anchorfile>
      <anchor>ae1d2fe1f4155ae8a2c0eda36712ab680</anchor>
      <arglist>(uint32 seq)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sackSent</name>
      <anchorfile>class_s_c_t_p_algorithm.html</anchorfile>
      <anchor>a169f6485c0edf63e8b77f9feef157867</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dataSent</name>
      <anchorfile>class_s_c_t_p_algorithm.html</anchorfile>
      <anchor>a66993fbd98807c11ad3637544e5856f1</anchor>
      <arglist>(uint32 fromseq)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SCTPAssociation *</type>
      <name>assoc</name>
      <anchorfile>class_s_c_t_p_algorithm.html</anchorfile>
      <anchor>af33406a1190ce557ff8218dbc1e7cc5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SCTPQueue *</type>
      <name>transmissionQ</name>
      <anchorfile>class_s_c_t_p_algorithm.html</anchorfile>
      <anchor>a693e7572b70bccdac4fa2fdb801fdfa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SCTPQueue *</type>
      <name>retransmissionQ</name>
      <anchorfile>class_s_c_t_p_algorithm.html</anchorfile>
      <anchor>a022498a8f75b32f2ff7a7ba6eb8d0f84</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPAlgStateVariables</name>
    <filename>class_s_c_t_p_alg_state_variables.html</filename>
    <base>SCTPStateVariables</base>
  </compound>
  <compound kind="class">
    <name>SCTPAssociation</name>
    <filename>class_s_c_t_p_association.html</filename>
    <class kind="struct">SCTPAssociation::calcBytesToSend</class>
    <class kind="struct">SCTPAssociation::congestionControlFunctions</class>
    <class kind="struct">SCTPAssociation::counter</class>
    <class kind="struct">SCTPAssociation::streamSchedulingFunctions</class>
    <member kind="function">
      <type></type>
      <name>SCTPAssociation</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ad1984a2e17a73629a51334904745086f</anchor>
      <arglist>(SCTP *mod, int32 appGateIndex, int32 assocId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SCTPAssociation</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a1529624d1f17663c5729ec2fe5fb3a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendOnPath</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>aa7cf5e2c2c169ce78e856025bb181116</anchor>
      <arglist>(SCTPPathVariables *pathId, const bool firstPass=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendOnAllPaths</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ab0faa9ccd46630cfab7a2bc75fb1d52d</anchor>
      <arglist>(SCTPPathVariables *firstPath)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>indicationName</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a681a359c388e9b7f38250ceb3626515e</anchor>
      <arglist>(const int32 code)</arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>appGateIndex</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>aba709e2f773752366d1c291c4fb360c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>assocId</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a135afa4887cc640b0e8410dc95a29972</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>remoteAddr</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a694133846dd4defebbd87493888d7c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>localAddr</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a3e8d3c43ea031c35ab782b91f628563c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>localPort</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>acb21c9ce886b796d5134b1c0daa3227b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>remotePort</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a62e2c58ac9cc4e804800c05bae9da71f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>localVTag</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ada797c4d0c058044396199946575173b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>peerVTag</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>acb96c9464cb79b841406fe7fcecff941</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>listen</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ad4d5508473d61c1cf6212bee9f683c04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>T1_InitTimer</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ae8e6881f56bba3560101d1c898bf4ad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>T2_ShutdownTimer</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ab57c64d047b0645a215f7e0bc2d903fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>T5_ShutdownGuardTimer</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ac418d05be502a677a2f22b375f7e7a7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>SackTimer</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a1fae2ceab572718540c51768e3c1c452</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>StartTesting</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a1629df451ef1ce00b8c32cb9688013b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>struct SCTPAssociation::streamSchedulingFunctions</type>
      <name>SSFunctions</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a7409afe335d1b8850a82f757172725fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>startTimer</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>aafb136543c6d4287ea773d3519593010</anchor>
      <arglist>(cMessage *timer, const simtime_t &amp;timeout)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SCTPAssociation *</type>
      <name>cloneAssociation</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ae6315c7df4b1537e0b8374583492a0be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initAssociation</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a460894500fa0ffbff9cd62ef59db7475</anchor>
      <arglist>(SCTPOpenCommand *openCmd)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>tsnIsDuplicate</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a41c4711e6ff504c121e879d6295d33f9</anchor>
      <arglist>(const uint32 tsn) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>advanceCtsna</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a4d95d83c20353ab76d47d04a240ef61a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>updateGapList</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a99fbda3fe957b452899203d4e0f151a0</anchor>
      <arglist>(const uint32 tsn)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromGapList</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a6d86b97308eef3f43f93ca939a3d1a52</anchor>
      <arglist>(const uint32 removedTsn)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>makeRoomForTsn</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a45de5f3a74bba48af92b248edd9c9312</anchor>
      <arglist>(const uint32 tsn, const uint32 length, const bool uBit)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendInit</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>afc1d3dc0cb62842b7d83998facfbfd06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendInitAck</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ac40f2aff108134cbfcea6cb06e25fdb1</anchor>
      <arglist>(SCTPInitChunk *initchunk)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendCookieEcho</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a3ef5a4494cd7b59c44f44d6ed385e9de</anchor>
      <arglist>(SCTPInitAckChunk *initackchunk)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendCookieAck</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ad277c3986a8173ffe41289f72765ceba</anchor>
      <arglist>(const IPvXAddress &amp;dest)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendAbort</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a0c2b31f00e428a2c8c5fe8aa5f3430fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendHeartbeat</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>afc5f06d167b937c0d1267047960bc354</anchor>
      <arglist>(const SCTPPathVariables *path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendHeartbeatAck</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a4693aa8d9ce24d9bf798cb7feefd1085</anchor>
      <arglist>(const SCTPHeartbeatChunk *heartbeatChunk, const IPvXAddress &amp;src, const IPvXAddress &amp;dest)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendSack</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a8ceae356355ca537907cabf469c813af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendShutdown</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a76fce22241a52542859d1dcddac4651a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendShutdownAck</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a588cedb27c104ca159fce93dfd53e4c7</anchor>
      <arglist>(const IPvXAddress &amp;dest)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendShutdownComplete</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a30c6da407b37844471cbd5c69918ae52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SCTPSackChunk *</type>
      <name>createSack</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a0054d12cb552f7417b97c7e671231905</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>retransmitInit</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>aec407e9c2c1b4d0c604d8d65e78706e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>retransmitCookieEcho</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ae9ffc855fcb6cfd50fb34a03beaa2d39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>retransmitShutdown</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>aa28d6c19ab622ed5564596c7f300aea4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>retransmitShutdownAck</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a0c70dd4b41af917ecbaebd2850a808e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToIP</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>afa42a76b3cc9ac339b1657e48972b2b2</anchor>
      <arglist>(SCTPMessage *sctpmsg, const IPvXAddress &amp;dest, const bool qs=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToIP</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a97c8a5a61cce6ed20af47887e551ddaf</anchor>
      <arglist>(SCTPMessage *sctpmsg, const bool qs=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>scheduleSack</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ad26d83ea266011e34ebfbc56f7ee1e75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>signalConnectionTimeout</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>aed61141642771b6e3c6cc759f2e1f513</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>scheduleTimeout</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a9093fdb20d9c289d699376be9b3b80ba</anchor>
      <arglist>(cMessage *msg, const simtime_t &amp;timeout)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cMessage *</type>
      <name>cancelEvent</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a0ff3903cc411815054282811157db2ba</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToApp</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a35a8d95a64b2977c79bf24b1353c0c8e</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendIndicationToApp</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a010084d1e3717e6600b532f3b3804151</anchor>
      <arglist>(const int32 code, const int32 value=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendEstabIndicationToApp</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>af039e9e17af5bd8f871e1bf6fa2ac871</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>pushUlp</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a34812ad20b498c0275019ef3e97cec71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDataArrivedNotification</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a155c31414d0e2115eccd2fbb0a966dab</anchor>
      <arglist>(uint16 sid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>putInDeliveryQ</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a64c5bcff1fa7a6f01d7e969d21b70dd5</anchor>
      <arglist>(uint16 sid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printConnBrief</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a372875420182ac696a9cf72971ab5eab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addPath</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a1780a25bb9890ee2c0510735299b1bf1</anchor>
      <arglist>(const IPvXAddress &amp;addr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SCTPPathVariables *</type>
      <name>getNextPath</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a54a47746095fa64e6976d22bdbb8e884</anchor>
      <arglist>(const SCTPPathVariables *oldPath) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IPvXAddress &amp;</type>
      <name>getNextAddress</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ae066012288ac9da1c4c986d3cf5df717</anchor>
      <arglist>(const SCTPPathVariables *oldPath) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SCTPPathVariables *</type>
      <name>getNextDestination</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ab4f6847bb20adea148ebf8cf2a071871</anchor>
      <arglist>(SCTPDataVariables *chunk) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>bytesAllowedToSend</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a47401fe3a9b36c629785c65886c19efd</anchor>
      <arglist>(SCTPPathVariables *path, const bool firstPass)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>pathStatusIndication</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>aee07b10bc3e9c1999e15c025d5e7db5f</anchor>
      <arglist>(const SCTPPathVariables *path, const bool status)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>allPathsInactive</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ae691d69b908141f2b120ce25f824b683</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SCTPDataChunk *</type>
      <name>transformDataChunk</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a30445facc61cdf6ef4362b02a244eb2c</anchor>
      <arglist>(SCTPDataVariables *chunk)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SCTPDataVariables *</type>
      <name>makeVarFromMsg</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ae6298a23676ec2a10036aa66ed6af7b3</anchor>
      <arglist>(SCTPDataChunk *datachunk)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int32</type>
      <name>streamScheduler</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>af82770db14bde55545184d74ffc6ea75</anchor>
      <arglist>(bool peek)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initStreams</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ae6aa9f8b9a817bb3caddb96c68b2b9c5</anchor>
      <arglist>(uint32 inStreams, uint32 outStreams)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int32</type>
      <name>numUsableStreams</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a38fd6b713baffb261f409aec60a3c279</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_QUEUE_MSGS_LIMIT</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a5f8be6b52ad2164e96fd19799dfd8e01</anchor>
      <arglist>(const SCTPCommand *sctpCommand)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_QUEUE_BYTES_LIMIT</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a0bce41a300c3dfdab9d2ca190d5790d3</anchor>
      <arglist>(const SCTPCommand *sctpCommand)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int32</type>
      <name>getOutstandingBytes</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a8270ebaccc92eb00ffae041a8406b094</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32</type>
      <name>dequeueAckedChunks</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a8bc32c70b39e641735ba4f73c00480ae</anchor>
      <arglist>(const uint32 tsna, SCTPPathVariables *path, simtime_t &amp;rttEstimation)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SCTPDataMsg *</type>
      <name>peekOutboundDataMsg</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a2e74a9f71f01b08567f70511f6172ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SCTPDataVariables *</type>
      <name>peekAbandonedChunk</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>adca537bdf50592f25eff5a09e730bec3</anchor>
      <arglist>(const SCTPPathVariables *path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SCTPDataVariables *</type>
      <name>getOutboundDataChunk</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a52141caf8994688922c957e8ddee864f</anchor>
      <arglist>(const SCTPPathVariables *path, const int32 availableSpace, const int32 availableCwnd)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SCTPDataMsg *</type>
      <name>dequeueOutboundDataMsg</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a5bccfb8217d1cbb22a629856f96755ad</anchor>
      <arglist>(const int32 availableSpace, const int32 availableCwnd)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>nextChunkFitsIntoPacket</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>afcdda96737a59959b556a07031d9ad98</anchor>
      <arglist>(int32 bytes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>putInTransmissionQ</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a92d70f8d0215630944fc1101378589ce</anchor>
      <arglist>(uint32 tsn, SCTPDataVariables *chunk)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>pmStartPathManagement</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ab385b4edb0ddac6e69aa350df14b480a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>pmDataIsSentOn</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a5015c5c13fbe8608b1370a85fc06806f</anchor>
      <arglist>(SCTPPathVariables *path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>pmClearPathCounter</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a0fc1eef21b0fbadd97e0b4739213d35e</anchor>
      <arglist>(SCTPPathVariables *path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>pmRttMeasurement</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a02104ef95fcdab0f90cc9b03da82a675</anchor>
      <arglist>(SCTPPathVariables *path, const simtime_t &amp;rttEstimation)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>disposeOf</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a24959906501442490b4767253bbd658c</anchor>
      <arglist>(SCTPMessage *sctpmsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>tsnWasReneged</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ab70d01d19820a5a16547e439b142d5fe</anchor>
      <arglist>(SCTPDataVariables *chunk, const int type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutstandingTsns</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a3458ef456e7d907d1cf712d28e7212d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initCCParameters</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a27ab7a3f0d7e82a5b48f47e39e53dd23</anchor>
      <arglist>(SCTPPathVariables *path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateFastRecoveryStatus</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a7235e0a24b1d8a8cc70eedda6adb081f</anchor>
      <arglist>(const uint32 lastTsnAck)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cwndUpdateAfterSack</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ade798497e9cb468bf8f4759e9b8e9840</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cwndUpdateAfterCwndTimeout</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a9a5de305f7873c84ef644dce513964cd</anchor>
      <arglist>(SCTPPathVariables *path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cwndUpdateAfterRtxTimeout</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a53665e3333a5e7b2aae79a65b9a1482b</anchor>
      <arglist>(SCTPPathVariables *path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cwndUpdateMaxBurst</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>af5c86c86388313edeeff8434266a85cd</anchor>
      <arglist>(SCTPPathVariables *path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cwndUpdateBytesAcked</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a356510e0d2cfb8c6770c72f29634cb93</anchor>
      <arglist>(SCTPPathVariables *path, const uint32 ackedBytes, const bool ctsnaAdvanced)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SCTPEventCode</type>
      <name>preanalyseAppCommandEvent</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a946f737e0ae27932aba2899aa24d2660</anchor>
      <arglist>(int32 commandCode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>performStateTransition</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a7471310ea5aa0cca813d1452f70bf218</anchor>
      <arglist>(const SCTPEventCode &amp;event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>stateEntered</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a1edd1c4ec96bec1f031f6b83550471bc</anchor>
      <arglist>(int32 state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_ASSOCIATE</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>adf53e2f26b7881391b481c3716783cc9</anchor>
      <arglist>(SCTPEventCode &amp;event, SCTPCommand *sctpCommand, cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_OPEN_PASSIVE</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a5cc7381e91d34e5c13a4b97eb02f9b7e</anchor>
      <arglist>(SCTPEventCode &amp;event, SCTPCommand *sctpCommand, cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_SEND</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a7eb1c9af2610929a04cb744b97af93c8</anchor>
      <arglist>(SCTPEventCode &amp;event, SCTPCommand *sctpCommand, cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_CLOSE</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a6c53aeb97e7132e5f09869f886e5807e</anchor>
      <arglist>(SCTPEventCode &amp;event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_ABORT</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a0604d2735afd938650aa540e1ed7b9d1</anchor>
      <arglist>(SCTPEventCode &amp;event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_STATUS</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>aa60a2e245739ecf7a4085a3e240a3730</anchor>
      <arglist>(SCTPEventCode &amp;event, SCTPCommand *sctpCommand, cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_RECEIVE_REQUEST</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ae086afec043034fc936b270b71c1e6f4</anchor>
      <arglist>(SCTPEventCode &amp;event, SCTPCommand *sctpCommand)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_PRIMARY</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a1f578c7e75df4066f4aaf34b8f195f6f</anchor>
      <arglist>(SCTPEventCode &amp;event, SCTPCommand *sctpCommand)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>process_RCV_Message</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a042415b8feb32a392938f9a844bc4aca</anchor>
      <arglist>(SCTPMessage *sctpseg, const IPvXAddress &amp;src, const IPvXAddress &amp;dest)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>processInitArrived</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>add502b430991fe297800a08dd62c569d</anchor>
      <arglist>(SCTPInitChunk *initChunk, int32 sport, int32 dport)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>processInitAckArrived</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>aa72dc267f9e5e18957f7e1c0d942195f</anchor>
      <arglist>(SCTPInitAckChunk *initAckChunk)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>processCookieEchoArrived</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a0dc1cc0159627680652582a01a4417f2</anchor>
      <arglist>(SCTPCookieEchoChunk *cookieEcho, IPvXAddress addr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>processCookieAckArrived</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a6d4b0efb4884a96e406c42797456d241</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SCTPEventCode</type>
      <name>processDataArrived</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a4a28f10181c8a7af088e504c76242b7c</anchor>
      <arglist>(SCTPDataChunk *dataChunk)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SCTPEventCode</type>
      <name>processSackArrived</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a814dc2552ad0e6710552757416f0bf93</anchor>
      <arglist>(SCTPSackChunk *sackChunk)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SCTPEventCode</type>
      <name>processHeartbeatAckArrived</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a1f4d814724e79e184655050a48ee1c25</anchor>
      <arglist>(SCTPHeartbeatAckChunk *heartbeatack, SCTPPathVariables *path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int32</type>
      <name>process_TIMEOUT_RTX</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ab0e373e70c4541d7f64666e98e99e7d3</anchor>
      <arglist>(SCTPPathVariables *path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_TIMEOUT_HEARTBEAT</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>acb89ca4bcc84239541171327977762e9</anchor>
      <arglist>(SCTPPathVariables *path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_TIMEOUT_HEARTBEAT_INTERVAL</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ac2468daebc456147e6568b99650165ca</anchor>
      <arglist>(SCTPPathVariables *path, bool force)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_TIMEOUT_INIT_REXMIT</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ae94a9d41597adc5806db8c60f27ab45d</anchor>
      <arglist>(SCTPEventCode &amp;event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_TIMEOUT_PROBING</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a7fd942b2be59aa1fa843cd5a7b710731</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_TIMEOUT_SHUTDOWN</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a6866e326d923a8915cdbb3d80802c527</anchor>
      <arglist>(SCTPEventCode &amp;event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int32</type>
      <name>updateCounters</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a3cb6d23f3c34f789d2b1c5945d0d0a76</anchor>
      <arglist>(SCTPPathVariables *path)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>printSegmentBrief</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a0a8dc40e502998018163df5cbe68d837</anchor>
      <arglist>(SCTPMessage *sctpmsg)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const char *</type>
      <name>eventName</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a63a1d0b48db0d4d129635336591f37fc</anchor>
      <arglist>(const int32 event)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int32</type>
      <name>tsnLt</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a2e63afca29fd3f5d2dedb4f05fb1015f</anchor>
      <arglist>(const uint32 tsn1, const uint32 tsn2)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int32</type>
      <name>tsnLe</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a74cd3a867ee886b15439c1ca53bbf57d</anchor>
      <arglist>(const uint32 tsn1, const uint32 tsn2)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int32</type>
      <name>tsnGe</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a7bb25b61e8c968e460210fd7794037b3</anchor>
      <arglist>(const uint32 tsn1, const uint32 tsn2)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int32</type>
      <name>tsnGt</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a2aee269f079e6749ddc839137c157043</anchor>
      <arglist>(const uint32 tsn1, const uint32 tsn2)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int32</type>
      <name>tsnBetween</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a5d5d64e51be4d13ccb13286b5a6ab7a4</anchor>
      <arglist>(const uint32 tsn1, const uint32 midtsn, const uint32 tsn2)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int16</type>
      <name>ssnGt</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a04381d198b1e78fb563d5e460c40c6a5</anchor>
      <arglist>(const uint16 ssn1, const uint16 ssn2)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AddressVector</type>
      <name>localAddressList</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>af44c3fdaaff9c48fdbb45aac6d6ad082</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AddressVector</type>
      <name>remoteAddressList</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a746e4867059fcd11838ab601a6f5fea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>numberOfRemoteAddresses</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>aa66d26fc71717ca6158c03a212cc4071</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>inboundStreams</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a7bdc4b456ecebfdd19a23b23cc927ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>outboundStreams</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a3dc6e025463c8749b1239268d91b2b60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>status</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a47d58d9bc82ddd0a073a7f8c7d321872</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>initTsn</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>adf21f02ef10ae8d3d032337332b5f50f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>initPeerTsn</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a5ca011cb3142dfcd423f4083855a7460</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>sackFrequency</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ac5b54b2f8fbba401964d30c71e25118f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sackPeriod</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a29f900c7ca380c1671bb957109fc338b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CCFunctions</type>
      <name>ccFunctions</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a4a98157ebfa7e08758aa3227a0e1cdc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16</type>
      <name>ccModule</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a3d6c3997389c261a61cc57543111973b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>advRwnd</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a28d421b793ab5db3b09737c0f9f4b905</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>cumTsnAck</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a904881907985d7c23d7dc3cf630834aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>sendQueue</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a1f249bde274ec0e4949023a2a3a3e4e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>numGapBlocks</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a136b47892a6e405c494f055dc50eaec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SCTPStateVariables *</type>
      <name>state</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>aa270ad2776ffc5c9481909b11532772c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BytesToBeSent</type>
      <name>bytes</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a7e0d61bfa53b52f7d64a919f3dcceec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SCTP *</type>
      <name>sctpMain</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a3b2775352d3150256445a957de26926b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cFSM *</type>
      <name>fsm</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>adb42cf7d446c57ab5d1054fd9693ee54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SCTPPathMap</type>
      <name>sctpPathMap</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a32f0e2f4ef1678a91a307b96a3bb1822</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QueueCounter</type>
      <name>qCounter</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a0ba2392369634e6a9b6d1c27ecfa4d57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SCTPQueue *</type>
      <name>transmissionQ</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a186aec4da8fb8e5008429c58a2cede3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SCTPQueue *</type>
      <name>retransmissionQ</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>aafd80d965e20c11d49b38f7001d774b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SCTPSendStreamMap</type>
      <name>sendStreams</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a8d3fc12f609dc4d894f830d0e201642a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SCTPReceiveStreamMap</type>
      <name>receiveStreams</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a80374427a755802cd7687c7a77b26e9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SCTPAlgorithm *</type>
      <name>sctpAlgorithm</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ac26892b7e975616f6c9fa87e012e7232</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SSFunctions</type>
      <name>ssFunctions</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a9988effc78d17db9b32a8d6a976c2288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16</type>
      <name>ssModule</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a4b6cafcaa2a8ec5379637f837ca5550a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::map&lt; IPvXAddress, SCTPPathVariables * &gt;</type>
      <name>SCTPPathMap</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a3125d2965827dcc6d069b57afc6aae1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::map&lt; IPvXAddress, uint32 &gt;</type>
      <name>CounterMap</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ab91d1355239405c85b553695f9e95677</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>struct SCTPAssociation::counter</type>
      <name>QueueCounter</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a5350d5de77e6821ebc5c5d651194cc46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>struct SCTPAssociation::calcBytesToSend</type>
      <name>BytesToBeSent</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a21751b802c53fc41b3ccf505db26f7b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>struct SCTPAssociation::congestionControlFunctions</type>
      <name>CCFunctions</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a6ee72cef0c1d97195008e3deb5ba16b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::map&lt; uint32, SCTPSendStream * &gt;</type>
      <name>SCTPSendStreamMap</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a3aa0e9ecd0c7903f8cd31c534fc275a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::map&lt; uint32, SCTPReceiveStream * &gt;</type>
      <name>SCTPReceiveStreamMap</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a85b1fe666641fe7bacf93bc9a1e7c396</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>SCTPDataVariables *</type>
      <name>makeDataVarFromDataMsg</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a164799c396a6e3b931854cc4af513ff4</anchor>
      <arglist>(SCTPDataMsg *datMsg, SCTPPathVariables *path)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>SCTPPathVariables *</type>
      <name>choosePathForRetransmission</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a8b00fc2f2bcb1cb805a62316a15db984</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>timeForSack</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a3525db7c8ed37b6e45ae4a65e9af8968</anchor>
      <arglist>(bool &amp;sackOnly, bool &amp;sackWithData)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>recordCwndUpdate</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a753567499c04f5e4b55cb92790e4c96a</anchor>
      <arglist>(SCTPPathVariables *path)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleChunkReportedAsAcked</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a297f87caf9d5e3b6cf596a5e44381061</anchor>
      <arglist>(uint32 &amp;highestNewAck, simtime_t &amp;rttEstimation, SCTPDataVariables *myChunk, SCTPPathVariables *sackPath)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleChunkReportedAsMissing</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a01a9c50a325baf1ebf3d25972a776393</anchor>
      <arglist>(const SCTPSackChunk *sackChunk, const uint32 highestNewAck, SCTPDataVariables *myChunk, const SCTPPathVariables *sackPath)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>moveChunkToOtherPath</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>aded774353d79ba7bdf53651ddc178609</anchor>
      <arglist>(SCTPDataVariables *chunk, SCTPPathVariables *newPath)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>decreaseOutstandingBytes</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a2178e3130838480b58adc77639d7862c</anchor>
      <arglist>(SCTPDataVariables *chunk)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>increaseOutstandingBytes</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>aaf93ca861bf56525302bb2b661bdd4df</anchor>
      <arglist>(SCTPDataVariables *chunk, SCTPPathVariables *path)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int32</type>
      <name>calculateBytesToSendOnPath</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>acfd176cf104a2ded703649339cf4a9bb</anchor>
      <arglist>(const SCTPPathVariables *pathVar)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>storePacket</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a3f5a43f961e2cc691da4546762e28498</anchor>
      <arglist>(SCTPPathVariables *pathVar, SCTPMessage *sctpMsg, const uint16 chunksAdded, const uint16 dataChunksAdded, const uint32 packetBytes, const bool authAdded)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>loadPacket</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ac39737ee344fd4a8475b7efee8c47c31</anchor>
      <arglist>(SCTPPathVariables *pathVar, SCTPMessage **sctpMsg, uint16 *chunksAdded, uint16 *dataChunksAdded, uint32 *packetBytes, bool *authAdded)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ackChunk</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ac9f7ef76b3f23b83b5c4c261bf4df4ae</anchor>
      <arglist>(SCTPDataVariables *chunk)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>unackChunk</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a7970990bafb546026b91ab011eb956af</anchor>
      <arglist>(SCTPDataVariables *chunk)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>chunkHasBeenAcked</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>abab3867be074dea5acf98169c67efc78</anchor>
      <arglist>(const SCTPDataVariables *chunk) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>chunkHasBeenAcked</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ae416cce3f20124c0f320c3deb744caab</anchor>
      <arglist>(const uint32 tsn) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SCTP</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ad11e2cf06b73d0b6c92bf90d9052f984</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SCTPPathVariables</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a940cc2bde58bd842d11b28b3d09130dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>getFsmState</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a0874a47246477bd7cf4029a73666bd3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SCTPStateVariables *</type>
      <name>getState</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a498e92afc35c39fd74f61408d08443ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SCTPQueue *</type>
      <name>getTransmissionQueue</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a12c000086b06013248658c78a502d90a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SCTPQueue *</type>
      <name>getRetransmissionQueue</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a381530dc6d6a89ddc864791026b1af59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SCTPAlgorithm *</type>
      <name>getSctpAlgorithm</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a2f8247f14c80f45cbfa9e269dbf52545</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SCTP *</type>
      <name>getSctpMain</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>adacca069df6aab5b3a093e0575204bf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cFSM *</type>
      <name>getFsm</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a120222f3dccce018fec459e9374d1ee3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>getInitTimer</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a611d859e2eb953ea8d43048c13916aca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>getShutdownTimer</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a6029bb9f35f1d6b0779d6811ce1ed0cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>getSackTimer</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>af51bc7f5f485cce416dccb77ae694765</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processTimer</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a001fa353226a6d713050940b2aa8587d</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processSCTPMessage</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a1460f83f7b50fee1f47fe7b4bf6744be</anchor>
      <arglist>(SCTPMessage *sctpmsg, const IPvXAddress &amp;srcAddr, const IPvXAddress &amp;destAddr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processAppCommand</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ad14a311c7f07f7377a1a3422d0e6fc6c</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePath</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a48840034dca5052abf481f6a5753f923</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePath</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a2f3fe366971313c0f290ded66a233059</anchor>
      <arglist>(const IPvXAddress &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteStreams</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>aea681826347f6fc208c91c5c0f5227bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopTimer</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a5929aa6d346d39510a8826dfce06169a</anchor>
      <arglist>(cMessage *timer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopTimers</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a1e5b14c2f164752dcf7b6a16f654be9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPPathVariables *</type>
      <name>getPath</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>abf49f9153557168b42e7b63eba81d849</anchor>
      <arglist>(const IPvXAddress &amp;pathId) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printSctpPathMap</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a120c72df6657d2ef5038d61881ff11c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>stateName</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>a2ef7cd11f293a67b65d0c9cf0eee90a2</anchor>
      <arglist>(const int32 state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32</type>
      <name>chunkToInt</name>
      <anchorfile>class_s_c_t_p_association.html</anchorfile>
      <anchor>ac82674b30b7b244de6a54e79d967a1d8</anchor>
      <arglist>(const char *type)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SCTPAssociation::calcBytesToSend</name>
    <filename>struct_s_c_t_p_association_1_1calc_bytes_to_send.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>chunk</name>
      <anchorfile>struct_s_c_t_p_association_1_1calc_bytes_to_send.html</anchorfile>
      <anchor>ab425e5329336abe61caa3ddf403e4614</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>packet</name>
      <anchorfile>struct_s_c_t_p_association_1_1calc_bytes_to_send.html</anchorfile>
      <anchor>a5e8a1e92f56f48f0242cf42736fdd2b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>bytesToSend</name>
      <anchorfile>struct_s_c_t_p_association_1_1calc_bytes_to_send.html</anchorfile>
      <anchor>a377542c5dbfe873e1cad93ad1572618e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SCTPAssociation::congestionControlFunctions</name>
    <filename>struct_s_c_t_p_association_1_1congestion_control_functions.html</filename>
    <member kind="variable">
      <type>void(SCTPAssociation::*</type>
      <name>ccInitParams</name>
      <anchorfile>struct_s_c_t_p_association_1_1congestion_control_functions.html</anchorfile>
      <anchor>a0335ace73784010424c405e6399d2682</anchor>
      <arglist>)(SCTPPathVariables *path)</arglist>
    </member>
    <member kind="variable">
      <type>void(SCTPAssociation::*</type>
      <name>ccUpdateAfterSack</name>
      <anchorfile>struct_s_c_t_p_association_1_1congestion_control_functions.html</anchorfile>
      <anchor>a96e83612de4220f4ae94288f12321664</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="variable">
      <type>void(SCTPAssociation::*</type>
      <name>ccUpdateAfterCwndTimeout</name>
      <anchorfile>struct_s_c_t_p_association_1_1congestion_control_functions.html</anchorfile>
      <anchor>adb4779550ec7802f1087a2bcc82fc13a</anchor>
      <arglist>)(SCTPPathVariables *path)</arglist>
    </member>
    <member kind="variable">
      <type>void(SCTPAssociation::*</type>
      <name>ccUpdateAfterRtxTimeout</name>
      <anchorfile>struct_s_c_t_p_association_1_1congestion_control_functions.html</anchorfile>
      <anchor>a295dbbfc4f7566e89d9b93a11d82d26e</anchor>
      <arglist>)(SCTPPathVariables *path)</arglist>
    </member>
    <member kind="variable">
      <type>void(SCTPAssociation::*</type>
      <name>ccUpdateMaxBurst</name>
      <anchorfile>struct_s_c_t_p_association_1_1congestion_control_functions.html</anchorfile>
      <anchor>a85af39d34f5ec41337ccc16a4232fbe6</anchor>
      <arglist>)(SCTPPathVariables *path)</arglist>
    </member>
    <member kind="variable">
      <type>void(SCTPAssociation::*</type>
      <name>ccUpdateBytesAcked</name>
      <anchorfile>struct_s_c_t_p_association_1_1congestion_control_functions.html</anchorfile>
      <anchor>ad8f61b32a24107ce516331725cfe443d</anchor>
      <arglist>)(SCTPPathVariables *path, const uint32 ackedBytes, const bool ctsnaAdvanced)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SCTPAssociation::counter</name>
    <filename>struct_s_c_t_p_association_1_1counter.html</filename>
    <member kind="variable">
      <type>uint64</type>
      <name>roomSumSendStreams</name>
      <anchorfile>struct_s_c_t_p_association_1_1counter.html</anchorfile>
      <anchor>ac6621d7d6e88ca8e038fe040adcc5beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64</type>
      <name>bookedSumSendStreams</name>
      <anchorfile>struct_s_c_t_p_association_1_1counter.html</anchorfile>
      <anchor>aab189302bf40c67f2eec631bcd7de51f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64</type>
      <name>roomSumRcvStreams</name>
      <anchorfile>struct_s_c_t_p_association_1_1counter.html</anchorfile>
      <anchor>aa860967a47451b6ea090f0c3b81156de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CounterMap</type>
      <name>roomTransQ</name>
      <anchorfile>struct_s_c_t_p_association_1_1counter.html</anchorfile>
      <anchor>ac3aa579f1b930a68ef83ba1404448cc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CounterMap</type>
      <name>bookedTransQ</name>
      <anchorfile>struct_s_c_t_p_association_1_1counter.html</anchorfile>
      <anchor>a5d59aa98ddb5096586f4a9f85cc4ac16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CounterMap</type>
      <name>roomRetransQ</name>
      <anchorfile>struct_s_c_t_p_association_1_1counter.html</anchorfile>
      <anchor>a767e2849d053dd45d294d8678b8daed9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SCTPAssociation::streamSchedulingFunctions</name>
    <filename>struct_s_c_t_p_association_1_1stream_scheduling_functions.html</filename>
    <member kind="variable">
      <type>void(SCTPAssociation::*</type>
      <name>ssInitStreams</name>
      <anchorfile>struct_s_c_t_p_association_1_1stream_scheduling_functions.html</anchorfile>
      <anchor>a5796699025095f8e6c57aaff4b5d3538</anchor>
      <arglist>)(uint32 inStreams, uint32 outStreams)</arglist>
    </member>
    <member kind="variable">
      <type>int32(SCTPAssociation::*</type>
      <name>ssGetNextSid</name>
      <anchorfile>struct_s_c_t_p_association_1_1stream_scheduling_functions.html</anchorfile>
      <anchor>ad1b6db0c49758dcf9cb642afec4ea4a7</anchor>
      <arglist>)(bool peek)</arglist>
    </member>
    <member kind="variable">
      <type>int32(SCTPAssociation::*</type>
      <name>ssUsableStreams</name>
      <anchorfile>struct_s_c_t_p_association_1_1stream_scheduling_functions.html</anchorfile>
      <anchor>a4a2658a2c708281402b52571029ec7f7</anchor>
      <arglist>)()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPChunk</name>
    <filename>class_s_c_t_p_chunk.html</filename>
    <member kind="function">
      <type></type>
      <name>SCTPChunk</name>
      <anchorfile>class_s_c_t_p_chunk.html</anchorfile>
      <anchor>a7866bdf6279db1fdf418b4f27b6c0429</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPChunk</name>
      <anchorfile>class_s_c_t_p_chunk.html</anchorfile>
      <anchor>aec74a1628078cfde247ed9d483e82361</anchor>
      <arglist>(const SCTPChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPChunk</name>
      <anchorfile>class_s_c_t_p_chunk.html</anchorfile>
      <anchor>aca3fceb59bad880b2ec00029506556a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPChunk &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_chunk.html</anchorfile>
      <anchor>a0e5681273dd082352d2e905e38a614d5</anchor>
      <arglist>(const SCTPChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPChunk *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_chunk.html</anchorfile>
      <anchor>a606c16e2458500713b935ae34f70209c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_chunk.html</anchorfile>
      <anchor>a45d953bebea70af44e3ef02f6fad6ced</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_chunk.html</anchorfile>
      <anchor>a0fb042e813d289867bc30e63e558fda2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint8</type>
      <name>getChunkType</name>
      <anchorfile>class_s_c_t_p_chunk.html</anchorfile>
      <anchor>a752caf91430fcd3157a12e7e91361471</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChunkType</name>
      <anchorfile>class_s_c_t_p_chunk.html</anchorfile>
      <anchor>a34fe3ee4c5fc3000b097b959d757b875</anchor>
      <arglist>(uint8 chunkType_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_chunk.html</anchorfile>
      <anchor>aa73879b06c505f2d5d43c30b79abe8ae</anchor>
      <arglist>(const SCTPChunk &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint8</type>
      <name>chunkType_var</name>
      <anchorfile>class_s_c_t_p_chunk.html</anchorfile>
      <anchor>aa1757632e50aa13dd998ff21fc2f4372</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPClient</name>
    <filename>class_s_c_t_p_client.html</filename>
    <base>SCTPSocket::CallbackInterface</base>
    <class kind="struct">SCTPClient::pathStatus</class>
    <member kind="typedef">
      <type>std::map&lt; IPvXAddress, pathStatus &gt;</type>
      <name>SCTPPathStatus</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>ab00ac330905804fd474af0321400d90f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a1897812f2ae710e1b8ed1865d649805b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a30539e1c82dfd8d29d59dc3372560cd5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a1aca05649afa38c02638ed7fba23fa9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleTimer</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>adcbd283cf8d67b93a9370c8c50314403</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAssociation</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a0dca71b8020b13c1bcd8fa6d0a7d2c37</anchor>
      <arglist>(SCTPAssociation *_assoc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrimaryPath</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a74eb42f4a5d34a3896f204cce45e550c</anchor>
      <arglist>(const char *addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendRequestArrived</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a4086ce0b02ea3b376a63036cfe373a39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendQueueRequest</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a03b376909475b5c5c4defd07a346d81e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdownReceivedArrived</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a62cd0fb129e3318fa9582f6ead6f49b6</anchor>
      <arglist>(int32 connId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendqueueFullArrived</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a831425d6cb58d60c9022d0e082b42ade</anchor>
      <arglist>(int32 connId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendqueueAbatedArrived</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a9bd59dc1cf9d6dbf5c4dca456b98fc0b</anchor>
      <arglist>(int32 connId, uint64 buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addressAddedArrived</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>ad60ef29e0659693b8197d88ce5c6da74</anchor>
      <arglist>(int32 assocId, IPvXAddress remoteAddr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>aa10f12813a5203da6898395d0fd300e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>af662c61512ee3cfccb39446b21546220</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatusString</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a810046395240a788de3d6eb3b39ec1b0</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>socketEstablished</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a73f07f3146d3620672a45c37e6757ce9</anchor>
      <arglist>(int32 connId, void *yourPtr, uint64 buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>socketDataArrived</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a487ff4f73cad15e36a000aa05bc50553</anchor>
      <arglist>(int32 connId, void *yourPtr, cPacket *msg, bool urgent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>socketDataNotificationArrived</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>afd166ef074d98bcc17b99541ec95339b</anchor>
      <arglist>(int32 connId, void *yourPtr, cPacket *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>socketPeerClosed</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a4e1e4864ab030a0dd51c7daad1510fdf</anchor>
      <arglist>(int32 connId, void *yourPtr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>socketClosed</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a4d547451750d446507ccda3c80c3cc2c</anchor>
      <arglist>(int32 connId, void *yourPtr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>socketFailure</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a003ef97869710d8ea125d5365ab952b4</anchor>
      <arglist>(int32 connId, void *yourPtr, int32 code)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>socketStatusArrived</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a2b706b5a7ce750d7c9e68d94d4ab8686</anchor>
      <arglist>(int32 connId, void *yourPtr, SCTPStatusInfo *status)</arglist>
    </member>
    <member kind="variable">
      <type>SCTPPathStatus</type>
      <name>sctpPathStatus</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a6a9e1a16b5523a032a75730fc70744fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendRequest</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a657d397247f2a7383441749846c72ca6</anchor>
      <arglist>(bool last=true)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SCTPSocket</type>
      <name>socket</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a9342666c9058ff840d401f2dc6e7fb2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SCTPAssociation *</type>
      <name>assoc</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a302ac3ee016e41d5d079f95526ba46bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>numSessions</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a691b1c084c6b411ab1b64165847c9342</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>numBroken</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a22e3408b8ecde12b14cf0e80691808e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint64</type>
      <name>packetsSent</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>aab05193a35964865ea5ef2b3542effef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint64</type>
      <name>packetsRcvd</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>aedc1d9de1fa5513d09a01605c8e231e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint64</type>
      <name>bytesSent</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a7721f4b69eb90e87e138a61c39295fd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint64</type>
      <name>echoedBytesSent</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>ac02fe863ee63a10833d3a72cfff7099c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint64</type>
      <name>bytesRcvd</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>ab3b5c5a1a6b15e9f388b9d1600df29e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint64</type>
      <name>numRequestsToSend</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a76780e68eed787e63a2f6494da3c1917</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint64</type>
      <name>numPacketsToReceive</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a1c3c1bca46d36df9322b8ce17846af07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>numBytes</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a967f201cc95f1cae79557b0b73f913c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int64</type>
      <name>bufferSize</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a0fd125bed385b6cdc011b3f4ec4d04fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>echoFactor</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>ab6455b66a57f9f56fcd6a79d3eb7869a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>queueSize</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a6f94d78221a60e7a5a1d35d7a8c33389</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>inStreams</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>aad8ae39d481fd7ab60aade853d772176</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>outStreams</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a98aa4001f37bc13bdaf2783cec35105f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ordered</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>aee02e7dfdb98af365394afe265bf5835</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sendAllowed</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>ad49c51aff8c8e442d13270fe2bd9ce12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>timer</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>af9ea5b894883e4a2483630299e9d5ef0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>finishEndsSimulation</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a9689ea79a9d18435d044e6a7cc992772</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>timeMsg</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a46be85b53c73b5bc0e86fb2228717077</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>stopTimer</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>a1bf1e6af477a45607df0203548f7086a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>primaryChangeTimer</name>
      <anchorfile>class_s_c_t_p_client.html</anchorfile>
      <anchor>aa130671d6030abf5efb445b3cd3b9d72</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SCTPClient::pathStatus</name>
    <filename>struct_s_c_t_p_client_1_1path_status.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>active</name>
      <anchorfile>struct_s_c_t_p_client_1_1path_status.html</anchorfile>
      <anchor>a89bf17c087eec5cb6a68f8d9f0e7d2e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>primaryPath</name>
      <anchorfile>struct_s_c_t_p_client_1_1path_status.html</anchorfile>
      <anchor>ab39138b7e49b4b728e9075facc3c4412</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>pid</name>
      <anchorfile>struct_s_c_t_p_client_1_1path_status.html</anchorfile>
      <anchor>a17741ea0e83ba2cfc6c33e68a3fc7d3c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPCommand</name>
    <filename>class_s_c_t_p_command.html</filename>
    <member kind="function">
      <type></type>
      <name>SCTPCommand</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>a29c7c89106b64881755a3e1c09939ff1</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPCommand</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>a4ae09073e5c356f2de9db83deaca1eac</anchor>
      <arglist>(const SCTPCommand &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPCommand</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>ab29387e189f8a9988126ed9a8db4621e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPCommand &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>abf9663767b0316b4f87445c6107f944c</anchor>
      <arglist>(const SCTPCommand &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPCommand *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>ac1faf48524f7abc3cf23cd5bf0502d06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>a0861c81befa746134ccc4426bdd4cb12</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>a631db48adfe7fc030a8a8a661b3b18ea</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getAssocId</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>aff1456151f23aa69419b271f5b93164b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAssocId</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>aba989bb5fd07d31faf68d42bd90cbd02</anchor>
      <arglist>(int assocId_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSid</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>adb637d33f742c0510f40f73e030f360e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSid</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>a5e425cdf9ecc6360e1dcea80b055162d</anchor>
      <arglist>(int sid_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumMsgs</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>a92f0f9644b4f5ec70df1dcbd0c242b7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumMsgs</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>a37523301d495d32f6e84defd8efe6c26</anchor>
      <arglist>(int numMsgs_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSsn</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>a0d44122379426ca1b85019ad4a674fa7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSsn</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>a7e30f8086b994aa98f22e2adb3ed5192</anchor>
      <arglist>(int ssn_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getSendUnordered</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>ac3d2ee91a47f3a31d832fa32689a706e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSendUnordered</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>aff4b63211a335d3580c32293a0cc72eb</anchor>
      <arglist>(unsigned short sendUnordered_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLifetime</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>a1f328c56984312bf2541e68a2c43004b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLifetime</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>aadd824294ae1aea4d5ae7a5e80fdc34b</anchor>
      <arglist>(double lifetime_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>getLocalAddr</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>aacd49caceaec4610bbaaa99a226b924f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>getLocalAddr</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>a0cf34d6d922c9e2760b9221e74fb5203</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLocalAddr</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>ad00fba7f2376f9e105ec3b7232a1fe11</anchor>
      <arglist>(const IPvXAddress &amp;localAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>getRemoteAddr</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>a70de7026095cf55bb817329d0d0f2a1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>getRemoteAddr</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>a191a3a35783ebac7bc5bd5a7dd477bd4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRemoteAddr</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>a6d3dbedcd109903ced179bd3f56f9deb</anchor>
      <arglist>(const IPvXAddress &amp;remoteAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getGate</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>a966310e2d4daf42cd4bd8c1ebc2048bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGate</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>a29c81cea1aacc930b5e0d3f922d9dc7d</anchor>
      <arglist>(int gate_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>a46612d33d24a8bcc260c0ebfbe9b2af5</anchor>
      <arglist>(const SCTPCommand &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>assocId_var</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>a29420c3dee4b5a0fb0e99e3f13479b06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sid_var</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>ae843e3045afea7c0a42e1bfb85b542d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numMsgs_var</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>a00403bf38210af3a765697cc5a820742</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ssn_var</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>aeee9797a7d51e5672d8235b8338a0aaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>sendUnordered_var</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>a8a965a5f7abed7cbe84654c3387fab1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>lifetime_var</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>a907dea5875bbd9e592a32573ad790116</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPvXAddress</type>
      <name>localAddr_var</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>a0bfcfa0f164a46e756d2a364f3d56b83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPvXAddress</type>
      <name>remoteAddr_var</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>af42055cf381c1b729292dbc29ed001e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>gate_var</name>
      <anchorfile>class_s_c_t_p_command.html</anchorfile>
      <anchor>aded796741ca97aad7177dc1363e8f0d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPConnectInfo</name>
    <filename>class_s_c_t_p_connect_info.html</filename>
    <base>SCTPCommand</base>
    <member kind="function">
      <type></type>
      <name>SCTPConnectInfo</name>
      <anchorfile>class_s_c_t_p_connect_info.html</anchorfile>
      <anchor>aa3c89ebf5f07ae3603113568f63d5098</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPConnectInfo</name>
      <anchorfile>class_s_c_t_p_connect_info.html</anchorfile>
      <anchor>a0e5aa11e45c38061e541f43af3beaf34</anchor>
      <arglist>(const SCTPConnectInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPConnectInfo</name>
      <anchorfile>class_s_c_t_p_connect_info.html</anchorfile>
      <anchor>a1b1675ff536c35b053694a4f0def0c22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPConnectInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_connect_info.html</anchorfile>
      <anchor>a4f389911186b1682e38f889a2be7f526</anchor>
      <arglist>(const SCTPConnectInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPConnectInfo *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_connect_info.html</anchorfile>
      <anchor>aa890bb5fb52acfedccfdbcd0f43fefdc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_connect_info.html</anchorfile>
      <anchor>a5e9ac6cd05e14eca4e60e74e218efc84</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_connect_info.html</anchorfile>
      <anchor>a68256897c44d469e4fbd60abf20fb503</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AddressVector &amp;</type>
      <name>getRemoteAddresses</name>
      <anchorfile>class_s_c_t_p_connect_info.html</anchorfile>
      <anchor>a486103f76bd162affd70581bef891776</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const AddressVector &amp;</type>
      <name>getRemoteAddresses</name>
      <anchorfile>class_s_c_t_p_connect_info.html</anchorfile>
      <anchor>a7898be85b25f274910174f75194bfe7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRemoteAddresses</name>
      <anchorfile>class_s_c_t_p_connect_info.html</anchorfile>
      <anchor>a388e5f4b4eea024fdae9fedadf6d4cad</anchor>
      <arglist>(const AddressVector &amp;remoteAddresses_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getLocalPort</name>
      <anchorfile>class_s_c_t_p_connect_info.html</anchorfile>
      <anchor>ad7795fe67f60670397278140e5e0a1ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLocalPort</name>
      <anchorfile>class_s_c_t_p_connect_info.html</anchorfile>
      <anchor>af5790cd26c4f9a5b38ab12a0486f1ba0</anchor>
      <arglist>(int localPort_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRemotePort</name>
      <anchorfile>class_s_c_t_p_connect_info.html</anchorfile>
      <anchor>a0da8c0bf1eb965322e1d5f88f5a650ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRemotePort</name>
      <anchorfile>class_s_c_t_p_connect_info.html</anchorfile>
      <anchor>aa457e28ebfa7505dd63cd0f303d1beb6</anchor>
      <arglist>(int remotePort_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getStatus</name>
      <anchorfile>class_s_c_t_p_connect_info.html</anchorfile>
      <anchor>a8aab38fc857b11274c27e0e541c4025a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStatus</name>
      <anchorfile>class_s_c_t_p_connect_info.html</anchorfile>
      <anchor>a16e69d46215ecf4d9d7dd8f41c8d5d16</anchor>
      <arglist>(int status_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getInboundStreams</name>
      <anchorfile>class_s_c_t_p_connect_info.html</anchorfile>
      <anchor>abb8ae2048274398bbc89734c6ae3766e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInboundStreams</name>
      <anchorfile>class_s_c_t_p_connect_info.html</anchorfile>
      <anchor>a915066438f943362be06cb860e532858</anchor>
      <arglist>(int inboundStreams_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getOutboundStreams</name>
      <anchorfile>class_s_c_t_p_connect_info.html</anchorfile>
      <anchor>af5195ae63edd8eb3ab64bead078cdf04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOutboundStreams</name>
      <anchorfile>class_s_c_t_p_connect_info.html</anchorfile>
      <anchor>a75af494956b02c9c4f27aec31bd69937</anchor>
      <arglist>(int outboundStreams_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_connect_info.html</anchorfile>
      <anchor>a97eade8ce969de3f28e8cabe9b482a3f</anchor>
      <arglist>(const SCTPConnectInfo &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::AddressVector</type>
      <name>remoteAddresses_var</name>
      <anchorfile>class_s_c_t_p_connect_info.html</anchorfile>
      <anchor>a4d3b8d8e51d2f6e297781374bdbe49a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>localPort_var</name>
      <anchorfile>class_s_c_t_p_connect_info.html</anchorfile>
      <anchor>a1ad9f81ac874e1e5ec595c7d61a04e03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>remotePort_var</name>
      <anchorfile>class_s_c_t_p_connect_info.html</anchorfile>
      <anchor>af33da98a34ec11515a18dd1ecf7c7ddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>status_var</name>
      <anchorfile>class_s_c_t_p_connect_info.html</anchorfile>
      <anchor>af1b892d946578581387c7b52c6c433b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>inboundStreams_var</name>
      <anchorfile>class_s_c_t_p_connect_info.html</anchorfile>
      <anchor>a028f14baa37a11c9e7c356cad2ac0004</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>outboundStreams_var</name>
      <anchorfile>class_s_c_t_p_connect_info.html</anchorfile>
      <anchor>a9ce419f54a12a5726d9aeb36424d905c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPCookie</name>
    <filename>class_s_c_t_p_cookie.html</filename>
    <member kind="function">
      <type></type>
      <name>SCTPCookie</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>aebaebb85535fdcd29c2466e31bf39add</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPCookie</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>a7d4d262b158eaaeb5c6b57e6c29457b1</anchor>
      <arglist>(const SCTPCookie &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPCookie</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>ab93ef14be4230634e6f5d8d6b97b5a5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPCookie &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>a77d239e20e5d397034e1c8ba1f8d9d92</anchor>
      <arglist>(const SCTPCookie &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPCookie *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>aa79d1be1ffcd35c37f7a2bfb0580ba6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>a67e60fc5f2fd8ed9ab35ddda634fca1e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>a28b56242196b2faeb2f68ac2d3dafa1b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getCreationTime</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>a7179eff47c800dd97c0f37e7947f595b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCreationTime</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>a95882bf91ab2e066c92cc826d144fee5</anchor>
      <arglist>(simtime_t creationTime_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getLocalTag</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>a58e344ded6300ff9e53918bdfc9aaf71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLocalTag</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>ad68609537bab5a4073a9eb70f173d9bf</anchor>
      <arglist>(uint32 localTag_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getPeerTag</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>ab0b4b413af3d743f9fc768dbf3634f0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPeerTag</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>aa9e44596bb0c1f16569b0efe6f52ced8</anchor>
      <arglist>(uint32 peerTag_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLocalTieTagArraySize</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>a418651ad52ef5a5e436689a21eee0575</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getLocalTieTagArraySize</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>ab692edbcf99e7858e0fbb4f637a2f679</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint8</type>
      <name>getLocalTieTag</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>a8e219a869570afe5d5bc7dd6c89b38c8</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLocalTieTag</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>ae6f7653d65d8a5380b96fce7e2a8d757</anchor>
      <arglist>(unsigned int k, uint8 localTieTag_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPeerTieTagArraySize</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>a0cab05bbec5ce9ad0f62107a871e3bdd</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getPeerTieTagArraySize</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>a1f30b68816a780ab4508106fb89f47f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint8</type>
      <name>getPeerTieTag</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>ae49d49fe8c5bb9734f8b2fc2ba9f40c4</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPeerTieTag</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>aa296384e951b7eb7c17ab4807fb31e56</anchor>
      <arglist>(unsigned int k, uint8 peerTieTag_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>a09d694f619d84d7eac0df18c328aa984</anchor>
      <arglist>(const SCTPCookie &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>creationTime_var</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>a1b84490b31e7be5ed8a10a3428cf44c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>localTag_var</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>a6ce296c31463f93a4959a6372703944b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>peerTag_var</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>a6fa52aef0fb3d17ef9c7f24f76c0626b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint8 *</type>
      <name>localTieTag_var</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>a515efb9acc6b8945760f8b6e7ccd3ec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>localTieTag_arraysize</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>a076e0733172efaed84598dc0b69ab5e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint8 *</type>
      <name>peerTieTag_var</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>a6c05ef54022a8e883aa996e1fed42805</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>peerTieTag_arraysize</name>
      <anchorfile>class_s_c_t_p_cookie.html</anchorfile>
      <anchor>af70296360f9ea40638b68e90c093c347</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPCookieAckChunk</name>
    <filename>class_s_c_t_p_cookie_ack_chunk.html</filename>
    <base>SCTPChunk</base>
    <member kind="function">
      <type></type>
      <name>SCTPCookieAckChunk</name>
      <anchorfile>class_s_c_t_p_cookie_ack_chunk.html</anchorfile>
      <anchor>a67f37e2a7b2416fce7092d9e05ec9e89</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPCookieAckChunk</name>
      <anchorfile>class_s_c_t_p_cookie_ack_chunk.html</anchorfile>
      <anchor>aa8b4701e49870261ff986d6fb7c811af</anchor>
      <arglist>(const SCTPCookieAckChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPCookieAckChunk</name>
      <anchorfile>class_s_c_t_p_cookie_ack_chunk.html</anchorfile>
      <anchor>ab04fdc241ffb05268a009214ed85211a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPCookieAckChunk &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_cookie_ack_chunk.html</anchorfile>
      <anchor>ac6fe1b34b4bfa89114796853982f93b8</anchor>
      <arglist>(const SCTPCookieAckChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPCookieAckChunk *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_cookie_ack_chunk.html</anchorfile>
      <anchor>aa66bebbc4a52dec8ddea1ae183858af3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_cookie_ack_chunk.html</anchorfile>
      <anchor>a0851b4b4507182e9ef2247ac4128606a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_cookie_ack_chunk.html</anchorfile>
      <anchor>a62ed713bfae53b2c289adeda2e45d0de</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_cookie_ack_chunk.html</anchorfile>
      <anchor>a836d85fca19a56fe4ada4e236ccb52e9</anchor>
      <arglist>(const SCTPCookieAckChunk &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPCookieEchoChunk</name>
    <filename>class_s_c_t_p_cookie_echo_chunk.html</filename>
    <base>SCTPChunk</base>
    <member kind="function">
      <type></type>
      <name>SCTPCookieEchoChunk</name>
      <anchorfile>class_s_c_t_p_cookie_echo_chunk.html</anchorfile>
      <anchor>a90394078986f910733f2ce36b742e191</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPCookieEchoChunk</name>
      <anchorfile>class_s_c_t_p_cookie_echo_chunk.html</anchorfile>
      <anchor>aee5de8e570d0d32d92fad9743886ac6e</anchor>
      <arglist>(const SCTPCookieEchoChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPCookieEchoChunk</name>
      <anchorfile>class_s_c_t_p_cookie_echo_chunk.html</anchorfile>
      <anchor>aaced5193d95c2ade163b01ce5e692804</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPCookieEchoChunk &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_cookie_echo_chunk.html</anchorfile>
      <anchor>a11505c804ebcd16e70afb55a6f6e53b8</anchor>
      <arglist>(const SCTPCookieEchoChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPCookieEchoChunk *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_cookie_echo_chunk.html</anchorfile>
      <anchor>aea7eb41153f202007e1476f1da9d3242</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_cookie_echo_chunk.html</anchorfile>
      <anchor>a57f7622fe153fc511b33a83171b92c08</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_cookie_echo_chunk.html</anchorfile>
      <anchor>a0875e5e341de2d67d5907e0f132b2ff7</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCookieArraySize</name>
      <anchorfile>class_s_c_t_p_cookie_echo_chunk.html</anchorfile>
      <anchor>afb53154625a64f9292410c0aa07f6a7b</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getCookieArraySize</name>
      <anchorfile>class_s_c_t_p_cookie_echo_chunk.html</anchorfile>
      <anchor>a25f09010d055ab8d1eff2dcbfed08611</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getCookie</name>
      <anchorfile>class_s_c_t_p_cookie_echo_chunk.html</anchorfile>
      <anchor>aed9f912e0b7c694f865e20e1163e1877</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCookie</name>
      <anchorfile>class_s_c_t_p_cookie_echo_chunk.html</anchorfile>
      <anchor>aae468ff42821c1bd2b2d06979bb4bfa1</anchor>
      <arglist>(unsigned int k, char cookie_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacketPtr &amp;</type>
      <name>getStateCookie</name>
      <anchorfile>class_s_c_t_p_cookie_echo_chunk.html</anchorfile>
      <anchor>a08fee47c7a7d7f89a49949156069e267</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cPacketPtr &amp;</type>
      <name>getStateCookie</name>
      <anchorfile>class_s_c_t_p_cookie_echo_chunk.html</anchorfile>
      <anchor>a410a9530e5b38354f16633277771486c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStateCookie</name>
      <anchorfile>class_s_c_t_p_cookie_echo_chunk.html</anchorfile>
      <anchor>a992073a4d09627ba9cc9bceb7fae4a18</anchor>
      <arglist>(const cPacketPtr &amp;stateCookie_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUnrecognizedParametersArraySize</name>
      <anchorfile>class_s_c_t_p_cookie_echo_chunk.html</anchorfile>
      <anchor>aa0a06a918e71a02577655e8b09213d0a</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getUnrecognizedParametersArraySize</name>
      <anchorfile>class_s_c_t_p_cookie_echo_chunk.html</anchorfile>
      <anchor>a66537a5a996ca8113360105d3c59e8b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint8</type>
      <name>getUnrecognizedParameters</name>
      <anchorfile>class_s_c_t_p_cookie_echo_chunk.html</anchorfile>
      <anchor>a1788f700ec4fffac57bda9ca3e42c8eb</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUnrecognizedParameters</name>
      <anchorfile>class_s_c_t_p_cookie_echo_chunk.html</anchorfile>
      <anchor>a05c6d75a6d3061e80f122de74b082cfe</anchor>
      <arglist>(unsigned int k, uint8 unrecognizedParameters_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_cookie_echo_chunk.html</anchorfile>
      <anchor>a73571a58d119d7dcc4688a2d1ee7ce9e</anchor>
      <arglist>(const SCTPCookieEchoChunk &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>cookie_var</name>
      <anchorfile>class_s_c_t_p_cookie_echo_chunk.html</anchorfile>
      <anchor>ad547feb2cff22a4ce073aa06ee833e3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>cookie_arraysize</name>
      <anchorfile>class_s_c_t_p_cookie_echo_chunk.html</anchorfile>
      <anchor>a35e075e946366b91d40f61cebd653057</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::cPacketPtr</type>
      <name>stateCookie_var</name>
      <anchorfile>class_s_c_t_p_cookie_echo_chunk.html</anchorfile>
      <anchor>abd4d2d27f4b3659ab4a2a7250109f70c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint8 *</type>
      <name>unrecognizedParameters_var</name>
      <anchorfile>class_s_c_t_p_cookie_echo_chunk.html</anchorfile>
      <anchor>a4ddb229703f5a54c2b5c0d96f47a90e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>unrecognizedParameters_arraysize</name>
      <anchorfile>class_s_c_t_p_cookie_echo_chunk.html</anchorfile>
      <anchor>ae3cd318b2dbf526fe2c0baa527c305ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPDataChunk</name>
    <filename>class_s_c_t_p_data_chunk.html</filename>
    <base>SCTPChunk</base>
    <member kind="function">
      <type></type>
      <name>SCTPDataChunk</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>afa66365adc18c72177028994909b4393</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPDataChunk</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>a66a4df9a71208b223bfb2b973a20f6a3</anchor>
      <arglist>(const SCTPDataChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPDataChunk</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>ac69ef668678344d269eb4866b67de6a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPDataChunk &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>a0a207a816e1dc64295f489122c547322</anchor>
      <arglist>(const SCTPDataChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPDataChunk *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>a3150e87ab4d23e454efee71a93d629de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>ae37f85d5859ad76cb21d712b680fcd36</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>a5bb2584ce5d4e9441047fbd3f1e23273</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getEBit</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>a53ca18ab3a98a501cdc5800c1037afe2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEBit</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>ad08b849c2f66737004073fcf9489ea9f</anchor>
      <arglist>(bool eBit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getBBit</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>a09be0795444196f77657d82cfc0a1e8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBBit</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>a724fc911f9474506e538493de69b5b44</anchor>
      <arglist>(bool bBit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getUBit</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>a7e5d0159206e00474d6d19ca7d67c871</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUBit</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>a4a2128891da44ca9bbc49f528e6d6a64</anchor>
      <arglist>(bool uBit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getTsn</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>a3b70fe8e5afc376f25caa199b117c9f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTsn</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>ac09fbff350bda6bb9ce90e542ca5f0f6</anchor>
      <arglist>(uint32 tsn_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint16</type>
      <name>getSid</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>a8e381b0653e3fc6a34ae896e040b30bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSid</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>a5bd268fa40efdc716554009a846cde54</anchor>
      <arglist>(uint16 sid_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint16</type>
      <name>getSsn</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>a1473a86a339c6d1821a42ee85da6b792</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSsn</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>ad1875b29fb9b29fafe0b7e0c8e00e16d</anchor>
      <arglist>(uint16 ssn_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getPpid</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>af0daf8b4cbb2620106d449c065ac4a4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPpid</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>ae2f2910e3d5d92db00b1e83f48075830</anchor>
      <arglist>(uint32 ppid_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getEnqueuingTime</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>a7e3fb5266f2d375a6d918409124e577d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEnqueuingTime</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>afb04f882d3f3fbf41b3765e6b71fe4d7</anchor>
      <arglist>(simtime_t enqueuingTime_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>af72f2a7ee41ed81f47f76d133df2064f</anchor>
      <arglist>(const SCTPDataChunk &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>eBit_var</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>ad5c4c84988f545e9d22a4d18c466c91d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>bBit_var</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>a9725a1680d403463254a8b239feb23d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>uBit_var</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>a8fe06eb2b8d587ce9cd327f77f7d4a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>tsn_var</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>aba877b78c091ac6edac5350ed70b4a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16</type>
      <name>sid_var</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>a83a6e555a10a2be4fff31ba7dfd307eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16</type>
      <name>ssn_var</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>a33f4662e2adc3fdc587c58aa9eda28ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>ppid_var</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>abdd6fb625b297e9db771750a73522eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>enqueuingTime_var</name>
      <anchorfile>class_s_c_t_p_data_chunk.html</anchorfile>
      <anchor>a8836cab878c809a42fc18409f615462f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPDataMsg</name>
    <filename>class_s_c_t_p_data_msg.html</filename>
    <member kind="function">
      <type></type>
      <name>SCTPDataMsg</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>ab48dccc2c25a7c971e2e579d9d0dc0f7</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPDataMsg</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a0542fc00537150ec94da066e9a76b8e5</anchor>
      <arglist>(const SCTPDataMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPDataMsg</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a864b41ea729e375a20e6834cb9903a6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPDataMsg &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a308a1159d7c92f0a9d3769821aea389c</anchor>
      <arglist>(const SCTPDataMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPDataMsg *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>af0f8336240764e0a16a11f0c1997b991</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a6093881aa732a68c88384dfdb58e41a1</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>ac6cd9199fb22506949f9d46b97ff6689</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getEBit</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a16ca77ed5220f946269c2838b205238d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEBit</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a42b0bb93b07aea3eab53679bf25108ea</anchor>
      <arglist>(bool eBit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getBBit</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a66791083db0a3c81b3c1a19d7ac20705</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBBit</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>aa80e1d94a0473c57af83a904832c8501</anchor>
      <arglist>(bool bBit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getEnqueuingTime</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a68fe7122a327084a7b26e145034b11ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEnqueuingTime</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a1163d7814373fd146e0c986a2b4719d0</anchor>
      <arglist>(simtime_t enqueuingTime_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getExpiryTime</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>aeeff03647da83c58071347b3ed8c07e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpiryTime</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>af0b5889b9ff8af536a6737d28d097232</anchor>
      <arglist>(simtime_t expiryTime_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getPpid</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a7348d49fbc484324790370df2c0b0e5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPpid</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a088f44dcde7f36b7965651783d7718e8</anchor>
      <arglist>(uint32 ppid_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>getInitialDestination</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>adf278107a50be270fc1be3ace1c33c8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>getInitialDestination</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>adcc36bb093397054594232b97f0781a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInitialDestination</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a20341fb2db9b9748f7e6085dec0f62ac</anchor>
      <arglist>(const IPvXAddress &amp;initialDestination_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getMsgNum</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a09eae655e461e8d96257c0f744d2e41d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMsgNum</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>abb518c974103c5e7e3ca8356a85d983c</anchor>
      <arglist>(uint32 msgNum_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint16</type>
      <name>getSid</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a9d26613920f031e216c37939488240f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSid</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>af41c65da0f37b1c6e5776295ab884a42</anchor>
      <arglist>(uint16 sid_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getOrdered</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a7cdc8d3f1e15ff0b2372461d456755c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOrdered</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>ab651f3ad9931ab048fcf5c8283b3f8d5</anchor>
      <arglist>(bool ordered_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getBooksize</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a03a901a81d7a4ac6b1074870ac9ea099</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBooksize</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a006aea3ed0f0248439f279b53f3bee66</anchor>
      <arglist>(uint32 booksize_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getRtx</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a3493c4b982c065713dee133566fdfceb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRtx</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a4cc1ec28382a85d277a5b53859ed7ff2</anchor>
      <arglist>(uint32 rtx_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getFragment</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a96f3bbbc646cd841a14f28fcf547a8ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFragment</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a4e20c71bdc8707d6267cfb7d706368e1</anchor>
      <arglist>(bool fragment_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a858116a016df67dc25839e5b3a389498</anchor>
      <arglist>(const SCTPDataMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>eBit_var</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a9f87a8e9182587b825d317596884e21b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>bBit_var</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a039531001ac5ac55589fc73eb81599e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>enqueuingTime_var</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a91f1f5e5fb118b88aca17066c0e6dce7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>expiryTime_var</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a62e9299dbb837543ae6e88b1a8098bfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>ppid_var</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>ac71efb90fd044b161ca79e3649c0e59c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPvXAddress</type>
      <name>initialDestination_var</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a78699afb4a6366b4b110f103b11abed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>msgNum_var</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>ada5c80f8247cf50002f21d030e361799</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16</type>
      <name>sid_var</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>ad870682e80c3238710bf0857c82f14fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ordered_var</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a2059a1f91ed20dedd25759eb3db79857</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>booksize_var</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>ab42ecdd2a8769942d80312508b0d6ec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>rtx_var</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>ada56af05eec6f2455417aa0fc5a7c44b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>fragment_var</name>
      <anchorfile>class_s_c_t_p_data_msg.html</anchorfile>
      <anchor>a68833544545c0ae478306f8b6a49a564</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPDataVariables</name>
    <filename>class_s_c_t_p_data_variables.html</filename>
    <member kind="function">
      <type></type>
      <name>SCTPDataVariables</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>a38b741ca8babe3d6aeed710b8d41fbc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SCTPDataVariables</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>a0d7869ba8ee603584a5cc4dc10ffabe0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialDestination</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>ac1c4dfcec113a6eecaf4214b19c0eab2</anchor>
      <arglist>(SCTPPathVariables *path)</arglist>
    </member>
    <member kind="function">
      <type>const IPvXAddress &amp;</type>
      <name>getInitialDestination</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>a1fc180f06871e1a89647e7cd0df51f5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SCTPPathVariables *</type>
      <name>getInitialDestinationPath</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>a24112a5f40c053aa671d3279afd415ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLastDestination</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>afb6957b9621154b8e021b704e79cace2</anchor>
      <arglist>(SCTPPathVariables *path)</arglist>
    </member>
    <member kind="function">
      <type>const IPvXAddress &amp;</type>
      <name>getLastDestination</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>aab8ca4e56deac9cab60e83c2fa7c2c6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SCTPPathVariables *</type>
      <name>getLastDestinationPath</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>ad2160ca859be158877f7259d0e3d8ff8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNextDestination</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>ade6f850289ebac0c4d7964a96fc754f5</anchor>
      <arglist>(SCTPPathVariables *path)</arglist>
    </member>
    <member kind="function">
      <type>const IPvXAddress &amp;</type>
      <name>getNextDestination</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>af39b432c96285a2e9cd0d0320d091d7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SCTPPathVariables *</type>
      <name>getNextDestinationPath</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>ac7fecde61de64ef7a37e20a6a95c5d33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>cPacket *</type>
      <name>userData</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>aaafb0500520fdd9936987be73f6a27ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>len</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>adbda4b920dcea6965b2341fb11fd0d32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>booksize</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>a94e84b32d87ee8a38b88f0e8644e5876</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>tsn</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>ae52f66189071d5807283ee00e589e2eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>sid</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>aa3c89c48c0c3ab5cc9b73d7ff525f67e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>ssn</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>a518f7b638f4184fc01c4bdd20d641601</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enqueuedInTransmissionQ</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>a29289f62fc4878819b3b5ba132bf2c80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>countsAsOutstanding</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>a0edc92ee533475e1ac45922c2f482ca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasBeenFastRetransmitted</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>ab5595233870d7a9b0dc74b020ae7c9a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasBeenAbandoned</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>aaa76f0b0c8c7a31a466f08b1c1f917eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasBeenReneged</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>ac25b1776cd86480fba00adf7ffc3d281</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasBeenAcked</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>a6c09db8c77fdfceda4b5386f14093b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>bbit</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>a686aefff3b5cfc16ce1bfb7ed19d63de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>ebit</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>ad6905d87d02a21b9716f87c002d8297b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>ordered</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>a8a53863ea46d99a486027459aed60c49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>ppid</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>a960213e567faeed87d9ce98e993177a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>gapReports</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>a0311c740e321088d6ba6626816993e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>enqueuingTime</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>aa381bd2154d7b6846ae8fe7694b96a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>sendTime</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>a347b1c461d332be999051c3d1f0abaa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>ackTime</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>a5be5a13e25e285a3d4730f34cd62febb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>expiryTime</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>a6c7a768cb1d61bdce6b7c3ddef9dc9b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>numberOfRetransmissions</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>a7670756ef2a46e2f2185a047d19a3c03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>numberOfTransmissions</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>af9410192fb1add58020e8c9fd14928c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>allowedNoRetransmissions</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>a2f4e77f21b44ba30acf304159ffa0089</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPvXAddress</type>
      <name>zeroAddress</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>ae82232420916f1378e2d4862148b342b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SCTPPathVariables *</type>
      <name>initialDestination</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>a6eedec9207db978af948dad29a64a63f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SCTPPathVariables *</type>
      <name>lastDestination</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>a94a819d04c30aa67e9cd921c6b86bfd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SCTPPathVariables *</type>
      <name>nextDestination</name>
      <anchorfile>class_s_c_t_p_data_variables.html</anchorfile>
      <anchor>a568faae4e745aa0621f2b0d813f89b3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPErrorChunk</name>
    <filename>class_s_c_t_p_error_chunk.html</filename>
    <base>SCTPErrorChunk_Base</base>
    <member kind="function">
      <type></type>
      <name>SCTPErrorChunk</name>
      <anchorfile>class_s_c_t_p_error_chunk.html</anchorfile>
      <anchor>a2f1253f8ff102fb2d17ba367fa7729a3</anchor>
      <arglist>(const char *name=NULL, int32 kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPErrorChunk</name>
      <anchorfile>class_s_c_t_p_error_chunk.html</anchorfile>
      <anchor>abebb943740f360796cf6b4d68d6ddbad</anchor>
      <arglist>(const SCTPErrorChunk &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SCTPErrorChunk &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_error_chunk.html</anchorfile>
      <anchor>a233ce74922d55779dc861e84a18a168f</anchor>
      <arglist>(const SCTPErrorChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPErrorChunk *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_error_chunk.html</anchorfile>
      <anchor>a1bb3cc1b85e9329e673d7b8b8aa4d0e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParametersArraySize</name>
      <anchorfile>class_s_c_t_p_error_chunk.html</anchorfile>
      <anchor>a34969471b05cff256eb20cbd9cae807d</anchor>
      <arglist>(uint32 size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getParametersArraySize</name>
      <anchorfile>class_s_c_t_p_error_chunk.html</anchorfile>
      <anchor>a7b3588b447bfe205e5ef507e509e5ff0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameters</name>
      <anchorfile>class_s_c_t_p_error_chunk.html</anchorfile>
      <anchor>ad71aa66a32b7201cd237301c5875d114</anchor>
      <arglist>(uint32 k, const cPacketPtr &amp;parameters_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacketPtr &amp;</type>
      <name>getParameters</name>
      <anchorfile>class_s_c_t_p_error_chunk.html</anchorfile>
      <anchor>a6aa4518527f7ac33f91ac89a6537cc4f</anchor>
      <arglist>(uint32 k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addParameters</name>
      <anchorfile>class_s_c_t_p_error_chunk.html</anchorfile>
      <anchor>a442eb4938403317231dcbe1a50b4184d</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>removeParameter</name>
      <anchorfile>class_s_c_t_p_error_chunk.html</anchorfile>
      <anchor>aeda477504868f96c3d3adcb088e7beef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; cPacket * &gt;</type>
      <name>parameterList</name>
      <anchorfile>class_s_c_t_p_error_chunk.html</anchorfile>
      <anchor>ac7a768fec5d3f7d5d48b317fa3b0d9d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPErrorChunk_Base</name>
    <filename>class_s_c_t_p_error_chunk___base.html</filename>
    <base>SCTPChunk</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPErrorChunk_Base</name>
      <anchorfile>class_s_c_t_p_error_chunk___base.html</anchorfile>
      <anchor>ada0841ed58246a6a486b66b313eb2693</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPErrorChunk_Base *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_error_chunk___base.html</anchorfile>
      <anchor>ad84e953b89e0ee5e00cf8a76eef30c9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_error_chunk___base.html</anchorfile>
      <anchor>a28110404efd0d89ab5db89d285c62bb4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_error_chunk___base.html</anchorfile>
      <anchor>ab624f7774033071c9862eb0255694ac7</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getTBit</name>
      <anchorfile>class_s_c_t_p_error_chunk___base.html</anchorfile>
      <anchor>a47b4821811bc87985932063d2e8ef651</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTBit</name>
      <anchorfile>class_s_c_t_p_error_chunk___base.html</anchorfile>
      <anchor>aeb697eb67e33f57c337d3a5680f8cf39</anchor>
      <arglist>(bool TBit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getMBit</name>
      <anchorfile>class_s_c_t_p_error_chunk___base.html</anchorfile>
      <anchor>a31b2f7f3b73c28b7d5df9081cb87f2eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMBit</name>
      <anchorfile>class_s_c_t_p_error_chunk___base.html</anchorfile>
      <anchor>a659fd122e59830e425e223b65d312aa6</anchor>
      <arglist>(bool MBit_var)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setParametersArraySize</name>
      <anchorfile>class_s_c_t_p_error_chunk___base.html</anchorfile>
      <anchor>a81361cc2c57208946cffe5485bb0f3cb</anchor>
      <arglist>(unsigned int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getParametersArraySize</name>
      <anchorfile>class_s_c_t_p_error_chunk___base.html</anchorfile>
      <anchor>afeadd03aaa542e188237a33a1f7b7ce2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cPacketPtr &amp;</type>
      <name>getParameters</name>
      <anchorfile>class_s_c_t_p_error_chunk___base.html</anchorfile>
      <anchor>aced7976d379b15b3246e38fed98de4e9</anchor>
      <arglist>(unsigned int k)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cPacketPtr &amp;</type>
      <name>getParameters</name>
      <anchorfile>class_s_c_t_p_error_chunk___base.html</anchorfile>
      <anchor>abb788c96ee3925315d6d7f5b7e1feb7d</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setParameters</name>
      <anchorfile>class_s_c_t_p_error_chunk___base.html</anchorfile>
      <anchor>a3193ef3427d3a587f14ef5bf3ae06199</anchor>
      <arglist>(unsigned int k, const cPacketPtr &amp;parameters_var)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_error_chunk___base.html</anchorfile>
      <anchor>ac983a7ac99873d525fa2a59c169460e5</anchor>
      <arglist>(const SCTPErrorChunk_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SCTPErrorChunk_Base</name>
      <anchorfile>class_s_c_t_p_error_chunk___base.html</anchorfile>
      <anchor>a4614e0c715d8b4f09c700f70dd9ad484</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SCTPErrorChunk_Base</name>
      <anchorfile>class_s_c_t_p_error_chunk___base.html</anchorfile>
      <anchor>a6a7036224ea4c8d9ff6c4ba200906601</anchor>
      <arglist>(const SCTPErrorChunk_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SCTPErrorChunk_Base &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_error_chunk___base.html</anchorfile>
      <anchor>a3d5ddfc1e3f6bdf3c4491047acd4b63a</anchor>
      <arglist>(const SCTPErrorChunk_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>TBit_var</name>
      <anchorfile>class_s_c_t_p_error_chunk___base.html</anchorfile>
      <anchor>a03d188d265362407ad71bddc2b3204fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>MBit_var</name>
      <anchorfile>class_s_c_t_p_error_chunk___base.html</anchorfile>
      <anchor>ac30bb0af9042ddb1bff94decf2ea9c82</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPErrorInfo</name>
    <filename>class_s_c_t_p_error_info.html</filename>
    <base>SCTPCommand</base>
    <member kind="function">
      <type></type>
      <name>SCTPErrorInfo</name>
      <anchorfile>class_s_c_t_p_error_info.html</anchorfile>
      <anchor>a9626f20545807d44b243a679979ef692</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPErrorInfo</name>
      <anchorfile>class_s_c_t_p_error_info.html</anchorfile>
      <anchor>ae39a5fe68e6a76354c5775cc37095a58</anchor>
      <arglist>(const SCTPErrorInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPErrorInfo</name>
      <anchorfile>class_s_c_t_p_error_info.html</anchorfile>
      <anchor>a5aa5c4173a1792b43dd4b5c6123fbddc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPErrorInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_error_info.html</anchorfile>
      <anchor>a267debba49a623b748ddac7afb52fc0d</anchor>
      <arglist>(const SCTPErrorInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPErrorInfo *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_error_info.html</anchorfile>
      <anchor>aaac52375d6b30d58bc309039d8582bec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_error_info.html</anchorfile>
      <anchor>aaae9ef9a3587611774880e3baaac56ad</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_error_info.html</anchorfile>
      <anchor>a9e5b4498d75259a854aa367a44a81dd1</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getErrorCode</name>
      <anchorfile>class_s_c_t_p_error_info.html</anchorfile>
      <anchor>ad95d58639fba9f42cbc80a843121aa20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setErrorCode</name>
      <anchorfile>class_s_c_t_p_error_info.html</anchorfile>
      <anchor>ab00c7a1c157631a1253f48ebd036e18c</anchor>
      <arglist>(int errorCode_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getMessageText</name>
      <anchorfile>class_s_c_t_p_error_info.html</anchorfile>
      <anchor>a6603d1fbd0b2653412daa5b257ea9ab1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMessageText</name>
      <anchorfile>class_s_c_t_p_error_info.html</anchorfile>
      <anchor>a644bcf58a053b86eea13c775a68408a8</anchor>
      <arglist>(const char *messageText_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_error_info.html</anchorfile>
      <anchor>ac226dc014c52ec154f2bcbfed609890d</anchor>
      <arglist>(const SCTPErrorInfo &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>errorCode_var</name>
      <anchorfile>class_s_c_t_p_error_info.html</anchorfile>
      <anchor>acb1a9827b0861af7d0d6c4d5d905311c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>messageText_var</name>
      <anchorfile>class_s_c_t_p_error_info.html</anchorfile>
      <anchor>aaa3242348e4447fdbf274839d688c6f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPForwardTsnChunk</name>
    <filename>class_s_c_t_p_forward_tsn_chunk.html</filename>
    <base>SCTPChunk</base>
    <member kind="function">
      <type></type>
      <name>SCTPForwardTsnChunk</name>
      <anchorfile>class_s_c_t_p_forward_tsn_chunk.html</anchorfile>
      <anchor>aabf64001f932af972b98534a363a7742</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPForwardTsnChunk</name>
      <anchorfile>class_s_c_t_p_forward_tsn_chunk.html</anchorfile>
      <anchor>ac30035d21b922634a08a4415adf399a4</anchor>
      <arglist>(const SCTPForwardTsnChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPForwardTsnChunk</name>
      <anchorfile>class_s_c_t_p_forward_tsn_chunk.html</anchorfile>
      <anchor>a1f3f5c95755ab1dafff22166c570659e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPForwardTsnChunk &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_forward_tsn_chunk.html</anchorfile>
      <anchor>a561d96e665ba55d5a1741c27dc9c2f3d</anchor>
      <arglist>(const SCTPForwardTsnChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPForwardTsnChunk *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_forward_tsn_chunk.html</anchorfile>
      <anchor>a610bd9731971d362621fe6def1ea7e1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_forward_tsn_chunk.html</anchorfile>
      <anchor>a9216e56c9918848b17156ee3d2c99673</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_forward_tsn_chunk.html</anchorfile>
      <anchor>a7dce5e47105c35704d96ad0e95b5d21e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getNewCumTsn</name>
      <anchorfile>class_s_c_t_p_forward_tsn_chunk.html</anchorfile>
      <anchor>a8f13ead192acc9e195b2f36993c268c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNewCumTsn</name>
      <anchorfile>class_s_c_t_p_forward_tsn_chunk.html</anchorfile>
      <anchor>abf40450746a1cc3fd7228aee3d3a4522</anchor>
      <arglist>(uint32 newCumTsn_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSidArraySize</name>
      <anchorfile>class_s_c_t_p_forward_tsn_chunk.html</anchorfile>
      <anchor>a532b0dbe1658a4f323912715c3920f71</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSidArraySize</name>
      <anchorfile>class_s_c_t_p_forward_tsn_chunk.html</anchorfile>
      <anchor>a4a893fe2cae3e80909fcd2ac1f88bcfc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint16</type>
      <name>getSid</name>
      <anchorfile>class_s_c_t_p_forward_tsn_chunk.html</anchorfile>
      <anchor>ac6f57694ee93b2e42cc2b1ecc5eab216</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSid</name>
      <anchorfile>class_s_c_t_p_forward_tsn_chunk.html</anchorfile>
      <anchor>aac28fb2069d61dbd633bea5e23f7a2c9</anchor>
      <arglist>(unsigned int k, uint16 sid_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSsnArraySize</name>
      <anchorfile>class_s_c_t_p_forward_tsn_chunk.html</anchorfile>
      <anchor>a201b85c23ca192c07c2aa83ceee31461</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSsnArraySize</name>
      <anchorfile>class_s_c_t_p_forward_tsn_chunk.html</anchorfile>
      <anchor>ae5eab280f7535bfb2f5abbffb8ce1c6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getSsn</name>
      <anchorfile>class_s_c_t_p_forward_tsn_chunk.html</anchorfile>
      <anchor>a2cf6c85f9cfb53860f62eec3ed88a1dc</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSsn</name>
      <anchorfile>class_s_c_t_p_forward_tsn_chunk.html</anchorfile>
      <anchor>a8bf73fcd12eba07bc1d67e460c64544e</anchor>
      <arglist>(unsigned int k, short ssn_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_forward_tsn_chunk.html</anchorfile>
      <anchor>a306e3a2c173f7ec39a5d5a77c1f3233b</anchor>
      <arglist>(const SCTPForwardTsnChunk &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>newCumTsn_var</name>
      <anchorfile>class_s_c_t_p_forward_tsn_chunk.html</anchorfile>
      <anchor>a7c8c0eee675faf3d4a2fcf6a6c61e550</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16 *</type>
      <name>sid_var</name>
      <anchorfile>class_s_c_t_p_forward_tsn_chunk.html</anchorfile>
      <anchor>ae1911df4ccf89c7017eca5f3cd58562c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>sid_arraysize</name>
      <anchorfile>class_s_c_t_p_forward_tsn_chunk.html</anchorfile>
      <anchor>ae50d7282ef914d2f2ba6bd737973440e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short *</type>
      <name>ssn_var</name>
      <anchorfile>class_s_c_t_p_forward_tsn_chunk.html</anchorfile>
      <anchor>a46d8fc19ab6cd109c989b9b740d9b258</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>ssn_arraysize</name>
      <anchorfile>class_s_c_t_p_forward_tsn_chunk.html</anchorfile>
      <anchor>a0c1411e570d805eae877ed8410549209</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPHeartbeatAckChunk</name>
    <filename>class_s_c_t_p_heartbeat_ack_chunk.html</filename>
    <base>SCTPChunk</base>
    <member kind="function">
      <type></type>
      <name>SCTPHeartbeatAckChunk</name>
      <anchorfile>class_s_c_t_p_heartbeat_ack_chunk.html</anchorfile>
      <anchor>a08747f448644fd1f5a13eb59b83807b8</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPHeartbeatAckChunk</name>
      <anchorfile>class_s_c_t_p_heartbeat_ack_chunk.html</anchorfile>
      <anchor>ac3e37827965cf892ab2e821610707172</anchor>
      <arglist>(const SCTPHeartbeatAckChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPHeartbeatAckChunk</name>
      <anchorfile>class_s_c_t_p_heartbeat_ack_chunk.html</anchorfile>
      <anchor>a35cac39ae90aa9d646162dafe5c60596</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPHeartbeatAckChunk &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_heartbeat_ack_chunk.html</anchorfile>
      <anchor>addec8f8e1686872490d13e762182a393</anchor>
      <arglist>(const SCTPHeartbeatAckChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPHeartbeatAckChunk *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_heartbeat_ack_chunk.html</anchorfile>
      <anchor>a6874f2b1aeee96ec033e763623eada5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_heartbeat_ack_chunk.html</anchorfile>
      <anchor>a0489d554d4d6e60c56421cda33203494</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_heartbeat_ack_chunk.html</anchorfile>
      <anchor>a7c14cbd52f28303a2a901f93e0c926c7</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>getRemoteAddr</name>
      <anchorfile>class_s_c_t_p_heartbeat_ack_chunk.html</anchorfile>
      <anchor>a59638fa6af7a15845301f38dc49145d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>getRemoteAddr</name>
      <anchorfile>class_s_c_t_p_heartbeat_ack_chunk.html</anchorfile>
      <anchor>a216042e62cb20714a6ffb196b90f27c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRemoteAddr</name>
      <anchorfile>class_s_c_t_p_heartbeat_ack_chunk.html</anchorfile>
      <anchor>a22ba7bcdf20e1b65cb8a312dcf20a87d</anchor>
      <arglist>(const IPvXAddress &amp;remoteAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getTimeField</name>
      <anchorfile>class_s_c_t_p_heartbeat_ack_chunk.html</anchorfile>
      <anchor>ad42968f09a2532b8fa4dfdb1fd58bb69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeField</name>
      <anchorfile>class_s_c_t_p_heartbeat_ack_chunk.html</anchorfile>
      <anchor>ac40c3fc4bf7d2c57ecd7ac7add556915</anchor>
      <arglist>(simtime_t timeField_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInfoArraySize</name>
      <anchorfile>class_s_c_t_p_heartbeat_ack_chunk.html</anchorfile>
      <anchor>a4f2aee5f64fb0c662e682429ec939cd8</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getInfoArraySize</name>
      <anchorfile>class_s_c_t_p_heartbeat_ack_chunk.html</anchorfile>
      <anchor>a4239007b703f906e770471ca6757fefb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getInfo</name>
      <anchorfile>class_s_c_t_p_heartbeat_ack_chunk.html</anchorfile>
      <anchor>a6a665db7ff1af98f5b61b0789952a32d</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInfo</name>
      <anchorfile>class_s_c_t_p_heartbeat_ack_chunk.html</anchorfile>
      <anchor>ab708e9a084ecb0e4cf9fafa0037fca6b</anchor>
      <arglist>(unsigned int k, char info_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_heartbeat_ack_chunk.html</anchorfile>
      <anchor>a8f8d874daf56ee4dc9fbb5d9b739ec8f</anchor>
      <arglist>(const SCTPHeartbeatAckChunk &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPvXAddress</type>
      <name>remoteAddr_var</name>
      <anchorfile>class_s_c_t_p_heartbeat_ack_chunk.html</anchorfile>
      <anchor>a03faef307973e777411ba5daea2cd9af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>timeField_var</name>
      <anchorfile>class_s_c_t_p_heartbeat_ack_chunk.html</anchorfile>
      <anchor>ab821fd0daceda0088ab3be2c429a87b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>info_var</name>
      <anchorfile>class_s_c_t_p_heartbeat_ack_chunk.html</anchorfile>
      <anchor>a876ddafc3d364e36d0b4117d2a3c349b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>info_arraysize</name>
      <anchorfile>class_s_c_t_p_heartbeat_ack_chunk.html</anchorfile>
      <anchor>ac8a66ba2fb841ea0be7ad8e22a039e7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPHeartbeatChunk</name>
    <filename>class_s_c_t_p_heartbeat_chunk.html</filename>
    <base>SCTPChunk</base>
    <member kind="function">
      <type></type>
      <name>SCTPHeartbeatChunk</name>
      <anchorfile>class_s_c_t_p_heartbeat_chunk.html</anchorfile>
      <anchor>a5e62bb7f5e20d60f8051cefa48c601de</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPHeartbeatChunk</name>
      <anchorfile>class_s_c_t_p_heartbeat_chunk.html</anchorfile>
      <anchor>a313c9fe0a838ff25f70a1c56bf7aca48</anchor>
      <arglist>(const SCTPHeartbeatChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPHeartbeatChunk</name>
      <anchorfile>class_s_c_t_p_heartbeat_chunk.html</anchorfile>
      <anchor>ac8cbe91c93cb9cacc400283361a09db9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPHeartbeatChunk &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_heartbeat_chunk.html</anchorfile>
      <anchor>a2265a304c03084d100aa5ee83db7a267</anchor>
      <arglist>(const SCTPHeartbeatChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPHeartbeatChunk *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_heartbeat_chunk.html</anchorfile>
      <anchor>a7185dc12f93e567bd760224b42f3d485</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_heartbeat_chunk.html</anchorfile>
      <anchor>adcc14ab35d78f32b50a81d4d0377ca3b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_heartbeat_chunk.html</anchorfile>
      <anchor>aac2fa8a30902aa6b1b1b5299b827e087</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>getRemoteAddr</name>
      <anchorfile>class_s_c_t_p_heartbeat_chunk.html</anchorfile>
      <anchor>a671948890fb3346480996dfcd2b16e9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>getRemoteAddr</name>
      <anchorfile>class_s_c_t_p_heartbeat_chunk.html</anchorfile>
      <anchor>a9470beb5f5579670f8ffe6ea58be02f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRemoteAddr</name>
      <anchorfile>class_s_c_t_p_heartbeat_chunk.html</anchorfile>
      <anchor>a3cf69330567c13da3708bb108f9eb00b</anchor>
      <arglist>(const IPvXAddress &amp;remoteAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getTimeField</name>
      <anchorfile>class_s_c_t_p_heartbeat_chunk.html</anchorfile>
      <anchor>a9c0553f66439a5818d86e84e8704feb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeField</name>
      <anchorfile>class_s_c_t_p_heartbeat_chunk.html</anchorfile>
      <anchor>a665e3ae6f0e08d390890b174bfd275be</anchor>
      <arglist>(simtime_t timeField_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInfoArraySize</name>
      <anchorfile>class_s_c_t_p_heartbeat_chunk.html</anchorfile>
      <anchor>a074df611249523d0e39593083d98fc59</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getInfoArraySize</name>
      <anchorfile>class_s_c_t_p_heartbeat_chunk.html</anchorfile>
      <anchor>a3f724f66dfb7dc7e7030e83ad932e8d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getInfo</name>
      <anchorfile>class_s_c_t_p_heartbeat_chunk.html</anchorfile>
      <anchor>a9c2f2e4e1dab48f25fe92da7af38478c</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInfo</name>
      <anchorfile>class_s_c_t_p_heartbeat_chunk.html</anchorfile>
      <anchor>abcaa138d0015f1a9ebdb0666911f5f16</anchor>
      <arglist>(unsigned int k, char info_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_heartbeat_chunk.html</anchorfile>
      <anchor>a5b9138bc56c5f14e008ad6b363060031</anchor>
      <arglist>(const SCTPHeartbeatChunk &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPvXAddress</type>
      <name>remoteAddr_var</name>
      <anchorfile>class_s_c_t_p_heartbeat_chunk.html</anchorfile>
      <anchor>ab733a2e1f8d2d1a05b7b4a1365115163</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>timeField_var</name>
      <anchorfile>class_s_c_t_p_heartbeat_chunk.html</anchorfile>
      <anchor>a9def7bec16fa307fc5365b2c79f17bdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>info_var</name>
      <anchorfile>class_s_c_t_p_heartbeat_chunk.html</anchorfile>
      <anchor>aa27b3c726ed26673f4cdefbc374cab98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>info_arraysize</name>
      <anchorfile>class_s_c_t_p_heartbeat_chunk.html</anchorfile>
      <anchor>a09f9c5c293674a3ca8ef326add9e0aad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPInfo</name>
    <filename>class_s_c_t_p_info.html</filename>
    <base>SCTPCommand</base>
    <member kind="function">
      <type></type>
      <name>SCTPInfo</name>
      <anchorfile>class_s_c_t_p_info.html</anchorfile>
      <anchor>aaea8c39580d0d059087ebfc84eabce5b</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPInfo</name>
      <anchorfile>class_s_c_t_p_info.html</anchorfile>
      <anchor>a0c930702559e9191e5c443f0da2f9407</anchor>
      <arglist>(const SCTPInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPInfo</name>
      <anchorfile>class_s_c_t_p_info.html</anchorfile>
      <anchor>a8be668db37d3d926e45e0bc3beb18ae3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_info.html</anchorfile>
      <anchor>a93cfa10ef3e50618a7f4bfcbe190f0e1</anchor>
      <arglist>(const SCTPInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPInfo *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_info.html</anchorfile>
      <anchor>a54c2ce2805e8de097a962e674cabb0a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_info.html</anchorfile>
      <anchor>aa686716a9eb4b059cb036221358c355a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_info.html</anchorfile>
      <anchor>a4e43ac27f3805b24164e7cc9dac64393</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getText</name>
      <anchorfile>class_s_c_t_p_info.html</anchorfile>
      <anchor>a439aa6ce789171ca41f8b3c5e3f9735f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setText</name>
      <anchorfile>class_s_c_t_p_info.html</anchorfile>
      <anchor>afca097e5e046ec9282fc679f2081d8ca</anchor>
      <arglist>(int text_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_info.html</anchorfile>
      <anchor>a7a54355713f8c2a56ce1acb1258494fd</anchor>
      <arglist>(const SCTPInfo &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>text_var</name>
      <anchorfile>class_s_c_t_p_info.html</anchorfile>
      <anchor>a7cc84246c3e81b12ea81aef3f4c4a447</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPInitAckChunk</name>
    <filename>class_s_c_t_p_init_ack_chunk.html</filename>
    <base>SCTPChunk</base>
    <member kind="function">
      <type></type>
      <name>SCTPInitAckChunk</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>a6d268b740c7876cbd29c7ce76a04789e</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPInitAckChunk</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>abad397a223b1cb7c4c0e37f72e6a03ff</anchor>
      <arglist>(const SCTPInitAckChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPInitAckChunk</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>a1c5247856b1960b7566d9c3475a8bd2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPInitAckChunk &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>ad8b4ca6765f9743c7147e059e8f91188</anchor>
      <arglist>(const SCTPInitAckChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPInitAckChunk *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>a0b3959713522d34f4decf7512d08b3e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>a6750b2f1305ffbf5afe6a20a8e108a0e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>aaa1f5ee998c8c6a0da7a73ce78d6ffb1</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getInitTag</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>a067000126a6938965bc9deaeed4f33d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInitTag</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>a2ef9485a254b97e0306b3f638cb18dfa</anchor>
      <arglist>(uint32 initTag_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getA_rwnd</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>aa625f04bffd8ec87bb7226eb3ed1abb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setA_rwnd</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>aca89e11d23aba5c9ea06e7bce8e3b652</anchor>
      <arglist>(uint32 a_rwnd_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint16</type>
      <name>getNoOutStreams</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>a64b761b71a09ea953f5bce83fd97ffdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNoOutStreams</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>a45f3f8ab1fae8c1bbc9879ed5b13db1f</anchor>
      <arglist>(uint16 noOutStreams_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint16</type>
      <name>getNoInStreams</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>ad5c6481930be3268165af4939b911bd3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNoInStreams</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>ace45ebfc454e4ac5867e7febaee16a22</anchor>
      <arglist>(uint16 noInStreams_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getInitTSN</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>ab0621aa5ef96b63f7a2660c421149179</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInitTSN</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>a24cf153a309a88d3c6fdb6ea11256ff9</anchor>
      <arglist>(uint32 initTSN_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getForwardTsn</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>a667f3be63f060b6840fe2a9dcca2dbf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setForwardTsn</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>a3c5e1e72b265231ced915f54c4700943</anchor>
      <arglist>(bool forwardTsn_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddressesArraySize</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>ad70d5abe980530ad3acbf9cbcf419a8a</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getAddressesArraySize</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>a5c7c883d19db47b99bc1549fb5000a2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>getAddresses</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>ab0b54784a3ce7250ea7319d06c2c1d51</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>getAddresses</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>ac0e9ed3ba0b0e8fa927aa87cf84d863f</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddresses</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>abac0eafe21562f7220b308e952763cf4</anchor>
      <arglist>(unsigned int k, const IPvXAddress &amp;addresses_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCookieArraySize</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>aacea71bb3621de42025d61f5b7db987d</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getCookieArraySize</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>a24e8f6d8289e0f9df13cb0b009591865</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getCookie</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>a8d62a78b87a356c3effaf9f90e3bf86a</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCookie</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>a35269ef38a24bd740441e36e0a4c08b3</anchor>
      <arglist>(unsigned int k, char cookie_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUnrecognizedParametersArraySize</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>ae7750b4f43ce1ba6d61af64d3ff27501</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getUnrecognizedParametersArraySize</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>a782f1937ded9a07b427f13c9a6a22330</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint8</type>
      <name>getUnrecognizedParameters</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>a5e151d257e5adafe3ca326f57e7df6e9</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUnrecognizedParameters</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>a68185c5126d620ce5aa51c015fb3ff53</anchor>
      <arglist>(unsigned int k, uint8 unrecognizedParameters_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacketPtr &amp;</type>
      <name>getStateCookie</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>a18e03b3bbea7b90f09d94bc1c24c97bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cPacketPtr &amp;</type>
      <name>getStateCookie</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>a6e9c82159c0fe1d6d106b13435895849</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStateCookie</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>a38090c2aa5d119bb287fc7f153511824</anchor>
      <arglist>(const cPacketPtr &amp;stateCookie_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>ac33c81a05af8ec275e43d4032559e79f</anchor>
      <arglist>(const SCTPInitAckChunk &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>initTag_var</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>ab60331e57cfae5471627202c8969ecf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>a_rwnd_var</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>a47b2f353a8adb8d4b7e208f10cd8fc02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16</type>
      <name>noOutStreams_var</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>ab18e89093b27f38f1695283381ae2563</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16</type>
      <name>noInStreams_var</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>af81b76f41c748c78051d92afacbf63ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>initTSN_var</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>a2b07e706b04dcf4dc7236313758f0d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>forwardTsn_var</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>a90b790720677574d535c841108bff4af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPvXAddress *</type>
      <name>addresses_var</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>a035f062fc48962d5e6e489daf79499c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>addresses_arraysize</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>aa3456db10c33a07c38ca58c47e924b8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>cookie_var</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>ae0ff0fb4afd2d4001daa9436a6aa7b4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>cookie_arraysize</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>af29278678f73fcafcf0ae508ddc7f93b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint8 *</type>
      <name>unrecognizedParameters_var</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>aee8c7243c8c2582925e417a6b0dd4d19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>unrecognizedParameters_arraysize</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>aedbe86e5a57169a3e654b5aa7850d564</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::cPacketPtr</type>
      <name>stateCookie_var</name>
      <anchorfile>class_s_c_t_p_init_ack_chunk.html</anchorfile>
      <anchor>a6c54b68ee0006e9f123122bf0e5db743</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPInitChunk</name>
    <filename>class_s_c_t_p_init_chunk.html</filename>
    <base>SCTPChunk</base>
    <member kind="function">
      <type></type>
      <name>SCTPInitChunk</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>ae72c7efb3f7772f5c96522ecdbd51289</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPInitChunk</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>a19e1d0e1be4d4b87de061ad8acd08dce</anchor>
      <arglist>(const SCTPInitChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPInitChunk</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>a2fe5c875c2f5aa448e6e1098052131da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPInitChunk &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>a7c6658363b4f9216beb3b034090351c5</anchor>
      <arglist>(const SCTPInitChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPInitChunk *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>a7d1fa52d2df1abf55584e1468f14c75b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>a0b102a2d24e2a4995af0cb8bce66b836</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>aae2407cadca4357671ee713f5a698e93</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getInitTag</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>afa1021475befe8c6a1c6916c71409458</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInitTag</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>ad413c763401283e0242464a9fa86c0ac</anchor>
      <arglist>(uint32 initTag_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getA_rwnd</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>ac3e3b0bfb2f205d91a1c0f451f214fde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setA_rwnd</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>a896799a07b82f91211161a5b75c6ef85</anchor>
      <arglist>(uint32 a_rwnd_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint16</type>
      <name>getNoOutStreams</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>a9216f42a96bd384ccd5fc7efbe429646</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNoOutStreams</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>aa4436dd2441ff6906064de5cc084d3a8</anchor>
      <arglist>(uint16 noOutStreams_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint16</type>
      <name>getNoInStreams</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>a7d5b4ee8a00cd330a724936d3ad0403d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNoInStreams</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>aac06e82e38763b50c4e681a1f1ec60d3</anchor>
      <arglist>(uint16 noInStreams_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getInitTSN</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>ae4065b9263e0e1fb023fa04cfbdf25d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInitTSN</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>af322f2b11a006a292f845ad6c8acdbbe</anchor>
      <arglist>(uint32 initTSN_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getForwardTsn</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>a27c6751c1f0a54ad25081090ece61b6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setForwardTsn</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>a7ba1f0d780fb473b4a56a2e0f77d364f</anchor>
      <arglist>(bool forwardTsn_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddressesArraySize</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>a3ac368b37dbf105ed1c996a3e61011c1</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getAddressesArraySize</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>ab8d75b13425628af279f244c43e17637</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>getAddresses</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>a959b2cb8375fd157035cad0b4e37c00e</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>getAddresses</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>a0a4de054576fc53742fb37d9916140e1</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddresses</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>a707d281ddcd2d9ad1cf9c83e507fedc9</anchor>
      <arglist>(unsigned int k, const IPvXAddress &amp;addresses_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUnrecognizedParametersArraySize</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>a8016aa2e43011981afe3029692d2708a</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getUnrecognizedParametersArraySize</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>a823a5de4117c53aae7d59244b02c6e63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint8</type>
      <name>getUnrecognizedParameters</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>ad020eb452f23dcb7a358db5aba72c8fe</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUnrecognizedParameters</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>a83c32d36bc24c93e465fc1d58c29d270</anchor>
      <arglist>(unsigned int k, uint8 unrecognizedParameters_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>a26db16ad85389ca729d204b077bd75c1</anchor>
      <arglist>(const SCTPInitChunk &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>initTag_var</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>aeea1fbb964df130cb1c6342635ccc928</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>a_rwnd_var</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>a301a110797ff895b4fd2fd33cc7c1b34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16</type>
      <name>noOutStreams_var</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>aef4a8f35f1ef6a2405adcffd69e8771c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16</type>
      <name>noInStreams_var</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>a370702962b3233de4befeac8486943c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>initTSN_var</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>a041957e015b8c11d893cecd4816b9d43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>forwardTsn_var</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>a75fca02a4bf3578c7bdca2f54e2468fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPvXAddress *</type>
      <name>addresses_var</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>ab553454d866aac707cbd8664f52d4783</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>addresses_arraysize</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>ac01dfc9fc5781625fd8cbf5fad2c46af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint8 *</type>
      <name>unrecognizedParameters_var</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>aa7d75c89b242594c28e54cd55c71fbf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>unrecognizedParameters_arraysize</name>
      <anchorfile>class_s_c_t_p_init_chunk.html</anchorfile>
      <anchor>a171979624b4c35df948e67134cb1c7dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPMessage</name>
    <filename>class_s_c_t_p_message.html</filename>
    <base>SCTPMessage_Base</base>
    <member kind="function">
      <type></type>
      <name>SCTPMessage</name>
      <anchorfile>class_s_c_t_p_message.html</anchorfile>
      <anchor>ad4adcd496e414185f639e174d428140b</anchor>
      <arglist>(const char *name=NULL, int32 kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPMessage</name>
      <anchorfile>class_s_c_t_p_message.html</anchorfile>
      <anchor>addc2857047572bf2ca5746da35c27d0b</anchor>
      <arglist>(const SCTPMessage &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SCTPMessage</name>
      <anchorfile>class_s_c_t_p_message.html</anchorfile>
      <anchor>a1550ee0374a6a5bf5d5db2a3d776dff8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_message.html</anchorfile>
      <anchor>a5b335da2d8063c0d4d531438a15e7898</anchor>
      <arglist>(const SCTPMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPMessage *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_message.html</anchorfile>
      <anchor>ab91514d12e81048f59d545f2aaeacd47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChunksArraySize</name>
      <anchorfile>class_s_c_t_p_message.html</anchorfile>
      <anchor>ae1fbea027929cf61586ed95db73f51ec</anchor>
      <arglist>(uint32 size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChunks</name>
      <anchorfile>class_s_c_t_p_message.html</anchorfile>
      <anchor>a8532bce9a30a3f37d1d87a2b2e0165bb</anchor>
      <arglist>(uint32 k, const cPacketPtr &amp;chunks_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getChunksArraySize</name>
      <anchorfile>class_s_c_t_p_message.html</anchorfile>
      <anchor>a6f20de2280586794996c56c77bf5c479</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacketPtr &amp;</type>
      <name>getChunks</name>
      <anchorfile>class_s_c_t_p_message.html</anchorfile>
      <anchor>a3fee5bba66df88a7771c3b5984f33008</anchor>
      <arglist>(uint32 k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addChunk</name>
      <anchorfile>class_s_c_t_p_message.html</anchorfile>
      <anchor>a46c6cc49994da66b04d2ab9eadc564b7</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>removeChunk</name>
      <anchorfile>class_s_c_t_p_message.html</anchorfile>
      <anchor>aa0f9b611f85c4e718a400e9f7379f4b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>removeLastChunk</name>
      <anchorfile>class_s_c_t_p_message.html</anchorfile>
      <anchor>a8bbf837e88246119125610642df53b82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>peekFirstChunk</name>
      <anchorfile>class_s_c_t_p_message.html</anchorfile>
      <anchor>adad5aaf65a07de9798d70b7c5f5d00e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>peekLastChunk</name>
      <anchorfile>class_s_c_t_p_message.html</anchorfile>
      <anchor>ac4bed970595e5ad793bb492f4c3d90a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; cPacket * &gt;</type>
      <name>chunkList</name>
      <anchorfile>class_s_c_t_p_message.html</anchorfile>
      <anchor>a64df683e33390635d5252059256a02be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPMessage_Base</name>
    <filename>class_s_c_t_p_message___base.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPMessage_Base</name>
      <anchorfile>class_s_c_t_p_message___base.html</anchorfile>
      <anchor>a3f78253c90866c106f26ca0f519c6316</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPMessage_Base *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_message___base.html</anchorfile>
      <anchor>a1cdbb28e86d58620208bc81d30bdeebe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_message___base.html</anchorfile>
      <anchor>a50c58d9abc0b99826a35f17a29fbfc1c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_message___base.html</anchorfile>
      <anchor>a86f3dbb4535756365ba3429f31b92c24</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint16</type>
      <name>getSrcPort</name>
      <anchorfile>class_s_c_t_p_message___base.html</anchorfile>
      <anchor>a558f8691efac42febdfd422ce52a762c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcPort</name>
      <anchorfile>class_s_c_t_p_message___base.html</anchorfile>
      <anchor>a1fc28c5f3b3ff6c808d254b1db9e46f8</anchor>
      <arglist>(uint16 srcPort_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint16</type>
      <name>getDestPort</name>
      <anchorfile>class_s_c_t_p_message___base.html</anchorfile>
      <anchor>a813a5ab9db3e1c4ae354bf44de934a5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestPort</name>
      <anchorfile>class_s_c_t_p_message___base.html</anchorfile>
      <anchor>a6944d6ac97e5afa1960a682638881a1b</anchor>
      <arglist>(uint16 destPort_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getTag</name>
      <anchorfile>class_s_c_t_p_message___base.html</anchorfile>
      <anchor>acdebc18b6064656d372b86198736dd67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTag</name>
      <anchorfile>class_s_c_t_p_message___base.html</anchorfile>
      <anchor>aab816f025dd8a85ce2603e161a5afced</anchor>
      <arglist>(uint32 tag_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getChecksumOk</name>
      <anchorfile>class_s_c_t_p_message___base.html</anchorfile>
      <anchor>a910312a024d42e851fd60799bf76606f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChecksumOk</name>
      <anchorfile>class_s_c_t_p_message___base.html</anchorfile>
      <anchor>a26c061cd614d7e818c3f727e0f41bdd8</anchor>
      <arglist>(bool checksumOk_var)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setChunksArraySize</name>
      <anchorfile>class_s_c_t_p_message___base.html</anchorfile>
      <anchor>a66142f84b36621db7aa518847a0641c6</anchor>
      <arglist>(unsigned int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getChunksArraySize</name>
      <anchorfile>class_s_c_t_p_message___base.html</anchorfile>
      <anchor>aec77464c600e9e900d47ec61cc2ab6ec</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cPacketPtr &amp;</type>
      <name>getChunks</name>
      <anchorfile>class_s_c_t_p_message___base.html</anchorfile>
      <anchor>a6627461220dacdfb882ad18ac04cf4aa</anchor>
      <arglist>(unsigned int k)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cPacketPtr &amp;</type>
      <name>getChunks</name>
      <anchorfile>class_s_c_t_p_message___base.html</anchorfile>
      <anchor>a6aad8fe85611b12554885a2d962d9c96</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setChunks</name>
      <anchorfile>class_s_c_t_p_message___base.html</anchorfile>
      <anchor>a96ab722ee0f5be8418932b02b595efe3</anchor>
      <arglist>(unsigned int k, const cPacketPtr &amp;chunks_var)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_message___base.html</anchorfile>
      <anchor>ac1e043f90bfa28c775046af4c5cd2c03</anchor>
      <arglist>(const SCTPMessage_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SCTPMessage_Base</name>
      <anchorfile>class_s_c_t_p_message___base.html</anchorfile>
      <anchor>a02bfd208e7ed490fc82d8addd5a0cccf</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SCTPMessage_Base</name>
      <anchorfile>class_s_c_t_p_message___base.html</anchorfile>
      <anchor>a3be11c328fa479444365e5221b54e9bc</anchor>
      <arglist>(const SCTPMessage_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SCTPMessage_Base &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_message___base.html</anchorfile>
      <anchor>aa8b9d9619b06de14b0e587910b0fb7c4</anchor>
      <arglist>(const SCTPMessage_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16</type>
      <name>srcPort_var</name>
      <anchorfile>class_s_c_t_p_message___base.html</anchorfile>
      <anchor>aa211f395fbf94549a78086c0f57ed24f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16</type>
      <name>destPort_var</name>
      <anchorfile>class_s_c_t_p_message___base.html</anchorfile>
      <anchor>a4a03481e6789c6ab2307045c2055f1ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>tag_var</name>
      <anchorfile>class_s_c_t_p_message___base.html</anchorfile>
      <anchor>a1ab423f2122793e31f8ec90af55eed45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>checksumOk_var</name>
      <anchorfile>class_s_c_t_p_message___base.html</anchorfile>
      <anchor>a972fcbc0feff520771cb6b016cfd5744</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPOpenCommand</name>
    <filename>class_s_c_t_p_open_command.html</filename>
    <base>SCTPCommand</base>
    <member kind="function">
      <type></type>
      <name>SCTPOpenCommand</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a756a42affa7787b8b76e663ab36ef598</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPOpenCommand</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>ad3180a8c8d9e2691ca6f7619022f1986</anchor>
      <arglist>(const SCTPOpenCommand &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPOpenCommand</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>ae3f9e516ee52997f392b85d0dff0d61a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPOpenCommand &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a3442459a0b40c6e728da1e28eaeac8c4</anchor>
      <arglist>(const SCTPOpenCommand &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPOpenCommand *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a86ff2140afd25fc2d4a14efe863e0b35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>af15980935c41e79faafa805e9e8d98b9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>aeb2a8547345c157cb61aee6e1329abda</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AddressVector &amp;</type>
      <name>getLocalAddresses</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a55ee83d88eb616c17c9ccd355f0a2521</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const AddressVector &amp;</type>
      <name>getLocalAddresses</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a9364b2d08752d9e8ce858951a74cc293</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLocalAddresses</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a4d780c3d1cb376633be49015e3872767</anchor>
      <arglist>(const AddressVector &amp;localAddresses_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>getRemoteAddr</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a8e0e1d1ab673005759b3953f9ab5e837</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>getRemoteAddr</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a228b3bb7028024b2128bc3bdb416bee5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRemoteAddr</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a7d2a408830ba7f503415e756547341a6</anchor>
      <arglist>(const IPvXAddress &amp;remoteAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AddressVector &amp;</type>
      <name>getRemoteAddresses</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a919d1c4053b7f14f4a43e7535a15b87a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const AddressVector &amp;</type>
      <name>getRemoteAddresses</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a238bf3bf59d8ab13dd06a87c03ec6fe9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRemoteAddresses</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a1ff0e133761317f7848fe97595eb10ae</anchor>
      <arglist>(const AddressVector &amp;remoteAddresses_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getLocalPort</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>ac922989303379d1c3f2cf1fa6d93c4d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLocalPort</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a5959f7d278c21b59d3a6c6615f48f15e</anchor>
      <arglist>(int localPort_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRemotePort</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a88ec5b020815df6ba5b45c9b3902c63d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRemotePort</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>ae507ed266642f53b294367e74ab2f77c</anchor>
      <arglist>(int remotePort_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getFork</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a23e148d74c6fa0c1c4bdd1403f3433c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFork</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a7a1aecd5a48ff886315c255477cbefb6</anchor>
      <arglist>(bool fork_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getQueueClass</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>aeaafa47d932f57c0020971007e535d39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setQueueClass</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a65bad20ef85885f467d1d3a8bf491fe6</anchor>
      <arglist>(const char *queueClass_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getSctpAlgorithmClass</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a4265d331624f0d855e591db8c0249f0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSctpAlgorithmClass</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>aff8a7f35f65f74a53c6e19d8589fa9f6</anchor>
      <arglist>(const char *sctpAlgorithmClass_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getInboundStreams</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>acb41a390b9afe034552ccae93066b681</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInboundStreams</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>ad7976e71404ea87830a351649e9b119a</anchor>
      <arglist>(uint32 inboundStreams_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getOutboundStreams</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a9758cae51dd15634709d63b5cf82343e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOutboundStreams</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a1709e599ba4e9fa321865e6f4ae941d5</anchor>
      <arglist>(uint32 outboundStreams_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getNumRequests</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a0324c042d1701ef49a8536cc8f20a0e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumRequests</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a8bfb58359ad6d1da96a8dbe56895993d</anchor>
      <arglist>(uint32 numRequests_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getMessagesToPush</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>af614eb6f5d9e154d3b0312df5d3b5871</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMessagesToPush</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a38e0c543f6b04e51fd385373ad66abf8</anchor>
      <arglist>(uint32 messagesToPush_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a0c3eedeb2588e51ef2d1580bb135877b</anchor>
      <arglist>(const SCTPOpenCommand &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::AddressVector</type>
      <name>localAddresses_var</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a7867ee107bc1cab6a7b40ed7ab9a7143</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPvXAddress</type>
      <name>remoteAddr_var</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a5e382e6c6e4f39333c77eb200d11698d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::AddressVector</type>
      <name>remoteAddresses_var</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a533bcf0e1a54d31230ca02ae3505cf02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>localPort_var</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a7bf75ecc490d927a1cc9e1f5edfd7cf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>remotePort_var</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a21a68ff325257e7f17a867115b1ee169</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>fork_var</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>ae1d4e3c841b1aaf5835ac27e23c74f13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>queueClass_var</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>aa45f431a485bf123f244fe70491182a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>sctpAlgorithmClass_var</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a4d419f98ece92e6c6943c72a729931eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>inboundStreams_var</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>aa6e5feca294b2c9d74d3bcde70f01b19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>outboundStreams_var</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a658d39ce38cb7aee8c4ec6d69e8045a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>numRequests_var</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>ae8235fde22f811f141856b7448c962d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>messagesToPush_var</name>
      <anchorfile>class_s_c_t_p_open_command.html</anchorfile>
      <anchor>a3ebc1333f09760165bf5ce5d26ced03d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPParameter</name>
    <filename>class_s_c_t_p_parameter.html</filename>
    <member kind="function">
      <type></type>
      <name>SCTPParameter</name>
      <anchorfile>class_s_c_t_p_parameter.html</anchorfile>
      <anchor>aacb10d7e868a97e525048239362bffe7</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPParameter</name>
      <anchorfile>class_s_c_t_p_parameter.html</anchorfile>
      <anchor>a582bf9051375dbd3adbd01d378521295</anchor>
      <arglist>(const SCTPParameter &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPParameter</name>
      <anchorfile>class_s_c_t_p_parameter.html</anchorfile>
      <anchor>a25abb35f226732e5f7d52246f013ceb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPParameter &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_parameter.html</anchorfile>
      <anchor>abe2702c21f9b12236ea64b2530f784f7</anchor>
      <arglist>(const SCTPParameter &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPParameter *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_parameter.html</anchorfile>
      <anchor>a916df3ade57e071d89e382e7b6f95721</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_parameter.html</anchorfile>
      <anchor>ad5b566c6bc8325bb2ecd9d0c1c960c16</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_parameter.html</anchorfile>
      <anchor>a947e52d01dc7f6a4740beee2da361c38</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint16</type>
      <name>getParameterType</name>
      <anchorfile>class_s_c_t_p_parameter.html</anchorfile>
      <anchor>a802883c42f23ab00d41ef76211fda51e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameterType</name>
      <anchorfile>class_s_c_t_p_parameter.html</anchorfile>
      <anchor>a1d4a91fcaf7f55e333a0a6ce1bf327b8</anchor>
      <arglist>(uint16 parameterType_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_parameter.html</anchorfile>
      <anchor>a56fa1388c2b5fcf09a4c400104ed476c</anchor>
      <arglist>(const SCTPParameter &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16</type>
      <name>parameterType_var</name>
      <anchorfile>class_s_c_t_p_parameter.html</anchorfile>
      <anchor>ab292ef70dbe9b71492027c12da83e2c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPPathInfo</name>
    <filename>class_s_c_t_p_path_info.html</filename>
    <base>SCTPCommand</base>
    <member kind="function">
      <type></type>
      <name>SCTPPathInfo</name>
      <anchorfile>class_s_c_t_p_path_info.html</anchorfile>
      <anchor>a9b1b73c0d991cc89a58ee317916abc77</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPPathInfo</name>
      <anchorfile>class_s_c_t_p_path_info.html</anchorfile>
      <anchor>a96e7ab6bc8ccd77dadd58aab4d3d2f05</anchor>
      <arglist>(const SCTPPathInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPPathInfo</name>
      <anchorfile>class_s_c_t_p_path_info.html</anchorfile>
      <anchor>a39293830cf023c29825f7e3cd8c4a370</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPPathInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_path_info.html</anchorfile>
      <anchor>aa92bdf335d075a398a591448f0195d48</anchor>
      <arglist>(const SCTPPathInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPPathInfo *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_path_info.html</anchorfile>
      <anchor>a10bbede35c176736652af4b02efc84dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_path_info.html</anchorfile>
      <anchor>a3a6952bafbefc207c09e1603d4ae8324</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_path_info.html</anchorfile>
      <anchor>a153628367417d9a1f36b13d8e9b92240</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>getRemoteAddress</name>
      <anchorfile>class_s_c_t_p_path_info.html</anchorfile>
      <anchor>af992fc9653fdc9d094fa59ad3e1724fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>getRemoteAddress</name>
      <anchorfile>class_s_c_t_p_path_info.html</anchorfile>
      <anchor>a21ac86981ed8c8b971fecdb48cdd5fb6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRemoteAddress</name>
      <anchorfile>class_s_c_t_p_path_info.html</anchorfile>
      <anchor>a418c5b75ec8cbeefece0d15ae02de263</anchor>
      <arglist>(const IPvXAddress &amp;remoteAddress_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_path_info.html</anchorfile>
      <anchor>a2687f22d34539c669db70b45d4bcee0c</anchor>
      <arglist>(const SCTPPathInfo &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPvXAddress</type>
      <name>remoteAddress_var</name>
      <anchorfile>class_s_c_t_p_path_info.html</anchorfile>
      <anchor>a87e7205aac79e39471c702c8011b3316</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPPathVariables</name>
    <filename>class_s_c_t_p_path_variables.html</filename>
    <member kind="function">
      <type></type>
      <name>SCTPPathVariables</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>ad374aa007507de709b8467da3cda8a48</anchor>
      <arglist>(const IPvXAddress &amp;addr, SCTPAssociation *assoc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SCTPPathVariables</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>a835dc472459f0182d2986aa82a7267f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>SCTPAssociation *</type>
      <name>association</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>a43a3921618e861146d92b98a291162df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>remoteAddress</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>aa633bf8cbecd1b7152d64e56365dcd1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>activePath</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>aec73d49b9720a1448d063e211ccefda0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>confirmed</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>afb5df73d90e27abfe7ca3108beb051f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>requiresRtx</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>ad26e872a5b7a170d5585fdc51d2c2f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>primaryPathCandidate</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>ae9cc9a0892d63b98a38c6c1efd4753af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>forceHb</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>aef4eb456f3a0da1e92d670e13cae325a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>newCumAck</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>a8a2d22841d029151804bfa961d3b3e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>pathErrorCount</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>a1fa3356788646df71c76838733d15c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>pathErrorThreshold</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>a84ec7c29f37f62dc3e142f38e41ee3f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>pmtu</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>ad6dd717bdac741be310d027f5b663525</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>cwnd</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>a39293535329703b9c354939233d1b3db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>ssthresh</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>a8c6de61426b8f5a2ecb3aa529fac1326</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>partialBytesAcked</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>a857673312c2f810885b9d8394eece558</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>queuedBytes</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>a19295abae2184555be3bfd07b3b6c411</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>outstandingBytes</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>a39d7029c5e70ee8e6ff6c169aaa7a240</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>outstandingBytesBeforeUpdate</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>ae759ba7c806cc1317ddeaa3238716aad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>newlyAckedBytes</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>a44069a398db868dd42e80fa32bea5706</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>fastRecoveryActive</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>a9b17b4f078d72955719c8052701e90fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>fastRecoveryExitPoint</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>abc1e62f4d74471fcb495fec933bc4a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>fastRecoveryEnteringTime</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>abd845c8984b1b61f14c24f853bdcbede</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>findLowestTSN</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>aec0ed38b47b0e04b90dd7ccf70a03bcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>lowestTSNRetransmitted</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>a298953666d258498705f8fcf888b5f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>HeartbeatTimer</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>a7fd8160605d99abd3e8dcca004c4956b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>HeartbeatIntervalTimer</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>a2172a6ce9db9b2108ebe84d98ca52d36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>CwndTimer</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>a7696cc66ad659fbd0259cdc91808117a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>T3_RtxTimer</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>ac772c4fa18747d878152f13413be0098</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>heartbeatTimeout</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>a8ea7a908e771155785f375bc4bb05661</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>heartbeatIntervalTimeout</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>a7d1aef839313bbde64bfb12f4ddb3852</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>rtxTimeout</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>a07c739ae64a3be9d90ec2cbb8a91accc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>cwndTimeout</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>a51b69ce98294df53f826541717c0b2bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>updateTime</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>addd9854620d83632deb90ab177416ed7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>lastAckTime</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>a57ce948271655a42d047708102b5c7e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>pathRto</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>ac2470e5c12a744d1b567a728edf9b307</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>srtt</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>ae266c152e209421111fd4948dd539dd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>rttvar</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>a570d5d2f28369483f6dca824643d4959</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>gapAcksInLastSACK</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>a2168b109c4ea38df8f6c48d9e020e5c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>gapNAcksInLastSACK</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>af4324130b5f8f8b69167824aaac5f97d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>numberOfDuplicates</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>ac1d78a58bee56f80269dd4236bc9aad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>numberOfFastRetransmissions</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>ae6fd6147ac0475508eb44ae76c518cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>numberOfTimerBasedRetransmissions</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>a2b7ee405351a9463919c483bce4539b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cOutVector *</type>
      <name>pathTSN</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>a8ae926fbdb0df69e50c5b75b4ddb1719</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cOutVector *</type>
      <name>pathRcvdTSN</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>ac4fe3e23a3de7f0b27d9c897c706c416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cOutVector *</type>
      <name>statisticsPathRTO</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>a44bb5884f543cbf4672d0dadfa04dae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cOutVector *</type>
      <name>statisticsPathRTT</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>a2c6f1c4f3eea5efadb824e736a8a994f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cOutVector *</type>
      <name>statisticsPathSSthresh</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>a08fb6a06a9cea4372205f71def18b92d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cOutVector *</type>
      <name>statisticsPathCwnd</name>
      <anchorfile>class_s_c_t_p_path_variables.html</anchorfile>
      <anchor>aa8f1c2ca64547edefc8d8cd319b777da</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPPeer</name>
    <filename>class_s_c_t_p_peer.html</filename>
    <base>SCTPSocket::CallbackInterface</base>
    <class kind="struct">SCTPPeer::pathStatus</class>
    <member kind="typedef">
      <type>std::map&lt; IPvXAddress, pathStatus &gt;</type>
      <name>SCTPPathStatus</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a07e7adb08193eaa04996e16cd947d06f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>af3216c5bceb40a28fba4a7d8400c343e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a7353a2b2a2ded01949f62bf1c1fa9d8c</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>ae18b5a257d1783761959ef173df7a42c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleTimer</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a30ade515ec405006da67dbab04b1b127</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateAndSend</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a4a9528f06dd7e5b74ead384c684c75f5</anchor>
      <arglist>(SCTPConnectInfo *connectInfo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>ac6357bf1ef138a1a873070ddfdd220a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>socketEstablished</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a781aa2a7643d087c18b9f96f46e79ec7</anchor>
      <arglist>(int32 connId, void *yourPtr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>socketDataArrived</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>afcfba7caaaa0b44938a5c8dcdca82bf2</anchor>
      <arglist>(int32 connId, void *yourPtr, cPacket *msg, bool urgent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>socketDataNotificationArrived</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a8dc1f7419d23221c441afe43eea906b2</anchor>
      <arglist>(int32 connId, void *yourPtr, cPacket *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>socketPeerClosed</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a5f76bd35de368153fa6a2b376ad39868</anchor>
      <arglist>(int32 connId, void *yourPtr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>socketClosed</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>aa15240d77837161e7000934efac4ec52</anchor>
      <arglist>(int32 connId, void *yourPtr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>socketFailure</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a6e12d3ea344a0d3b133d45bec523f521</anchor>
      <arglist>(int32 connId, void *yourPtr, int32 code)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>socketStatusArrived</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a2a29d95ec467a7ee63495d93664cf918</anchor>
      <arglist>(int32 connId, void *yourPtr, SCTPStatusInfo *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrimaryPath</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>aa48cf125fd338124793dd6ccf95f8c6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendRequestArrived</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a2cbfd2b401709065304bed00f29f361c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendQueueRequest</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a04c00e5bdec197251798049ba596a7ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdownReceivedArrived</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a7b60d8a88cdeaa2f31516fe4d62c4517</anchor>
      <arglist>(int32 connId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendqueueFullArrived</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a052da0adbdc0e074a27165b30f04d5a8</anchor>
      <arglist>(int32 connId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatusString</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>aa948737c12642319451e618229509940</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addressAddedArrived</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a0af452efe780c08ec0f2e2daea2a7042</anchor>
      <arglist>(int32 assocId, IPvXAddress remoteAddr)</arglist>
    </member>
    <member kind="variable">
      <type>SCTPPathStatus</type>
      <name>sctpPathStatus</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>aac1064e727f88ea63e402a76bcd9ca9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; int32, long &gt;</type>
      <name>RcvdPacketsPerAssoc</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>ad81ef82c30bceb44609c81119642a2d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; int32, long &gt;</type>
      <name>SentPacketsPerAssoc</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>afe02a2f81fd2f88754687933788e59e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; int32, long &gt;</type>
      <name>RcvdBytesPerAssoc</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a4a67c4773c3863fdac9433ec34ee1ed7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; int32, cOutVector * &gt;</type>
      <name>BytesPerAssoc</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a5b126e0414abfe106970f9a0d49a9375</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; int32, cDoubleHistogram * &gt;</type>
      <name>HistEndToEndDelay</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a9c1952cd791993423f86a912b96721fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; int32, cOutVector * &gt;</type>
      <name>EndToEndDelay</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a856d39077830285dfd66eb5ebac78eb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendOrSchedule</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a700c1971ded422d32271566eea5c5682</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendRequest</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>ab54461a2b3ed2bdd723ca617ff0e2b0a</anchor>
      <arglist>(bool last=true)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>notifications</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>abdb82f3550225cce9e68f8aa71adff59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>serverAssocId</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a169d8d52db157e9067550f7f81867641</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>clientAssocId</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a0ce4a9946c82f7fc5eef7031b4b9c799</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SCTPSocket</type>
      <name>clientSocket</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>ad8a7fa774a568938196660598058ee26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>delay</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>aa2996a31fdb996db2b3a24d438345bf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>echoFactor</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a0b3e114a9411c21cf7c5998adcde16f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>schedule</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a1ead4ea893c64c4b994ee414b2c057fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>shutdownReceived</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>afdfc40bb2d09874d2d911104d34d204b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>bytesSent</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a13c463775d2ae8753515c3253cc74bdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>packetsSent</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a2de4e22a55ff7f8c431db01c7b698622</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>packetsRcvd</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>ae5926630484e8b0d93c3758307828d29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>numSessions</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>ab32c931d1f0cb400f446f44036e3d7d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>numRequestsToSend</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a990a6ef4197f5d28e07f59a0274bf242</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ordered</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a4aff78ed33b51ea0bcfc302556a0dbd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>queueSize</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a1f413022ebda6b1c3160cb0b9eb2dcf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>timeoutMsg</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>ae45b5f8942fbcf2dd552d317f982adca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>outboundStreams</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a53c7b3aad54a402695340903bc3cdee5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>timeMsg</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>ae33ced230a636795c0b95ab0aea2b6ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>connectTimer</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>ac8412284df9bb77dc41c76d681555c9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>bytesRcvd</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a0630b932a3f2b900d969ea436898fb6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>echoedBytesSent</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a4b5357e8c44c8feec7e8e738bf86e908</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>lastStream</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>afe9770c09219cf29a858861f45753955</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sendAllowed</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>abee5eb4e2787e0e20b919b6c84e0fc09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>numPacketsToReceive</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>aa0c9aecd92cc316a2763ae3a4fba6b81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RcvdPacketsPerAssoc</type>
      <name>rcvdPacketsPerAssoc</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a70d3e9253d3e6455267d5bd5fc335f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SentPacketsPerAssoc</type>
      <name>sentPacketsPerAssoc</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a7921102074e24789ec7fa1847af0fe1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RcvdBytesPerAssoc</type>
      <name>rcvdBytesPerAssoc</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a314e4ea3774ada633153e4bc0cf4054d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BytesPerAssoc</type>
      <name>bytesPerAssoc</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a6a268ab237fc3abd3a8adc50fb3f545c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HistEndToEndDelay</type>
      <name>histEndToEndDelay</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a4d28eb5a9a4bc6b14fb9f693e5d95ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EndToEndDelay</type>
      <name>endToEndDelay</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>a035b945e84003058e1a186d6da740ee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>ssn</name>
      <anchorfile>class_s_c_t_p_peer.html</anchorfile>
      <anchor>ad8496fe4ca10215e37cf3cc8d63e6861</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SCTPPeer::pathStatus</name>
    <filename>struct_s_c_t_p_peer_1_1path_status.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>active</name>
      <anchorfile>struct_s_c_t_p_peer_1_1path_status.html</anchorfile>
      <anchor>a80afde874320d3f2bceb8e430d9bb56f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>primaryPath</name>
      <anchorfile>struct_s_c_t_p_peer_1_1path_status.html</anchorfile>
      <anchor>aa071be4f030a2c7b9a43039c3c26507f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>pid</name>
      <anchorfile>struct_s_c_t_p_peer_1_1path_status.html</anchorfile>
      <anchor>ae6bf780bc398cde09a9ca0fb7c1b70b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPQueue</name>
    <filename>class_s_c_t_p_queue.html</filename>
    <member kind="typedef">
      <type>std::map&lt; uint32, SCTPDataVariables * &gt;</type>
      <name>PayloadQueue</name>
      <anchorfile>class_s_c_t_p_queue.html</anchorfile>
      <anchor>a3d447a17c0b254915ffc948335c67ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPQueue</name>
      <anchorfile>class_s_c_t_p_queue.html</anchorfile>
      <anchor>a6ed2b293ef7746e8d0f52fc122f9e01b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SCTPQueue</name>
      <anchorfile>class_s_c_t_p_queue.html</anchorfile>
      <anchor>ad65e54c8f86b19c262ad2e6a0f0af899</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkAndInsertChunk</name>
      <anchorfile>class_s_c_t_p_queue.html</anchorfile>
      <anchor>a198854d52d738bb77bb031ffe863b5be</anchor>
      <arglist>(const uint32 key, SCTPDataVariables *chunk)</arglist>
    </member>
    <member kind="function">
      <type>SCTPDataVariables *</type>
      <name>getAndExtractChunk</name>
      <anchorfile>class_s_c_t_p_queue.html</anchorfile>
      <anchor>a9cdeb09d2be1a260809687f439c47a0e</anchor>
      <arglist>(const uint32 tsn)</arglist>
    </member>
    <member kind="function">
      <type>SCTPDataVariables *</type>
      <name>extractMessage</name>
      <anchorfile>class_s_c_t_p_queue.html</anchorfile>
      <anchor>a96e2d6e957e7a573e808ad02df2abdf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printQueue</name>
      <anchorfile>class_s_c_t_p_queue.html</anchorfile>
      <anchor>ac7a8f1e2e2022e0834688419700303b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getQueueSize</name>
      <anchorfile>class_s_c_t_p_queue.html</anchorfile>
      <anchor>af665b72b717ec39ba1a01364769e2db0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SCTPDataVariables *</type>
      <name>getFirstChunk</name>
      <anchorfile>class_s_c_t_p_queue.html</anchorfile>
      <anchor>a1d80d68209dc2a79b8cc2a68e042a332</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>getMsg</name>
      <anchorfile>class_s_c_t_p_queue.html</anchorfile>
      <anchor>a7f7194d6ed87fa9bcc348e2014e5644e</anchor>
      <arglist>(const uint32 key) const </arglist>
    </member>
    <member kind="function">
      <type>SCTPDataVariables *</type>
      <name>getChunk</name>
      <anchorfile>class_s_c_t_p_queue.html</anchorfile>
      <anchor>a2834802fcd42c759e97cd1e450ad1d06</anchor>
      <arglist>(const uint32 key) const </arglist>
    </member>
    <member kind="function">
      <type>SCTPDataVariables *</type>
      <name>getChunkFast</name>
      <anchorfile>class_s_c_t_p_queue.html</anchorfile>
      <anchor>adf2bf9c28c55c2b9145a0c57b6f52792</anchor>
      <arglist>(const uint32 tsn, bool &amp;firstTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeMsg</name>
      <anchorfile>class_s_c_t_p_queue.html</anchorfile>
      <anchor>a2f9d71c42968c65fcc38e685c681dcf5</anchor>
      <arglist>(const uint32 key)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteMsg</name>
      <anchorfile>class_s_c_t_p_queue.html</anchorfile>
      <anchor>ad3cf7f62b5553eb2b2a9b8417d756568</anchor>
      <arglist>(const uint32 tsn)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>getNumBytes</name>
      <anchorfile>class_s_c_t_p_queue.html</anchorfile>
      <anchor>aa90c556ad65c93b2876d3b2004a44199</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SCTPDataVariables *</type>
      <name>dequeueChunkBySSN</name>
      <anchorfile>class_s_c_t_p_queue.html</anchorfile>
      <anchor>a9f0f0d906a87c33967a0e80e1b550a57</anchor>
      <arglist>(const uint16 ssn)</arglist>
    </member>
    <member kind="variable">
      <type>PayloadQueue</type>
      <name>payloadQueue</name>
      <anchorfile>class_s_c_t_p_queue.html</anchorfile>
      <anchor>af2706820443707e574cc9618cdd0ba8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SCTPAssociation *</type>
      <name>assoc</name>
      <anchorfile>class_s_c_t_p_queue.html</anchorfile>
      <anchor>afc062709ec34109a1df117d9019446f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PayloadQueue::iterator</type>
      <name>GetChunkFastIterator</name>
      <anchorfile>class_s_c_t_p_queue.html</anchorfile>
      <anchor>a95dc772d534bb3bfba830b1dd93e2325</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPRcvCommand</name>
    <filename>class_s_c_t_p_rcv_command.html</filename>
    <base>SCTPCommand</base>
    <member kind="function">
      <type></type>
      <name>SCTPRcvCommand</name>
      <anchorfile>class_s_c_t_p_rcv_command.html</anchorfile>
      <anchor>af2d1ddb5fe1122d92354e3940f2b4de5</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPRcvCommand</name>
      <anchorfile>class_s_c_t_p_rcv_command.html</anchorfile>
      <anchor>abba82c9c4ac62cd60967253758498fd9</anchor>
      <arglist>(const SCTPRcvCommand &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPRcvCommand</name>
      <anchorfile>class_s_c_t_p_rcv_command.html</anchorfile>
      <anchor>a4f1bfe06dcca66ee400cfb8a243cf65d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPRcvCommand &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_rcv_command.html</anchorfile>
      <anchor>a54120efe9eda800c16a45bb0dd737f85</anchor>
      <arglist>(const SCTPRcvCommand &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPRcvCommand *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_rcv_command.html</anchorfile>
      <anchor>a43ef90a8f4c52a280b07b0ec6833f80a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_rcv_command.html</anchorfile>
      <anchor>a93961f4f2ed88eddcd43576c3cf1a779</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_rcv_command.html</anchorfile>
      <anchor>a098725fa65054e4837f970f7872683c9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getPpid</name>
      <anchorfile>class_s_c_t_p_rcv_command.html</anchorfile>
      <anchor>a1952cbd7f2090681a7c205ba15c31774</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPpid</name>
      <anchorfile>class_s_c_t_p_rcv_command.html</anchorfile>
      <anchor>a414e594933bf31a6001700e38f31d115</anchor>
      <arglist>(uint32 ppid_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getTsn</name>
      <anchorfile>class_s_c_t_p_rcv_command.html</anchorfile>
      <anchor>a2ba297bfe3c6cb1a6f434fa6a0d94d46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTsn</name>
      <anchorfile>class_s_c_t_p_rcv_command.html</anchorfile>
      <anchor>affabb2289c7f78b5a6ba48009ea25e8b</anchor>
      <arglist>(uint32 tsn_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getCumTsn</name>
      <anchorfile>class_s_c_t_p_rcv_command.html</anchorfile>
      <anchor>aa9f5e43978e1e452b417e0976201eed6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCumTsn</name>
      <anchorfile>class_s_c_t_p_rcv_command.html</anchorfile>
      <anchor>adc34a24d3ed187c9c4defe7a62eed6a6</anchor>
      <arglist>(uint32 cumTsn_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_rcv_command.html</anchorfile>
      <anchor>aed25739c2cae4cc1efbb92c3371449be</anchor>
      <arglist>(const SCTPRcvCommand &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>ppid_var</name>
      <anchorfile>class_s_c_t_p_rcv_command.html</anchorfile>
      <anchor>ab7aba0e6aeb394bd8a8dbaa443c595cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>tsn_var</name>
      <anchorfile>class_s_c_t_p_rcv_command.html</anchorfile>
      <anchor>a0a36e766d116d0532dd1b54685558341</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>cumTsn_var</name>
      <anchorfile>class_s_c_t_p_rcv_command.html</anchorfile>
      <anchor>a68cf6d355657a31175e59e69d82a42c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPReceiveStream</name>
    <filename>class_s_c_t_p_receive_stream.html</filename>
    <member kind="function">
      <type>uint32</type>
      <name>enqueueNewDataChunk</name>
      <anchorfile>class_s_c_t_p_receive_stream.html</anchorfile>
      <anchor>a93152c374ce8baf6b14ccc4d720d22ab</anchor>
      <arglist>(SCTPDataVariables *dchunk)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPReceiveStream</name>
      <anchorfile>class_s_c_t_p_receive_stream.html</anchorfile>
      <anchor>a786e11de9d62d78a0d57e619bc916782</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SCTPReceiveStream</name>
      <anchorfile>class_s_c_t_p_receive_stream.html</anchorfile>
      <anchor>a58635aa9748ae2f4468e9ac01f5696ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPQueue *</type>
      <name>getDeliveryQ</name>
      <anchorfile>class_s_c_t_p_receive_stream.html</anchorfile>
      <anchor>a95ba93a1c4712fe6acad491b2337848a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SCTPQueue *</type>
      <name>getOrderedQ</name>
      <anchorfile>class_s_c_t_p_receive_stream.html</anchorfile>
      <anchor>a0267d48f180687fc25bff88baf20319b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SCTPQueue *</type>
      <name>getUnorderedQ</name>
      <anchorfile>class_s_c_t_p_receive_stream.html</anchorfile>
      <anchor>a4a57bf55aeff8e7aefbe2b9c1bbba958</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>getExpectedStreamSeqNum</name>
      <anchorfile>class_s_c_t_p_receive_stream.html</anchorfile>
      <anchor>aefb6dae19d1033707ae380fc091dcef9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>getStreamId</name>
      <anchorfile>class_s_c_t_p_receive_stream.html</anchorfile>
      <anchor>a4198ff392badf0deff8d4aba1a4e0726</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExpectedStreamSeqNum</name>
      <anchorfile>class_s_c_t_p_receive_stream.html</anchorfile>
      <anchor>acae396b1692c1045602a37446b129fbb</anchor>
      <arglist>(const int32 num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStreamId</name>
      <anchorfile>class_s_c_t_p_receive_stream.html</anchorfile>
      <anchor>aee666080c3b845aee5f48240d8a166d8</anchor>
      <arglist>(const uint16 id)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32</type>
      <name>reassemble</name>
      <anchorfile>class_s_c_t_p_receive_stream.html</anchorfile>
      <anchor>a8e20dea810f4112abe980a9e9038bb9a</anchor>
      <arglist>(SCTPQueue *queue, uint32 tsn)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16</type>
      <name>streamId</name>
      <anchorfile>class_s_c_t_p_receive_stream.html</anchorfile>
      <anchor>a6e0498b96d9332b33184a4f9bd7d06ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>expectedStreamSeqNum</name>
      <anchorfile>class_s_c_t_p_receive_stream.html</anchorfile>
      <anchor>af42d0fa49128cc0a28fea278479f5c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SCTPQueue *</type>
      <name>deliveryQ</name>
      <anchorfile>class_s_c_t_p_receive_stream.html</anchorfile>
      <anchor>a083c51222670f723bdcdebbebb397510</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SCTPQueue *</type>
      <name>orderedQ</name>
      <anchorfile>class_s_c_t_p_receive_stream.html</anchorfile>
      <anchor>af44b7ddcd471dac9c7aa3e79fbb90de4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SCTPQueue *</type>
      <name>unorderedQ</name>
      <anchorfile>class_s_c_t_p_receive_stream.html</anchorfile>
      <anchor>a10d2d40fadab18984dd44bb1aeb216d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPResetInfo</name>
    <filename>class_s_c_t_p_reset_info.html</filename>
    <base>SCTPCommand</base>
    <member kind="function">
      <type></type>
      <name>SCTPResetInfo</name>
      <anchorfile>class_s_c_t_p_reset_info.html</anchorfile>
      <anchor>ad95413be22c9be36033fc55140f41ded</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPResetInfo</name>
      <anchorfile>class_s_c_t_p_reset_info.html</anchorfile>
      <anchor>a1263b9f5ad2883d1be9924c1d1ae065b</anchor>
      <arglist>(const SCTPResetInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPResetInfo</name>
      <anchorfile>class_s_c_t_p_reset_info.html</anchorfile>
      <anchor>a7d13b6b889dd70ec640d38c080acfd00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPResetInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_reset_info.html</anchorfile>
      <anchor>a3ae3f3bb634c5f2258e9c7337dd0da9d</anchor>
      <arglist>(const SCTPResetInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPResetInfo *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_reset_info.html</anchorfile>
      <anchor>a3ca95ac3ac7440a7777b71912ba2b1ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_reset_info.html</anchorfile>
      <anchor>ac18e6bd48b449b66f3b25b153ca967c7</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_reset_info.html</anchorfile>
      <anchor>a597accbd0cb572c9de139d7f22b2d593</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>getRemoteAddr</name>
      <anchorfile>class_s_c_t_p_reset_info.html</anchorfile>
      <anchor>a3f140f445153b2d84923a0cb3e19676c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>getRemoteAddr</name>
      <anchorfile>class_s_c_t_p_reset_info.html</anchorfile>
      <anchor>ae94ebd086cacde5717d88bc3e15e1f23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRemoteAddr</name>
      <anchorfile>class_s_c_t_p_reset_info.html</anchorfile>
      <anchor>a8ee397a13a5f041b6d1950f84c0a2495</anchor>
      <arglist>(const IPvXAddress &amp;remoteAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getRequestType</name>
      <anchorfile>class_s_c_t_p_reset_info.html</anchorfile>
      <anchor>a7eb5d9f771ad8697aa652e5cb480255d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRequestType</name>
      <anchorfile>class_s_c_t_p_reset_info.html</anchorfile>
      <anchor>a6d0f895203741237f0a7de130919b94a</anchor>
      <arglist>(unsigned short requestType_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStreamsArraySize</name>
      <anchorfile>class_s_c_t_p_reset_info.html</anchorfile>
      <anchor>af632ac835cf458e71afed5cd57eb2e9f</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getStreamsArraySize</name>
      <anchorfile>class_s_c_t_p_reset_info.html</anchorfile>
      <anchor>af06c0752ddf7d8c4ce44b6765c364fa3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getStreams</name>
      <anchorfile>class_s_c_t_p_reset_info.html</anchorfile>
      <anchor>ad6a2a0e74f358950b8e1e121c9d6c527</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStreams</name>
      <anchorfile>class_s_c_t_p_reset_info.html</anchorfile>
      <anchor>a534ac63a8258985e6df8efb22b38bf6d</anchor>
      <arglist>(unsigned int k, char streams_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_reset_info.html</anchorfile>
      <anchor>a22b2cfe83f022de9f64bb417a90e7887</anchor>
      <arglist>(const SCTPResetInfo &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPvXAddress</type>
      <name>remoteAddr_var</name>
      <anchorfile>class_s_c_t_p_reset_info.html</anchorfile>
      <anchor>a8f6b388574dce862ea65b8e3c6b98cc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>requestType_var</name>
      <anchorfile>class_s_c_t_p_reset_info.html</anchorfile>
      <anchor>aca1dea2df28e7c40bfa7cd5a2bd3ded5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>streams_var</name>
      <anchorfile>class_s_c_t_p_reset_info.html</anchorfile>
      <anchor>afbaef2381a99b65acfdb9396ca99c18e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>streams_arraysize</name>
      <anchorfile>class_s_c_t_p_reset_info.html</anchorfile>
      <anchor>a0dec70eb933fa7ab2fe243bf7416510f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPSackChunk</name>
    <filename>class_s_c_t_p_sack_chunk.html</filename>
    <base>SCTPChunk</base>
    <member kind="function">
      <type></type>
      <name>SCTPSackChunk</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>a645f580a927ec5e58a9287ce66cfcc07</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPSackChunk</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>a095c3329bd7d6b5fa65d2bc754fbd06c</anchor>
      <arglist>(const SCTPSackChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPSackChunk</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>a331b1237fcad8e63cabdfb67eb02c47e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPSackChunk &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>a04b39047ff1b5ceb4a870e472359e269</anchor>
      <arglist>(const SCTPSackChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPSackChunk *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>ac9f021e1ad04a02a32f609093dd4b4e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>a9751ac230b2d66526b778b120a87a744</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>a5ba77589694cec47a79214b7da4ba39c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getCumTsnAck</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>a7ecb9662687cd4a5a86b6a2757785aa0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCumTsnAck</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>a661bfb2fc7e65577d5e0ea4d4024fc0c</anchor>
      <arglist>(uint32 cumTsnAck_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getA_rwnd</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>a0029266b1d7d234f37e26e9d9ff40be8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setA_rwnd</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>a085f19b284ea983d325e5a7faa11f76d</anchor>
      <arglist>(uint32 a_rwnd_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint16</type>
      <name>getNumGaps</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>aae89c128c7dabd5515ad02ca30523761</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumGaps</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>adc2388671bfa383ace94cd5808655d20</anchor>
      <arglist>(uint16 numGaps_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint16</type>
      <name>getNumDupTsns</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>a5f155c6389f26807fb5626cf96a8d8c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumDupTsns</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>ac5fde6fc9369911804fcf31c3e56bb9d</anchor>
      <arglist>(uint16 numDupTsns_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGapStartArraySize</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>aa22cbec49f7fc2ff0aadaabd28e4c6b1</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getGapStartArraySize</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>ab4dc9343a4e4f4dda7495abb68c11899</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getGapStart</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>ae4b982717b7ea8c7274eeeed36ebc893</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGapStart</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>a3bcf99f5bb06d8af50dd839129bbbba3</anchor>
      <arglist>(unsigned int k, uint32 gapStart_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGapStopArraySize</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>a0d448534ac6ccbc9b4f8b57a8d522d43</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getGapStopArraySize</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>afe73d58f88844f20c219281afe31405e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getGapStop</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>aaef7b2cb13cfc88decd207a37d3be7f7</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGapStop</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>acd6f0a88517c2a66b1f70b3bacd39e4c</anchor>
      <arglist>(unsigned int k, uint32 gapStop_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDupTsnsArraySize</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>a31719ebfeea4149c98eec8da38013b0a</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getDupTsnsArraySize</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>a69013d593164b39641798b30254ffd41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getDupTsns</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>a55e6793cd5de44f59b093debeeae6596</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDupTsns</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>a201a3b224021e5b1d01be8b067a9d039</anchor>
      <arglist>(unsigned int k, uint32 dupTsns_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getSackSeqNum</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>a085ea232967b996c50dee614c47e5aec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSackSeqNum</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>a26b4a2882316e05f61567ee006d1a60b</anchor>
      <arglist>(uint32 sackSeqNum_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>a141623d0136ed41990e124096c06b60c</anchor>
      <arglist>(const SCTPSackChunk &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>cumTsnAck_var</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>a05b95ce6ecaa78aad76fa7ddcd0bbf04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>a_rwnd_var</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>aa880f215370b4dbc33f7120268f5c6b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16</type>
      <name>numGaps_var</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>a008a8825d023ff73ce4fa9d7cf500dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16</type>
      <name>numDupTsns_var</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>a65b0a6c25609c4f47baccee4f1f3a5d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32 *</type>
      <name>gapStart_var</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>a9e0ec9463b1f8157b0c78181909df091</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>gapStart_arraysize</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>a9ba75a1ec760ea1b5d9cac5eddcf578e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32 *</type>
      <name>gapStop_var</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>acc867b2e489f67f4c21bbf5d79904352</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>gapStop_arraysize</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>a2c2613535124304fe5a7bf7eadc985db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32 *</type>
      <name>dupTsns_var</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>a3deac4ba5472cc1286d20d72a7655887</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>dupTsns_arraysize</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>aade6d64bc2108d513adcde1bceb84213</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>sackSeqNum_var</name>
      <anchorfile>class_s_c_t_p_sack_chunk.html</anchorfile>
      <anchor>ae08f89de6827302ac187a4ff23fec178</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPSendCommand</name>
    <filename>class_s_c_t_p_send_command.html</filename>
    <base>SCTPCommand</base>
    <member kind="function">
      <type></type>
      <name>SCTPSendCommand</name>
      <anchorfile>class_s_c_t_p_send_command.html</anchorfile>
      <anchor>a378481cfd649420b3e1f647746ee5e9b</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPSendCommand</name>
      <anchorfile>class_s_c_t_p_send_command.html</anchorfile>
      <anchor>a5879861a6a4e9244eacaed2910603682</anchor>
      <arglist>(const SCTPSendCommand &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPSendCommand</name>
      <anchorfile>class_s_c_t_p_send_command.html</anchorfile>
      <anchor>a3e044ef8db904f214a37ecc78507c305</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPSendCommand &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_send_command.html</anchorfile>
      <anchor>a3c45aac9f139e999403fa2bf90841e85</anchor>
      <arglist>(const SCTPSendCommand &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPSendCommand *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_send_command.html</anchorfile>
      <anchor>a71bdac39540fe0a1e9c6b1ec1050fed4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_send_command.html</anchorfile>
      <anchor>a5f924a7f611df070cad1bbdb69a46341</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_send_command.html</anchorfile>
      <anchor>af161903e78a6e12c2f9a3ef087d227e9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getLast</name>
      <anchorfile>class_s_c_t_p_send_command.html</anchorfile>
      <anchor>aa482bc4837d07a0b711d7aef8ff99332</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLast</name>
      <anchorfile>class_s_c_t_p_send_command.html</anchorfile>
      <anchor>a014dfdf2b2d35254c0aa2e2e79bef280</anchor>
      <arglist>(bool last_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getPpid</name>
      <anchorfile>class_s_c_t_p_send_command.html</anchorfile>
      <anchor>aa99211fd936276de29092c48b413e714</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPpid</name>
      <anchorfile>class_s_c_t_p_send_command.html</anchorfile>
      <anchor>aa0b3c86da6b3a5208035fc0bb04add91</anchor>
      <arglist>(unsigned int ppid_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getPrimary</name>
      <anchorfile>class_s_c_t_p_send_command.html</anchorfile>
      <anchor>a162bab81cf44e1d3abaf72d637dda778</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPrimary</name>
      <anchorfile>class_s_c_t_p_send_command.html</anchorfile>
      <anchor>ac7392222726e79fb6953d025b97a32be</anchor>
      <arglist>(bool primary_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_send_command.html</anchorfile>
      <anchor>aa2e1bb00de6f1ef345047f17ca49bdf1</anchor>
      <arglist>(const SCTPSendCommand &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>last_var</name>
      <anchorfile>class_s_c_t_p_send_command.html</anchorfile>
      <anchor>a7052b077e9cb643cf83673707ec5e658</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>ppid_var</name>
      <anchorfile>class_s_c_t_p_send_command.html</anchorfile>
      <anchor>a2b12914aaa799c1c8c4aef9a0ee17bdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>primary_var</name>
      <anchorfile>class_s_c_t_p_send_command.html</anchorfile>
      <anchor>abf66c06cfc4ad2640ab3a4bc251360f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPSendStream</name>
    <filename>class_s_c_t_p_send_stream.html</filename>
    <member kind="function">
      <type></type>
      <name>SCTPSendStream</name>
      <anchorfile>class_s_c_t_p_send_stream.html</anchorfile>
      <anchor>a85662e226d46b1d3d690fe521cfc7573</anchor>
      <arglist>(const uint16 id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SCTPSendStream</name>
      <anchorfile>class_s_c_t_p_send_stream.html</anchorfile>
      <anchor>a9a0833b99fbfa3cee48d000f84f0c41f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cQueue *</type>
      <name>getStreamQ</name>
      <anchorfile>class_s_c_t_p_send_stream.html</anchorfile>
      <anchor>ac278c3ed4a46cba2cd4744113886e003</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cQueue *</type>
      <name>getUnorderedStreamQ</name>
      <anchorfile>class_s_c_t_p_send_stream.html</anchorfile>
      <anchor>a819f071b624d554ee5c7d54417bc3a31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getNextStreamSeqNum</name>
      <anchorfile>class_s_c_t_p_send_stream.html</anchorfile>
      <anchor>ac4f169c12b71546da5bedb3dfd465188</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNextStreamSeqNum</name>
      <anchorfile>class_s_c_t_p_send_stream.html</anchorfile>
      <anchor>aa6f228a1b43a70e3022e559ad7b709c1</anchor>
      <arglist>(const uint16 num)</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>getStreamId</name>
      <anchorfile>class_s_c_t_p_send_stream.html</anchorfile>
      <anchor>aba22877cefcaf03631996ba9a5d2938b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStreamId</name>
      <anchorfile>class_s_c_t_p_send_stream.html</anchorfile>
      <anchor>a5f711176e3de3acd57f0aa3a6052f8e7</anchor>
      <arglist>(const uint16 id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteQueue</name>
      <anchorfile>class_s_c_t_p_send_stream.html</anchorfile>
      <anchor>a6c6ab99dfb684f2b4fe19efc07bfc6d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16</type>
      <name>streamId</name>
      <anchorfile>class_s_c_t_p_send_stream.html</anchorfile>
      <anchor>abb37da0c091507369caf5fb6fd76d06c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16</type>
      <name>nextStreamSeqNum</name>
      <anchorfile>class_s_c_t_p_send_stream.html</anchorfile>
      <anchor>a66752e69db31307f5445f2bd74110499</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cQueue *</type>
      <name>streamQ</name>
      <anchorfile>class_s_c_t_p_send_stream.html</anchorfile>
      <anchor>af63fd8bf82d62598c5de445af89c1513</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cQueue *</type>
      <name>uStreamQ</name>
      <anchorfile>class_s_c_t_p_send_stream.html</anchorfile>
      <anchor>ae9b3dc31f3f7af6778c3d77c172b3c73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>ssn</name>
      <anchorfile>class_s_c_t_p_send_stream.html</anchorfile>
      <anchor>af45e702b77ce2b466f8274a56cdab955</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPSerializer</name>
    <filename>class_s_c_t_p_serializer.html</filename>
    <member kind="function">
      <type></type>
      <name>SCTPSerializer</name>
      <anchorfile>class_s_c_t_p_serializer.html</anchorfile>
      <anchor>a27462af14637ce784663e6c6bb783c10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>serialize</name>
      <anchorfile>class_s_c_t_p_serializer.html</anchorfile>
      <anchor>ab955e6ade690a1a3332ec8827af55ddf</anchor>
      <arglist>(const SCTPMessage *msg, uint8 *buf, uint32 bufsize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>class_s_c_t_p_serializer.html</anchorfile>
      <anchor>a6f98120b3c9485fab42e24b9ab455b88</anchor>
      <arglist>(const uint8 *buf, uint32 bufsize, SCTPMessage *dest)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32</type>
      <name>checksum</name>
      <anchorfile>class_s_c_t_p_serializer.html</anchorfile>
      <anchor>a54e51514d36889c0b02409cb9aae9d3b</anchor>
      <arglist>(const uint8 *buf, register uint32 len)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPServer</name>
    <filename>class_s_c_t_p_server.html</filename>
    <class kind="struct">SCTPServer::pathStatus</class>
    <class kind="struct">SCTPServer::ServerAssocStat</class>
    <member kind="function">
      <type></type>
      <name>~SCTPServer</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>abc8b1c9c58c358c331738a0975941384</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a9bec6b9704be03cd5c3af6315eb25665</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a6dbf9b85ee7abab61ac8b4bbd6cc74b6</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a8e5afdc7ab8bc43df5780d356309fd2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleTimer</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a093fe8eef5ec0367decd9a8a4a7d743b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateAndSend</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a49594599727e46b391d45c5e4988a5f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; int32, ServerAssocStat &gt;</type>
      <name>ServerAssocStatMap</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>ab279ed5df5d4cc8366a1ec95c4b9165b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; int32, cOutVector * &gt;</type>
      <name>BytesPerAssoc</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a1b355b9e697be95258adbdab5d238473</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; int32, cDoubleHistogram * &gt;</type>
      <name>HistEndToEndDelay</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a130e508db3461f914a0b0e8bc9e2dad6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; int32, cOutVector * &gt;</type>
      <name>EndToEndDelay</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>addcd2bbdfa7f7637a96ee8876808f288</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendOrSchedule</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>af7344aa519b392472752795fada8610c</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cPacket *</type>
      <name>makeAbortNotification</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a0fc583f2d5fb63f5b7e5c33e607fd98d</anchor>
      <arglist>(SCTPCommand *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cPacket *</type>
      <name>makeReceiveRequest</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a63d027f58f616a07beae45f3b54ccb38</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cPacket *</type>
      <name>makeDefaultReceive</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a9079c3bc9e2380b15e4124cb3197c854</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>notifications</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a733ca06a94bdde0ff88484fa36068e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>assocId</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>aab27b4848f05f4ed3970e5816a4e7257</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SCTPSocket *</type>
      <name>socket</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a9ccf3d527896588b2590ef24523813dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>delay</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>ae432839222cc11a5e6a79bbcedcf89ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>echoFactor</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a94dbc6b1477183c2fb909a5ff423d5a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>delayFirstRead</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>aa0ff7f5562682a0a7f255ab8fa697ffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>readInt</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a25bd2693d0f6fbb51cf55d218cfcb240</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>schedule</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a9675d1e5bfa56a81a7e09d172f13302d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>firstData</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>ae0a0de00763a065f55e2421cec66fdff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>shutdownReceived</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a85ff1b90c417e2bd0090b5d76de7efcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint64</type>
      <name>bytesSent</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a24f25fbfd5abf8039b77dedd4ebaa00d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint64</type>
      <name>packetsSent</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a288aa635dcea19fb16d48ec4022e6704</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint64</type>
      <name>packetsRcvd</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a55929241e5bcd30855a2edab73f24814</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>numSessions</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a0e171815eedbf2379e1d869284374fed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint64</type>
      <name>numRequestsToSend</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a96df668c37434fc7f0b1945c16d80158</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>finishEndsSimulation</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a6cafc0845397f64cfba52c7bf3ad3059</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ordered</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a252d089a15890b6fd4389ae26ddec45b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>abortSent</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a4fef3f92f12d3ad426ca17e7a17e789e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>queueSize</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a0783bfe9aa5d31308b4c8f438eb03de0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>count</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>aae3ed98865cf200ed1592ab468ed4561</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>timeoutMsg</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>aa39760cbcbc9f13ce9abbfa319eb498b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>delayTimer</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a83c9f8076eed512a6baa0ca46bfd08c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>delayFirstReadTimer</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a70e57a6b568e8c41f10893c925e1ac95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>inboundStreams</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a251e4670192345c198ee23d759d3b358</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>outboundStreams</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a40783a4ecb36dc4921aa6d668b0b271f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>lastStream</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a17ec661fe75a335bddb0ee07b7fed021</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ServerAssocStatMap</type>
      <name>serverAssocStatMap</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a35a644924ea688fc6bfef860571e2e8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BytesPerAssoc</type>
      <name>bytesPerAssoc</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a89ef3395b677899b156b7658e4d5d6f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HistEndToEndDelay</type>
      <name>histEndToEndDelay</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a30aae1b851ccc5f23a4cb79f7fb5d5af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EndToEndDelay</type>
      <name>endToEndDelay</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>ab8f7cd058dd9da883c18c56f3e4a863c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>ssn</name>
      <anchorfile>class_s_c_t_p_server.html</anchorfile>
      <anchor>a17fc4c70cc931fe1598366ae9081ddfe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SCTPServer::pathStatus</name>
    <filename>struct_s_c_t_p_server_1_1path_status.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>active</name>
      <anchorfile>struct_s_c_t_p_server_1_1path_status.html</anchorfile>
      <anchor>a65e1f103f8b26116998dec66f0316277</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>primaryPath</name>
      <anchorfile>struct_s_c_t_p_server_1_1path_status.html</anchorfile>
      <anchor>a0720ec901271c894bf05068823667a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>pid</name>
      <anchorfile>struct_s_c_t_p_server_1_1path_status.html</anchorfile>
      <anchor>a117c4b93dcf2ff52e4d9877b607ea140</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SCTPServer::ServerAssocStat</name>
    <filename>struct_s_c_t_p_server_1_1_server_assoc_stat.html</filename>
    <member kind="variable">
      <type>simtime_t</type>
      <name>start</name>
      <anchorfile>struct_s_c_t_p_server_1_1_server_assoc_stat.html</anchorfile>
      <anchor>ae7e7755f584ef8a677fc52b7b505ce8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>stop</name>
      <anchorfile>struct_s_c_t_p_server_1_1_server_assoc_stat.html</anchorfile>
      <anchor>a3f21ed797825a75f8e247140aff10aca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64</type>
      <name>rcvdBytes</name>
      <anchorfile>struct_s_c_t_p_server_1_1_server_assoc_stat.html</anchorfile>
      <anchor>a66ebf3d474f9a07414df93fd541d06a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64</type>
      <name>sentPackets</name>
      <anchorfile>struct_s_c_t_p_server_1_1_server_assoc_stat.html</anchorfile>
      <anchor>ac2e156ed397cdc24ce316a2ef63f2733</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64</type>
      <name>rcvdPackets</name>
      <anchorfile>struct_s_c_t_p_server_1_1_server_assoc_stat.html</anchorfile>
      <anchor>af4b43e455656545e3d77d1b3f1af174e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>lifeTime</name>
      <anchorfile>struct_s_c_t_p_server_1_1_server_assoc_stat.html</anchorfile>
      <anchor>a985f545902267a5b02ab97219c4be3da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>abortSent</name>
      <anchorfile>struct_s_c_t_p_server_1_1_server_assoc_stat.html</anchorfile>
      <anchor>ae223845862ce3c6b94e3ed4d7b168f17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>peerClosed</name>
      <anchorfile>struct_s_c_t_p_server_1_1_server_assoc_stat.html</anchorfile>
      <anchor>a50bb2c22c300cc7c21a3a9e2f23291fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPShutdownAckChunk</name>
    <filename>class_s_c_t_p_shutdown_ack_chunk.html</filename>
    <base>SCTPChunk</base>
    <member kind="function">
      <type></type>
      <name>SCTPShutdownAckChunk</name>
      <anchorfile>class_s_c_t_p_shutdown_ack_chunk.html</anchorfile>
      <anchor>ad2bab54d9ac5752b8a8d96e5a3625d74</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPShutdownAckChunk</name>
      <anchorfile>class_s_c_t_p_shutdown_ack_chunk.html</anchorfile>
      <anchor>afe94bae5d0dee2570e113a39c250d4cb</anchor>
      <arglist>(const SCTPShutdownAckChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPShutdownAckChunk</name>
      <anchorfile>class_s_c_t_p_shutdown_ack_chunk.html</anchorfile>
      <anchor>a4d5cf9f92366f0a9bb1fc28f877cda20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPShutdownAckChunk &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_shutdown_ack_chunk.html</anchorfile>
      <anchor>a476545c6ed7746fe09f25aa9883cbf9d</anchor>
      <arglist>(const SCTPShutdownAckChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPShutdownAckChunk *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_shutdown_ack_chunk.html</anchorfile>
      <anchor>a0b486ad2354ae9edf08e16657fdcb387</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_shutdown_ack_chunk.html</anchorfile>
      <anchor>a1fad7a48321bd5621c095d9dc7ad45b3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_shutdown_ack_chunk.html</anchorfile>
      <anchor>ad311bc767166f01c3c0f1d57e9fad1dd</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_shutdown_ack_chunk.html</anchorfile>
      <anchor>a199b84a5cda211327dc46db4adbe246d</anchor>
      <arglist>(const SCTPShutdownAckChunk &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPShutdownChunk</name>
    <filename>class_s_c_t_p_shutdown_chunk.html</filename>
    <base>SCTPChunk</base>
    <member kind="function">
      <type></type>
      <name>SCTPShutdownChunk</name>
      <anchorfile>class_s_c_t_p_shutdown_chunk.html</anchorfile>
      <anchor>a7ed4c3292045715b78ee656f6503791b</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPShutdownChunk</name>
      <anchorfile>class_s_c_t_p_shutdown_chunk.html</anchorfile>
      <anchor>a349eb17533879ff2b747338b29bbee9a</anchor>
      <arglist>(const SCTPShutdownChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPShutdownChunk</name>
      <anchorfile>class_s_c_t_p_shutdown_chunk.html</anchorfile>
      <anchor>a399f3c9d525b0e5b2d6a38c70bdcdd63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPShutdownChunk &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_shutdown_chunk.html</anchorfile>
      <anchor>a90d2f3deb83531851f884e2b8e0bca14</anchor>
      <arglist>(const SCTPShutdownChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPShutdownChunk *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_shutdown_chunk.html</anchorfile>
      <anchor>aa2a59eee4b74f78491e4172fb557556b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_shutdown_chunk.html</anchorfile>
      <anchor>a8024ed3ce9ed85e7f4a4b3b0731a2176</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_shutdown_chunk.html</anchorfile>
      <anchor>aa3d489246d2462d31e4f638c42e2bb79</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getCumTsnAck</name>
      <anchorfile>class_s_c_t_p_shutdown_chunk.html</anchorfile>
      <anchor>a0df1b527aee57a52d2275d061cfb3091</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCumTsnAck</name>
      <anchorfile>class_s_c_t_p_shutdown_chunk.html</anchorfile>
      <anchor>ac17da447c6cada03dcb8ad7accb72c30</anchor>
      <arglist>(uint32 cumTsnAck_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_shutdown_chunk.html</anchorfile>
      <anchor>ad2cef8908df70deca2748370e7d6559e</anchor>
      <arglist>(const SCTPShutdownChunk &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>cumTsnAck_var</name>
      <anchorfile>class_s_c_t_p_shutdown_chunk.html</anchorfile>
      <anchor>aac9ec83126011035e282d05ee01f555a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPShutdownCompleteChunk</name>
    <filename>class_s_c_t_p_shutdown_complete_chunk.html</filename>
    <base>SCTPChunk</base>
    <member kind="function">
      <type></type>
      <name>SCTPShutdownCompleteChunk</name>
      <anchorfile>class_s_c_t_p_shutdown_complete_chunk.html</anchorfile>
      <anchor>a156c8b66e3bda2d7ababe9bead4f3deb</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPShutdownCompleteChunk</name>
      <anchorfile>class_s_c_t_p_shutdown_complete_chunk.html</anchorfile>
      <anchor>af83e2db98b6d887593aacad7493548e3</anchor>
      <arglist>(const SCTPShutdownCompleteChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPShutdownCompleteChunk</name>
      <anchorfile>class_s_c_t_p_shutdown_complete_chunk.html</anchorfile>
      <anchor>a5deb4303d2b6b706c5e03e7a06e48958</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPShutdownCompleteChunk &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_shutdown_complete_chunk.html</anchorfile>
      <anchor>a00c75bb49a6f002b60f4e4b03690245c</anchor>
      <arglist>(const SCTPShutdownCompleteChunk &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPShutdownCompleteChunk *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_shutdown_complete_chunk.html</anchorfile>
      <anchor>af08cac815c8a150400ff2d1051496690</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_shutdown_complete_chunk.html</anchorfile>
      <anchor>a346c399bc75d397e2e15f87a62da72e5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_shutdown_complete_chunk.html</anchorfile>
      <anchor>a8bccb8e85efd716959b6d80829d6bf87</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getTBit</name>
      <anchorfile>class_s_c_t_p_shutdown_complete_chunk.html</anchorfile>
      <anchor>a3d0a9e1ee2b63b81970e086fa7c1349f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTBit</name>
      <anchorfile>class_s_c_t_p_shutdown_complete_chunk.html</anchorfile>
      <anchor>a497d1fc142ae36f49efa1529db6b65ac</anchor>
      <arglist>(bool TBit_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_shutdown_complete_chunk.html</anchorfile>
      <anchor>aff4f1479470682fef8e8522e8c90a30f</anchor>
      <arglist>(const SCTPShutdownCompleteChunk &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>TBit_var</name>
      <anchorfile>class_s_c_t_p_shutdown_complete_chunk.html</anchorfile>
      <anchor>a36fd0bd092b06a9a8650444dd27ab9f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPSimpleMessage</name>
    <filename>class_s_c_t_p_simple_message.html</filename>
    <member kind="function">
      <type></type>
      <name>SCTPSimpleMessage</name>
      <anchorfile>class_s_c_t_p_simple_message.html</anchorfile>
      <anchor>a138367a95bfc260a7769d7458f702e08</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPSimpleMessage</name>
      <anchorfile>class_s_c_t_p_simple_message.html</anchorfile>
      <anchor>abca276fa8aee5dc49b6e011c6182b2b2</anchor>
      <arglist>(const SCTPSimpleMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPSimpleMessage</name>
      <anchorfile>class_s_c_t_p_simple_message.html</anchorfile>
      <anchor>a8855cb167f32e4ac5bafa50f53b4a063</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPSimpleMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_simple_message.html</anchorfile>
      <anchor>ae08de1e4c22939bb247bfe5eb1926067</anchor>
      <arglist>(const SCTPSimpleMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPSimpleMessage *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_simple_message.html</anchorfile>
      <anchor>ad95d81fa21f72ba4de85853e7f6565b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_simple_message.html</anchorfile>
      <anchor>a30f906b360125c7630d3a02869367962</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_simple_message.html</anchorfile>
      <anchor>a830c7539e3d64f612c0c3aa161129dbb</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getDataLen</name>
      <anchorfile>class_s_c_t_p_simple_message.html</anchorfile>
      <anchor>a4838827e65f3ed85291583a6b629852f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDataLen</name>
      <anchorfile>class_s_c_t_p_simple_message.html</anchorfile>
      <anchor>a630c1edca53781533d0f8a04a39ab0e1</anchor>
      <arglist>(uint32 dataLen_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDataArraySize</name>
      <anchorfile>class_s_c_t_p_simple_message.html</anchorfile>
      <anchor>a19267ba50e2bce996b9290544b436477</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getDataArraySize</name>
      <anchorfile>class_s_c_t_p_simple_message.html</anchorfile>
      <anchor>a622610c3483c746bcdb2873d2c31bb5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getData</name>
      <anchorfile>class_s_c_t_p_simple_message.html</anchorfile>
      <anchor>a0a498c322e58707458a0ab5b33b80ff8</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setData</name>
      <anchorfile>class_s_c_t_p_simple_message.html</anchorfile>
      <anchor>aac4ab53c4235fd4ee9df1ae47769382d</anchor>
      <arglist>(unsigned int k, char data_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getCreationTime</name>
      <anchorfile>class_s_c_t_p_simple_message.html</anchorfile>
      <anchor>a7f4c607bc10f75748daf2626a775c7a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCreationTime</name>
      <anchorfile>class_s_c_t_p_simple_message.html</anchorfile>
      <anchor>a0cfe3080dd3f6126adbc6d2b62cf88a8</anchor>
      <arglist>(simtime_t creationTime_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getEncaps</name>
      <anchorfile>class_s_c_t_p_simple_message.html</anchorfile>
      <anchor>a6756ae30e33166783c76336ec233bf6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEncaps</name>
      <anchorfile>class_s_c_t_p_simple_message.html</anchorfile>
      <anchor>a6350c9df95e8a073544a354386194af6</anchor>
      <arglist>(bool encaps_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_simple_message.html</anchorfile>
      <anchor>a62789b4970a2a99e97473f68fd647022</anchor>
      <arglist>(const SCTPSimpleMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>dataLen_var</name>
      <anchorfile>class_s_c_t_p_simple_message.html</anchorfile>
      <anchor>a4da9c3bc77fbc3e6426e76ba24e8cf95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>data_var</name>
      <anchorfile>class_s_c_t_p_simple_message.html</anchorfile>
      <anchor>a40002e07282440f3a60b322abc4d202b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>data_arraysize</name>
      <anchorfile>class_s_c_t_p_simple_message.html</anchorfile>
      <anchor>a0ee6b02d28f85458614cd08f4f0e55da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>creationTime_var</name>
      <anchorfile>class_s_c_t_p_simple_message.html</anchorfile>
      <anchor>a3bf09c945c5f1a933e7265686825d323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>encaps_var</name>
      <anchorfile>class_s_c_t_p_simple_message.html</anchorfile>
      <anchor>ad639ddf45faa96b1650c043e4ecdf38e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPSocket</name>
    <filename>class_s_c_t_p_socket.html</filename>
    <class kind="class">SCTPSocket::CallbackInterface</class>
    <member kind="enumeration">
      <name>State</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a54995ab1377ac24941b0f043c8bc78dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_BOUND</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a54995ab1377ac24941b0f043c8bc78dcae2a12430f83d2cb6f2f386440b8c7dec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CLOSED</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a54995ab1377ac24941b0f043c8bc78dca576c1d7cf75c324a462dae9c4055b81f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LISTENING</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a54995ab1377ac24941b0f043c8bc78dcaaebb3b34c5fbf93f42cee1c75b5b16d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTING</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a54995ab1377ac24941b0f043c8bc78dcab65e31e5bcbbd1d12b79ddc40468b7d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTED</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a54995ab1377ac24941b0f043c8bc78dca86f1eb1fba7e7144cf7bb0581c64184e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PEER_CLOSED</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a54995ab1377ac24941b0f043c8bc78dca31eac1be271666d015d39ca69e027d30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOCALLY_CLOSED</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a54995ab1377ac24941b0f043c8bc78dca4260b3ebd964ad921c422a694afcb857</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKERROR</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a54995ab1377ac24941b0f043c8bc78dcac8f1b8d9cd311b8628b547d702de7fdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPSocket</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a1695937ed0ed6829c14c044e01399a8b</anchor>
      <arglist>(bool type=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPSocket</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>ab1b810dd5dfefd4f0180797f97dd7da4</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SCTPSocket</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a810f2e5ae32d9a11803d5bad333d7035</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getConnectionId</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a8d9d51b23713b9c05ff7ee4b42200a9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getState</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a6cd73ef3625339426544269ee065426e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>ae8da1277627f9ccafe7757a9664a0ef8</anchor>
      <arglist>(int state)</arglist>
    </member>
    <member kind="function">
      <type>AddressVector</type>
      <name>getLocalAddresses</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a32460fee5aec035aaf038e241bc24727</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalPort</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>ac57917e73cbeabbd0308eed74b4f55cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AddressVector</type>
      <name>getRemoteAddresses</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a87eebc078640a1dd4b133fb645ca3680</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRemotePort</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a79da3214bf9c672c930c99d0c89cac92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPvXAddress</type>
      <name>getRemoteAddr</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>aa7d556658561ced4488304ea68c9ba38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutputGate</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a1fb780971464be963565c6bf5d95cafe</anchor>
      <arglist>(cGate *toSctp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutboundStreams</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a6ba81244dfc436377270d92674cd1105</anchor>
      <arglist>(int streams)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInboundStreams</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>ae7515d3a249a8f47388034c3bd269cc7</anchor>
      <arglist>(int streams)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOutboundStreams</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a912c4bdcaca6195ae09cc6ba7ecf8457</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLastStream</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a68adff9da81b1db50dbe36b5d72c50e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a109050219a13edd8713995f41a8d7259</anchor>
      <arglist>(int localPort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>ad1daff3c2a621027a78e1584b37733c7</anchor>
      <arglist>(IPvXAddress localAddr, int localPort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bindx</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a9a33f1da38b12d217ee106a9eb801601</anchor>
      <arglist>(AddressVector localAddr, int localPort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAddress</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>adbd9a22ce67e0727e74102b9bfd83c14</anchor>
      <arglist>(IPvXAddress addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>listen</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>aaf460eed5521fb6c1a587075bec6f6b4</anchor>
      <arglist>(bool fork=false, uint32 requests=0, uint32 messagesToPush=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>aec3241da9f007e4a3d1211c314f7dcc5</anchor>
      <arglist>(IPvXAddress remoteAddress, int32 remotePort, uint32 numRequests)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connectx</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a2e28b1324ddf84d878c96f4448d188cb</anchor>
      <arglist>(AddressVector remoteAddresses, int32 remotePort, uint32 numRequests=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a237f0e66511d5f343eeec96992151e4c</anchor>
      <arglist>(cPacket *msg, bool last=true, bool primary=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendNotification</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a0e9188a10b1914bd97adf2857636129f</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendRequest</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a8f4c0c8dc30620cd20f5b0e2262f6492</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a59fadc92af0cfc43d505d98cef374c73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abort</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a4db6465b68c53543eec91d07d52f05f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a96a44bf84aadf72bd6b6ea929ad597d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>requestStatus</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a5ae03a4b87d274415fac26d8e12d667e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>stateName</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a9fd58e3c20a1767ed7df83b69d15e298</anchor>
      <arglist>(int state)</arglist>
    </member>
    <member kind="variable">
      <type>cGate *</type>
      <name>gateToSctp</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a4d0f10de3806bea1ab7133071710e0b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToSCTP</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a8c57769cb0508925dafdfede4a4ada87</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>assocId</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>ab49217651e5b91fb67657a4cb517803f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sockId</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a74b409d63b04521afe27086ef2833291</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sockstate</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a5389f2a66c9e133aa319a7c2b5c85916</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>oneToOne</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a17bd453fc5bddc4802a0fecf1c7e5b6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>localAddr</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>aeca58a61f6f579981eb5a324c2ba4319</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AddressVector</type>
      <name>localAddresses</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a20ba70e9638a2a6ef0692e19a8c5f420</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>localPrt</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>ab6e4f70d4c1b8e63b71ae25e1524fb8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>remoteAddr</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a67eaf48604f87ed0e872b03a0a583778</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AddressVector</type>
      <name>remoteAddresses</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>ad7950eb104a3806f0baecaf4de1044f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>remotePrt</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a3aa1cb0c1e820568094aeccb81ac15a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>fsmStatus</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>abe9fe0a2deba9a7e2dc96311da75e318</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>inboundStreams</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a8a5eca34480958488a093a48ed96dac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>outboundStreams</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a72097418bb2b141c3aae69a8303dd129</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lastStream</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a622615d86a5fe1becb54467f047313ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CallbackInterface *</type>
      <name>cb</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a3be254ec4521ebf87f369bee4d140140</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>yourPtr</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a110976cf91865c9bb334e7ff409ca5f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>belongsToSocket</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>aaa2948569cd6f1aac0d8cd5102680356</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCallbackObject</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a4d550ae15025b9fcf90ab085c3f52fcf</anchor>
      <arglist>(CallbackInterface *cb, void *yourPtr=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processMessage</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>a5f729a9a7cdd6d43fb1089ce82d47a87</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>belongsToAnySCTPSocket</name>
      <anchorfile>class_s_c_t_p_socket.html</anchorfile>
      <anchor>add4455efbfe52732e9dd44178a8c8cde</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPSocket::CallbackInterface</name>
    <filename>class_s_c_t_p_socket_1_1_callback_interface.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CallbackInterface</name>
      <anchorfile>class_s_c_t_p_socket_1_1_callback_interface.html</anchorfile>
      <anchor>aeef9fd87279f6e78595f3424bca3ef15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>socketDataArrived</name>
      <anchorfile>class_s_c_t_p_socket_1_1_callback_interface.html</anchorfile>
      <anchor>a839bdd2504cabe1edc8770c1a432a7cb</anchor>
      <arglist>(int assocId, void *yourPtr, cPacket *msg, bool urgent)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>socketDataNotificationArrived</name>
      <anchorfile>class_s_c_t_p_socket_1_1_callback_interface.html</anchorfile>
      <anchor>a8bc5f5c6db42d745f1aebf609cee8a49</anchor>
      <arglist>(int assocId, void *yourPtr, cPacket *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>socketEstablished</name>
      <anchorfile>class_s_c_t_p_socket_1_1_callback_interface.html</anchorfile>
      <anchor>acb5da16b51586140535901da233010f8</anchor>
      <arglist>(int assocId, void *yourPtr, uint64 buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>socketPeerClosed</name>
      <anchorfile>class_s_c_t_p_socket_1_1_callback_interface.html</anchorfile>
      <anchor>abd28bec58121e3eb9ba0fc758f2b7cfb</anchor>
      <arglist>(int assocId, void *yourPtr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>socketClosed</name>
      <anchorfile>class_s_c_t_p_socket_1_1_callback_interface.html</anchorfile>
      <anchor>a97a094ccbc814efe3b07cc8076906e21</anchor>
      <arglist>(int assocId, void *yourPtr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>socketFailure</name>
      <anchorfile>class_s_c_t_p_socket_1_1_callback_interface.html</anchorfile>
      <anchor>aedcd1603b4cf4849c78108de87f3df24</anchor>
      <arglist>(int assocId, void *yourPtr, int code)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>socketStatusArrived</name>
      <anchorfile>class_s_c_t_p_socket_1_1_callback_interface.html</anchorfile>
      <anchor>ad5a0fb4838a3b37cfa1263b9956b9160</anchor>
      <arglist>(int assocId, void *yourPtr, SCTPStatusInfo *status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendRequestArrived</name>
      <anchorfile>class_s_c_t_p_socket_1_1_callback_interface.html</anchorfile>
      <anchor>a1b1801c61d94671d5aae346759abad3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>shutdownReceivedArrived</name>
      <anchorfile>class_s_c_t_p_socket_1_1_callback_interface.html</anchorfile>
      <anchor>aa0ed7f0493982b23e07556591b77db6d</anchor>
      <arglist>(int connId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendqueueFullArrived</name>
      <anchorfile>class_s_c_t_p_socket_1_1_callback_interface.html</anchorfile>
      <anchor>a7dfb071fbe4dbbbad061fa3bca48a437</anchor>
      <arglist>(int connId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendqueueAbatedArrived</name>
      <anchorfile>class_s_c_t_p_socket_1_1_callback_interface.html</anchorfile>
      <anchor>af1ba4281e669037920f2cd96f46ac043</anchor>
      <arglist>(int connId, uint64 buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addressAddedArrived</name>
      <anchorfile>class_s_c_t_p_socket_1_1_callback_interface.html</anchorfile>
      <anchor>ac403827a063bff1f5be3d5446a74ffa4</anchor>
      <arglist>(int assocId, IPvXAddress localAddr, IPvXAddress remoteAddr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPStateVariables</name>
    <filename>class_s_c_t_p_state_variables.html</filename>
    <member kind="function">
      <type></type>
      <name>SCTPStateVariables</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a052d86410c436923db0a38b80c6b5087</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SCTPStateVariables</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>ad55aee072a7c22e66250deea3d84c57d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrimaryPath</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a5b32a3dfde58166c98ee2c0d074d28b0</anchor>
      <arglist>(SCTPPathVariables *path)</arglist>
    </member>
    <member kind="function">
      <type>const IPvXAddress &amp;</type>
      <name>getPrimaryPathIndex</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a056eda43969ce7da3949443a1a8fcfa3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SCTPPathVariables *</type>
      <name>getPrimaryPath</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>afaefe95090e09d43d24794cf47a1ec0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>active</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a9f45fb5b9a76bdf0ada04c3ed9920215</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>fork</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>ab5bac08be4a3710fe623e93aa65e74ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>ackPointAdvanced</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>abd34f0ccea3ab4994c355f56bbd18cf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>dataChunkReceived</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a500772d1bd6a1f6e0cc7a507c1f36331</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>initReceived</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>ac8337c67683db37ec84abbd26674c880</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>cookieEchoReceived</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a94e82891931e37de20d6b6ac7594ec37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>newChunkReceived</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a06450a51ef019da0038809f452844e63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>firstChunkReceived</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>ab44c46d79f8a2504941b5903322b0448</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>swsAvoidanceInvoked</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a20b24275e45b18df329a7254563e306d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>probingIsAllowed</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a49bcbea974aa73223c6e0a7d4d945094</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>zeroWindowProbing</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a0f8385151a29c83819ff5c1756ab359b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>alwaysBundleSack</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a6fd0531775e07b02c22015ba75fca544</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>fastRecoverySupported</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a8e59e86d19565705ea4e9d0aadb9500d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>nagleEnabled</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a5a4195a30b502699a6fd92ce5965f15c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>sackAllowed</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>ae92fceb56eefd5079a1c5e103d8448a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>reactivatePrimaryPath</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a96e740d1f0d386449c13853fadff56b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>resetPending</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>aa94663dad983ed08a217f8f7793a123e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>stopReceiving</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a5d87341e572a5fa3688aa9616cae8a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>stopOldData</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a56857fa487544bee2d16f8dc47640650</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>queueUpdate</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a3fe954a9fd21fd90abbb9258fc285afe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>firstDataSent</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a6bd6ae8cce21386df977220128383b02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>peerWindowFull</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a56e6edeafb32e19e42da2889d4a16202</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>zeroWindow</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>af8e2711f085b1e488c23ce354b1f74af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>stopSending</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>ab6ab9d382caab3e8ddc90ba57c9b7ac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>inOut</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a9d2eece95c4b0aa2efbb1959d7fa78a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>noMoreOutstanding</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a15e698ea1bfe5c22fcca07ed4127fa8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>numGapReports</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a1e7737c5f6c7fa4c3faa782f0078a9b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>initialPrimaryPath</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a6270b0edb7777931a33ff8662288bf25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>lastDataSourceAddress</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a9f057ad775e7e3187bc6f522820b0ac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AddressVector</type>
      <name>localAddresses</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a7b2aedff06029b67f2861a902e1bcf54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; uint32 &gt;</type>
      <name>dupList</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a04e8711ebb60bf950f99a98e6eb5cbc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>errorCount</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>ad68b7cf6b6d43185ca00ba427e6d42ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64</type>
      <name>peerRwnd</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a7f69bc6b1b246c1993d8621eb8ee4800</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64</type>
      <name>initialPeerRwnd</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a2e17d3f84ea047804988bfb5959e906f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64</type>
      <name>localRwnd</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a1046a167391f15e9071fda9395588756</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>nextTSN</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>ae8ae55483bf42be31814339345133587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>lastTsnAck</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a4c4c403bd391f0be75e1b71254828274</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>cTsnAck</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a37b617b9caf66e8bb37d3eed48bcb76c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>highestTsnReceived</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a0a5cdd7069f2909804ecf1ebe227b338</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>highestTsnAcked</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a491c96f05a527dd616f163958176f9a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>highestTsnStored</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>af02f163ebe6c28c874d7734bbc2a31bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>lastTsnReceived</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a5cc697d3b68b64aca76152385d5cb6f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>lastTSN</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a66dc15b846de9c6aaa9516479481cdaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>ackState</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>acd712e40d2abba82caa4acb46a16fc8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>numGaps</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a8d12842797c5376fa3b22a1a506fddaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>gapStartList</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>ad7d3a3a95f236b66e40e0825a8cd8fc3</anchor>
      <arglist>[MAX_GAP_COUNT]</arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>gapStopList</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a3050fcc98f6ceba8036ae36446125b8e</anchor>
      <arglist>[MAX_GAP_COUNT]</arglist>
    </member>
    <member kind="variable">
      <type>uint64</type>
      <name>outstandingBytes</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a9a4b261bb104828e3d1c14f89cdc3a6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64</type>
      <name>queuedReceivedBytes</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>ac4dd73467c637f000a01b44b13799abf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>lastStreamScheduled</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a65115dee13a7bb06bf17e24ac33ff4c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>assocPmtu</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a20d0d3d8a1e728ac8742eba28856799f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>msgNum</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a53f16f4ee6a644577c8df76bdfabec46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64</type>
      <name>bytesRcvd</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a63d6881509cd0a115838e7c7e9c8c87f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>numRequests</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>adcb6627c45d909e52eba1e3ff4e05b29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>bytesToRetransmit</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>aef86f64e9eba32144f7d4d997e7df229</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>messagesToPush</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>ac841a6063c1f2d092f82c64cd67534b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>pushMessagesLeft</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>acc81bc8fb8290aa91b916ebb83be9114</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>count</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>afae7ac97aa2a2a82b5ee5b2e60891b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>localTieTag</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>ae69a3b5689a645e53211833683509972</anchor>
      <arglist>[32]</arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>peerTieTag</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a524b3dbfe700d9d54e23186893490422</anchor>
      <arglist>[32]</arglist>
    </member>
    <member kind="variable">
      <type>uint64</type>
      <name>queuedMessages</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>aee5ec4417497e5bba3cf95f79f902da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>messageAcceptLimit</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a5567177b4b632086486b5656f9757c08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>queueLimit</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a37fa23a9f841d820bc9e5114e76c5823</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>header</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a5cdefe133e1a8c71203aa26631ed09c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>probingTimeout</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>aefe40bfaf6b42fb98381cfd3201aa2f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int32 &gt;</type>
      <name>numMsgsReq</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>aaf9ea2f913888ba783ae161088669ea6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>cookieLifeTime</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a3ed4c02fc33a562dcc11342dcaa158a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>initRetransCounter</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a4b4a00ea47be687ea159b82507339cdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>initRexmitTimeout</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a7a94234b046495e7c2e4d60df00b74c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SCTPInitChunk *</type>
      <name>initChunk</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>af687fe1d41e0f02e4f393ce45a83dd19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SCTPCookieEchoChunk *</type>
      <name>cookieChunk</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a977478bfadd7d0296a7a805ec9e56a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SCTPShutdownChunk *</type>
      <name>shutdownChunk</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>ab71f05d4300e0fd95bd5e371c3615979</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SCTPShutdownAckChunk *</type>
      <name>shutdownAckChunk</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a4c69e50746d1c61b284521df08bfeeff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SCTPMessage *</type>
      <name>sctpmsg</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a6417b860ec08633082497392bdb40325</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64</type>
      <name>sendQueueLimit</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a4a45a11cb5d50f9d7cb1799fa105dedb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64</type>
      <name>sendBuffer</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>aa67f68583efc7ce652e777d055e87165</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>appSendAllowed</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a9944dafac700403ebec699e66ca34d03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>lastSendQueueAbated</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a7214666b7e6034940d7f2de8ecac9dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>nextRSid</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a75ecf4e5a99369bb4bcae9a184afb22d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>swsLimit</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>aba85e5f43e22032f2f883effbd7a8f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>lastMsgWasFragment</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a7afc09bdeea747f08bd02cb60f9d4828</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enableHeartbeats</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a443c8e2a234674a5b8bb385831bf147f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SCTPMessage *</type>
      <name>sctpMsg</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a71c1bdd09aeb8aca87c5ba84d591f6fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>chunksAdded</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>ab43a9559edb781b07cff616804a628db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>dataChunksAdded</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a057e2c2320dafa606c1f092a9fb66db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>packetBytes</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a74a0620b592f25bb21ee68452dbb8740</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>authAdded</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a0e6135eb5e822b95bc8b7d8935a747bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>maxBurst</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>aa9fd5385ee9beba279f069309e9b0018</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>ssNextStream</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>ab39baf50604e4bd23b5a8632aca3bd97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>ssLastDataChunkSizeSet</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a2a6f74cc6f2e07c6ee47797c6bc5191f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SCTPPathVariables *</type>
      <name>primaryPath</name>
      <anchorfile>class_s_c_t_p_state_variables.html</anchorfile>
      <anchor>a73e7f37155db04e3b7e243d9cae98699</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCTPStatusInfo</name>
    <filename>class_s_c_t_p_status_info.html</filename>
    <base>SCTPCommand</base>
    <member kind="function">
      <type></type>
      <name>SCTPStatusInfo</name>
      <anchorfile>class_s_c_t_p_status_info.html</anchorfile>
      <anchor>a270e1fb4cd41074d17e5633e88a58e83</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCTPStatusInfo</name>
      <anchorfile>class_s_c_t_p_status_info.html</anchorfile>
      <anchor>a4bba536abcaef9eabe2a7b56ee627174</anchor>
      <arglist>(const SCTPStatusInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCTPStatusInfo</name>
      <anchorfile>class_s_c_t_p_status_info.html</anchorfile>
      <anchor>a5117cb0d9fb619958e2e62471be6f092</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCTPStatusInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_c_t_p_status_info.html</anchorfile>
      <anchor>a1b57045b2cf330c84388706a2e0c0d6d</anchor>
      <arglist>(const SCTPStatusInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCTPStatusInfo *</type>
      <name>dup</name>
      <anchorfile>class_s_c_t_p_status_info.html</anchorfile>
      <anchor>a1a9ed63a8bb86ee3d1c25fee5ed71dc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_s_c_t_p_status_info.html</anchorfile>
      <anchor>a23552cc7047f4959c8070e3c0dcadd1a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_s_c_t_p_status_info.html</anchorfile>
      <anchor>a2aebd96dd35933be79d69fe396dc5759</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getState</name>
      <anchorfile>class_s_c_t_p_status_info.html</anchorfile>
      <anchor>a9f84dcfc441ae7133a5a7810fb20441a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setState</name>
      <anchorfile>class_s_c_t_p_status_info.html</anchorfile>
      <anchor>a80b6372b6ea7ef132e1f9004a8f127f4</anchor>
      <arglist>(int state_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getStateName</name>
      <anchorfile>class_s_c_t_p_status_info.html</anchorfile>
      <anchor>a816028ea00f4d41843b01afc293cc6a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStateName</name>
      <anchorfile>class_s_c_t_p_status_info.html</anchorfile>
      <anchor>a9bdfa4cad66f7253809334d4039e9540</anchor>
      <arglist>(const char *stateName_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>getPathId</name>
      <anchorfile>class_s_c_t_p_status_info.html</anchorfile>
      <anchor>a94b4d336d4984ba60ae201c8f09fbcb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>getPathId</name>
      <anchorfile>class_s_c_t_p_status_info.html</anchorfile>
      <anchor>a08cd42b0671eae05d8f18f2cce0fb2e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPathId</name>
      <anchorfile>class_s_c_t_p_status_info.html</anchorfile>
      <anchor>ad362258a445e9e783951bf0306c6ae7b</anchor>
      <arglist>(const IPvXAddress &amp;pathId_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getActive</name>
      <anchorfile>class_s_c_t_p_status_info.html</anchorfile>
      <anchor>aa5799e27d1434ca35a1e05f4a2e93207</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setActive</name>
      <anchorfile>class_s_c_t_p_status_info.html</anchorfile>
      <anchor>a58210fbec91a82936c82e571dec76860</anchor>
      <arglist>(bool active_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_s_c_t_p_status_info.html</anchorfile>
      <anchor>a20e25a8a1e1514cfcda02e8d2cc997f5</anchor>
      <arglist>(const SCTPStatusInfo &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>state_var</name>
      <anchorfile>class_s_c_t_p_status_info.html</anchorfile>
      <anchor>a26988b573e53c4df2345c968862d9bf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>stateName_var</name>
      <anchorfile>class_s_c_t_p_status_info.html</anchorfile>
      <anchor>a9ed1fc830c71731dea31279bf8bee468</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPvXAddress</type>
      <name>pathId_var</name>
      <anchorfile>class_s_c_t_p_status_info.html</anchorfile>
      <anchor>a35eb20014c76541789aaadd2d54d3305</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>active_var</name>
      <anchorfile>class_s_c_t_p_status_info.html</anchorfile>
      <anchor>ae5f49b9cd8e043683683d68b93487dd7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SDESChunk</name>
    <filename>class_s_d_e_s_chunk.html</filename>
    <member kind="function">
      <type></type>
      <name>SDESChunk</name>
      <anchorfile>class_s_d_e_s_chunk.html</anchorfile>
      <anchor>a4ab492ce668b3615d5518ca27ba36509</anchor>
      <arglist>(const char *name=NULL, uint32 ssrc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SDESChunk</name>
      <anchorfile>class_s_d_e_s_chunk.html</anchorfile>
      <anchor>acfe717075152de948a0512f2fc028d2c</anchor>
      <arglist>(const SDESChunk &amp;sdesChunk)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SDESChunk</name>
      <anchorfile>class_s_d_e_s_chunk.html</anchorfile>
      <anchor>a37604305e994b098859ee2ebf4ee9602</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SDESChunk &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_d_e_s_chunk.html</anchorfile>
      <anchor>aac582e9b307c2c38fe59c35bfda5747a</anchor>
      <arglist>(const SDESChunk &amp;sdesChunk)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SDESChunk *</type>
      <name>dup</name>
      <anchorfile>class_s_d_e_s_chunk.html</anchorfile>
      <anchor>a8ae1724de655ef4bc48103cc67b627a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>class_s_d_e_s_chunk.html</anchorfile>
      <anchor>a06a9d10b63bf8def7ec114bedafe80ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>class_s_d_e_s_chunk.html</anchorfile>
      <anchor>aaa99eda324d9e685ddc7a2187bc5afb1</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSDESItem</name>
      <anchorfile>class_s_d_e_s_chunk.html</anchorfile>
      <anchor>a59b1720b803b1ac7f44bfc90d46177b5</anchor>
      <arglist>(SDESItem *item)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getSSRC</name>
      <anchorfile>class_s_d_e_s_chunk.html</anchorfile>
      <anchor>ac98898efca170771b0b910906dc7872a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSSRC</name>
      <anchorfile>class_s_d_e_s_chunk.html</anchorfile>
      <anchor>a98896859a2ffeee1093bd65c5d3afb5d</anchor>
      <arglist>(uint32 ssrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getLength</name>
      <anchorfile>class_s_d_e_s_chunk.html</anchorfile>
      <anchor>a668023755b8420f42afeb83eca7a01f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>_ssrc</name>
      <anchorfile>class_s_d_e_s_chunk.html</anchorfile>
      <anchor>a2445209f6984b8e465275b9be3effb18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_length</name>
      <anchorfile>class_s_d_e_s_chunk.html</anchorfile>
      <anchor>ac15b149741ba23d4a732b36a7814fe3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SDESItem</name>
    <filename>class_s_d_e_s_item.html</filename>
    <member kind="enumeration">
      <name>SDES_ITEM_TYPE</name>
      <anchorfile>class_s_d_e_s_item.html</anchorfile>
      <anchor>a226500b98dc486edd2fc5c87c121de71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SDES_UNDEF</name>
      <anchorfile>class_s_d_e_s_item.html</anchorfile>
      <anchor>a226500b98dc486edd2fc5c87c121de71a24ee856155842f0459727e3064804c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SDES_CNAME</name>
      <anchorfile>class_s_d_e_s_item.html</anchorfile>
      <anchor>a226500b98dc486edd2fc5c87c121de71a9fde35435f9f4afa26adc733f785173c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SDES_NAME</name>
      <anchorfile>class_s_d_e_s_item.html</anchorfile>
      <anchor>a226500b98dc486edd2fc5c87c121de71aadad09193af12a46718feff54c522fc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SDES_EMAIL</name>
      <anchorfile>class_s_d_e_s_item.html</anchorfile>
      <anchor>a226500b98dc486edd2fc5c87c121de71ab4ab3f02d8987d3a9c30ca25c7150da5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SDES_PHONE</name>
      <anchorfile>class_s_d_e_s_item.html</anchorfile>
      <anchor>a226500b98dc486edd2fc5c87c121de71ae3d642dc727faa017caf098330caf86a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SDES_LOC</name>
      <anchorfile>class_s_d_e_s_item.html</anchorfile>
      <anchor>a226500b98dc486edd2fc5c87c121de71a5fdf82bf5cdd95d2c44ab0b4401e0301</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SDES_TOOL</name>
      <anchorfile>class_s_d_e_s_item.html</anchorfile>
      <anchor>a226500b98dc486edd2fc5c87c121de71a30e019c9385560580c95e03d824de799</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SDES_NOTE</name>
      <anchorfile>class_s_d_e_s_item.html</anchorfile>
      <anchor>a226500b98dc486edd2fc5c87c121de71aaf33787c48f63b91bbc73c27b2ba99a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SDES_PRIV</name>
      <anchorfile>class_s_d_e_s_item.html</anchorfile>
      <anchor>a226500b98dc486edd2fc5c87c121de71a6860fb859084b85b9aed1606a33d053b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SDESItem</name>
      <anchorfile>class_s_d_e_s_item.html</anchorfile>
      <anchor>aa9945cf0dd5254474b1ff339facedc69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SDESItem</name>
      <anchorfile>class_s_d_e_s_item.html</anchorfile>
      <anchor>a796ffc4ea702a443b142b47d4618e9c3</anchor>
      <arglist>(SDES_ITEM_TYPE type, const char *content)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SDESItem</name>
      <anchorfile>class_s_d_e_s_item.html</anchorfile>
      <anchor>af866f8503a05acbe5501e161b8abdc67</anchor>
      <arglist>(const SDESItem &amp;sdesItem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SDESItem</name>
      <anchorfile>class_s_d_e_s_item.html</anchorfile>
      <anchor>af402fa17b046a087683473f692b238e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SDESItem &amp;</type>
      <name>operator=</name>
      <anchorfile>class_s_d_e_s_item.html</anchorfile>
      <anchor>af0c71cf362e35e0a30791a51990a2091</anchor>
      <arglist>(const SDESItem &amp;sdesItem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SDESItem *</type>
      <name>dup</name>
      <anchorfile>class_s_d_e_s_item.html</anchorfile>
      <anchor>ae11b84b09070b094a170a4d26e18f93f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>class_s_d_e_s_item.html</anchorfile>
      <anchor>a3cc62831175598220786c09a24e2a849</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>class_s_d_e_s_item.html</anchorfile>
      <anchor>aa48b281e6846ad0471fe7492a306faff</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SDES_ITEM_TYPE</type>
      <name>getType</name>
      <anchorfile>class_s_d_e_s_item.html</anchorfile>
      <anchor>a23e041f8b6284125d0af6d2068573ff3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getContent</name>
      <anchorfile>class_s_d_e_s_item.html</anchorfile>
      <anchor>aa2583d04945e51c1073f9d785e4b9293</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getLength</name>
      <anchorfile>class_s_d_e_s_item.html</anchorfile>
      <anchor>a67dedb0815b473d355ad32c2f24aeeb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SDES_ITEM_TYPE</type>
      <name>_type</name>
      <anchorfile>class_s_d_e_s_item.html</anchorfile>
      <anchor>a69ec84593b2526538d1526ea9c2f6d87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_length</name>
      <anchorfile>class_s_d_e_s_item.html</anchorfile>
      <anchor>a250dc8fd186c690ffab268c20f42c85c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_content</name>
      <anchorfile>class_s_d_e_s_item.html</anchorfile>
      <anchor>a8e50f3d650f04d4094fbb43843de17bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SenderDescriptor_t</name>
    <filename>struct_sender_descriptor__t.html</filename>
    <member kind="function">
      <type></type>
      <name>SenderDescriptor_t</name>
      <anchorfile>struct_sender_descriptor__t.html</anchorfile>
      <anchor>a08b636bf8ac3bb887ff571d531ab4dd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>::SenderTemplateObj_t</type>
      <name>Sender_Template_Object</name>
      <anchorfile>struct_sender_descriptor__t.html</anchorfile>
      <anchor>aaa72986c3e5ee8d945630dc4d5c5fb51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::SenderTspecObj_t</type>
      <name>Sender_Tspec_Object</name>
      <anchorfile>struct_sender_descriptor__t.html</anchorfile>
      <anchor>a0ba9ffbe7001408a10a81b91be056537</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SenderReport</name>
    <filename>class_sender_report.html</filename>
    <member kind="function">
      <type></type>
      <name>SenderReport</name>
      <anchorfile>class_sender_report.html</anchorfile>
      <anchor>a64a9cd969c2dbfdbc396493f73e55058</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenderReport</name>
      <anchorfile>class_sender_report.html</anchorfile>
      <anchor>a32f50d0f9eee78bc4c7da9f71add7822</anchor>
      <arglist>(const SenderReport &amp;senderReport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SenderReport</name>
      <anchorfile>class_sender_report.html</anchorfile>
      <anchor>ad57f1e4c3a3ad4a20f3cf6cc481379b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SenderReport &amp;</type>
      <name>operator=</name>
      <anchorfile>class_sender_report.html</anchorfile>
      <anchor>a93dcbe34c0fa2169805e91cae70c1dec</anchor>
      <arglist>(const SenderReport &amp;senderReport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SenderReport *</type>
      <name>dup</name>
      <anchorfile>class_sender_report.html</anchorfile>
      <anchor>ac20b21f95758c4590c7cb468ce5eed56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>class_sender_report.html</anchorfile>
      <anchor>a0e8f57df455a1f459d20186cdb981459</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>class_sender_report.html</anchorfile>
      <anchor>a6b39a2f135cf8cf2c2a9c7d81bfcc672</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>getNTPTimeStamp</name>
      <anchorfile>class_sender_report.html</anchorfile>
      <anchor>add4f898f55b4a3f8cfee56d007b5193b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNTPTimeStamp</name>
      <anchorfile>class_sender_report.html</anchorfile>
      <anchor>a23d1e8a1c28d7d9a3cbcdb200b7389a4</anchor>
      <arglist>(uint64 ntpTimeStamp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getRTPTimeStamp</name>
      <anchorfile>class_sender_report.html</anchorfile>
      <anchor>ad33d24a23943866e3a4b33d1d5f8c6ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRTPTimeStamp</name>
      <anchorfile>class_sender_report.html</anchorfile>
      <anchor>a0f30d024b0e6d7244fc0278e2bd009fb</anchor>
      <arglist>(uint32 timeStamp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getPacketCount</name>
      <anchorfile>class_sender_report.html</anchorfile>
      <anchor>a7b3767821b62cb4f9771f9a08ae3a22a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPacketCount</name>
      <anchorfile>class_sender_report.html</anchorfile>
      <anchor>a3381310b46ea205d63db6c37f6e35e97</anchor>
      <arglist>(uint32 packetCount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getByteCount</name>
      <anchorfile>class_sender_report.html</anchorfile>
      <anchor>a949cf619675623164170957da95ffd18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setByteCount</name>
      <anchorfile>class_sender_report.html</anchorfile>
      <anchor>af3014ed3e2e1d400c1c536c97ac8cb29</anchor>
      <arglist>(uint32 byteCount)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint64</type>
      <name>_ntpTimeStamp</name>
      <anchorfile>class_sender_report.html</anchorfile>
      <anchor>a3ac62ffeadc4c83c179460e0fecbe456</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>_rtpTimeStamp</name>
      <anchorfile>class_sender_report.html</anchorfile>
      <anchor>a4df1f3a69e1541543cf434bbe06ba8b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>_packetCount</name>
      <anchorfile>class_sender_report.html</anchorfile>
      <anchor>af7e9d8a11435e41d3de9016358fbf431</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>_byteCount</name>
      <anchorfile>class_sender_report.html</anchorfile>
      <anchor>a570a40675890e683a584bdda600f7677</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SenderTemplateObj_t</name>
    <filename>struct_sender_template_obj__t.html</filename>
    <member kind="function">
      <type></type>
      <name>SenderTemplateObj_t</name>
      <anchorfile>struct_sender_template_obj__t.html</anchorfile>
      <anchor>a3d4855bcaf290d33a8586be73a9cc5d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>::IPAddress</type>
      <name>SrcAddress</name>
      <anchorfile>struct_sender_template_obj__t.html</anchorfile>
      <anchor>a4f5b09ff47476bfb19fce888eaa1293e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Lsp_Id</name>
      <anchorfile>struct_sender_template_obj__t.html</anchorfile>
      <anchor>a88339dc936e3584d8aeafaa892651aca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SenderTspecObj_t</name>
    <filename>struct_sender_tspec_obj__t.html</filename>
    <member kind="function">
      <type></type>
      <name>SenderTspecObj_t</name>
      <anchorfile>struct_sender_tspec_obj__t.html</anchorfile>
      <anchor>aacdf4702830bce3e3022a0263566d9bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>req_bandwidth</name>
      <anchorfile>struct_sender_tspec_obj__t.html</anchorfile>
      <anchor>afc6294fc62d00dd2e9182e318e61caa5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SessionObj_t</name>
    <filename>struct_session_obj__t.html</filename>
    <member kind="function">
      <type></type>
      <name>SessionObj_t</name>
      <anchorfile>struct_session_obj__t.html</anchorfile>
      <anchor>a3d7350a4abf3543b5b6e1eb08462ab4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Tunnel_Id</name>
      <anchorfile>struct_session_obj__t.html</anchorfile>
      <anchor>ae0956441a03914d28ef82a4398aaf30b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Extended_Tunnel_Id</name>
      <anchorfile>struct_session_obj__t.html</anchorfile>
      <anchor>a0f79277c757c9d629eef8f0a7bf39ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::IPAddress</type>
      <name>DestAddress</name>
      <anchorfile>struct_session_obj__t.html</anchorfile>
      <anchor>a864c419c0c90b94148924c7457d262bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>setupPri</name>
      <anchorfile>struct_session_obj__t.html</anchorfile>
      <anchor>a805e6edce026e0f8ba0b57cc3424baa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>holdingPri</name>
      <anchorfile>struct_session_obj__t.html</anchorfile>
      <anchor>a8e3d171c49223f22ccd30d77e773fca4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shutdown_ack_chunk</name>
    <filename>structshutdown__ack__chunk.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>structshutdown__ack__chunk.html</anchorfile>
      <anchor>aa78c5ab1c85ad41c9ca8799f0ec774d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>flags</name>
      <anchorfile>structshutdown__ack__chunk.html</anchorfile>
      <anchor>aab8ae38646c6db6ba9ab9a8e7830850d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>structshutdown__ack__chunk.html</anchorfile>
      <anchor>a2339059f688905cd011cfd754d1843a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shutdown_chunk</name>
    <filename>structshutdown__chunk.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>structshutdown__chunk.html</anchorfile>
      <anchor>a37f4c6633beae1554b411d12134c1d5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>flags</name>
      <anchorfile>structshutdown__chunk.html</anchorfile>
      <anchor>a53ef09959f39084a581104927c1e2edc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>structshutdown__chunk.html</anchorfile>
      <anchor>ac2789aa5674089fa4233aa9b7503efd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>cumulative_tsn_ack</name>
      <anchorfile>structshutdown__chunk.html</anchorfile>
      <anchor>a680c50455de9484f40b9301d0d1dee46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shutdown_complete_chunk</name>
    <filename>structshutdown__complete__chunk.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>structshutdown__complete__chunk.html</anchorfile>
      <anchor>aff48469e9857adf65da6b674e7edef77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>flags</name>
      <anchorfile>structshutdown__complete__chunk.html</anchorfile>
      <anchor>a0469d3f4be480b7e55f37255b70b84be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>structshutdown__complete__chunk.html</anchorfile>
      <anchor>abd114a0fb8cdcffa268118d9cfe34697</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SignallingMsg</name>
    <filename>class_signalling_msg.html</filename>
    <member kind="function">
      <type></type>
      <name>SignallingMsg</name>
      <anchorfile>class_signalling_msg.html</anchorfile>
      <anchor>a155bd0e5b2fdb430d2fc7dbeeb2a1632</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignallingMsg</name>
      <anchorfile>class_signalling_msg.html</anchorfile>
      <anchor>a81a047da7cd3bfe08f1ebeabc3695679</anchor>
      <arglist>(const SignallingMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SignallingMsg</name>
      <anchorfile>class_signalling_msg.html</anchorfile>
      <anchor>ae79c123ee8e9e9a6e818c60e6e2d0efd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignallingMsg &amp;</type>
      <name>operator=</name>
      <anchorfile>class_signalling_msg.html</anchorfile>
      <anchor>abe87ed2fe9ba2881b2a3867908a40c4c</anchor>
      <arglist>(const SignallingMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SignallingMsg *</type>
      <name>dup</name>
      <anchorfile>class_signalling_msg.html</anchorfile>
      <anchor>a60718412a229aabdfebd2fa3f8002114</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_signalling_msg.html</anchorfile>
      <anchor>a85a30b02bf6a3bf13be3aa65f7560350</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_signalling_msg.html</anchorfile>
      <anchor>a1532d2f120b165d33f27de62909a975c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommand</name>
      <anchorfile>class_signalling_msg.html</anchorfile>
      <anchor>aad33e72fb11556e30046873da50b844d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchorfile>class_signalling_msg.html</anchorfile>
      <anchor>a0c0d689ddebdc021a921f15f1f855651</anchor>
      <arglist>(int command_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_signalling_msg.html</anchorfile>
      <anchor>ac6f9d0ca61b44e72ad5b0cb41e3d86f9</anchor>
      <arglist>(const SignallingMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>command_var</name>
      <anchorfile>class_signalling_msg.html</anchorfile>
      <anchor>aaef15f6b3bd2524345b5b61d40912a61</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleClassifier</name>
    <filename>class_simple_classifier.html</filename>
    <base>IScriptable</base>
    <base>IRSVPClassifier</base>
    <class kind="struct">SimpleClassifier::FECEntry</class>
    <member kind="function">
      <type></type>
      <name>SimpleClassifier</name>
      <anchorfile>class_simple_classifier.html</anchorfile>
      <anchor>ae85c384685c8044120167752b771245d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_simple_classifier.html</anchorfile>
      <anchor>a2752f05725cbc2a1a723145d5b93b1d9</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_simple_classifier.html</anchorfile>
      <anchor>a1eafd742086abed4ee80f23354e297dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_simple_classifier.html</anchorfile>
      <anchor>af579a60931cfc3fd2454e96179a56a65</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processCommand</name>
      <anchorfile>class_simple_classifier.html</anchorfile>
      <anchor>ad7fc19a7f0da79e1e2977c4f4c7bc4ef</anchor>
      <arglist>(const cXMLElement &amp;node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>lookupLabel</name>
      <anchorfile>class_simple_classifier.html</anchorfile>
      <anchor>a06b4668153f537bc02defabea2455639</anchor>
      <arglist>(IPDatagram *ipdatagram, LabelOpVector &amp;outLabel, std::string &amp;outInterface, int &amp;color)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>class_simple_classifier.html</anchorfile>
      <anchor>a3d59970551015f00944e859cbd1a1e7b</anchor>
      <arglist>(const SessionObj_t &amp;session, const SenderTemplateObj_t &amp;sender, int inLabel)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>readTableFromXML</name>
      <anchorfile>class_simple_classifier.html</anchorfile>
      <anchor>a5a24e2be606223f1b4f7c8575d612375</anchor>
      <arglist>(const cXMLElement *fectable)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>readItemFromXML</name>
      <anchorfile>class_simple_classifier.html</anchorfile>
      <anchor>a56186b812abd918d7355d5d6dd26aba0</anchor>
      <arglist>(const cXMLElement *fec)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; FECEntry &gt;::iterator</type>
      <name>findFEC</name>
      <anchorfile>class_simple_classifier.html</anchorfile>
      <anchor>a02f5c62ed7a909b5ac56205e6b14aa6a</anchor>
      <arglist>(int fecid)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>routerId</name>
      <anchorfile>class_simple_classifier.html</anchorfile>
      <anchor>aed95b913088b5824553817a65c281ab3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxLabel</name>
      <anchorfile>class_simple_classifier.html</anchorfile>
      <anchor>a36263a04fe1d139c3ddeb08763f7db08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; FECEntry &gt;</type>
      <name>bindings</name>
      <anchorfile>class_simple_classifier.html</anchorfile>
      <anchor>a18803de5a7a88ef8d06e4811b5734956</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LIBTable *</type>
      <name>lt</name>
      <anchorfile>class_simple_classifier.html</anchorfile>
      <anchor>a742a51717e1578d5f133e877326d9d44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RSVP *</type>
      <name>rsvp</name>
      <anchorfile>class_simple_classifier.html</anchorfile>
      <anchor>af6bd06d2b82c85a07a6e98867fb70cd1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimpleClassifier::FECEntry</name>
    <filename>struct_simple_classifier_1_1_f_e_c_entry.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>id</name>
      <anchorfile>struct_simple_classifier_1_1_f_e_c_entry.html</anchorfile>
      <anchor>ac30411d5433c1e959c63d4287c6b5c28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>src</name>
      <anchorfile>struct_simple_classifier_1_1_f_e_c_entry.html</anchorfile>
      <anchor>a88b796253c971937ad5b91ac226f27db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>dest</name>
      <anchorfile>struct_simple_classifier_1_1_f_e_c_entry.html</anchorfile>
      <anchor>a62236635af94dddf90bea7f30e4f0caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SessionObj_t</type>
      <name>session</name>
      <anchorfile>struct_simple_classifier_1_1_f_e_c_entry.html</anchorfile>
      <anchor>a066ae5df1000c79abb3964316ea4c01d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SenderTemplateObj_t</type>
      <name>sender</name>
      <anchorfile>struct_simple_classifier_1_1_f_e_c_entry.html</anchorfile>
      <anchor>ac032a3dff51dd410ca9dd759dc9c142f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>inLabel</name>
      <anchorfile>struct_simple_classifier_1_1_f_e_c_entry.html</anchorfile>
      <anchor>a2a577789c1930eb39e36529bf54f97e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sink</name>
    <filename>class_sink.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_sink.html</anchorfile>
      <anchor>a114f830a90f094399dfed6a0c30a57bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_sink.html</anchorfile>
      <anchor>a87e0d0132d6dfbee8fa208b2aafe1f5b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_sink.html</anchorfile>
      <anchor>a3e230eb11f401e33d151ee2d59924aec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numPackets</name>
      <anchorfile>class_sink.html</anchorfile>
      <anchor>a9b1954d9da753fe0b9474ead53f8f9f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numBits</name>
      <anchorfile>class_sink.html</anchorfile>
      <anchor>ae1b897d73275eb4d7713f61756156c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>throughput</name>
      <anchorfile>class_sink.html</anchorfile>
      <anchor>aa557d523fd82214b5f7965290a3a6bf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>packetPerSec</name>
      <anchorfile>class_sink.html</anchorfile>
      <anchor>adac669ecbcd1ad1a3f95d6fabc7ba43b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SnrControlInfo</name>
    <filename>class_snr_control_info.html</filename>
    <member kind="function">
      <type></type>
      <name>SnrControlInfo</name>
      <anchorfile>class_snr_control_info.html</anchorfile>
      <anchor>a84d4940a61c4c61b7fc7856ead139426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SnrControlInfo</name>
      <anchorfile>class_snr_control_info.html</anchorfile>
      <anchor>ac79894650a35b3345e197ba0aa745fa7</anchor>
      <arglist>(const SnrControlInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SnrControlInfo</name>
      <anchorfile>class_snr_control_info.html</anchorfile>
      <anchor>a440a2ad9d076ebf926d2ffa914b831cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SnrControlInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>class_snr_control_info.html</anchorfile>
      <anchor>acc2c9fa035779d6edf022f6307d1e81b</anchor>
      <arglist>(const SnrControlInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SnrControlInfo *</type>
      <name>dup</name>
      <anchorfile>class_snr_control_info.html</anchorfile>
      <anchor>a9aea0f658831ad9d05f2b1c9c0872063</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_snr_control_info.html</anchorfile>
      <anchor>a270b05845565a0098e26826b4339a32a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_snr_control_info.html</anchorfile>
      <anchor>aec5c59b2a85bdd72bcd2479e84d1c209</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SnrList &amp;</type>
      <name>getSnrList</name>
      <anchorfile>class_snr_control_info.html</anchorfile>
      <anchor>a82e490bdb2c0ccee0517463c2ecbb6de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SnrList &amp;</type>
      <name>getSnrList</name>
      <anchorfile>class_snr_control_info.html</anchorfile>
      <anchor>a062b603bb6cae6cfc1f5b37309a6c0ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSnrList</name>
      <anchorfile>class_snr_control_info.html</anchorfile>
      <anchor>a46cc51831daf0c0dd82aee7263f3e62b</anchor>
      <arglist>(const SnrList &amp;snrList_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_snr_control_info.html</anchorfile>
      <anchor>a5e78b080d1bb2424022f6e31f2ae75b2</anchor>
      <arglist>(const SnrControlInfo &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::SnrList</type>
      <name>snrList_var</name>
      <anchorfile>class_snr_control_info.html</anchorfile>
      <anchor>a0601070197a7933f5f01218fb4c87054</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SnrDecider</name>
    <filename>class_snr_decider.html</filename>
    <base>BasicDecider</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_snr_decider.html</anchorfile>
      <anchor>a77cd186866d79c7ca1b56a5433a0f5b7</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>snrOverThreshold</name>
      <anchorfile>class_snr_decider.html</anchorfile>
      <anchor>a4c795f28df74941eeeab18e8dc8034a4</anchor>
      <arglist>(SnrList &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>class_snr_decider.html</anchorfile>
      <anchor>affd51bd42b5411df2f8f6c115614d387</anchor>
      <arglist>(AirFrame *, SnrList &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>snrThresholdLevel</name>
      <anchorfile>class_snr_decider.html</anchorfile>
      <anchor>a2d47dd55aad40c384d4c831f54a7c3a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SnrEval</name>
    <filename>class_snr_eval.html</filename>
    <base>BasicSnrEval</base>
    <class kind="struct">SnrEval::SnrStruct</class>
    <member kind="function">
      <type></type>
      <name>SnrEval</name>
      <anchorfile>class_snr_eval.html</anchorfile>
      <anchor>ab4e1a210952513a2fb919c938453c8b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>changeChannel</name>
      <anchorfile>class_snr_eval.html</anchorfile>
      <anchor>adb3de641480fd9d173ed354c1dfa6223</anchor>
      <arglist>(int channel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBitrate</name>
      <anchorfile>class_snr_eval.html</anchorfile>
      <anchor>ae590bfa74ed33f72d11857d584979727</anchor>
      <arglist>(double bitrate)</arglist>
    </member>
    <member kind="enumvalue">
      <name>TRANSM_OVER</name>
      <anchorfile>class_snr_eval.html</anchorfile>
      <anchor>a2ad9ae884cbace04cc0352681bcf0aa7a797073dbf98fa5a93132abb0138983f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; AirFrame *, double &gt;</type>
      <name>RecvBuff</name>
      <anchorfile>class_snr_eval.html</anchorfile>
      <anchor>a4f5f9f9cb0bc9e9ac1517f000cd00a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_snr_eval.html</anchorfile>
      <anchor>a10f81696b873c5acf9b65f04592c9918</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_snr_eval.html</anchorfile>
      <anchor>aa128e6274894db101292b4414454fc27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SnrEval</name>
      <anchorfile>class_snr_eval.html</anchorfile>
      <anchor>a06a6561a83bc25e52859666d4f732197</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_snr_eval.html</anchorfile>
      <anchor>adbb4ecfc99b5b37ce10ca8f4db1ca495</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>class_snr_eval.html</anchorfile>
      <anchor>aa001956884b5729fd1d6fabb3013d8ec</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_snr_eval.html</anchorfile>
      <anchor>ad2d58ffa8f07856cfb6b6a7afc788e51</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleCommand</name>
      <anchorfile>class_snr_eval.html</anchorfile>
      <anchor>ad6f33c127ee1bf1731a2f2999df33969</anchor>
      <arglist>(int msgkind, cPolymorphic *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsgStart</name>
      <anchorfile>class_snr_eval.html</anchorfile>
      <anchor>aa4128b029feeaa5427ad6522fabce2eb</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsgEnd</name>
      <anchorfile>class_snr_eval.html</anchorfile>
      <anchor>ae4c093f6dc4dc649070947da6051f3b2</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcRcvdPower</name>
      <anchorfile>class_snr_eval.html</anchorfile>
      <anchor>abe78b8bf8a3b41fd8019e2a70109c201</anchor>
      <arglist>(double pSend, double distance)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>getChannelNumber</name>
      <anchorfile>class_snr_eval.html</anchorfile>
      <anchor>a7e3112193898e920f38094a8782f1861</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addNewSnr</name>
      <anchorfile>class_snr_eval.html</anchorfile>
      <anchor>abcb6a07d2956a4505c36843af15ff8f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SnrStruct</type>
      <name>snrInfo</name>
      <anchorfile>class_snr_eval.html</anchorfile>
      <anchor>a73fab3747cf312107fed650c2dbd7f4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RecvBuff</type>
      <name>recvBuff</name>
      <anchorfile>class_snr_eval.html</anchorfile>
      <anchor>a4348a6ef7a0ca5ff22d56b16394b0522</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RadioState</type>
      <name>rs</name>
      <anchorfile>class_snr_eval.html</anchorfile>
      <anchor>a5cb463a0967ec147b4747f1ddf3c5255</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>newChannel</name>
      <anchorfile>class_snr_eval.html</anchorfile>
      <anchor>a8a1d49d7a8dea980bdc65931de889d54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>newBitrate</name>
      <anchorfile>class_snr_eval.html</anchorfile>
      <anchor>a6969112c3972e3d4a752e7055d1f9264</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>noiseLevel</name>
      <anchorfile>class_snr_eval.html</anchorfile>
      <anchor>aa3d5506d0e48b864bbb1089d5ff0f938</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>carrierFrequency</name>
      <anchorfile>class_snr_eval.html</anchorfile>
      <anchor>a8dd650bd6e39b5a7c61e2175317a62ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>thermalNoise</name>
      <anchorfile>class_snr_eval.html</anchorfile>
      <anchor>a728160764ec0ccea6d02a1420e0b6b72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sensitivity</name>
      <anchorfile>class_snr_eval.html</anchorfile>
      <anchor>a5fa6897f988f66115b1217db51eb379d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>pathLossAlpha</name>
      <anchorfile>class_snr_eval.html</anchorfile>
      <anchor>a5db01f6393281560dfb3a75901626556</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SnrEval::SnrStruct</name>
    <filename>struct_snr_eval_1_1_snr_struct.html</filename>
    <member kind="variable">
      <type>AirFrame *</type>
      <name>ptr</name>
      <anchorfile>struct_snr_eval_1_1_snr_struct.html</anchorfile>
      <anchor>a0ea8b1159dc83d461d15822534fb59d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>rcvdPower</name>
      <anchorfile>struct_snr_eval_1_1_snr_struct.html</anchorfile>
      <anchor>a4b048226b385794353721848560f1a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SnrList</type>
      <name>sList</name>
      <anchorfile>struct_snr_eval_1_1_snr_struct.html</anchorfile>
      <anchor>aabbbbeed5ce64d9ecf216db3f79ba206</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SnrEval80211</name>
    <filename>class_snr_eval80211.html</filename>
    <base>SnrEval</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_snr_eval80211.html</anchorfile>
      <anchor>a0ebbde9edf4489102ea539ba04c13a3e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcDuration</name>
      <anchorfile>class_snr_eval80211.html</anchorfile>
      <anchor>a4839d233ef2b15b59d18b6347316d4b1</anchor>
      <arglist>(cPacket *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SnrListEntry</name>
    <filename>struct_snr_list_entry.html</filename>
    <member kind="variable">
      <type>simtime_t</type>
      <name>time</name>
      <anchorfile>struct_snr_list_entry.html</anchorfile>
      <anchor>a0a91ab67cfd340b315a7badf6da14ce8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>snr</name>
      <anchorfile>struct_snr_list_entry.html</anchorfile>
      <anchor>a9126b6070ee24b0a586a267de6ebc94b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>supported_address_types_parameter</name>
    <filename>structsupported__address__types__parameter.html</filename>
    <member kind="variable">
      <type>unsigned short</type>
      <name>type</name>
      <anchorfile>structsupported__address__types__parameter.html</anchorfile>
      <anchor>ac34c8067913d24df8307936f2a2bf6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>structsupported__address__types__parameter.html</anchorfile>
      <anchor>abaa69969898111701e3d56fd1c3ae356</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>address_type</name>
      <anchorfile>structsupported__address__types__parameter.html</anchorfile>
      <anchor>ab23f00a1a20771e120bb5f9907836929</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCP</name>
    <filename>class_t_c_p.html</filename>
    <class kind="struct">TCP::AppConnKey</class>
    <class kind="struct">TCP::SockPair</class>
    <member kind="function">
      <type></type>
      <name>TCP</name>
      <anchorfile>class_t_c_p.html</anchorfile>
      <anchor>a2b7e98738dcb551effdeda64fa682bba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCP</name>
      <anchorfile>class_t_c_p.html</anchorfile>
      <anchor>aa60dfec4c3dfdc84a0a64322eed4ee5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSockPair</name>
      <anchorfile>class_t_c_p.html</anchorfile>
      <anchor>a0521bf14a4f31786b1869f417d56eecb</anchor>
      <arglist>(TCPConnection *conn, IPvXAddress localAddr, IPvXAddress remoteAddr, int localPort, int remotePort)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateSockPair</name>
      <anchorfile>class_t_c_p.html</anchorfile>
      <anchor>a89cade3eb3a3f44ffae57c08dedd9285</anchor>
      <arglist>(TCPConnection *conn, IPvXAddress localAddr, IPvXAddress remoteAddr, int localPort, int remotePort)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addForkedConnection</name>
      <anchorfile>class_t_c_p.html</anchorfile>
      <anchor>abec1cedad1e72a349f7bd804501584fa</anchor>
      <arglist>(TCPConnection *conn, TCPConnection *newConn, IPvXAddress localAddr, IPvXAddress remoteAddr, int localPort, int remotePort)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getEphemeralPort</name>
      <anchorfile>class_t_c_p.html</anchorfile>
      <anchor>a78909d5d3786f662c8a5e38c11573e5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>recordStatistics</name>
      <anchorfile>class_t_c_p.html</anchorfile>
      <anchor>a06c667b3923f435daac7800488097d04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>testing</name>
      <anchorfile>class_t_c_p.html</anchorfile>
      <anchor>a9c9119dffa5972905c0b4e79dd5bbfab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>logverbose</name>
      <anchorfile>class_t_c_p.html</anchorfile>
      <anchor>ae864ce487e9184ca283f421970883a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; AppConnKey, TCPConnection * &gt;</type>
      <name>TcpAppConnMap</name>
      <anchorfile>class_t_c_p.html</anchorfile>
      <anchor>a827e1309dc0330cad75b1f3ddfde59f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; SockPair, TCPConnection * &gt;</type>
      <name>TcpConnMap</name>
      <anchorfile>class_t_c_p.html</anchorfile>
      <anchor>a8d1f453b84f4a0a71d64db605fa7afb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPConnection *</type>
      <name>createConnection</name>
      <anchorfile>class_t_c_p.html</anchorfile>
      <anchor>adc9133b7052856727e7baf7d4b9c4cf1</anchor>
      <arglist>(int appGateIndex, int connId)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPConnection *</type>
      <name>findConnForSegment</name>
      <anchorfile>class_t_c_p.html</anchorfile>
      <anchor>ae3af1feecfbffc8893ce259fa1fda7be</anchor>
      <arglist>(TCPSegment *tcpseg, IPvXAddress srcAddr, IPvXAddress destAddr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPConnection *</type>
      <name>findConnForApp</name>
      <anchorfile>class_t_c_p.html</anchorfile>
      <anchor>a18a12d6d42b2dfae01ac2678afc880dd</anchor>
      <arglist>(int appGateIndex, int connId)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>segmentArrivalWhileClosed</name>
      <anchorfile>class_t_c_p.html</anchorfile>
      <anchor>a0878a06694b0e8e84f4a5cb07555258e</anchor>
      <arglist>(TCPSegment *tcpseg, IPvXAddress src, IPvXAddress dest)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeConnection</name>
      <anchorfile>class_t_c_p.html</anchorfile>
      <anchor>a43b1ce87aa8f1f864fef4fef8c48892d</anchor>
      <arglist>(TCPConnection *conn)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDisplayString</name>
      <anchorfile>class_t_c_p.html</anchorfile>
      <anchor>a59fbdacae2969f837f01214e00002699</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_t_c_p.html</anchorfile>
      <anchor>a2fd4ec69c4627440fd92a77394c7b105</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_t_c_p.html</anchorfile>
      <anchor>ae3a05ea5147737dd2889b8afc2647f69</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_t_c_p.html</anchorfile>
      <anchor>a138ccb4a8fb3dd397160d7e4abc52294</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TcpAppConnMap</type>
      <name>tcpAppConnMap</name>
      <anchorfile>class_t_c_p.html</anchorfile>
      <anchor>a6513aa977f096756722749344c2e7fac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TcpConnMap</type>
      <name>tcpConnMap</name>
      <anchorfile>class_t_c_p.html</anchorfile>
      <anchor>a2f8b2008f60f6b992f6c8d91d2385549</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>lastEphemeralPort</name>
      <anchorfile>class_t_c_p.html</anchorfile>
      <anchor>a8fc9e9503b5e5a79e276dff3abb77aa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::multiset&lt; short &gt;</type>
      <name>usedEphemeralPorts</name>
      <anchorfile>class_t_c_p.html</anchorfile>
      <anchor>a60a33b2d6ebf08711accf768d1dc46db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TCP::AppConnKey</name>
    <filename>struct_t_c_p_1_1_app_conn_key.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>struct_t_c_p_1_1_app_conn_key.html</anchorfile>
      <anchor>a048bd663f9b80d6bf36be42a1ca9a8c9</anchor>
      <arglist>(const AppConnKey &amp;b) const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>appGateIndex</name>
      <anchorfile>struct_t_c_p_1_1_app_conn_key.html</anchorfile>
      <anchor>a5c7672bbd47267a7fe81e0c440f1e7cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>connId</name>
      <anchorfile>struct_t_c_p_1_1_app_conn_key.html</anchorfile>
      <anchor>a053837b426bf31ae62ded149f06d6880</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TCP::SockPair</name>
    <filename>struct_t_c_p_1_1_sock_pair.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>struct_t_c_p_1_1_sock_pair.html</anchorfile>
      <anchor>ab16ccfb06072aa481f45bfc2540cf776</anchor>
      <arglist>(const SockPair &amp;b) const </arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>localAddr</name>
      <anchorfile>struct_t_c_p_1_1_sock_pair.html</anchorfile>
      <anchor>a7dc4c59b482ee080f45d913e6113e251</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>remoteAddr</name>
      <anchorfile>struct_t_c_p_1_1_sock_pair.html</anchorfile>
      <anchor>a4f2d95959d49874b9dc4c656bc770e91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>localPort</name>
      <anchorfile>struct_t_c_p_1_1_sock_pair.html</anchorfile>
      <anchor>a2e447d64ec375222b11c10f86b6d17b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>remotePort</name>
      <anchorfile>struct_t_c_p_1_1_sock_pair.html</anchorfile>
      <anchor>a5cfb51b3e53b16d7dc85a2699a31e025</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCP_NSC</name>
    <filename>class_t_c_p___n_s_c.html</filename>
    <member kind="function">
      <type></type>
      <name>TCP_NSC</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>af1a26965ca43d53e704772628bc448de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCP_NSC</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a1b84bf0ee3fa97b3ce4ac701de502129</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>send_callback</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>ab3e5eaa35b5501817651f08a9e67d36b</anchor>
      <arglist>(const void *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wakeup</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a958238e22aec519691a144d7be524d84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>gettime</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>ae7d4272168d3c20ed3faa552736b348e</anchor>
      <arglist>(unsigned int *, unsigned int *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>testingS</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>ad3ea3b2335440046cae00957f67706a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>logverboseS</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a0ad6663badb72720c76ce73d43e419ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_SEND_BYTES</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a1a8b8ea1a9e258352df004cd997a209cae63fb92c24dc0d5826c7166480992bc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; int, TCP_NSC_Connection &gt;</type>
      <name>TcpAppConnMap</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a818bb7dd57b8c8cb52f65a39ade5d057</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; u_int32_t, IPvXAddress &gt;</type>
      <name>Nsc2RemoteMap</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a200071546b87810ea111a855dd9f597f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; IPvXAddress, u_int32_t &gt;</type>
      <name>Remote2NscMap</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>ab748255820ec167d7e20c122b754ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; TCP_NSC_Connection::SockPair, int &gt;</type>
      <name>SockPair2ConnIdMap</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a9c3fbac8d3af6a5df98a30cdd637b1af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a6067645e844dd879a66bcb6839a8b5a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a408733c7cd6f0cf3e238fd3d57e60bd4</anchor>
      <arglist>(cMessage *msgP)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>ad5a02c9b6f86a6b1cc9586e43947fa48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>changeAddresses</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a6ee2d00754b122f1f5fb96de86706c99</anchor>
      <arglist>(TCP_NSC_Connection &amp;connP, const TCP_NSC_Connection::SockPair &amp;inetSockPairP, const TCP_NSC_Connection::SockPair &amp;nscSockPairP)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TCP_NSC_Connection *</type>
      <name>findAppConn</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a06ac04f3745d08a1f072e79fd4ea4922</anchor>
      <arglist>(int connIdP)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TCP_NSC_Connection *</type>
      <name>findConnByInetSockPair</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>acbc5b0f075c90ab251e271e9fb961fc5</anchor>
      <arglist>(TCP_NSC_Connection::SockPair const &amp;sockPairP)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TCP_NSC_Connection *</type>
      <name>findConnByNscSockPair</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a1a963c5a8a33171bf1b83304e6e2cdf8</anchor>
      <arglist>(TCP_NSC_Connection::SockPair const &amp;sockPairP)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDisplayString</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>ab6127ac125ab239f3c5eb1a16ccc0b21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeConnection</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>aeb9f30c246d8f8938c7ae59b37a5a748</anchor>
      <arglist>(int connIdP)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printConnBrief</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a52646ca133abd280a08fd512b4f58285</anchor>
      <arglist>(TCP_NSC_Connection &amp;connP)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadStack</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a075c5ce907fe0ed0ad33978faac8d130</anchor>
      <arglist>(const char *stacknameP, int bufferSizeP)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleAppMessage</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a271ad2328a421bed7b485f5de7bc0b67</anchor>
      <arglist>(cMessage *msgP)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleIpInputMessage</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>ac6f917f4260a5caca56692640438b86f</anchor>
      <arglist>(TCPSegment *tcpsegP)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToIP</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>ab95f395174d072737b9f1a3e978fba51</anchor>
      <arglist>(const void *dataP, int lenP)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processAppCommand</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>aa2031b4ac770f7491193d9c2200248fa</anchor>
      <arglist>(TCP_NSC_Connection &amp;connP, cMessage *msgP)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_OPEN_ACTIVE</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>adf0a1b7347ed79f572fbdb1efb4f95af</anchor>
      <arglist>(TCP_NSC_Connection &amp;connP, TCPCommand *tcpCommandP, cMessage *msgP)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_OPEN_PASSIVE</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>adb36ad0b7ab3bbcf962002e097fad318</anchor>
      <arglist>(TCP_NSC_Connection &amp;connP, TCPCommand *tcpCommandP, cMessage *msgP)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_SEND</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>aa1425441fd6c4c7707df27ed5b854286</anchor>
      <arglist>(TCP_NSC_Connection &amp;connP, TCPCommand *tcpCommandP, cPacket *msgP)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_CLOSE</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a0678225786e01923db1055f865e3edbb</anchor>
      <arglist>(TCP_NSC_Connection &amp;connP, TCPCommand *tcpCommandP, cMessage *msgP)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_ABORT</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a170b19a246e3a73811f5fe229d0195e8</anchor>
      <arglist>(TCP_NSC_Connection &amp;connP, TCPCommand *tcpCommandP, cMessage *msgP)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_STATUS</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>af5abf875e10ca43caaaf0bd1a4480b03</anchor>
      <arglist>(TCP_NSC_Connection &amp;connP, TCPCommand *tcpCommandP, cMessage *msgP)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>do_SEND</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>abe09011e6247d0ab53280b6aff77250f</anchor>
      <arglist>(TCP_NSC_Connection &amp;connP)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>do_SEND_all</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>aed2e61f639fca0e833762942ca63a3ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>u_int32_t</type>
      <name>mapRemote2Nsc</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a50ba5a518e3a5d0f08f1cbc5d5ba15a0</anchor>
      <arglist>(IPvXAddress const &amp;addrP)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IPvXAddress const &amp;</type>
      <name>mapNsc2Remote</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>ade7d4441c2e0602cc7c80f202e914086</anchor>
      <arglist>(u_int32_t nscAddrP)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendEstablishedMsg</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a06436f74df85c1160d13f5b1651d12d9</anchor>
      <arglist>(TCP_NSC_Connection &amp;connP)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>decode_tcpip</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a767fe574fbbec0caefcf3c9fb61fecfd</anchor>
      <arglist>(const void *, int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>decode_tcp</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>aab412f1e0820a353dcc1e51e0f5ca7c1</anchor>
      <arglist>(const void *, int)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TcpAppConnMap</type>
      <name>tcpAppConnMapM</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a4463b0d07dd5afadb9c2712daf198c12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SockPair2ConnIdMap</type>
      <name>inetSockPair2ConnIdMapM</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a425e408bf7fe9eafe8d370e2bed0cf88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SockPair2ConnIdMap</type>
      <name>nscSockPair2ConnIdMapM</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>ad134121b61617fe01773b9af60e4e938</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Nsc2RemoteMap</type>
      <name>nsc2RemoteMapM</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a1a311ff9e5890714bd2f84bbecba77a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Remote2NscMap</type>
      <name>remote2NscMapM</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a909bba5b898f3867804e416f39887740</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>INetStack *</type>
      <name>pStackM</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>ac367c2a6a2cb4162f32ff2aff822b7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>pNsiTimerM</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a76b137c08eab91b49e56c10364f2ad6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isAliveM</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>ab8bf66c8a1408c190b1a2e6d17aec46f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>curAddrCounterM</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a32861d3a430e27281b1fa1d74d215112</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCP_NSC_Connection *</type>
      <name>curConnM</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a3316276b80b6e4d1bfb3290953236a0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>sndWndVector</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>afae22d3e3bf9bd4508d23e45eddbb74e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>rcvWndVector</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a73c90da11db5925a641ee23a1f2b9619</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>rcvAdvVector</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a894fd65e7450362018c93bb723f3c1fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>sndNxtVector</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a874db0904059d4d3aa29147215a7bd95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>sndAckVector</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a76d7065c2a3fe57a9c6fb37efe468701</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>rcvSeqVector</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>acd545a2965dabd007d5333131cb06fac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>rcvAckVector</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>aae389b5b6f57b44bd1ddb27d9eb3a2da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>unackedVector</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>aadbf2bc61f85561808471d57562a43ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>dupAcksVector</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a3d507045eb07815eae8a1656759485c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>pipeVector</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a2dc0de299372922254f08a23d6fe828d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>sndSacksVector</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a6f77d845b4a017eaf90fc1b5582528fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>rcvSacksVector</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a7ef016ae26a83b3f061ccf335dca4221</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>rcvOooSegVector</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a3e0515e709320884524fad6f6f657502</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>sackedBytesVector</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a24e78892b0a34cb4153ffab16df8791b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>tcpRcvQueueBytesVector</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a68ddce2e04c278ef291308eab098a203</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>tcpRcvQueueDropsVector</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>aa0817e3997fbe05572ec2526880edd4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const IPvXAddress</type>
      <name>localInnerIpS</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a34ac95996f26d95fefc8550ca776b0cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const IPvXAddress</type>
      <name>localInnerGwS</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>ad7ff84862db0bf2b85a728b5c445d954</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const IPvXAddress</type>
      <name>localInnerMaskS</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>aeddf42ccdbcea0563662d27c251d14a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const IPvXAddress</type>
      <name>remoteFirstInnerIpS</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a154ce08a411bc499387f3d7df6108090</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const char *</type>
      <name>stackNameParamNameS</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a77395860c088824f88682cb5b9c5254a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const char *</type>
      <name>bufferSizeParamNameS</name>
      <anchorfile>class_t_c_p___n_s_c.html</anchorfile>
      <anchor>a829c1bbfbe288a5e43b31bc2652f3d60</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCP_NSC_Connection</name>
    <filename>class_t_c_p___n_s_c___connection.html</filename>
    <class kind="class">TCP_NSC_Connection::SockAddr</class>
    <class kind="class">TCP_NSC_Connection::SockPair</class>
    <member kind="function">
      <type></type>
      <name>TCP_NSC_Connection</name>
      <anchorfile>class_t_c_p___n_s_c___connection.html</anchorfile>
      <anchor>af178ce16e4b9ad3e9b61a38812414f35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>createEstablishedMsg</name>
      <anchorfile>class_t_c_p___n_s_c___connection.html</anchorfile>
      <anchor>a4d1bfee7f9aeddc3b007ae6ed3974d0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>listen</name>
      <anchorfile>class_t_c_p___n_s_c___connection.html</anchorfile>
      <anchor>ab41f239eb4d68348369a4b0f316f0ca3</anchor>
      <arglist>(INetStack &amp;stackP, SockPair &amp;inetSockPairP, SockPair &amp;nscSockPairP)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect</name>
      <anchorfile>class_t_c_p___n_s_c___connection.html</anchorfile>
      <anchor>ac1fbcd2067efa6181636016f90660097</anchor>
      <arglist>(INetStack &amp;stackP, SockPair &amp;inetSockPairP, SockPair &amp;nscSockPairP)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>class_t_c_p___n_s_c___connection.html</anchorfile>
      <anchor>a0d673e78daf20c615a165083b85de391</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abort</name>
      <anchorfile>class_t_c_p___n_s_c___connection.html</anchorfile>
      <anchor>a54bed71f5b9bafa1cfcea9a7c1c33ba1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send</name>
      <anchorfile>class_t_c_p___n_s_c___connection.html</anchorfile>
      <anchor>a32173a591065aba27f939ef16fcdb583</anchor>
      <arglist>(cPacket *msgP)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_SEND</name>
      <anchorfile>class_t_c_p___n_s_c___connection.html</anchorfile>
      <anchor>a19e5fb213290da69e2de7f36347ff6a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INetStreamSocket *</type>
      <name>getSocket</name>
      <anchorfile>class_t_c_p___n_s_c___connection.html</anchorfile>
      <anchor>ae12f02c11918180546afb6eea9ad9cb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_checkedclose</name>
      <anchorfile>class_t_c_p___n_s_c___connection.html</anchorfile>
      <anchor>a6a95f5be00a8447b2d7bab8df9ed72f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>connIdM</name>
      <anchorfile>class_t_c_p___n_s_c___connection.html</anchorfile>
      <anchor>a670d06fc927e6c8f52914d3ff03faeb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>appGateIndexM</name>
      <anchorfile>class_t_c_p___n_s_c___connection.html</anchorfile>
      <anchor>a27727052f18528beea45ba97ac17dd56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SockPair</type>
      <name>inetSockPairM</name>
      <anchorfile>class_t_c_p___n_s_c___connection.html</anchorfile>
      <anchor>ac2ae5be0f6d35e40975092681a405c5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SockPair</type>
      <name>nscSockPairM</name>
      <anchorfile>class_t_c_p___n_s_c___connection.html</anchorfile>
      <anchor>a168e410d849b0f3f31c1a4a52eba5757</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>INetStreamSocket *</type>
      <name>pNscSocketM</name>
      <anchorfile>class_t_c_p___n_s_c___connection.html</anchorfile>
      <anchor>abb71cce8838dc40d560aec01cf2958a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>sentEstablishedM</name>
      <anchorfile>class_t_c_p___n_s_c___connection.html</anchorfile>
      <anchor>a15c353c571f24e4c02e8319aeb4851ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>onCloseM</name>
      <anchorfile>class_t_c_p___n_s_c___connection.html</anchorfile>
      <anchor>af5758049ccdbcf4f4e6fdc68426cacb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isListenerM</name>
      <anchorfile>class_t_c_p___n_s_c___connection.html</anchorfile>
      <anchor>ad3b47d295adb84e1ab2624fc68d216d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>tcpWinSizeM</name>
      <anchorfile>class_t_c_p___n_s_c___connection.html</anchorfile>
      <anchor>a6fd3c5b13d4893d7f5a19b804ca4d2d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TCP_NSC *</type>
      <name>tcpNscM</name>
      <anchorfile>class_t_c_p___n_s_c___connection.html</anchorfile>
      <anchor>aa1021dc4cfa2df21f54def8dabc5c7bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TCP_NSC_ReceiveQueue *</type>
      <name>receiveQueueM</name>
      <anchorfile>class_t_c_p___n_s_c___connection.html</anchorfile>
      <anchor>a803bc512956f8e807b48a893bc07f034</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TCP_NSC_SendQueue *</type>
      <name>sendQueueM</name>
      <anchorfile>class_t_c_p___n_s_c___connection.html</anchorfile>
      <anchor>a73855bad84018833df70d67a76bafac4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCP_NSC_Connection::SockAddr</name>
    <filename>class_t_c_p___n_s_c___connection_1_1_sock_addr.html</filename>
    <member kind="function">
      <type></type>
      <name>SockAddr</name>
      <anchorfile>class_t_c_p___n_s_c___connection_1_1_sock_addr.html</anchorfile>
      <anchor>a139db1313c46c20b854459ce3e7a5760</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_t_c_p___n_s_c___connection_1_1_sock_addr.html</anchorfile>
      <anchor>aa4f18c165e496b9f505b0fb94fe1bbd0</anchor>
      <arglist>(const SockAddr &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_t_c_p___n_s_c___connection_1_1_sock_addr.html</anchorfile>
      <anchor>a5b2422600edc8591a6e537aba70ddcaa</anchor>
      <arglist>(const SockAddr &amp;b) const </arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>ipAddrM</name>
      <anchorfile>class_t_c_p___n_s_c___connection_1_1_sock_addr.html</anchorfile>
      <anchor>aa3178df4208b1efe5c88100f2cd3e5e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>portM</name>
      <anchorfile>class_t_c_p___n_s_c___connection_1_1_sock_addr.html</anchorfile>
      <anchor>a25f3921e02ed2c54ae4da64a55142005</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCP_NSC_Connection::SockPair</name>
    <filename>class_t_c_p___n_s_c___connection_1_1_sock_pair.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_t_c_p___n_s_c___connection_1_1_sock_pair.html</anchorfile>
      <anchor>a356985b52e488cc1ba61cb5539c4425a</anchor>
      <arglist>(const SockPair &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_t_c_p___n_s_c___connection_1_1_sock_pair.html</anchorfile>
      <anchor>a7aa9c38c1798c9df5d8b9b8196c4540a</anchor>
      <arglist>(const SockPair &amp;b) const </arglist>
    </member>
    <member kind="variable">
      <type>SockAddr</type>
      <name>remoteM</name>
      <anchorfile>class_t_c_p___n_s_c___connection_1_1_sock_pair.html</anchorfile>
      <anchor>accb8d21c8d11bcad1d7a26fe03f52886</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SockAddr</type>
      <name>localM</name>
      <anchorfile>class_t_c_p___n_s_c___connection_1_1_sock_pair.html</anchorfile>
      <anchor>a9e9534fcc4d898a6a32e884da030db03</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCP_NSC_ReceiveQueue</name>
    <filename>class_t_c_p___n_s_c___receive_queue.html</filename>
    <member kind="function">
      <type></type>
      <name>TCP_NSC_ReceiveQueue</name>
      <anchorfile>class_t_c_p___n_s_c___receive_queue.html</anchorfile>
      <anchor>a91f1de3e90ccbf4dc7944d7480b797be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCP_NSC_ReceiveQueue</name>
      <anchorfile>class_t_c_p___n_s_c___receive_queue.html</anchorfile>
      <anchor>a0d308d130daca265d6540874d36b3ad3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConnection</name>
      <anchorfile>class_t_c_p___n_s_c___receive_queue.html</anchorfile>
      <anchor>a8626fba0d2e427126e27ee420ae034ef</anchor>
      <arglist>(TCP_NSC_Connection *connP)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint32</type>
      <name>insertBytesFromSegment</name>
      <anchorfile>class_t_c_p___n_s_c___receive_queue.html</anchorfile>
      <anchor>aa31cf46254779db3a02164d22ac71a90</anchor>
      <arglist>(const TCPSegment *tcpsegP, void *bufferP, size_t bufferLengthP)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enqueueNscData</name>
      <anchorfile>class_t_c_p___n_s_c___receive_queue.html</anchorfile>
      <anchor>a46f03c5e1726f2149404cca60e97bbac</anchor>
      <arglist>(void *dataP, int dataLengthP)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cPacket *</type>
      <name>extractBytesUpTo</name>
      <anchorfile>class_t_c_p___n_s_c___receive_queue.html</anchorfile>
      <anchor>a20aeabe1c060d3d36a12ab5bb70fdf8c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint32</type>
      <name>getAmountOfBufferedBytes</name>
      <anchorfile>class_t_c_p___n_s_c___receive_queue.html</anchorfile>
      <anchor>a6936c21c6dff45aa26215a9d0b92ac01</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint32</type>
      <name>getQueueLength</name>
      <anchorfile>class_t_c_p___n_s_c___receive_queue.html</anchorfile>
      <anchor>a538e550d9028375f4c4832a7bb5e466b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getQueueStatus</name>
      <anchorfile>class_t_c_p___n_s_c___receive_queue.html</anchorfile>
      <anchor>aae7be5382cc580f693a73f85e944d15e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>notifyAboutSending</name>
      <anchorfile>class_t_c_p___n_s_c___receive_queue.html</anchorfile>
      <anchor>a1a0e793a69e8ac17181cbc611c688f8b</anchor>
      <arglist>(const TCPSegment *tcpsegP)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCP_NSC_Connection *</type>
      <name>connM</name>
      <anchorfile>class_t_c_p___n_s_c___receive_queue.html</anchorfile>
      <anchor>a9b263febc7f2c5e2a211f8ab96857a52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCP_NSC_SendQueue</name>
    <filename>class_t_c_p___n_s_c___send_queue.html</filename>
    <member kind="function">
      <type></type>
      <name>TCP_NSC_SendQueue</name>
      <anchorfile>class_t_c_p___n_s_c___send_queue.html</anchorfile>
      <anchor>a34c576d60ffca8986c04a84da4bc4b5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCP_NSC_SendQueue</name>
      <anchorfile>class_t_c_p___n_s_c___send_queue.html</anchorfile>
      <anchor>a3a4ee927496ef28d180ad59f2e531229</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConnection</name>
      <anchorfile>class_t_c_p___n_s_c___send_queue.html</anchorfile>
      <anchor>a3725b0016361e65cbe60d003f85bbf3c</anchor>
      <arglist>(TCP_NSC_Connection *connP)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enqueueAppData</name>
      <anchorfile>class_t_c_p___n_s_c___send_queue.html</anchorfile>
      <anchor>ae362f60112c3ef36af12ea632c859fdd</anchor>
      <arglist>(cPacket *msgP)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNscMsg</name>
      <anchorfile>class_t_c_p___n_s_c___send_queue.html</anchorfile>
      <anchor>a2f70bf1b33917ae3002631cc41bf5d7f</anchor>
      <arglist>(void *bufferP, int bufferLengthP)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dequeueNscMsg</name>
      <anchorfile>class_t_c_p___n_s_c___send_queue.html</anchorfile>
      <anchor>abf531ecfc125a8c5389f32a6c5c8a6a2</anchor>
      <arglist>(int msgLengthP)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ulong</type>
      <name>getBytesAvailable</name>
      <anchorfile>class_t_c_p___n_s_c___send_queue.html</anchorfile>
      <anchor>a6691a8ec9659d9457b76653ee839acb1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TCPSegment *</type>
      <name>createSegmentWithBytes</name>
      <anchorfile>class_t_c_p___n_s_c___send_queue.html</anchorfile>
      <anchor>a1af3799e52fba7caeaf301fd90ee73b5</anchor>
      <arglist>(const void *tcpDataP, int tcpLengthP)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>discardUpTo</name>
      <anchorfile>class_t_c_p___n_s_c___send_queue.html</anchorfile>
      <anchor>a9be7d952a33aa091becc8df68b567a21</anchor>
      <arglist>(uint32 seqNumP)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCP_NSC_Connection *</type>
      <name>connM</name>
      <anchorfile>class_t_c_p___n_s_c___send_queue.html</anchorfile>
      <anchor>aceca143e6619c019035f626bb184b2e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCP_NSC_VirtualDataReceiveQueue</name>
    <filename>class_t_c_p___n_s_c___virtual_data_receive_queue.html</filename>
    <base>TCP_NSC_ReceiveQueue</base>
    <member kind="function">
      <type></type>
      <name>TCP_NSC_VirtualDataReceiveQueue</name>
      <anchorfile>class_t_c_p___n_s_c___virtual_data_receive_queue.html</anchorfile>
      <anchor>a60b7f04972d351f3b5b3164a95b87d24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCP_NSC_VirtualDataReceiveQueue</name>
      <anchorfile>class_t_c_p___n_s_c___virtual_data_receive_queue.html</anchorfile>
      <anchor>ababb1de828a513716d759aeb0db5efeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConnection</name>
      <anchorfile>class_t_c_p___n_s_c___virtual_data_receive_queue.html</anchorfile>
      <anchor>a8bb8c560a8847b3591732a836ce27c66</anchor>
      <arglist>(TCP_NSC_Connection *connP)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>insertBytesFromSegment</name>
      <anchorfile>class_t_c_p___n_s_c___virtual_data_receive_queue.html</anchorfile>
      <anchor>ac4511ebcb5688e54b34a14ec8be2100f</anchor>
      <arglist>(const TCPSegment *tcpsegP, void *bufferP, size_t bufferLengthP)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enqueueNscData</name>
      <anchorfile>class_t_c_p___n_s_c___virtual_data_receive_queue.html</anchorfile>
      <anchor>ac6fab39dc7a879df0cc2b7dae082bad0</anchor>
      <arglist>(void *dataP, int dataLengthP)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>extractBytesUpTo</name>
      <anchorfile>class_t_c_p___n_s_c___virtual_data_receive_queue.html</anchorfile>
      <anchor>af70ebad855e072ef9df455467fd21191</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getAmountOfBufferedBytes</name>
      <anchorfile>class_t_c_p___n_s_c___virtual_data_receive_queue.html</anchorfile>
      <anchor>a6b700bddf9f8544e8e28b3902675a8aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getQueueLength</name>
      <anchorfile>class_t_c_p___n_s_c___virtual_data_receive_queue.html</anchorfile>
      <anchor>a781d9a28e32be334622a26a17f86cc03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getQueueStatus</name>
      <anchorfile>class_t_c_p___n_s_c___virtual_data_receive_queue.html</anchorfile>
      <anchor>a57739e827a01facf9cfc4894d4277e9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notifyAboutSending</name>
      <anchorfile>class_t_c_p___n_s_c___virtual_data_receive_queue.html</anchorfile>
      <anchor>a8ca37b414c7960ce0bb05a10b7e0b94c</anchor>
      <arglist>(const TCPSegment *tcpsegP)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long int</type>
      <name>bytesInQueueM</name>
      <anchorfile>class_t_c_p___n_s_c___virtual_data_receive_queue.html</anchorfile>
      <anchor>a2b87269bfbad41dbd8de530cc9a4d200</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCP_NSC_VirtualDataSendQueue</name>
    <filename>class_t_c_p___n_s_c___virtual_data_send_queue.html</filename>
    <base>TCP_NSC_SendQueue</base>
    <member kind="function">
      <type></type>
      <name>TCP_NSC_VirtualDataSendQueue</name>
      <anchorfile>class_t_c_p___n_s_c___virtual_data_send_queue.html</anchorfile>
      <anchor>ab4f5476f03cc1a87b8e62196dfa0f0b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCP_NSC_VirtualDataSendQueue</name>
      <anchorfile>class_t_c_p___n_s_c___virtual_data_send_queue.html</anchorfile>
      <anchor>ab7135283bfd19a2bdbd23ba696799ea2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConnection</name>
      <anchorfile>class_t_c_p___n_s_c___virtual_data_send_queue.html</anchorfile>
      <anchor>af3c96f1ea129b3e71978725efdf05590</anchor>
      <arglist>(TCP_NSC_Connection *connP)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enqueueAppData</name>
      <anchorfile>class_t_c_p___n_s_c___virtual_data_send_queue.html</anchorfile>
      <anchor>af6826305371ce41c3b88e84fe1eff824</anchor>
      <arglist>(cPacket *msgP)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNscMsg</name>
      <anchorfile>class_t_c_p___n_s_c___virtual_data_send_queue.html</anchorfile>
      <anchor>ade85fa7f8dc5455aefd2c929900f28dd</anchor>
      <arglist>(void *bufferP, int bufferLengthP)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dequeueNscMsg</name>
      <anchorfile>class_t_c_p___n_s_c___virtual_data_send_queue.html</anchorfile>
      <anchor>a93f5616db396c508a9728c894d0f6ea5</anchor>
      <arglist>(int msgLengthP)</arglist>
    </member>
    <member kind="function">
      <type>ulong</type>
      <name>getBytesAvailable</name>
      <anchorfile>class_t_c_p___n_s_c___virtual_data_send_queue.html</anchorfile>
      <anchor>a1b06b4850403fac42b8dcc583a98a927</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TCPSegment *</type>
      <name>createSegmentWithBytes</name>
      <anchorfile>class_t_c_p___n_s_c___virtual_data_send_queue.html</anchorfile>
      <anchor>ade3466c721a3e09de9b4d98281e2d66c</anchor>
      <arglist>(const void *tcpDataP, int tcpLengthP)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>discardUpTo</name>
      <anchorfile>class_t_c_p___n_s_c___virtual_data_send_queue.html</anchorfile>
      <anchor>aa64f1a2b8edacb94a89b0578344d3a6e</anchor>
      <arglist>(uint32 seqNumP)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long int</type>
      <name>unsentNscBytesM</name>
      <anchorfile>class_t_c_p___n_s_c___virtual_data_send_queue.html</anchorfile>
      <anchor>af829f2985a1c839d01dbf180dec71496</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPAlgorithm</name>
    <filename>class_t_c_p_algorithm.html</filename>
    <member kind="function">
      <type></type>
      <name>TCPAlgorithm</name>
      <anchorfile>class_t_c_p_algorithm.html</anchorfile>
      <anchor>a19b1c2dde3f3283b3fbcb538a8d3a356</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPAlgorithm</name>
      <anchorfile>class_t_c_p_algorithm.html</anchorfile>
      <anchor>add93bd895d57ebc7c5cd64cd77ca9538</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConnection</name>
      <anchorfile>class_t_c_p_algorithm.html</anchorfile>
      <anchor>ac014216e698c557621bc907eb6d5ea6b</anchor>
      <arglist>(TCPConnection *_conn)</arglist>
    </member>
    <member kind="function">
      <type>TCPStateVariables *</type>
      <name>getStateVariables</name>
      <anchorfile>class_t_c_p_algorithm.html</anchorfile>
      <anchor>a98bebe4904ec8d6c85056adff9526697</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_t_c_p_algorithm.html</anchorfile>
      <anchor>a0b15a6a2f11c4a482ecec6208f5ee23d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>established</name>
      <anchorfile>class_t_c_p_algorithm.html</anchorfile>
      <anchor>a2d051b6a9e2a9fccfa6f8b64bb8c647d</anchor>
      <arglist>(bool active)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connectionClosed</name>
      <anchorfile>class_t_c_p_algorithm.html</anchorfile>
      <anchor>a8f85fd7e065ed30ddaa1e741781130ae</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>processTimer</name>
      <anchorfile>class_t_c_p_algorithm.html</anchorfile>
      <anchor>afa586de40374ffd9830981fff79cf96c</anchor>
      <arglist>(cMessage *timer, TCPEventCode &amp;event)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sendCommandInvoked</name>
      <anchorfile>class_t_c_p_algorithm.html</anchorfile>
      <anchor>a4f091f7203a1813550bcad5738e815cb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receivedOutOfOrderSegment</name>
      <anchorfile>class_t_c_p_algorithm.html</anchorfile>
      <anchor>a10903af17a26011a95b6745eb80f65ed</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveSeqChanged</name>
      <anchorfile>class_t_c_p_algorithm.html</anchorfile>
      <anchor>abb6b842fa0651f13c99b30adebcc0e03</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receivedDataAck</name>
      <anchorfile>class_t_c_p_algorithm.html</anchorfile>
      <anchor>abe5d8e8c02ba34cd5c50eca71824b81e</anchor>
      <arglist>(uint32 firstSeqAcked)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receivedDuplicateAck</name>
      <anchorfile>class_t_c_p_algorithm.html</anchorfile>
      <anchor>a83a8916731ff5ce73e5d4f05d8ae6d30</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receivedAckForDataNotYetSent</name>
      <anchorfile>class_t_c_p_algorithm.html</anchorfile>
      <anchor>a113d03b1de3e1b788ae95635d69e064d</anchor>
      <arglist>(uint32 seq)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ackSent</name>
      <anchorfile>class_t_c_p_algorithm.html</anchorfile>
      <anchor>ab60e458026100386119cc556ab856462</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dataSent</name>
      <anchorfile>class_t_c_p_algorithm.html</anchorfile>
      <anchor>aab20913df04bb33389d7949a502ae0d6</anchor>
      <arglist>(uint32 fromseq)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>restartRexmitTimer</name>
      <anchorfile>class_t_c_p_algorithm.html</anchorfile>
      <anchor>a3369b0b0441f0d5a5400b95f7bbe1f22</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual TCPStateVariables *</type>
      <name>createStateVariables</name>
      <anchorfile>class_t_c_p_algorithm.html</anchorfile>
      <anchor>a07ec2c74836af2485af586023ca9c915</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPConnection *</type>
      <name>conn</name>
      <anchorfile>class_t_c_p_algorithm.html</anchorfile>
      <anchor>a20273a398c4165b45243d9c125c2637b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPStateVariables *</type>
      <name>state</name>
      <anchorfile>class_t_c_p_algorithm.html</anchorfile>
      <anchor>add50c340ebfd641323eb3cdee685885c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPBaseAlg</name>
    <filename>class_t_c_p_base_alg.html</filename>
    <base>TCPAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>TCPBaseAlg</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>a2f8265b680a8cee124f685b19919ab03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPBaseAlg</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>a5929dfe85238f1ceccd0f5dd578d4b18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>ae6147731689fcc4c5c79f4cc539c6b7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>established</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>a2cbb83fb79f28eaea3d33acb13526e11</anchor>
      <arglist>(bool active)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectionClosed</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>acf011bd6523207a40e179f1f9f4f448d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processTimer</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>a9008afe23db553e45b37d9811f7af110</anchor>
      <arglist>(cMessage *timer, TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendCommandInvoked</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>adeb5f45e211987af985c94992dc3350f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedOutOfOrderSegment</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>aa49a6c59e453685907e24dc671e3561d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSeqChanged</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>a772c3712679d50b0598957665b14acc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDataAck</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>a55a32a0e93c6417adb091ee162f225e2</anchor>
      <arglist>(uint32 firstSeqAcked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDuplicateAck</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>ad198abc5a259c9b1660ec149aae3b11d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedAckForDataNotYetSent</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>a8d57787d474f4a317bffa76c8f13ef3a</anchor>
      <arglist>(uint32 seq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ackSent</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>ae40c0a08732c067048a9183945153ec1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dataSent</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>a8bbd5e8c6d8b139da0cbc44a3274c9fa</anchor>
      <arglist>(uint32 fromseq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>restartRexmitTimer</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>aa781a26258eb0504bfff79468079e1b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>startRexmitTimer</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>a5fc842a3f9c5297e9ba795843bf0cabb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>rttMeasurementComplete</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>a31986bf6db565ab455f818eafb01320e</anchor>
      <arglist>(simtime_t tSent, simtime_t tAcked)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>sendData</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>a28c072f575629d0c5ec6478edd3bb7e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cMessage *</type>
      <name>cancelEvent</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>afc54d88f3abc5f0956e1d4d6c3d5c206</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processRexmitTimer</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>ac8a305a437d4eafd1689204e50af8870</anchor>
      <arglist>(TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPersistTimer</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>a69a0d60fa083b9a3b03e8f80d3c53e6f</anchor>
      <arglist>(TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processDelayedAckTimer</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>ad5f7c065fdf27a650a7c711cf8e31766</anchor>
      <arglist>(TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processKeepAliveTimer</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>a586dd4192388dc907ab36ae4aec4c3d5</anchor>
      <arglist>(TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPBaseAlgStateVariables *&amp;</type>
      <name>state</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>ad1bab317e58578b0976c63d3765867e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>rexmitTimer</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>a2413e27953b03ff929b26b62e9dfe8b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>persistTimer</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>a16b5813e073593fcf194859387efaef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>delayedAckTimer</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>aba8d2462619e5aa1106b992c3361c3fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>keepAliveTimer</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>a7eee3af489bedb3010ff637fe848d232</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>cwndVector</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>a9e6f430f3a5463137d416627f4282d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>ssthreshVector</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>adcb49cda42179c795cf3c12ed42b3f31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>rttVector</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>ad4718c9463f32652274f266cf0959575</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>srttVector</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>a08ecae944120c1a57b4d0349fef1f98b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>rttvarVector</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>a27e1885fc2811db6bb92761d99168c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>rtoVector</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>a81f6ee9e817cc9225e00ce2945c5e4bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>numRtosVector</name>
      <anchorfile>class_t_c_p_base_alg.html</anchorfile>
      <anchor>a0558fe41bf7f4318f5739a472b8e95fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPBaseAlgStateVariables</name>
    <filename>class_t_c_p_base_alg_state_variables.html</filename>
    <base>TCPStateVariables</base>
    <member kind="function">
      <type></type>
      <name>TCPBaseAlgStateVariables</name>
      <anchorfile>class_t_c_p_base_alg_state_variables.html</anchorfile>
      <anchor>a43fd2149e9ec289775544fc45d564bf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>class_t_c_p_base_alg_state_variables.html</anchorfile>
      <anchor>a24c5be81ae8c22877d69716f534c3556</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>class_t_c_p_base_alg_state_variables.html</anchorfile>
      <anchor>a685f7ef8f9a5a8674c50525dd4ca7d88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>rexmit_count</name>
      <anchorfile>class_t_c_p_base_alg_state_variables.html</anchorfile>
      <anchor>a6957d344e4656f8f815052fda321638b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>rexmit_timeout</name>
      <anchorfile>class_t_c_p_base_alg_state_variables.html</anchorfile>
      <anchor>ab7f8905d9eceedd3bdb9afc7da73ccec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint</type>
      <name>persist_factor</name>
      <anchorfile>class_t_c_p_base_alg_state_variables.html</anchorfile>
      <anchor>a7085c1927953cb936117333c70b189ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>persist_timeout</name>
      <anchorfile>class_t_c_p_base_alg_state_variables.html</anchorfile>
      <anchor>ac544a14e6f1287c41195fa8054c272c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>snd_cwnd</name>
      <anchorfile>class_t_c_p_base_alg_state_variables.html</anchorfile>
      <anchor>a36b9d4c46519bcd7a094462c68881ce9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>rtseq</name>
      <anchorfile>class_t_c_p_base_alg_state_variables.html</anchorfile>
      <anchor>a1f7c0b7477430b752550a4778afc913e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>rtseq_sendtime</name>
      <anchorfile>class_t_c_p_base_alg_state_variables.html</anchorfile>
      <anchor>ab60db2ccc468ad30634014bb035246e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>srtt</name>
      <anchorfile>class_t_c_p_base_alg_state_variables.html</anchorfile>
      <anchor>a3fbc98ec258009121b47acc9a5d74a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>rttvar</name>
      <anchorfile>class_t_c_p_base_alg_state_variables.html</anchorfile>
      <anchor>abc6803555218c740e069bc3d6a7ed3e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>numRtos</name>
      <anchorfile>class_t_c_p_base_alg_state_variables.html</anchorfile>
      <anchor>a2ef2adf2cb914469916fd62a99962cf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>recover</name>
      <anchorfile>class_t_c_p_base_alg_state_variables.html</anchorfile>
      <anchor>a477d88f791789bf08bb670ee9663e71b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>firstPartialACK</name>
      <anchorfile>class_t_c_p_base_alg_state_variables.html</anchorfile>
      <anchor>ad3611be625a0816f866ff25e67095bae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPBasicClientApp</name>
    <filename>class_t_c_p_basic_client_app.html</filename>
    <base>TCPGenericCliAppBase</base>
    <member kind="function">
      <type></type>
      <name>TCPBasicClientApp</name>
      <anchorfile>class_t_c_p_basic_client_app.html</anchorfile>
      <anchor>a9fca2dcb091ef5cb3576e6d96df5522c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPBasicClientApp</name>
      <anchorfile>class_t_c_p_basic_client_app.html</anchorfile>
      <anchor>ad2617d88c45905b6ef801bf0b7722cbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendRequest</name>
      <anchorfile>class_t_c_p_basic_client_app.html</anchorfile>
      <anchor>a849fb799548b3a34e6e7bd33710c3767</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_t_c_p_basic_client_app.html</anchorfile>
      <anchor>adb40b8b6e29c1bc1a4271cde8b5a8e31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimer</name>
      <anchorfile>class_t_c_p_basic_client_app.html</anchorfile>
      <anchor>abc31a208d90a81379a973ab984b6f74b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketEstablished</name>
      <anchorfile>class_t_c_p_basic_client_app.html</anchorfile>
      <anchor>aa374c69359d25b804c258195843fa533</anchor>
      <arglist>(int connId, void *yourPtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketDataArrived</name>
      <anchorfile>class_t_c_p_basic_client_app.html</anchorfile>
      <anchor>a476dab358954ae599966f7b6d20e60b8</anchor>
      <arglist>(int connId, void *yourPtr, cPacket *msg, bool urgent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketClosed</name>
      <anchorfile>class_t_c_p_basic_client_app.html</anchorfile>
      <anchor>a37368450e37da097e428fea9365cef1d</anchor>
      <arglist>(int connId, void *yourPtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketFailure</name>
      <anchorfile>class_t_c_p_basic_client_app.html</anchorfile>
      <anchor>a31d6d5cc0924ddd764e8793a840d5b8b</anchor>
      <arglist>(int connId, void *yourPtr, int code)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>timeoutMsg</name>
      <anchorfile>class_t_c_p_basic_client_app.html</anchorfile>
      <anchor>a79d3317fbfa613c64f746cb84708f451</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>earlySend</name>
      <anchorfile>class_t_c_p_basic_client_app.html</anchorfile>
      <anchor>a5c5756829161ad542bc04165002e77b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numRequestsToSend</name>
      <anchorfile>class_t_c_p_basic_client_app.html</anchorfile>
      <anchor>a6a440f2922d7aa4539a82bef1c6431b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPCommand</name>
    <filename>class_t_c_p_command.html</filename>
    <member kind="function">
      <type></type>
      <name>TCPCommand</name>
      <anchorfile>class_t_c_p_command.html</anchorfile>
      <anchor>ae635e7ac9d502ae40c3dd03ba09f90f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCPCommand</name>
      <anchorfile>class_t_c_p_command.html</anchorfile>
      <anchor>a9fba72b5c843e7a1880611baa670ccce</anchor>
      <arglist>(const TCPCommand &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPCommand</name>
      <anchorfile>class_t_c_p_command.html</anchorfile>
      <anchor>a53f402f3ea8ad97ec20ff531b2435216</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPCommand &amp;</type>
      <name>operator=</name>
      <anchorfile>class_t_c_p_command.html</anchorfile>
      <anchor>a73e3fa349d61d26f4610d2c81728adf6</anchor>
      <arglist>(const TCPCommand &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TCPCommand *</type>
      <name>dup</name>
      <anchorfile>class_t_c_p_command.html</anchorfile>
      <anchor>ae9c3fcf081926c439508b17a3fcc4162</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_t_c_p_command.html</anchorfile>
      <anchor>a2f14201cbd53305cd91afb251a22a90a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_t_c_p_command.html</anchorfile>
      <anchor>aa7b8623d8d3193d79f0c44129f7e9ea2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getConnId</name>
      <anchorfile>class_t_c_p_command.html</anchorfile>
      <anchor>a8bd2f6a8d698df01266e6a598355287a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConnId</name>
      <anchorfile>class_t_c_p_command.html</anchorfile>
      <anchor>a2688defdcadd3de43faae9c27748be24</anchor>
      <arglist>(int connId_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getUserId</name>
      <anchorfile>class_t_c_p_command.html</anchorfile>
      <anchor>a1466132b755767690333e292281c3d8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUserId</name>
      <anchorfile>class_t_c_p_command.html</anchorfile>
      <anchor>aeac5b250049b795b28062b9d2addbd57</anchor>
      <arglist>(int userId_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_t_c_p_command.html</anchorfile>
      <anchor>a8ab185e8f78475242e9a84fe5da17562</anchor>
      <arglist>(const TCPCommand &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>connId_var</name>
      <anchorfile>class_t_c_p_command.html</anchorfile>
      <anchor>a506ead90d0658702b82ffb735e900975</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>userId_var</name>
      <anchorfile>class_t_c_p_command.html</anchorfile>
      <anchor>a8fce6245d6d62040b6c918cf10a1b635</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPConnectInfo</name>
    <filename>class_t_c_p_connect_info.html</filename>
    <base>TCPCommand</base>
    <member kind="function">
      <type></type>
      <name>TCPConnectInfo</name>
      <anchorfile>class_t_c_p_connect_info.html</anchorfile>
      <anchor>ad9adde01ac78a46cf7e2ff5d8bed28cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCPConnectInfo</name>
      <anchorfile>class_t_c_p_connect_info.html</anchorfile>
      <anchor>a457644f77bb711a615f8b74ced1ce16b</anchor>
      <arglist>(const TCPConnectInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPConnectInfo</name>
      <anchorfile>class_t_c_p_connect_info.html</anchorfile>
      <anchor>a700e0d49de4c6bd52a13e3af5aa3d11d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPConnectInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>class_t_c_p_connect_info.html</anchorfile>
      <anchor>a3cfba9f7741ae3b6acddcca089d79b1a</anchor>
      <arglist>(const TCPConnectInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TCPConnectInfo *</type>
      <name>dup</name>
      <anchorfile>class_t_c_p_connect_info.html</anchorfile>
      <anchor>a0ec631a8bc87dc3b41c5d8857eaec80e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_t_c_p_connect_info.html</anchorfile>
      <anchor>a413a61b42c9dd2b741c33ef41894c32b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_t_c_p_connect_info.html</anchorfile>
      <anchor>a78f014b69026493ee855752d37e6d540</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>getLocalAddr</name>
      <anchorfile>class_t_c_p_connect_info.html</anchorfile>
      <anchor>a60fc1aff545ecb7c231129305177d5c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>getLocalAddr</name>
      <anchorfile>class_t_c_p_connect_info.html</anchorfile>
      <anchor>aae941f3bf20ad2f41c084d66354de702</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLocalAddr</name>
      <anchorfile>class_t_c_p_connect_info.html</anchorfile>
      <anchor>acc0fe754ff51cf7adb6987197ce84113</anchor>
      <arglist>(const IPvXAddress &amp;localAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>getRemoteAddr</name>
      <anchorfile>class_t_c_p_connect_info.html</anchorfile>
      <anchor>a6e1a4b469fd61478040885cafc0761dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>getRemoteAddr</name>
      <anchorfile>class_t_c_p_connect_info.html</anchorfile>
      <anchor>a7288f9d1c3b47f89f0156964c60f6537</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRemoteAddr</name>
      <anchorfile>class_t_c_p_connect_info.html</anchorfile>
      <anchor>a520c2434de5accebe56bb77c8aadd100</anchor>
      <arglist>(const IPvXAddress &amp;remoteAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getLocalPort</name>
      <anchorfile>class_t_c_p_connect_info.html</anchorfile>
      <anchor>afba37110a26b2f4a8c6fdaa2a0e3a0cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLocalPort</name>
      <anchorfile>class_t_c_p_connect_info.html</anchorfile>
      <anchor>aae1dc0aaa74c6cd2ff8519c65713b6c1</anchor>
      <arglist>(int localPort_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRemotePort</name>
      <anchorfile>class_t_c_p_connect_info.html</anchorfile>
      <anchor>a77b81b8bc031331b12734929d7cf2ce4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRemotePort</name>
      <anchorfile>class_t_c_p_connect_info.html</anchorfile>
      <anchor>a14416c97565e1f500549bce0d64f3563</anchor>
      <arglist>(int remotePort_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_t_c_p_connect_info.html</anchorfile>
      <anchor>a73a876522391f6820ec1fbcdbb90951c</anchor>
      <arglist>(const TCPConnectInfo &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPvXAddress</type>
      <name>localAddr_var</name>
      <anchorfile>class_t_c_p_connect_info.html</anchorfile>
      <anchor>aa158a3acb029aaf36d9155f72455777a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPvXAddress</type>
      <name>remoteAddr_var</name>
      <anchorfile>class_t_c_p_connect_info.html</anchorfile>
      <anchor>a700b23c504ac770d8db85835512657d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>localPort_var</name>
      <anchorfile>class_t_c_p_connect_info.html</anchorfile>
      <anchor>ab49160fc99bb7c939b7f4501b80db705</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>remotePort_var</name>
      <anchorfile>class_t_c_p_connect_info.html</anchorfile>
      <anchor>abc78e11e51bfc9b49dd3059f2bbd185f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPConnection</name>
    <filename>class_t_c_p_connection.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendAck</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a60ee5bc5b391d621e7e684857e195151</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>sendData</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a0238c323366884c6598d7d92d21f69ab</anchor>
      <arglist>(bool fullSegmentsOnly, uint32 congestionWindow)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>sendProbe</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>ab07a8b0ce79c80e9baf75c3e82f56937</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>retransmitOneSegment</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a15eda66a013f23ebc129adcea81a68b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>retransmitData</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>ab2c57b0ff79eb111ca6840b8d7003b04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendRst</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>afa03f88fc4589249aefe6f828eed9dd6</anchor>
      <arglist>(uint32 seqNo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendRst</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a3dc25263bb2f0b1013ee398c1587b128</anchor>
      <arglist>(uint32 seq, IPvXAddress src, IPvXAddress dest, int srcPort, int destPort)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendRstAck</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>ade3c9c38be0aa758b4eb448d5c1169b9</anchor>
      <arglist>(uint32 seq, uint32 ack, IPvXAddress src, IPvXAddress dest, int srcPort, int destPort)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendFin</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a70acf513d8461c73bfd06037036b1682</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendSegment</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>af71155c4fad49ea52907d840463a06d5</anchor>
      <arglist>(uint32 bytes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToIP</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a86143cf35f957006c5fe17c506be21c7</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TCPSegment *</type>
      <name>createTCPSegment</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a462206e0bc50ae521a47a797552a0057</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startSynRexmitTimer</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>aa58f44bc38ec0af46aca654f9403771f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>signalConnectionTimeout</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a264eb196b44591ed68422a9e70dab680</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scheduleTimeout</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a60c9fb67af21fc9c1cee62369a8a1486</anchor>
      <arglist>(cMessage *msg, simtime_t timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printConnBrief</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a8aaec47dd8098dbaa015f2e3e7b16442</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateRcvQueueVars</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>ae25d720620d8fe927087e1af0692ed90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateRcvWnd</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a2d22abd919e73d898f20a4ad2ad84657</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateWndInfo</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>af1daa72bce81fcdc2cb7ccb03c134b7b</anchor>
      <arglist>(TCPSegment *tcpseg, bool doAlways=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCPConnection</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>aab510bb961623a41ade36bfbda9f86b6</anchor>
      <arglist>(TCP *mod, int appGateIndex, int connId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCPConnection</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a11a3cccb118b0b66bee1a07929510e4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPConnection</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a0b79ac9c31e99766954c9cca733a362d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>segmentArrivalWhileClosed</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a82f6b7680530f0f784e9d8efa78fa5a5</anchor>
      <arglist>(TCPSegment *tcpseg, IPvXAddress src, IPvXAddress dest)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>processTimer</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a6f9e1e7a0cabaf710f2d37a19eea0caf</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>processTCPSegment</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a7f5f8ddb99114615c77fe0ccf16424e7</anchor>
      <arglist>(TCPSegment *tcpSeg, IPvXAddress srcAddr, IPvXAddress destAddr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>processAppCommand</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>aebf3e44d104151c83a84a1efbae3f312</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isLost</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a261dc1ebd41e03d655b112f2b82b3f08</anchor>
      <arglist>(uint32 seqNum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPipe</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a728bea28fa24566bb22935f0de7c4655</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>nextSeg</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>ae8d9450252219a54062112f6d8688309</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDataDuringLossRecoveryPhase</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a4fb6aaf244a5da2eaa02af271099a06b</anchor>
      <arglist>(uint32 congestionWindow)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendSegmentDuringLossRecoveryPhase</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>ac922b39992f510ef7803067e675d80f1</anchor>
      <arglist>(uint32 seqNum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendOneNewSegment</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a35768c6517e5f25424a13d1e80892b32</anchor>
      <arglist>(bool fullSegmentsOnly, uint32 congestionWindow)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFsmState</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>aa96e386d3f5d597dd0c03c52a103071d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TCPStateVariables *</type>
      <name>getState</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a2bf497c23b9c58dbf704a511e36f19f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPSendQueue *</type>
      <name>getSendQueue</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a1ef81a39ac3ed1ef11b5d141136c1926</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPSACKRexmitQueue *</type>
      <name>getRexmitQueue</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a1eebaa12717ee8c8197b744275e0c7b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPReceiveQueue *</type>
      <name>getReceiveQueue</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a3c6829af5f8233ce0a666cda858374e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPAlgorithm *</type>
      <name>getTcpAlgorithm</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a6a70265d4b753e5eefb47c2cdc54e9f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCP *</type>
      <name>getTcpMain</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a5c9318d9fe504d7e5779a5b2eab87e09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>printSegmentBrief</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a188549e7c936c8cad622c180d3200c69</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>stateName</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>ab991cf2680a63832310a4a56ac17972e</anchor>
      <arglist>(int state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>eventName</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>af199cd53f71f27341684145c3bdab306</anchor>
      <arglist>(int event)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>indicationName</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>adeef1c0b8f04a744168a107f68c397ba</anchor>
      <arglist>(int code)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>optionName</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>ad7429706bcb29990ebfc65ff24970faa</anchor>
      <arglist>(int option)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>appGateIndex</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>ac07531e9f1e23e1da9d4263f0da58cd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>connId</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a6fee1d63c934294942e34b17a92d2fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>localAddr</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a08c53cabdcc750399f2af42d7c04d8e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>remoteAddr</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>aee1b7ed1b1412bf36a125fcbab3e9e34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>localPort</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a248676b3def3f1af2dd46b9520ba4e96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>remotePort</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>aab271d97998bcfc7477fc1d99af2df08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TCPSACKRexmitQueue *</type>
      <name>rexmitQueue</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a7de9df6b234a7dabb5b5e7eb7520734d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPConnection *</type>
      <name>cloneListeningConnection</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a1d5624dcbc77e79d142f6a886b3e788d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initConnection</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a69caa8ea0ffbe8d9f73f935aac1b29d9</anchor>
      <arglist>(TCPOpenCommand *openCmd)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>configureStateVariables</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a8ddd3d422b9d6e00ad15cf99f9870ef4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>selectInitialSeqNum</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a585bbcdd70565eb01b6bfe17a1487c78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSegmentAcceptable</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>acceb561b23349d06b298858e39433435</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendSyn</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>abcd8f7efecc7c0077050184d3384b493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendSynAck</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a675b131a43de7429552a574cabcc12dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>readHeaderOptions</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a9a8bf987d5f32ecff2b85ba0f635f019</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPSegment</type>
      <name>writeHeaderOptions</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a617d790b0cf1905e60c226dff8174a23</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPSegment</type>
      <name>addSacks</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>afada098bf955db81aa1786f33c813363</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cMessage *</type>
      <name>cancelEvent</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>aecded14193441e78c31ca0c635ac19c8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToApp</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a6aa48826843116a0f5c4e0fa37a69cfc</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendIndicationToApp</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a65a8dc93c08a685f145248d0fb327428</anchor>
      <arglist>(int code)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendEstabIndicationToApp</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>ab04a91abde05d21293c30a78ab968eef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPEventCode</type>
      <name>preanalyseAppCommandEvent</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a792d9159b4e64b344cac79d0716c907a</anchor>
      <arglist>(int commandCode)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>performStateTransition</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>aa1fe5fa359d4063c984d686e4166b798</anchor>
      <arglist>(const TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>stateEntered</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a1be68d20f98e68b01ef9267a8dd2088a</anchor>
      <arglist>(int state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process_OPEN_ACTIVE</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a6ef625498d593ac11744aa92a404e06d</anchor>
      <arglist>(TCPEventCode &amp;event, TCPCommand *tcpCommand, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process_OPEN_PASSIVE</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a26e4a86dfbc1efaf02e99ea14d410ae3</anchor>
      <arglist>(TCPEventCode &amp;event, TCPCommand *tcpCommand, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process_SEND</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a65fa8d6570761c63cdab5cef7f5df685</anchor>
      <arglist>(TCPEventCode &amp;event, TCPCommand *tcpCommand, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process_CLOSE</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a5aa9b20651a4c1f90772a7c02eacbf05</anchor>
      <arglist>(TCPEventCode &amp;event, TCPCommand *tcpCommand, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process_ABORT</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>afb2189f1428627dcde1d1b0bfbc50833</anchor>
      <arglist>(TCPEventCode &amp;event, TCPCommand *tcpCommand, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process_STATUS</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a519a2b6612737fbdbd5641dfa33833e8</anchor>
      <arglist>(TCPEventCode &amp;event, TCPCommand *tcpCommand, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>tryFastRoute</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a9b7d3f811eab0367d3826dfb20c8d931</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPEventCode</type>
      <name>process_RCV_SEGMENT</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a46ac1b09624942471db2eb76ef991143</anchor>
      <arglist>(TCPSegment *tcpseg, IPvXAddress src, IPvXAddress dest)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPEventCode</type>
      <name>processSegmentInListen</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a4d034577df86997140d627feeda66a1f</anchor>
      <arglist>(TCPSegment *tcpseg, IPvXAddress src, IPvXAddress dest)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPEventCode</type>
      <name>processSegmentInSynSent</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a12b903f9e148f5c26f926dcdc8107c86</anchor>
      <arglist>(TCPSegment *tcpseg, IPvXAddress src, IPvXAddress dest)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPEventCode</type>
      <name>processSegment1stThru8th</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>aa0758284e5bd6bd162b6ff267add2e2d</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPEventCode</type>
      <name>processRstInSynReceived</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a4d240ca8f36aa37a29b8bcc44ec052cd</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>processAckInEstabEtc</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>ac1144f5ca6e960176d6e623998cb7456</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>processMSSOption</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a632302213a1f4344d908bdfd1509323d</anchor>
      <arglist>(TCPSegment *tcpseg, const TCPOption &amp;option)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>processSACKPermittedOption</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a009bb98808477c6cbf9b0b82c3ae2ca4</anchor>
      <arglist>(TCPSegment *tcpseg, const TCPOption &amp;option)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>processSACKOption</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a33b50078727564bd2c4e7e906e2f1648</anchor>
      <arglist>(TCPSegment *tcpseg, const TCPOption &amp;option)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process_TIMEOUT_2MSL</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>ae29072ef963e593c4c3053827ebbec6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process_TIMEOUT_CONN_ESTAB</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a7b47d21fa8a97f13cab52097f3332ea6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process_TIMEOUT_FIN_WAIT_2</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a53d62d237307ad56bae8d320ff557e48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process_TIMEOUT_SYN_REXMIT</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a33c6fe420de8b7fc6c09761f70118ed0</anchor>
      <arglist>(TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>sendToIP</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a8763146770969da7d0a1196efe23615c</anchor>
      <arglist>(TCPSegment *tcpseg, IPvXAddress src, IPvXAddress dest)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCP *</type>
      <name>tcpMain</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>ae74f100a2d121edee4b0e167596b8ac5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cFSM</type>
      <name>fsm</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>af7032e0a7991f87167efce40df32535e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPStateVariables *</type>
      <name>state</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a4780b0038982452cef8139e04f84b4c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPSendQueue *</type>
      <name>sendQueue</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a0dec48343ab1df2cc4157a3da114f54e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPReceiveQueue *</type>
      <name>receiveQueue</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a1f9a74ed0fae5b105a1a1cfb2bab9006</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPAlgorithm *</type>
      <name>tcpAlgorithm</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a305b76fec9de3d8524f7ae5cf1dd55f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>the2MSLTimer</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a0ea0361f0b40f10bc9a3ce397b2c0e2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>connEstabTimer</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a93b66fc68b48870a93479aa0bf4ac773</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>finWait2Timer</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>ab5a1fb22c64b7f9edd700721bdec1d20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>synRexmitTimer</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>ad2e24541092cf4c58f67845e6621f3cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>sndWndVector</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a21c55311a3c27fe7808c962a5faffdf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>rcvWndVector</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>ae5a0350b06c4be2dd4285230e08717cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>rcvAdvVector</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a985637bb70c925f74fa6ad8bb53af0d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>sndNxtVector</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a67990b92349ae122edcf1d0a1a6b004c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>sndAckVector</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>af597155e6e0a1417ca5fd8cab178fcce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>rcvSeqVector</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a02c1500cf2719ebc20fe5e44ca9c663f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>rcvAckVector</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>abe4b8c8de0df4555c93fc23dcb099893</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>unackedVector</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a7cc325d99a5b02944a46c6a425fd01fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>dupAcksVector</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>abceb1f0559f6e8c9f0e8d906b3e124e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>pipeVector</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>af4bd1681a62ef1ce6ac4237ed64bf468</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>sndSacksVector</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a19d5bebef3053d95b66713e1e78e4200</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>rcvSacksVector</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a88d83f671702d2b86f59942b94165daa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>rcvOooSegVector</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a6ae35f9e338201b6f1f36e1c0aaf9acb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>sackedBytesVector</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a7c229fb19da75c880c60a41280721d0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>tcpRcvQueueBytesVector</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>a3d09993cf4b38b48fd5d4d51b7842607</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>tcpRcvQueueDropsVector</name>
      <anchorfile>class_t_c_p_connection.html</anchorfile>
      <anchor>ad24c6dbc6d3b7e143ca4fc180092aa6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPDump</name>
    <filename>class_t_c_p_dump.html</filename>
    <member kind="function">
      <type></type>
      <name>TCPDump</name>
      <anchorfile>class_t_c_p_dump.html</anchorfile>
      <anchor>aa03158b5ccbae22899c8e618afadae6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TCPDump</name>
      <anchorfile>class_t_c_p_dump.html</anchorfile>
      <anchor>a70be88fb95e4e9fae877b534509938ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_t_c_p_dump.html</anchorfile>
      <anchor>a6c6aae2b0258f57b57eef0ad10df6f5d</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_t_c_p_dump.html</anchorfile>
      <anchor>a99ea2e21ea0ef5af65258834540d73ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_t_c_p_dump.html</anchorfile>
      <anchor>ad2c36cf696c676be6fd15b4eead2ecf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>ringBuffer</name>
      <anchorfile>class_t_c_p_dump.html</anchorfile>
      <anchor>a0acab65042f441e382c191f1fd9a9f17</anchor>
      <arglist>[RBUFFER_SIZE]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPDumper</type>
      <name>tcpdump</name>
      <anchorfile>class_t_c_p_dump.html</anchorfile>
      <anchor>a9def2dc88fc02732ba372ed8404e740c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>snaplen</name>
      <anchorfile>class_t_c_p_dump.html</anchorfile>
      <anchor>a159346206d6da0ca9e62d8a33d1cc6de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>first</name>
      <anchorfile>class_t_c_p_dump.html</anchorfile>
      <anchor>ac62eac878a1acfdf612b33b7cf50abee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>last</name>
      <anchorfile>class_t_c_p_dump.html</anchorfile>
      <anchor>a9c9e824fb6c46410ed4edb518e238ec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>space</name>
      <anchorfile>class_t_c_p_dump.html</anchorfile>
      <anchor>a8cbcbb0591f1f46c89df984c27ed50ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPDumper</name>
    <filename>class_t_c_p_dumper.html</filename>
    <member kind="function">
      <type></type>
      <name>TCPDumper</name>
      <anchorfile>class_t_c_p_dumper.html</anchorfile>
      <anchor>afafd43a193f6e03d7815770131cbf1c6</anchor>
      <arglist>(std::ostream &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TCPDumper</name>
      <anchorfile>class_t_c_p_dumper.html</anchorfile>
      <anchor>af5ca12c679ec1f262c145a397574708d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVerbosity</name>
      <anchorfile>class_t_c_p_dumper.html</anchorfile>
      <anchor>a6fccb0507cbb7ba38d1eba9b7c2523bb</anchor>
      <arglist>(const int32 verbosityLevel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ipDump</name>
      <anchorfile>class_t_c_p_dumper.html</anchorfile>
      <anchor>a8fc2fe9f248124d89647f38a787e6c41</anchor>
      <arglist>(const char *label, IPDatagram *dgram, const char *comment=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sctpDump</name>
      <anchorfile>class_t_c_p_dumper.html</anchorfile>
      <anchor>a9b424b32c950eef380e172b7f23808f3</anchor>
      <arglist>(const char *label, SCTPMessage *sctpmsg, const std::string &amp;srcAddr, const std::string &amp;destAddr, const char *comment=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>class_t_c_p_dumper.html</anchorfile>
      <anchor>a1d37f218e819252c027368ef08a2220d</anchor>
      <arglist>(const char *label, const char *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tcpDump</name>
      <anchorfile>class_t_c_p_dumper.html</anchorfile>
      <anchor>a03e9cc1b3d71ebe68154d989a8b19476</anchor>
      <arglist>(bool l2r, const char *label, IPDatagram *dgram, const char *comment=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tcpDump</name>
      <anchorfile>class_t_c_p_dumper.html</anchorfile>
      <anchor>af74e04c18e244f24defa9f3cf87f6f9c</anchor>
      <arglist>(bool l2r, const char *label, TCPSegment *tcpseg, const std::string &amp;srcAddr, const std::string &amp;destAddr, const char *comment=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpIPv6</name>
      <anchorfile>class_t_c_p_dumper.html</anchorfile>
      <anchor>a754be936c3dc1a76c2e2a64879833e90</anchor>
      <arglist>(bool l2r, const char *label, IPv6Datagram_Base *dgram, const char *comment=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>udpDump</name>
      <anchorfile>class_t_c_p_dumper.html</anchorfile>
      <anchor>a734f25e12b7e32b04b7895fca3f0bd85</anchor>
      <arglist>(bool l2r, const char *label, IPDatagram *dgram, const char *comment)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>intToChunk</name>
      <anchorfile>class_t_c_p_dumper.html</anchorfile>
      <anchor>a7d5379ed750f858d72e4769fc4cde6c1</anchor>
      <arglist>(int32 type)</arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>dumpfile</name>
      <anchorfile>class_t_c_p_dumper.html</anchorfile>
      <anchor>a419e96d410875d31fe2d7a1dec03b8fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>seq</name>
      <anchorfile>class_t_c_p_dumper.html</anchorfile>
      <anchor>adf96516a68506b6cce543912d6ea58ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ostream *</type>
      <name>outp</name>
      <anchorfile>class_t_c_p_dumper.html</anchorfile>
      <anchor>a1ab7e43bb867592f56861effcb369e8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>verbosity</name>
      <anchorfile>class_t_c_p_dumper.html</anchorfile>
      <anchor>a14d65f28ff5c5d7cc11e1837eadf0236</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPEchoApp</name>
    <filename>class_t_c_p_echo_app.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDown</name>
      <anchorfile>class_t_c_p_echo_app.html</anchorfile>
      <anchor>ac887868f77a7c434c4801e75e559beb7</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_t_c_p_echo_app.html</anchorfile>
      <anchor>ada5e6fbfaaaf4cff54f48f9c2e9fb147</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_t_c_p_echo_app.html</anchorfile>
      <anchor>a5466177fd54c87de43c5f58ec2a74cd1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_t_c_p_echo_app.html</anchorfile>
      <anchor>a0f062c49a206ec6d887573a62be9f39d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>delay</name>
      <anchorfile>class_t_c_p_echo_app.html</anchorfile>
      <anchor>a282205b0aceb7fa518b03ca72b0d6a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>echoFactor</name>
      <anchorfile>class_t_c_p_echo_app.html</anchorfile>
      <anchor>ace62f4f6106ff891880218c05dc90967</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>bytesRcvd</name>
      <anchorfile>class_t_c_p_echo_app.html</anchorfile>
      <anchor>a9923d77e1018b0047b5e3dd162ac4a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>bytesSent</name>
      <anchorfile>class_t_c_p_echo_app.html</anchorfile>
      <anchor>a329a62dcc1a5e31e39f8a29a76b301e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPErrorInfo</name>
    <filename>class_t_c_p_error_info.html</filename>
    <base>TCPCommand</base>
    <member kind="function">
      <type></type>
      <name>TCPErrorInfo</name>
      <anchorfile>class_t_c_p_error_info.html</anchorfile>
      <anchor>a0a2a797c67d1524d3874f09715a29e2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCPErrorInfo</name>
      <anchorfile>class_t_c_p_error_info.html</anchorfile>
      <anchor>a8c1ba0d9ae50121f2639bbb4bc04eaac</anchor>
      <arglist>(const TCPErrorInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPErrorInfo</name>
      <anchorfile>class_t_c_p_error_info.html</anchorfile>
      <anchor>ae0b73a2a4c69739415e9632440973d76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPErrorInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>class_t_c_p_error_info.html</anchorfile>
      <anchor>af3256e6d556d524dbf5939d139cb9544</anchor>
      <arglist>(const TCPErrorInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TCPErrorInfo *</type>
      <name>dup</name>
      <anchorfile>class_t_c_p_error_info.html</anchorfile>
      <anchor>a09a76656c799cc58eae2da8bb532cc57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_t_c_p_error_info.html</anchorfile>
      <anchor>a9f429860e3ad3637eaff2b347dc8217f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_t_c_p_error_info.html</anchorfile>
      <anchor>a46774b23c0cc0b2d3d123313dc87e209</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getErrorCode</name>
      <anchorfile>class_t_c_p_error_info.html</anchorfile>
      <anchor>a9fc925d5a0a8da2b29dd8d9de4480735</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setErrorCode</name>
      <anchorfile>class_t_c_p_error_info.html</anchorfile>
      <anchor>a2915734cdf192d02a8f8abec721ad3be</anchor>
      <arglist>(int errorCode_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getMessageText</name>
      <anchorfile>class_t_c_p_error_info.html</anchorfile>
      <anchor>a57668b3a0a0504a8376f8535870ee445</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMessageText</name>
      <anchorfile>class_t_c_p_error_info.html</anchorfile>
      <anchor>abcee4aaeb646ab9a4cb6908c16926b45</anchor>
      <arglist>(const char *messageText_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_t_c_p_error_info.html</anchorfile>
      <anchor>aed703b23426cb48b671c9c616b0bde4d</anchor>
      <arglist>(const TCPErrorInfo &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>errorCode_var</name>
      <anchorfile>class_t_c_p_error_info.html</anchorfile>
      <anchor>aa5c6745dbdf25630fae2de92278e5904</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>messageText_var</name>
      <anchorfile>class_t_c_p_error_info.html</anchorfile>
      <anchor>aeb6b7478a718e3bb01489d49e3fd0d4c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPGenericCliAppBase</name>
    <filename>class_t_c_p_generic_cli_app_base.html</filename>
    <base>TCPSocket::CallbackInterface</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_t_c_p_generic_cli_app_base.html</anchorfile>
      <anchor>a5c0adab00fc34f4b9ebdda75fea089a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_t_c_p_generic_cli_app_base.html</anchorfile>
      <anchor>a7080cfc8f011b9c57b74c38382774969</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_t_c_p_generic_cli_app_base.html</anchorfile>
      <anchor>a1caaf9a47b1c1db2b89f9a4d13f346f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleTimer</name>
      <anchorfile>class_t_c_p_generic_cli_app_base.html</anchorfile>
      <anchor>a420e64965be7c708a427de4061a49689</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>connect</name>
      <anchorfile>class_t_c_p_generic_cli_app_base.html</anchorfile>
      <anchor>a3ec28620ffe01bc3e81af1ae85b3522f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>class_t_c_p_generic_cli_app_base.html</anchorfile>
      <anchor>a8004ebfe48fdf6334d100cd54ecf29fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendPacket</name>
      <anchorfile>class_t_c_p_generic_cli_app_base.html</anchorfile>
      <anchor>a05c8b9e8f46e01eb466e604f8cd47719</anchor>
      <arglist>(int numBytes, int expectedReplyBytes, bool serverClose=false)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setStatusString</name>
      <anchorfile>class_t_c_p_generic_cli_app_base.html</anchorfile>
      <anchor>a904f867771672d8d989a87873fb51ad9</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketEstablished</name>
      <anchorfile>class_t_c_p_generic_cli_app_base.html</anchorfile>
      <anchor>aa3e60c557a7af7cfc3b159e690be5a83</anchor>
      <arglist>(int connId, void *yourPtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketDataArrived</name>
      <anchorfile>class_t_c_p_generic_cli_app_base.html</anchorfile>
      <anchor>a2609e0e2775c805d2c3a3beb06c096cd</anchor>
      <arglist>(int connId, void *yourPtr, cPacket *msg, bool urgent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketPeerClosed</name>
      <anchorfile>class_t_c_p_generic_cli_app_base.html</anchorfile>
      <anchor>a9ec5b3744ba9da37e0c1acad20c3ae08</anchor>
      <arglist>(int connId, void *yourPtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketClosed</name>
      <anchorfile>class_t_c_p_generic_cli_app_base.html</anchorfile>
      <anchor>a39a1f1131c97aaf61e79cbe01fb5341b</anchor>
      <arglist>(int connId, void *yourPtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketFailure</name>
      <anchorfile>class_t_c_p_generic_cli_app_base.html</anchorfile>
      <anchor>a321d7c13c4ebe9a63e2e013895a390d1</anchor>
      <arglist>(int connId, void *yourPtr, int code)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketStatusArrived</name>
      <anchorfile>class_t_c_p_generic_cli_app_base.html</anchorfile>
      <anchor>aacd013bdf693db9511c3cd9854330169</anchor>
      <arglist>(int connId, void *yourPtr, TCPStatusInfo *status)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPSocket</type>
      <name>socket</name>
      <anchorfile>class_t_c_p_generic_cli_app_base.html</anchorfile>
      <anchor>a03677edd0d173c3fe05bc765c4a136aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numSessions</name>
      <anchorfile>class_t_c_p_generic_cli_app_base.html</anchorfile>
      <anchor>a108bbf188f8ff892d667b5668a2abf6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numBroken</name>
      <anchorfile>class_t_c_p_generic_cli_app_base.html</anchorfile>
      <anchor>aedfb65334489e61b8e5776c08331786b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>packetsSent</name>
      <anchorfile>class_t_c_p_generic_cli_app_base.html</anchorfile>
      <anchor>a968af0a42e12593dbfe5452dad5c1925</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>packetsRcvd</name>
      <anchorfile>class_t_c_p_generic_cli_app_base.html</anchorfile>
      <anchor>a15ed77652265025c9ee8e6edcbe4f0e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bytesSent</name>
      <anchorfile>class_t_c_p_generic_cli_app_base.html</anchorfile>
      <anchor>ae9509939b0d3fadf855e039a4685e98b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bytesRcvd</name>
      <anchorfile>class_t_c_p_generic_cli_app_base.html</anchorfile>
      <anchor>a613c366ad99e9037fb2d7b68272eabf1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPGenericSrvApp</name>
    <filename>class_t_c_p_generic_srv_app.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendBack</name>
      <anchorfile>class_t_c_p_generic_srv_app.html</anchorfile>
      <anchor>a341f87fb5b7618c031ef69c6aa0f179b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendOrSchedule</name>
      <anchorfile>class_t_c_p_generic_srv_app.html</anchorfile>
      <anchor>a20ec729f88aac5afd763b6a1107d046d</anchor>
      <arglist>(cMessage *msg, simtime_t delay)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_t_c_p_generic_srv_app.html</anchorfile>
      <anchor>aa4943fe7e930f5c565494fe3095c378b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_t_c_p_generic_srv_app.html</anchorfile>
      <anchor>a32093b94b019021d9aab7db691b5c6fa</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_t_c_p_generic_srv_app.html</anchorfile>
      <anchor>af379c0132f95dfd55805cfc17a4a1b3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>delay</name>
      <anchorfile>class_t_c_p_generic_srv_app.html</anchorfile>
      <anchor>adbbf0388df8322f8bfcbebb46a05a589</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>maxMsgDelay</name>
      <anchorfile>class_t_c_p_generic_srv_app.html</anchorfile>
      <anchor>ab0637ac61a1949afb8cb6a55952bcda9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>msgsRcvd</name>
      <anchorfile>class_t_c_p_generic_srv_app.html</anchorfile>
      <anchor>a69570713603c70bdeadfa48832b2151c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>msgsSent</name>
      <anchorfile>class_t_c_p_generic_srv_app.html</anchorfile>
      <anchor>aa594352fb2a8ba2d6c4c23b0414cd32d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>bytesRcvd</name>
      <anchorfile>class_t_c_p_generic_srv_app.html</anchorfile>
      <anchor>a5c9722be2248d2ed69fb9490d1cd21a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>bytesSent</name>
      <anchorfile>class_t_c_p_generic_srv_app.html</anchorfile>
      <anchor>a6428ebf5b141a9f777e75ab3e9bc4b54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPGenericSrvThread</name>
    <filename>class_t_c_p_generic_srv_thread.html</filename>
    <base>TCPServerThreadBase</base>
    <member kind="function">
      <type></type>
      <name>TCPGenericSrvThread</name>
      <anchorfile>class_t_c_p_generic_srv_thread.html</anchorfile>
      <anchor>a99ff072b978a05b7b76c7e360d13162e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>established</name>
      <anchorfile>class_t_c_p_generic_srv_thread.html</anchorfile>
      <anchor>ad6c8c21fb7e3ddeae667dbd119942b4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dataArrived</name>
      <anchorfile>class_t_c_p_generic_srv_thread.html</anchorfile>
      <anchor>ae26b047477e593206af8f5e95a3f71c8</anchor>
      <arglist>(cMessage *msg, bool urgent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>timerExpired</name>
      <anchorfile>class_t_c_p_generic_srv_thread.html</anchorfile>
      <anchor>ae0eccf7204723930637b4b4eb9edc58c</anchor>
      <arglist>(cMessage *timer)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tcphdr</name>
    <filename>structtcphdr.html</filename>
    <member kind="variable">
      <type>uint16_t</type>
      <name>th_sport</name>
      <anchorfile>structtcphdr.html</anchorfile>
      <anchor>ae5c47c843c9dc71c25dce52df167d47c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>th_dport</name>
      <anchorfile>structtcphdr.html</anchorfile>
      <anchor>ac347d4aa4da2cc2e09d6668e69c40023</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>th_seq</name>
      <anchorfile>structtcphdr.html</anchorfile>
      <anchor>a78d37e5bdccde61a1e9637634230f7a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>th_ack</name>
      <anchorfile>structtcphdr.html</anchorfile>
      <anchor>a8b984173a3ff103c3c837adb5a5ef238</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>th_x2</name>
      <anchorfile>structtcphdr.html</anchorfile>
      <anchor>add14b9c0477556d43460a0e80e9510e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>th_offs</name>
      <anchorfile>structtcphdr.html</anchorfile>
      <anchor>aa816a5351f6bbae0db213c0c7bd2ad21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>th_flags</name>
      <anchorfile>structtcphdr.html</anchorfile>
      <anchor>a281ecf39fbce60f7c07fddb12563a3e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>th_win</name>
      <anchorfile>structtcphdr.html</anchorfile>
      <anchor>a3f3265a73cfb13b8812fea80a499e290</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>th_sum</name>
      <anchorfile>structtcphdr.html</anchorfile>
      <anchor>a6bdf6060cd27fa9674aec9100aa9af04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>th_urp</name>
      <anchorfile>structtcphdr.html</anchorfile>
      <anchor>a9a66677a42d71b35d23ba10d61a84250</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>th_options</name>
      <anchorfile>structtcphdr.html</anchorfile>
      <anchor>a8441e5ad9f2a4882645c7188fc5d533f</anchor>
      <arglist>[0]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPIPchecksum</name>
    <filename>class_t_c_p_i_pchecksum.html</filename>
    <member kind="function">
      <type></type>
      <name>TCPIPchecksum</name>
      <anchorfile>class_t_c_p_i_pchecksum.html</anchorfile>
      <anchor>ad2ad772aa77653ce0c56a29059efe1f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint16_t</type>
      <name>checksum</name>
      <anchorfile>class_t_c_p_i_pchecksum.html</anchorfile>
      <anchor>af66eba27e438ce5dc9dd1dc26f6c828f</anchor>
      <arglist>(const void *addr, unsigned int count)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint16_t</type>
      <name>_checksum</name>
      <anchorfile>class_t_c_p_i_pchecksum.html</anchorfile>
      <anchor>aafe6c38ffa377215c1ddd566157e3c89</anchor>
      <arglist>(const void *addr, unsigned int count)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPMsgBasedRcvQueue</name>
    <filename>class_t_c_p_msg_based_rcv_queue.html</filename>
    <base>TCPVirtualDataRcvQueue</base>
    <member kind="function">
      <type></type>
      <name>TCPMsgBasedRcvQueue</name>
      <anchorfile>class_t_c_p_msg_based_rcv_queue.html</anchorfile>
      <anchor>af8f832c859e596c26c7c8bcde24a27e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPMsgBasedRcvQueue</name>
      <anchorfile>class_t_c_p_msg_based_rcv_queue.html</anchorfile>
      <anchor>a5735e78db98e0ba40b4a792b34296582</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>class_t_c_p_msg_based_rcv_queue.html</anchorfile>
      <anchor>ae289924ebc9c7b9b4aecb283e0e86925</anchor>
      <arglist>(uint32 startSeq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>class_t_c_p_msg_based_rcv_queue.html</anchorfile>
      <anchor>a325fc25951ede88ad561bb540f18269c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>insertBytesFromSegment</name>
      <anchorfile>class_t_c_p_msg_based_rcv_queue.html</anchorfile>
      <anchor>a1ef3021020a378ff3b1e7ec037600307</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>extractBytesUpTo</name>
      <anchorfile>class_t_c_p_msg_based_rcv_queue.html</anchorfile>
      <anchor>ad7704a4fa5bb2a9faf728da118dc1ac9</anchor>
      <arglist>(uint32 seq)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; uint32, cPacket * &gt;</type>
      <name>PayloadList</name>
      <anchorfile>class_t_c_p_msg_based_rcv_queue.html</anchorfile>
      <anchor>aa602014ab87bc73a2194117a84791d41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PayloadList</type>
      <name>payloadList</name>
      <anchorfile>class_t_c_p_msg_based_rcv_queue.html</anchorfile>
      <anchor>a1186e187ffdd0b4ec7918aaf0145fea2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPMsgBasedSendQueue</name>
    <filename>class_t_c_p_msg_based_send_queue.html</filename>
    <base>TCPSendQueue</base>
    <class kind="struct">TCPMsgBasedSendQueue::Payload</class>
    <member kind="function">
      <type></type>
      <name>TCPMsgBasedSendQueue</name>
      <anchorfile>class_t_c_p_msg_based_send_queue.html</anchorfile>
      <anchor>a825708443c5793af0f03091d3b9de5b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPMsgBasedSendQueue</name>
      <anchorfile>class_t_c_p_msg_based_send_queue.html</anchorfile>
      <anchor>a0f90f019fd72a38d899571fde3df69ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>class_t_c_p_msg_based_send_queue.html</anchorfile>
      <anchor>a52bd8710e88e7237f55e25b0279c0875</anchor>
      <arglist>(uint32 startSeq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>class_t_c_p_msg_based_send_queue.html</anchorfile>
      <anchor>ace39e614dd94548a8325cfc72341cae2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enqueueAppData</name>
      <anchorfile>class_t_c_p_msg_based_send_queue.html</anchorfile>
      <anchor>ac926a3c84df79870d64b8e41f662b2cb</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getBufferEndSeq</name>
      <anchorfile>class_t_c_p_msg_based_send_queue.html</anchorfile>
      <anchor>a9eb3ff42a452940baa9eff18ce1b45fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TCPSegment *</type>
      <name>createSegmentWithBytes</name>
      <anchorfile>class_t_c_p_msg_based_send_queue.html</anchorfile>
      <anchor>a7a567c8b65da65321342021a83246aa1</anchor>
      <arglist>(uint32 fromSeq, ulong numBytes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>discardUpTo</name>
      <anchorfile>class_t_c_p_msg_based_send_queue.html</anchorfile>
      <anchor>a8adba4316eb73e75f956062a60774ce5</anchor>
      <arglist>(uint32 seqNum)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; Payload &gt;</type>
      <name>PayloadQueue</name>
      <anchorfile>class_t_c_p_msg_based_send_queue.html</anchorfile>
      <anchor>ab7dd8692a15ab1bed23c2a19653ecb9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PayloadQueue</type>
      <name>payloadQueue</name>
      <anchorfile>class_t_c_p_msg_based_send_queue.html</anchorfile>
      <anchor>a9a3cbc6da08f252ee5ebb1704a3e5b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>begin</name>
      <anchorfile>class_t_c_p_msg_based_send_queue.html</anchorfile>
      <anchor>acb2edfef1e606c653a1f3795f5e1ffbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>end</name>
      <anchorfile>class_t_c_p_msg_based_send_queue.html</anchorfile>
      <anchor>a53af24ecd6af64a4a270725dccfb04c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TCPMsgBasedSendQueue::Payload</name>
    <filename>struct_t_c_p_msg_based_send_queue_1_1_payload.html</filename>
    <member kind="variable">
      <type>unsigned int</type>
      <name>endSequenceNo</name>
      <anchorfile>struct_t_c_p_msg_based_send_queue_1_1_payload.html</anchorfile>
      <anchor>a44babdca64e9e0f43146a2bd80c6d52c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cPacket *</type>
      <name>msg</name>
      <anchorfile>struct_t_c_p_msg_based_send_queue_1_1_payload.html</anchorfile>
      <anchor>a3abf074415c4bbdada600fe431668acd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPNewReno</name>
    <filename>class_t_c_p_new_reno.html</filename>
    <base>TCPTahoeRenoFamily</base>
    <member kind="function">
      <type></type>
      <name>TCPNewReno</name>
      <anchorfile>class_t_c_p_new_reno.html</anchorfile>
      <anchor>acb23ae4ab3711afc51e54b3b0417419d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDataAck</name>
      <anchorfile>class_t_c_p_new_reno.html</anchorfile>
      <anchor>a634da20c5ad064882d2c87f6f5ff1301</anchor>
      <arglist>(uint32 firstSeqAcked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDuplicateAck</name>
      <anchorfile>class_t_c_p_new_reno.html</anchorfile>
      <anchor>a6ce5b0435826f11b9a459b66d7e8aee8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPStateVariables *</type>
      <name>createStateVariables</name>
      <anchorfile>class_t_c_p_new_reno.html</anchorfile>
      <anchor>a75193f4210b82bf2dbfd060f5a5011a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>recalculateSlowStartThreshold</name>
      <anchorfile>class_t_c_p_new_reno.html</anchorfile>
      <anchor>aeb6719d2c5df3c9ed30361f0a7b9e5f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processRexmitTimer</name>
      <anchorfile>class_t_c_p_new_reno.html</anchorfile>
      <anchor>a0ccc1ba18d31b873fab51b8e429aaae1</anchor>
      <arglist>(TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPNewRenoStateVariables *&amp;</type>
      <name>state</name>
      <anchorfile>class_t_c_p_new_reno.html</anchorfile>
      <anchor>ab57dadc3ba2512c9f42123392fa9346e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPNoCongestionControl</name>
    <filename>class_t_c_p_no_congestion_control.html</filename>
    <base>TCPBaseAlg</base>
    <member kind="function">
      <type></type>
      <name>TCPNoCongestionControl</name>
      <anchorfile>class_t_c_p_no_congestion_control.html</anchorfile>
      <anchor>ae1edd6501c4fe6165c30914e020392ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_t_c_p_no_congestion_control.html</anchorfile>
      <anchor>a3d875b56a5442cb63a6b37da45efdc9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDataAck</name>
      <anchorfile>class_t_c_p_no_congestion_control.html</anchorfile>
      <anchor>a9e68b13f66146c853c5032476138a123</anchor>
      <arglist>(uint32 firstSeqAcked)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPStateVariables *</type>
      <name>createStateVariables</name>
      <anchorfile>class_t_c_p_no_congestion_control.html</anchorfile>
      <anchor>ac8fc5b592dcf9c3b76c3808796d7d0d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processRexmitTimer</name>
      <anchorfile>class_t_c_p_no_congestion_control.html</anchorfile>
      <anchor>acce4963470b581797181af3f924a6433</anchor>
      <arglist>(TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPNoCongestionControlStateVariables *&amp;</type>
      <name>state</name>
      <anchorfile>class_t_c_p_no_congestion_control.html</anchorfile>
      <anchor>ac627ac65b1fa76b81bd313f66b0ad26e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPOpenCommand</name>
    <filename>class_t_c_p_open_command.html</filename>
    <base>TCPCommand</base>
    <member kind="function">
      <type></type>
      <name>TCPOpenCommand</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>a37be7f2e513420d469679a1383379bab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCPOpenCommand</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>a2763ad5f559a6a3aa140dcac1e23973e</anchor>
      <arglist>(const TCPOpenCommand &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPOpenCommand</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>a05b6fc705cf8e030bed23e5466e83845</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPOpenCommand &amp;</type>
      <name>operator=</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>ae9f351d66fdc96137c13872fc2a0f8ba</anchor>
      <arglist>(const TCPOpenCommand &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TCPOpenCommand *</type>
      <name>dup</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>a9463ee4686fb2b43e1d59f7a60997bef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>a5560c8316e45ca1b91cfa67b37e16935</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>a4da576210acd33b7f518afb5341b950c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>getLocalAddr</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>a8df2394c15fc7fb872491275d9db03b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>getLocalAddr</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>ae68d8f5be610d12d3ea10a4fbde59469</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLocalAddr</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>a3cb9297d0ab49c12fb76fe0332657cc9</anchor>
      <arglist>(const IPvXAddress &amp;localAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>getRemoteAddr</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>a9e602467cc21c7c3a2ea9aae64f1319e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>getRemoteAddr</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>ad2619b184335c0c3017b4971cc069053</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRemoteAddr</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>a2f78382b7f8f6903f02bc78010b0be32</anchor>
      <arglist>(const IPvXAddress &amp;remoteAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getLocalPort</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>a8d1ced9e8f5355c77266673e7a2fc35f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLocalPort</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>a97b91f17cfb85a4720f53f9a80c8ea88</anchor>
      <arglist>(int localPort_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRemotePort</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>a4d1170bbd04519d8b8f37677ba512f35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRemotePort</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>ab5a26b878674eaf7bc444ab98a307044</anchor>
      <arglist>(int remotePort_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getFork</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>a719c5eb06ab9b7a819285fd2052aac9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFork</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>a115080d54808a67801619a1de8e8b5a0</anchor>
      <arglist>(bool fork_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getSendQueueClass</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>ac93aa56190dd09b5a957043766a057b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSendQueueClass</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>abd8acd50ed31a6023076477817c81d49</anchor>
      <arglist>(const char *sendQueueClass_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getReceiveQueueClass</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>af13ad188ff7db724d703a097cd5827f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReceiveQueueClass</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>aeeb9249e7c8f2abd06e05141c318fb1a</anchor>
      <arglist>(const char *receiveQueueClass_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTcpAlgorithmClass</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>a6405afe94b3bd1915952553a1117e819</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTcpAlgorithmClass</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>a2c2ac07218d36ca719a1283556c56777</anchor>
      <arglist>(const char *tcpAlgorithmClass_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>a939de9a14ae447afa5861ecea216e469</anchor>
      <arglist>(const TCPOpenCommand &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPvXAddress</type>
      <name>localAddr_var</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>aafd6a8d188a49db6a7117fc0babfa33e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPvXAddress</type>
      <name>remoteAddr_var</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>a366afab79aea0d1f3f7eb2f8976148a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>localPort_var</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>ad7696faf9e2678c52802066667e1a265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>remotePort_var</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>ad7c147a0f28f35bfb56859d60868e3b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>fork_var</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>a585435da1f43dd62a8c4fc1ff9e44ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>sendQueueClass_var</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>a424ec873a4a9de9c4638d6868ef8c32a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>receiveQueueClass_var</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>a6752d85193d471aea59c5be6c65837e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>tcpAlgorithmClass_var</name>
      <anchorfile>class_t_c_p_open_command.html</anchorfile>
      <anchor>af52ba62413d4965013523a994017d420</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPOption</name>
    <filename>class_t_c_p_option.html</filename>
    <member kind="function">
      <type></type>
      <name>TCPOption</name>
      <anchorfile>class_t_c_p_option.html</anchorfile>
      <anchor>ae88719b47b3ce7422d2dc0687293ebe1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCPOption</name>
      <anchorfile>class_t_c_p_option.html</anchorfile>
      <anchor>a137610f050762a7a27ad9027ca1c22b5</anchor>
      <arglist>(const TCPOption &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPOption</name>
      <anchorfile>class_t_c_p_option.html</anchorfile>
      <anchor>a4b72ccddc2127b053881446e79fcd505</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPOption &amp;</type>
      <name>operator=</name>
      <anchorfile>class_t_c_p_option.html</anchorfile>
      <anchor>a24eb6aa1ec7281d298e43a0df975c2bc</anchor>
      <arglist>(const TCPOption &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TCPOption *</type>
      <name>dup</name>
      <anchorfile>class_t_c_p_option.html</anchorfile>
      <anchor>afeaf272d2eaf8be70dbbe9c0a1d4e10a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_t_c_p_option.html</anchorfile>
      <anchor>a1079904ca2758b6a88a0709e0b1cefd8</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_t_c_p_option.html</anchorfile>
      <anchor>ae7f628ae6b5fc37eb7fe8f1f10b7e4ea</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getKind</name>
      <anchorfile>class_t_c_p_option.html</anchorfile>
      <anchor>a6238dc83030805e805f4bf1408ea07c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKind</name>
      <anchorfile>class_t_c_p_option.html</anchorfile>
      <anchor>a83b39a10e62a284f6ccea47ecd70fdf6</anchor>
      <arglist>(unsigned short kind_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getLength</name>
      <anchorfile>class_t_c_p_option.html</anchorfile>
      <anchor>aa74ae1e636ad1868f3b00b07c53aeb6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLength</name>
      <anchorfile>class_t_c_p_option.html</anchorfile>
      <anchor>a789b9b31949bedfd5a60f47901b65561</anchor>
      <arglist>(unsigned short length_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValuesArraySize</name>
      <anchorfile>class_t_c_p_option.html</anchorfile>
      <anchor>a21c94907a742e476fa203af4e1d4b6aa</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getValuesArraySize</name>
      <anchorfile>class_t_c_p_option.html</anchorfile>
      <anchor>ab6fdfa2cdc260ae8a42818befcf236a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getValues</name>
      <anchorfile>class_t_c_p_option.html</anchorfile>
      <anchor>a1875afa2640add4375c000c42b6d38d6</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValues</name>
      <anchorfile>class_t_c_p_option.html</anchorfile>
      <anchor>ae3f3c11eeb6511721f6530f081ea6cd1</anchor>
      <arglist>(unsigned int k, unsigned int values_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_t_c_p_option.html</anchorfile>
      <anchor>a921f8fad89e5819ec4abcc4b6998ce9c</anchor>
      <arglist>(const TCPOption &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>kind_var</name>
      <anchorfile>class_t_c_p_option.html</anchorfile>
      <anchor>a36a89064fb90202b461df29569975683</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>length_var</name>
      <anchorfile>class_t_c_p_option.html</anchorfile>
      <anchor>adaca9c7d4ad8c15f3ea852104e9a3e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int *</type>
      <name>values_var</name>
      <anchorfile>class_t_c_p_option.html</anchorfile>
      <anchor>a1e960e59830323119117c571bc0fa3d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>values_arraysize</name>
      <anchorfile>class_t_c_p_option.html</anchorfile>
      <anchor>a098ed7e92812f0ad097e7f403ffd4172</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TCPPayloadMessage</name>
    <filename>struct_t_c_p_payload_message.html</filename>
    <member kind="function">
      <type></type>
      <name>TCPPayloadMessage</name>
      <anchorfile>struct_t_c_p_payload_message.html</anchorfile>
      <anchor>a04defb9b42a3be9fdda14c52442a4669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>endSequenceNo</name>
      <anchorfile>struct_t_c_p_payload_message.html</anchorfile>
      <anchor>a9ac3e2bea98b141d2b548112081053f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::cPacketPtr</type>
      <name>msg</name>
      <anchorfile>struct_t_c_p_payload_message.html</anchorfile>
      <anchor>a9e5b0c0c8c8b66640bfbbdff0b81d03b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPReceiveQueue</name>
    <filename>class_t_c_p_receive_queue.html</filename>
    <member kind="function">
      <type></type>
      <name>TCPReceiveQueue</name>
      <anchorfile>class_t_c_p_receive_queue.html</anchorfile>
      <anchor>abc03f0e2c058d95f46ca82e2f5f43fde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPReceiveQueue</name>
      <anchorfile>class_t_c_p_receive_queue.html</anchorfile>
      <anchor>a0da7ae95fd85fdbbe1acda184db026f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConnection</name>
      <anchorfile>class_t_c_p_receive_queue.html</anchorfile>
      <anchor>a19f45b8c7cc06b456227a67d533218f7</anchor>
      <arglist>(TCPConnection *_conn)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>class_t_c_p_receive_queue.html</anchorfile>
      <anchor>aa830dbb0737de38e3a564aaa806ea99f</anchor>
      <arglist>(uint32 startSeq)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint32</type>
      <name>insertBytesFromSegment</name>
      <anchorfile>class_t_c_p_receive_queue.html</anchorfile>
      <anchor>ac17c031fdec7aa75b656bf7e742a38d2</anchor>
      <arglist>(TCPSegment *tcpseg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cPacket *</type>
      <name>extractBytesUpTo</name>
      <anchorfile>class_t_c_p_receive_queue.html</anchorfile>
      <anchor>abfb833d10d529c1f9fda7d09e3616699</anchor>
      <arglist>(uint32 seq)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint32</type>
      <name>getAmountOfBufferedBytes</name>
      <anchorfile>class_t_c_p_receive_queue.html</anchorfile>
      <anchor>a46f4aa6d8cd91c25275f3997fc3e2e04</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint32</type>
      <name>getAmountOfFreeBytes</name>
      <anchorfile>class_t_c_p_receive_queue.html</anchorfile>
      <anchor>ad40894bf45a33d6e849d0317765bbaa5</anchor>
      <arglist>(uint32 maxRcvBuffer)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint32</type>
      <name>getQueueLength</name>
      <anchorfile>class_t_c_p_receive_queue.html</anchorfile>
      <anchor>a906163ab3363c8f66c60371e61e3fef6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getQueueStatus</name>
      <anchorfile>class_t_c_p_receive_queue.html</anchorfile>
      <anchor>a7427962bd9ff1587e6e56acbbc59e333</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint32</type>
      <name>getLE</name>
      <anchorfile>class_t_c_p_receive_queue.html</anchorfile>
      <anchor>a63808618fe6b4b592302c440414ac093</anchor>
      <arglist>(uint32 fromSeqNum)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint32</type>
      <name>getRE</name>
      <anchorfile>class_t_c_p_receive_queue.html</anchorfile>
      <anchor>a747e434e4b2f48059269f6ba81c6593c</anchor>
      <arglist>(uint32 toSeqNum)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPConnection *</type>
      <name>conn</name>
      <anchorfile>class_t_c_p_receive_queue.html</anchorfile>
      <anchor>ac496574f82ddf8165834fbaa446f2e2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPReno</name>
    <filename>class_t_c_p_reno.html</filename>
    <base>TCPTahoeRenoFamily</base>
    <member kind="function">
      <type></type>
      <name>TCPReno</name>
      <anchorfile>class_t_c_p_reno.html</anchorfile>
      <anchor>a82c2e1fd14a50b861ba508076935ce83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDataAck</name>
      <anchorfile>class_t_c_p_reno.html</anchorfile>
      <anchor>a346296d9fcd3056d1add56d2f03dd391</anchor>
      <arglist>(uint32 firstSeqAcked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDuplicateAck</name>
      <anchorfile>class_t_c_p_reno.html</anchorfile>
      <anchor>adcf0d263e1c1551648ff9b52dff8326f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPStateVariables *</type>
      <name>createStateVariables</name>
      <anchorfile>class_t_c_p_reno.html</anchorfile>
      <anchor>a39d9a09ff1a5768cd8bfea8287b64cba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>recalculateSlowStartThreshold</name>
      <anchorfile>class_t_c_p_reno.html</anchorfile>
      <anchor>a400250f807397650fa3c83c0c46dfd0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processRexmitTimer</name>
      <anchorfile>class_t_c_p_reno.html</anchorfile>
      <anchor>a8200e1aeef42d932ef24f447beaf25f5</anchor>
      <arglist>(TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPRenoStateVariables *&amp;</type>
      <name>state</name>
      <anchorfile>class_t_c_p_reno.html</anchorfile>
      <anchor>a60d68f1a2fe9b22f20441ff850c88f54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPSACKRexmitQueue</name>
    <filename>class_t_c_p_s_a_c_k_rexmit_queue.html</filename>
    <class kind="struct">TCPSACKRexmitQueue::Region</class>
    <member kind="typedef">
      <type>std::list&lt; Region &gt;</type>
      <name>RexmitQueue</name>
      <anchorfile>class_t_c_p_s_a_c_k_rexmit_queue.html</anchorfile>
      <anchor>a781aa79dc8c63e63e3c63862acc2a2e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCPSACKRexmitQueue</name>
      <anchorfile>class_t_c_p_s_a_c_k_rexmit_queue.html</anchorfile>
      <anchor>a0bf1372385f41f2546fccab62c7f9a2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPSACKRexmitQueue</name>
      <anchorfile>class_t_c_p_s_a_c_k_rexmit_queue.html</anchorfile>
      <anchor>a2d307d6697c2059f8e31638254cc6b1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConnection</name>
      <anchorfile>class_t_c_p_s_a_c_k_rexmit_queue.html</anchorfile>
      <anchor>a76c212912f59518e0b05a79c494ac0e2</anchor>
      <arglist>(TCPConnection *_conn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>class_t_c_p_s_a_c_k_rexmit_queue.html</anchorfile>
      <anchor>a342033845eaaf7a565c82fb70718ca0e</anchor>
      <arglist>(uint32 seqNum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getBufferEndSeq</name>
      <anchorfile>class_t_c_p_s_a_c_k_rexmit_queue.html</anchorfile>
      <anchor>aab51c929cca62ab481aebf24ecaff747</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>discardUpTo</name>
      <anchorfile>class_t_c_p_s_a_c_k_rexmit_queue.html</anchorfile>
      <anchor>a07b77209c59eb50fce9751418039ed64</anchor>
      <arglist>(uint32 seqNum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enqueueSentData</name>
      <anchorfile>class_t_c_p_s_a_c_k_rexmit_queue.html</anchorfile>
      <anchor>a6eb4b2c4417dfff97a1734c9a43fca76</anchor>
      <arglist>(uint32 fromSeqNum, uint32 toSeqNum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSackedBit</name>
      <anchorfile>class_t_c_p_s_a_c_k_rexmit_queue.html</anchorfile>
      <anchor>abd0309b9f592a452399c73174bbd94cf</anchor>
      <arglist>(uint32 fromSeqNum, uint32 toSeqNum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getSackedBit</name>
      <anchorfile>class_t_c_p_s_a_c_k_rexmit_queue.html</anchorfile>
      <anchor>af9d8cbda22d7ae05a8d367d69ec23127</anchor>
      <arglist>(uint32 seqNum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getQueueLength</name>
      <anchorfile>class_t_c_p_s_a_c_k_rexmit_queue.html</anchorfile>
      <anchor>ab06b7b8f9c9084d258bc14375a2f3b39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getHighestSackedSeqNum</name>
      <anchorfile>class_t_c_p_s_a_c_k_rexmit_queue.html</anchorfile>
      <anchor>a56303d12ec8a593e9f4f58dabbb79d8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getHighestRexmittedSeqNum</name>
      <anchorfile>class_t_c_p_s_a_c_k_rexmit_queue.html</anchorfile>
      <anchor>a375f04cfa1ff9d8f044864332cc2fbaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>checkRexmitQueueForSackedOrRexmittedSegments</name>
      <anchorfile>class_t_c_p_s_a_c_k_rexmit_queue.html</anchorfile>
      <anchor>a8c83d42828fe0c5477981025d6d105fb</anchor>
      <arglist>(uint32 fromSeq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetSackedBit</name>
      <anchorfile>class_t_c_p_s_a_c_k_rexmit_queue.html</anchorfile>
      <anchor>adfa5c6f04f91b16f9c98258f6ede0052</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetRexmittedBit</name>
      <anchorfile>class_t_c_p_s_a_c_k_rexmit_queue.html</anchorfile>
      <anchor>afe96b5040346953484decf38ab2644e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>class_t_c_p_s_a_c_k_rexmit_queue.html</anchorfile>
      <anchor>ad2f55eea975ad487c30ce421de967424</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getTotalAmountOfSackedBytes</name>
      <anchorfile>class_t_c_p_s_a_c_k_rexmit_queue.html</anchorfile>
      <anchor>a9e3ff65826298ce1b2000bbd0bc04957</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getAmountOfSackedBytes</name>
      <anchorfile>class_t_c_p_s_a_c_k_rexmit_queue.html</anchorfile>
      <anchor>ab41d57345e37e6db6d9e7a0db5ae0580</anchor>
      <arglist>(uint32 seqNum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getNumOfDiscontiguousSacks</name>
      <anchorfile>class_t_c_p_s_a_c_k_rexmit_queue.html</anchorfile>
      <anchor>a54be5e710f72ed92239d5e20b0729b97</anchor>
      <arglist>(uint32 seqNum)</arglist>
    </member>
    <member kind="variable">
      <type>TCPConnection *</type>
      <name>conn</name>
      <anchorfile>class_t_c_p_s_a_c_k_rexmit_queue.html</anchorfile>
      <anchor>a0dcb9791b18a4c26ed38ad6593c2d470</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RexmitQueue</type>
      <name>rexmitQueue</name>
      <anchorfile>class_t_c_p_s_a_c_k_rexmit_queue.html</anchorfile>
      <anchor>a5cc1ca7db78dbb6e1454a87ba62bdd8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>begin</name>
      <anchorfile>class_t_c_p_s_a_c_k_rexmit_queue.html</anchorfile>
      <anchor>a30eef9065593a675b29a696fa7ca3ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>end</name>
      <anchorfile>class_t_c_p_s_a_c_k_rexmit_queue.html</anchorfile>
      <anchor>ac55cc23bb0a9903e374fd66794317ca6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TCPSACKRexmitQueue::Region</name>
    <filename>struct_t_c_p_s_a_c_k_rexmit_queue_1_1_region.html</filename>
    <member kind="variable">
      <type>uint32</type>
      <name>beginSeqNum</name>
      <anchorfile>struct_t_c_p_s_a_c_k_rexmit_queue_1_1_region.html</anchorfile>
      <anchor>a2a7d25202ce45c82ca09b32bc835a3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>endSeqNum</name>
      <anchorfile>struct_t_c_p_s_a_c_k_rexmit_queue_1_1_region.html</anchorfile>
      <anchor>ae0e7f6fcaec76c26389558d394a27930</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>sacked</name>
      <anchorfile>struct_t_c_p_s_a_c_k_rexmit_queue_1_1_region.html</anchorfile>
      <anchor>a6a6f6754b9ffae91b4af96f85e579200</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>rexmitted</name>
      <anchorfile>struct_t_c_p_s_a_c_k_rexmit_queue_1_1_region.html</anchorfile>
      <anchor>ac17a35a422300de0d813d4fb92d00b29</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPSegment</name>
    <filename>class_t_c_p_segment.html</filename>
    <base>TCPSegment_Base</base>
    <member kind="function">
      <type></type>
      <name>TCPSegment</name>
      <anchorfile>class_t_c_p_segment.html</anchorfile>
      <anchor>ae37506cc379857bee755a8d0b6498375</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCPSegment</name>
      <anchorfile>class_t_c_p_segment.html</anchorfile>
      <anchor>ae30971feb1a37bfc8201ec99d86278ba</anchor>
      <arglist>(const TCPSegment &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPSegment</name>
      <anchorfile>class_t_c_p_segment.html</anchorfile>
      <anchor>aca1b2f1aa318071f92d02cc06d858b81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPSegment &amp;</type>
      <name>operator=</name>
      <anchorfile>class_t_c_p_segment.html</anchorfile>
      <anchor>a62c6971da862ba385600b2001fca56bd</anchor>
      <arglist>(const TCPSegment &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TCPSegment *</type>
      <name>dup</name>
      <anchorfile>class_t_c_p_segment.html</anchorfile>
      <anchor>ab88dc4f5628d2b6dfe04de2fa0b53c18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_t_c_p_segment.html</anchorfile>
      <anchor>a3714472c0a7c4ee55aec5f2ac08f8c56</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_t_c_p_segment.html</anchorfile>
      <anchor>ae0ded3c168f1fa400bfe99a135a5dace</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPayloadArraySize</name>
      <anchorfile>class_t_c_p_segment.html</anchorfile>
      <anchor>aa2cd5d571393d842a897c0c86da40863</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPayload</name>
      <anchorfile>class_t_c_p_segment.html</anchorfile>
      <anchor>a636fef262ef122bdf3dd0e34f880b28a</anchor>
      <arglist>(unsigned int k, const TCPPayloadMessage &amp;payload_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getPayloadArraySize</name>
      <anchorfile>class_t_c_p_segment.html</anchorfile>
      <anchor>a6b6bdc4bf4819b125921f35269193100</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TCPPayloadMessage &amp;</type>
      <name>getPayload</name>
      <anchorfile>class_t_c_p_segment.html</anchorfile>
      <anchor>a75ee5add0c7636da84dbeb6fdbde7dc2</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addPayloadMessage</name>
      <anchorfile>class_t_c_p_segment.html</anchorfile>
      <anchor>a7a0e84405cd795856fbb14b6c6264253</anchor>
      <arglist>(cPacket *msg, uint32 endSequenceNo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>removeFirstPayloadMessage</name>
      <anchorfile>class_t_c_p_segment.html</anchorfile>
      <anchor>ac973557518bcaa31f0a867b65cac06e4</anchor>
      <arglist>(uint32 &amp;outEndSequenceNo)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; TCPPayloadMessage &gt;</type>
      <name>payloadList</name>
      <anchorfile>class_t_c_p_segment.html</anchorfile>
      <anchor>a72e130397e65fd14b59034d597246126</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPSegment_Base</name>
    <filename>class_t_c_p_segment___base.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPSegment_Base</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a1300353b07d0265c6101feb5675248bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TCPSegment_Base *</type>
      <name>dup</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>af70c72ff78c361b6cef41ff7d76a17b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>aee6c6d92f04b674ecddc0f9333f092b9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a2a95c5ae9a063ea225cf1b5ebbaae5d4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getSrcPort</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>aca825ab6ff9fc98f52315c36254a66be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcPort</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>aecde52ccc2594bb4820fab0ad6638e7b</anchor>
      <arglist>(unsigned short srcPort_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getDestPort</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a9120715e275fdb4745fa15b300236d9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestPort</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a4f39849c340ca1247b69f1c5cddd08b0</anchor>
      <arglist>(unsigned short destPort_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSequenceNo</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a0dafe41ef5a4306a4106fdb1e22b19e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSequenceNo</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>aaacb6a24b814593e3235b54f851867e3</anchor>
      <arglist>(unsigned int sequenceNo_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getAckNo</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a853ab8ce8acfb5da053fa9ca24592ce8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAckNo</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a6df293ef2d9c30d459c4ae908e652b2d</anchor>
      <arglist>(unsigned int ackNo_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getHeaderLength</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a86df3be69e394a9e805013810c4df1ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHeaderLength</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a93282054b05417ede1e3ef8cb6e5d6e8</anchor>
      <arglist>(unsigned short headerLength_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getUrgBit</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a31028187ac8cf1f844d389b0e56baf8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUrgBit</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a7ffbfdebd9dddd36c2c945a37022c0be</anchor>
      <arglist>(bool urgBit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getAckBit</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a8415708f568387985da223286a9e5bfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAckBit</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>af9be0f84f76f501b7848c76836017eb7</anchor>
      <arglist>(bool ackBit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getPshBit</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a951517b397bea146bb642976521469d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPshBit</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>ab6cffb98923406908d565d9fd94a040e</anchor>
      <arglist>(bool pshBit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRstBit</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a606da99a84d95c74bb1626436b6e5e12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRstBit</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a04290a07e85bde263cc224726089cee5</anchor>
      <arglist>(bool rstBit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getSynBit</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>affebf261c9d4fc303151a484d61d8bb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSynBit</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>ae6ab03cf0b027aa91c0dfae3e92f4099</anchor>
      <arglist>(bool synBit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getFinBit</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>aa7615b353254cbd11ea14f03e80c55f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFinBit</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a626c808550da11fa9ea1bdce32409784</anchor>
      <arglist>(bool finBit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getWindow</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a8ef1b3d7dceadd931a331c121e55c556</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWindow</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a0d07df02626c37974daa8169746bea1d</anchor>
      <arglist>(unsigned short window_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getUrgentPointer</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a03ba1de6fcc042310e77da13885ce0d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUrgentPointer</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a0665205c6976822929a9ced66003235e</anchor>
      <arglist>(unsigned short urgentPointer_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOptionsArraySize</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>accc49a5b6de2480b9efa55f2e889b993</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getOptionsArraySize</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a2db62f2752a3f6a99678227cc5fba74c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TCPOption &amp;</type>
      <name>getOptions</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a2358acbf0a5fdc1b7b27fd972087dca0</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TCPOption &amp;</type>
      <name>getOptions</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a91d4f6ff2d8e111331f9005aeb2c1295</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOptions</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a22be8028757ef2577cbda4a51062d042</anchor>
      <arglist>(unsigned int k, const TCPOption &amp;options_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>getPayloadLength</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a7d9f010b71e3bfa267873ab21195fb73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPayloadLength</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a8572e8a96867e101111e66dfe31dd278</anchor>
      <arglist>(unsigned long payloadLength_var)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPayloadArraySize</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>ae6cd572f9567475eb0eeae7f71707567</anchor>
      <arglist>(unsigned int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getPayloadArraySize</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a6eed79ec982d5daf600e1f7de1b67590</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TCPPayloadMessage &amp;</type>
      <name>getPayload</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a19365e2a79e43e4775f29ca7368ccaab</anchor>
      <arglist>(unsigned int k)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TCPPayloadMessage &amp;</type>
      <name>getPayload</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a359d8ba62410c63441aa1a0fd0fdbda5</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPayload</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a5cb1dedc86d751176bc900649f4adeb5</anchor>
      <arglist>(unsigned int k, const TCPPayloadMessage &amp;payload_var)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>aca882d756235f89c7e598a8e5be93cf2</anchor>
      <arglist>(const TCPSegment_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TCPSegment_Base</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>aa6599ae3dbdd0fcd2b22aa3e0c8816e2</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TCPSegment_Base</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>aadb2bee6fd0e65825535e56302f683b9</anchor>
      <arglist>(const TCPSegment_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TCPSegment_Base &amp;</type>
      <name>operator=</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>ac4658ca40c8d2258a417e4df14a08995</anchor>
      <arglist>(const TCPSegment_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>srcPort_var</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a46613b2ae1d7943734618ba1051e8bc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>destPort_var</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a27f26c60fab6013c2fdf1ae40a98b2b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>sequenceNo_var</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>ac87bf9e00eee17bf67c7066a835fa127</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>ackNo_var</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>af4b3a7ff8e6484fc8c8e95dafcb1fd6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>headerLength_var</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>abb6494ecc4d1dfe27ab24853d79b9547</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>urgBit_var</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a7e3687b3e508a3ed1db3a25ab470a78f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ackBit_var</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a5e5107af93a91a862ae9b841f6173331</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>pshBit_var</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a4d8c66ec8b7dd9724a4d282e3ec86eae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>rstBit_var</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a74ed37a51e0397a05ed443a523e2f4e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>synBit_var</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a183640e58555834c0b0f9823664532ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>finBit_var</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a2a3407afb0cd3de2a82e4d97ee571e4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>window_var</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a11e488aee7c604ee5b1bfdc359ff8e90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>urgentPointer_var</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>ac8cacff973fb960a6ed95b802c5c288c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::TCPOption *</type>
      <name>options_var</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>aad0acf152d19f29713042450f3be9a8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>options_arraysize</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>ad5c6ac4ea5036451d1af5cb540709b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>payloadLength_var</name>
      <anchorfile>class_t_c_p_segment___base.html</anchorfile>
      <anchor>a29e5ff7cd6d68e90e5ac9ef4b26f4a50</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPSendCommand</name>
    <filename>class_t_c_p_send_command.html</filename>
    <base>TCPCommand</base>
    <member kind="function">
      <type></type>
      <name>TCPSendCommand</name>
      <anchorfile>class_t_c_p_send_command.html</anchorfile>
      <anchor>a94cd9f43975b1e71ef240ae0b3e0f619</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCPSendCommand</name>
      <anchorfile>class_t_c_p_send_command.html</anchorfile>
      <anchor>a2aef45ef0b42b96a9f11e12883480c0e</anchor>
      <arglist>(const TCPSendCommand &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPSendCommand</name>
      <anchorfile>class_t_c_p_send_command.html</anchorfile>
      <anchor>a8d69e50f1ccf9415784a8ab7356966b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPSendCommand &amp;</type>
      <name>operator=</name>
      <anchorfile>class_t_c_p_send_command.html</anchorfile>
      <anchor>a23b79d758e08b50607dfd123bbf32821</anchor>
      <arglist>(const TCPSendCommand &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TCPSendCommand *</type>
      <name>dup</name>
      <anchorfile>class_t_c_p_send_command.html</anchorfile>
      <anchor>ab5af15c9f12ee81f35077b9e1442db85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_t_c_p_send_command.html</anchorfile>
      <anchor>a77cf23d9707c4884bb6e093c19289aa2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_t_c_p_send_command.html</anchorfile>
      <anchor>a1739962e0f849f945d2cd8b0d972a91c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_t_c_p_send_command.html</anchorfile>
      <anchor>af72d3acce5288fb4e315f5a33bd54708</anchor>
      <arglist>(const TCPSendCommand &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPSendQueue</name>
    <filename>class_t_c_p_send_queue.html</filename>
    <member kind="function">
      <type></type>
      <name>TCPSendQueue</name>
      <anchorfile>class_t_c_p_send_queue.html</anchorfile>
      <anchor>abbd105628f6d8c8f98651802f9ec5e2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPSendQueue</name>
      <anchorfile>class_t_c_p_send_queue.html</anchorfile>
      <anchor>ac5e078dc641fdbb05866edcf83caadfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConnection</name>
      <anchorfile>class_t_c_p_send_queue.html</anchorfile>
      <anchor>a9e052fb6c65615916039b5e1da8a1abf</anchor>
      <arglist>(TCPConnection *_conn)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>class_t_c_p_send_queue.html</anchorfile>
      <anchor>a3a426364a7ced17955eb6cc3b3cfac2d</anchor>
      <arglist>(uint32 startSeq)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enqueueAppData</name>
      <anchorfile>class_t_c_p_send_queue.html</anchorfile>
      <anchor>a3387c33e121dceb0f14d951559634ad1</anchor>
      <arglist>(cPacket *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint32</type>
      <name>getBufferEndSeq</name>
      <anchorfile>class_t_c_p_send_queue.html</anchorfile>
      <anchor>a1bb1013e8a3df8d76598b1cf3a92246c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>ulong</type>
      <name>getBytesAvailable</name>
      <anchorfile>class_t_c_p_send_queue.html</anchorfile>
      <anchor>a4ebfb56b4bf92aaa69c7092d46e01013</anchor>
      <arglist>(uint32 fromSeq)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TCPSegment *</type>
      <name>createSegmentWithBytes</name>
      <anchorfile>class_t_c_p_send_queue.html</anchorfile>
      <anchor>a46bb6f0e35b67b91e2d3da32ccf07b00</anchor>
      <arglist>(uint32 fromSeq, ulong maxNumBytes)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>discardUpTo</name>
      <anchorfile>class_t_c_p_send_queue.html</anchorfile>
      <anchor>ae04471092e8ddf943c8c938ef1aa9c9f</anchor>
      <arglist>(uint32 seqNum)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPConnection *</type>
      <name>conn</name>
      <anchorfile>class_t_c_p_send_queue.html</anchorfile>
      <anchor>abe170aac31f94b09e8780b1bf63aacb2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPSerializer</name>
    <filename>class_t_c_p_serializer.html</filename>
    <member kind="function">
      <type></type>
      <name>TCPSerializer</name>
      <anchorfile>class_t_c_p_serializer.html</anchorfile>
      <anchor>a1289b1fb0bf01f95de04274629b4b6b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>serialize</name>
      <anchorfile>class_t_c_p_serializer.html</anchorfile>
      <anchor>a72028a325c7858bfe5f563de21e7ad67</anchor>
      <arglist>(const TCPSegment *source, unsigned char *destbuf, unsigned int bufsize)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>serialize</name>
      <anchorfile>class_t_c_p_serializer.html</anchorfile>
      <anchor>aa1000d9342fad9463cd97a2db8fd0e25</anchor>
      <arglist>(const TCPSegment *source, unsigned char *destbuf, unsigned int bufsize, const IPvXAddress &amp;srcIp, const IPvXAddress &amp;destIp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>class_t_c_p_serializer.html</anchorfile>
      <anchor>a2fbcb2043b23f2f6b3acba28444072c5</anchor>
      <arglist>(const unsigned char *srcbuf, unsigned int bufsize, TCPSegment *dest)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint16_t</type>
      <name>checksum</name>
      <anchorfile>class_t_c_p_serializer.html</anchorfile>
      <anchor>ac82cd691d5d3086914a27e6344ca8149</anchor>
      <arglist>(const void *addr, unsigned int count, const IPvXAddress &amp;srcIp, const IPvXAddress &amp;destIp)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPServerThreadBase</name>
    <filename>class_t_c_p_server_thread_base.html</filename>
    <base>TCPSocket::CallbackInterface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>class_t_c_p_server_thread_base.html</anchorfile>
      <anchor>a45612ccfb1de85082414a6b9dd91dd4e</anchor>
      <arglist>(TCPSrvHostApp *hostmodule, TCPSocket *socket)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCPServerThreadBase</name>
      <anchorfile>class_t_c_p_server_thread_base.html</anchorfile>
      <anchor>a7ce6ff424414ff2b147d13002108704e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPServerThreadBase</name>
      <anchorfile>class_t_c_p_server_thread_base.html</anchorfile>
      <anchor>a65886b8225b2dd622be7b68e103e57bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TCPSocket *</type>
      <name>getSocket</name>
      <anchorfile>class_t_c_p_server_thread_base.html</anchorfile>
      <anchor>a4cf95e871fc5d3a9c085594dc46b16fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TCPSrvHostApp *</type>
      <name>getHostModule</name>
      <anchorfile>class_t_c_p_server_thread_base.html</anchorfile>
      <anchor>a503768018b12606bdde8347970a4f7f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleAt</name>
      <anchorfile>class_t_c_p_server_thread_base.html</anchorfile>
      <anchor>a5b05613a2c7f3f56b20c380e2ef1afe0</anchor>
      <arglist>(simtime_t t, cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cancelEvent</name>
      <anchorfile>class_t_c_p_server_thread_base.html</anchorfile>
      <anchor>a0cda386694f23cf08fca9f6c509e4856</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>established</name>
      <anchorfile>class_t_c_p_server_thread_base.html</anchorfile>
      <anchor>a74fc9562012ce7939718855672791e32</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dataArrived</name>
      <anchorfile>class_t_c_p_server_thread_base.html</anchorfile>
      <anchor>a80c310e780ed740cae9c4e2bc035549b</anchor>
      <arglist>(cMessage *msg, bool urgent)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>timerExpired</name>
      <anchorfile>class_t_c_p_server_thread_base.html</anchorfile>
      <anchor>a050633116c40e7a5750f365e7e0760c0</anchor>
      <arglist>(cMessage *timer)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>peerClosed</name>
      <anchorfile>class_t_c_p_server_thread_base.html</anchorfile>
      <anchor>a9c12c90cb78db9c47de6aed0a324c370</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>closed</name>
      <anchorfile>class_t_c_p_server_thread_base.html</anchorfile>
      <anchor>af1b358bcab595476d4a9c0d2ec3c46c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>failure</name>
      <anchorfile>class_t_c_p_server_thread_base.html</anchorfile>
      <anchor>aba2f098aac069c09f2e2ed1e59a91d95</anchor>
      <arglist>(int code)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>statusArrived</name>
      <anchorfile>class_t_c_p_server_thread_base.html</anchorfile>
      <anchor>a058fd3a1784d4877b5dd498e537221d5</anchor>
      <arglist>(TCPStatusInfo *status)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketDataArrived</name>
      <anchorfile>class_t_c_p_server_thread_base.html</anchorfile>
      <anchor>a68bff0c6da664d286433bf6ab78feae9</anchor>
      <arglist>(int, void *, cPacket *msg, bool urgent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketEstablished</name>
      <anchorfile>class_t_c_p_server_thread_base.html</anchorfile>
      <anchor>af52975483ab29fbc7b2b81843f19ccd5</anchor>
      <arglist>(int, void *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketPeerClosed</name>
      <anchorfile>class_t_c_p_server_thread_base.html</anchorfile>
      <anchor>a026281fd182e3caec7c8d65b2ba0a573</anchor>
      <arglist>(int, void *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketClosed</name>
      <anchorfile>class_t_c_p_server_thread_base.html</anchorfile>
      <anchor>a21cf7cb430b6a1dc42be9f16acf98198</anchor>
      <arglist>(int, void *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketFailure</name>
      <anchorfile>class_t_c_p_server_thread_base.html</anchorfile>
      <anchor>a182641b5bb6c749453ee73bb909abd1d</anchor>
      <arglist>(int, void *, int code)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketStatusArrived</name>
      <anchorfile>class_t_c_p_server_thread_base.html</anchorfile>
      <anchor>a03fe224e5fec85d7fec636016ec4d7f5</anchor>
      <arglist>(int, void *, TCPStatusInfo *status)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPSrvHostApp *</type>
      <name>hostmod</name>
      <anchorfile>class_t_c_p_server_thread_base.html</anchorfile>
      <anchor>a698b9f8a195fb9f20585f6e567a9d757</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPSocket *</type>
      <name>sock</name>
      <anchorfile>class_t_c_p_server_thread_base.html</anchorfile>
      <anchor>a3d0a6b60b9d37b302bd23369f7669562</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPSessionApp</name>
    <filename>class_t_c_p_session_app.html</filename>
    <class kind="struct">TCPSessionApp::Command</class>
    <member kind="function">
      <type></type>
      <name>TCPSessionApp</name>
      <anchorfile>class_t_c_p_session_app.html</anchorfile>
      <anchor>a75b924a8132a34ec0de1c95923589dd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; Command &gt;</type>
      <name>CommandVector</name>
      <anchorfile>class_t_c_p_session_app.html</anchorfile>
      <anchor>adbb338ea9ed57db1afe0afc714213f49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>parseScript</name>
      <anchorfile>class_t_c_p_session_app.html</anchorfile>
      <anchor>a2feb6a292b602de9dd024f4a11dc4dae</anchor>
      <arglist>(const char *script)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>waitUntil</name>
      <anchorfile>class_t_c_p_session_app.html</anchorfile>
      <anchor>ad2cd13fcf593937ddc5aae21e23a8863</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>count</name>
      <anchorfile>class_t_c_p_session_app.html</anchorfile>
      <anchor>ac22e385e6b4266a79985106d76220b25</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>activity</name>
      <anchorfile>class_t_c_p_session_app.html</anchorfile>
      <anchor>a50ce3283f93c8dc71e3f4e376c2e188a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_t_c_p_session_app.html</anchorfile>
      <anchor>a5d6db03cd8289a19259dcd10f0818fcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CommandVector</type>
      <name>commands</name>
      <anchorfile>class_t_c_p_session_app.html</anchorfile>
      <anchor>acf86d8079cc93d4594731b13c39c9103</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPSocket</type>
      <name>socket</name>
      <anchorfile>class_t_c_p_session_app.html</anchorfile>
      <anchor>a55a92d49a26d25005e1dd7f95273eaa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>packetsRcvd</name>
      <anchorfile>class_t_c_p_session_app.html</anchorfile>
      <anchor>a71b91435d340dee9d9906fe3b20e8521</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bytesRcvd</name>
      <anchorfile>class_t_c_p_session_app.html</anchorfile>
      <anchor>ae4a92bcbfbad31b4711176384c62a8a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>indicationsRcvd</name>
      <anchorfile>class_t_c_p_session_app.html</anchorfile>
      <anchor>a199d09c7d98eb8960844294a7dc83177</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TCPSessionApp::Command</name>
    <filename>struct_t_c_p_session_app_1_1_command.html</filename>
    <member kind="variable">
      <type>simtime_t</type>
      <name>tSend</name>
      <anchorfile>struct_t_c_p_session_app_1_1_command.html</anchorfile>
      <anchor>ade1d67d0fb6e7e669b517e741cd093a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numBytes</name>
      <anchorfile>struct_t_c_p_session_app_1_1_command.html</anchorfile>
      <anchor>a7423dd908ac6922a7f4f4222dbdc9ca9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPSinkApp</name>
    <filename>class_t_c_p_sink_app.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_t_c_p_sink_app.html</anchorfile>
      <anchor>ab905022af6cf30954d5873f8db9bb366</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_t_c_p_sink_app.html</anchorfile>
      <anchor>a916a3a03f72853a962228e90b978b86e</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_t_c_p_sink_app.html</anchorfile>
      <anchor>ac86168058fc5a64e4b99cb295424d3cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>bytesRcvd</name>
      <anchorfile>class_t_c_p_sink_app.html</anchorfile>
      <anchor>a94ace021929fa23192cd14cbca0307b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPSocket</name>
    <filename>class_t_c_p_socket.html</filename>
    <class kind="class">TCPSocket::CallbackInterface</class>
    <member kind="enumeration">
      <name>State</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a67a345df44f8b47c59c59cca81c9f7f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_BOUND</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a67a345df44f8b47c59c59cca81c9f7f9a7561046a9bf0caa53ef02ed18463bc1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOUND</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a67a345df44f8b47c59c59cca81c9f7f9ad528703c62d4506ad8d5c792c1a2d80e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LISTENING</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a67a345df44f8b47c59c59cca81c9f7f9a5b1f07ee7c11d63646611a946938f0a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTING</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a67a345df44f8b47c59c59cca81c9f7f9adbfef625d051cf46cc9bce5c863ce9cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTED</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a67a345df44f8b47c59c59cca81c9f7f9a45c2bba31a1f55997af51b27d0df4d72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PEER_CLOSED</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a67a345df44f8b47c59c59cca81c9f7f9ad5e99eaf13de06d20604328336e8cff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOCALLY_CLOSED</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a67a345df44f8b47c59c59cca81c9f7f9a47f5cd15e94453a97d2712377fc07024</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CLOSED</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a67a345df44f8b47c59c59cca81c9f7f9a975ddc2a29b2b790760129d4e64a7232</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKERROR</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a67a345df44f8b47c59c59cca81c9f7f9a4e298baef9356d90976cd776ae85b0ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCPSocket</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a7a50427a401d1a6f3209d51818bad901</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCPSocket</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a49c16ef10e6f6f559d3bb023d383ca7a</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TCPSocket</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>af357e6923a0f8adbbb8e46fab4523991</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getConnectionId</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a947e26ea729845fb38d328a4f24587f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getState</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a30566319602bc7f14e3a47c85f344864</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPvXAddress</type>
      <name>getLocalAddress</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a0fd1aabdc8119148bc8ed93210212fb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalPort</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a036adf47ecc6767db3eaf7f1ef8d6095</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPvXAddress</type>
      <name>getRemoteAddress</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a0ac232127ecca9558ca205db643cf347</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRemotePort</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>ae149299895b96811bcbc17519cb7df8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutputGate</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>ab6563d5ef32687b2072e5c08317ba519</anchor>
      <arglist>(cGate *toTcp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a2c4f6131103b0c9773728d706140aa0d</anchor>
      <arglist>(int localPort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>ade3618ad13d0a8916880684a9d25bbdb</anchor>
      <arglist>(IPvXAddress localAddr, int localPort)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSendQueueClass</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>acfe486bebc47616d0ab48f1570abc245</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getReceiveQueueClass</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a0cd4404c02726dc42420de82fafa8440</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTCPAlgorithmClass</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>acd19fae8bb29b250ea41a3323f70365a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSendQueueClass</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a1d47c7f36b37b7606ece0cfeb806e18d</anchor>
      <arglist>(const char *sendQueueClass)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReceiveQueueClass</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a80b08b5d5627aae7f3b78525372add98</anchor>
      <arglist>(const char *receiveQueueClass)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTCPAlgorithmClass</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>aba435b5be167b33e7146ed208431a60e</anchor>
      <arglist>(const char *tcpAlgorithmClass)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>listen</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a05985b1f9e020debd5f1a44ccd0e7991</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>listenOnce</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a900ee5910a87820974c305a5760cd286</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a7223e3a9189b0b156516d84c188cea6d</anchor>
      <arglist>(IPvXAddress remoteAddr, int remotePort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a5bd53af740d4cde0d5460fdf481e7a7a</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>ae64f7db5484a7f057446ac3c906629c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abort</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a76285d179a3685c5920db3a3241465ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>requestStatus</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>ae0fd83522de57789be73b1bbc52781ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renewSocket</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a6502c2db688d81049c67c0a028197929</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>stateName</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>af106166df336536cb233a6e239c1c04b</anchor>
      <arglist>(int state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToTCP</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>aa48fbce73e85cb86d786019980420699</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>listen</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>abfd870650b679461fa75fbe473c89d30</anchor>
      <arglist>(bool fork)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>connId</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>aeeb6754061d9d4bc1296723b363fbfe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sockstate</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>afe42c83af84ac6f1661a3c91787b334a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>localAddr</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a8ffa585d51f6ce1f4103b078fe7d4c1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>localPrt</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>ae54ae8865d031d527dd54252937cb036</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>remoteAddr</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a68960684a906622991501e3bf15bd1f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>remotePrt</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a3241a6fad2f9190f668eae9557380607</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CallbackInterface *</type>
      <name>cb</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a62094cb87820675d6cd0b52b47ac2383</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>yourPtr</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>aea9d0cc7ed3d5ea53b63cae0d2a4358e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cGate *</type>
      <name>gateToTcp</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>ad7f27cfb808da9d78120859f22927d14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>sendQueueClass</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a11c63de1168c8d7f76a4394894e9d3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>receiveQueueClass</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>ac35e05b9302f020a7e6c85531f84b21d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>tcpAlgorithmClass</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>ab3b5b03b34c2dc42f0d2695624dab1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>belongsToSocket</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a1ab8458dccdc9dd2ca700e357f367868</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCallbackObject</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a5aa6b7b21ebe1f98801eade44e0de8eb</anchor>
      <arglist>(CallbackInterface *cb, void *yourPtr=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processMessage</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a5a4c2dd02c72e3cb0115a0490f408f07</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>belongsToAnyTCPSocket</name>
      <anchorfile>class_t_c_p_socket.html</anchorfile>
      <anchor>a7f667dbc91dbbddbc7d1e5b48dfe9bf3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPSocket::CallbackInterface</name>
    <filename>class_t_c_p_socket_1_1_callback_interface.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CallbackInterface</name>
      <anchorfile>class_t_c_p_socket_1_1_callback_interface.html</anchorfile>
      <anchor>aa4a419d22decd91064162819e982bd1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>socketDataArrived</name>
      <anchorfile>class_t_c_p_socket_1_1_callback_interface.html</anchorfile>
      <anchor>ae4fe36908e06127f0fe32454e63287f9</anchor>
      <arglist>(int connId, void *yourPtr, cPacket *msg, bool urgent)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>socketEstablished</name>
      <anchorfile>class_t_c_p_socket_1_1_callback_interface.html</anchorfile>
      <anchor>a9465870ddf580bea5b18c069d609fec2</anchor>
      <arglist>(int connId, void *yourPtr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>socketPeerClosed</name>
      <anchorfile>class_t_c_p_socket_1_1_callback_interface.html</anchorfile>
      <anchor>a77899a66e256304949deb2bfd7d820c7</anchor>
      <arglist>(int connId, void *yourPtr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>socketClosed</name>
      <anchorfile>class_t_c_p_socket_1_1_callback_interface.html</anchorfile>
      <anchor>a9a4049a13ace6e455d62c744ec7bf35e</anchor>
      <arglist>(int connId, void *yourPtr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>socketFailure</name>
      <anchorfile>class_t_c_p_socket_1_1_callback_interface.html</anchorfile>
      <anchor>af4fc128f905d181c511114849d0b8da1</anchor>
      <arglist>(int connId, void *yourPtr, int code)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>socketStatusArrived</name>
      <anchorfile>class_t_c_p_socket_1_1_callback_interface.html</anchorfile>
      <anchor>a8299015159dbe4f70075d1a2e4ed2407</anchor>
      <arglist>(int connId, void *yourPtr, TCPStatusInfo *status)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPSocketMap</name>
    <filename>class_t_c_p_socket_map.html</filename>
    <member kind="function">
      <type></type>
      <name>TCPSocketMap</name>
      <anchorfile>class_t_c_p_socket_map.html</anchorfile>
      <anchor>ad3b464e887d1fabfcaa339fa123a7164</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TCPSocketMap</name>
      <anchorfile>class_t_c_p_socket_map.html</anchorfile>
      <anchor>a04020edfc732d2d624f84969f5582d96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPSocket *</type>
      <name>findSocketFor</name>
      <anchorfile>class_t_c_p_socket_map.html</anchorfile>
      <anchor>ad96c686c0e0536b8b8e279728a53b17e</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSocket</name>
      <anchorfile>class_t_c_p_socket_map.html</anchorfile>
      <anchor>ac19937a0e8bd2dfcda6e7f831b835fd8</anchor>
      <arglist>(TCPSocket *socket)</arglist>
    </member>
    <member kind="function">
      <type>TCPSocket *</type>
      <name>removeSocket</name>
      <anchorfile>class_t_c_p_socket_map.html</anchorfile>
      <anchor>a0f564f7476d55d899fe236852e6baa49</anchor>
      <arglist>(TCPSocket *socket)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>class_t_c_p_socket_map.html</anchorfile>
      <anchor>aba507c7eed348ab84b8db8eff54feda7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteSockets</name>
      <anchorfile>class_t_c_p_socket_map.html</anchorfile>
      <anchor>a599a1adc3e290473676194faf139a5a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; int, TCPSocket * &gt;</type>
      <name>SocketMap</name>
      <anchorfile>class_t_c_p_socket_map.html</anchorfile>
      <anchor>ae1a4841f279c74f284d17b636a75577c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SocketMap</type>
      <name>socketMap</name>
      <anchorfile>class_t_c_p_socket_map.html</anchorfile>
      <anchor>ac03a97d8dc4fedd6a2dcf4fa9caa3823</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPSpoof</name>
    <filename>class_t_c_p_spoof.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToIP</name>
      <anchorfile>class_t_c_p_spoof.html</anchorfile>
      <anchor>a3215bff65db3e0302b4f3e306d8c3256</anchor>
      <arglist>(TCPSegment *tcpseg, IPvXAddress src, IPvXAddress dest)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>chooseInitialSeqNum</name>
      <anchorfile>class_t_c_p_spoof.html</anchorfile>
      <anchor>a78f31f8ff0f39d2b94c0546e60808f5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendSpoofPacket</name>
      <anchorfile>class_t_c_p_spoof.html</anchorfile>
      <anchor>a6635347f610e322c23863bcf10321a67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_t_c_p_spoof.html</anchorfile>
      <anchor>a44b7906237122a0d6c4885f158408f3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_t_c_p_spoof.html</anchorfile>
      <anchor>a1000e29a4fd64d191e0c237010540a42</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPSrvHostApp</name>
    <filename>class_t_c_p_srv_host_app.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeThread</name>
      <anchorfile>class_t_c_p_srv_host_app.html</anchorfile>
      <anchor>a41fcfed2e806e0cba1660fe6792e64a9</anchor>
      <arglist>(TCPServerThreadBase *thread)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_t_c_p_srv_host_app.html</anchorfile>
      <anchor>a7bc07bd453f43e46780b6628f280799a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_t_c_p_srv_host_app.html</anchorfile>
      <anchor>a63785a7d60da44c89b2a97d36069b51e</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_t_c_p_srv_host_app.html</anchorfile>
      <anchor>a552aa8f631f8157f21b52190107614be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDisplay</name>
      <anchorfile>class_t_c_p_srv_host_app.html</anchorfile>
      <anchor>a26210421b7fa06fa329ae86a550d1244</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPSocket</type>
      <name>serverSocket</name>
      <anchorfile>class_t_c_p_srv_host_app.html</anchorfile>
      <anchor>ad793dc53afce3f48b59bbc0e97ca740e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPSocketMap</type>
      <name>socketMap</name>
      <anchorfile>class_t_c_p_srv_host_app.html</anchorfile>
      <anchor>a08d58c9e05abe383547b5df56f756a0f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPStateVariables</name>
    <filename>class_t_c_p_state_variables.html</filename>
    <member kind="function">
      <type></type>
      <name>TCPStateVariables</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>af21b92495e152e5ab984476457fdc75c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a93fbf3558fe0e1dfa27bdbab25c36aff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a28c2c961663d8cf69e19b64cb129b40e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>active</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a4341a40e233610fbf989e373e450a08d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>fork</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a8762f606d8dd51286d61ebbe833df932</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>snd_mss</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a2d9952d560079e7a0cf44f2308ac564f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>snd_una</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a3a8a7f455c793cf894e22d4d72dbdc93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>snd_nxt</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a8bd36330faab4393bbb4c56e89d140a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>snd_max</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a220683addcd800e00fc59f348b40cff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>snd_wnd</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>aef29087f473f09bfb53eca0f652386d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>snd_up</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a380d1be36964eb83f3d98d24562b92f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>snd_wl1</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>ab7f05bfa1049d2d26d5c1f53846c0512</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>snd_wl2</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a682afef29243955b62b8d963faf83638</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>iss</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a68394945e99768afc131310ce6a37ea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>rcv_nxt</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a5b9de18a3fb71fab5a540f98173b12b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>rcv_wnd</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>aad67fe91f8983d1769877b559a0e9d00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>rcv_up</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>ae9646df9e0e50b7f04a5898929a78aed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>irs</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a3263aa617c113523e9459db081cf3208</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>rcv_adv</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a3ff9c29dc3db01ad50308f6e0f917cb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>syn_rexmit_count</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>abfce4d61e489f5c73d2f73aa072814e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>syn_rexmit_timeout</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a1bad9ac8364085b574ef441748c2e723</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>fin_ack_rcvd</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>ac70666b0903dcc4bb0c76e4e3ddd64cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>send_fin</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a0401bd2db76f20ea6141550db9ae4d61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>snd_fin_seq</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a20daa063530e578155124d9f9e4626f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>fin_rcvd</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a32121c2fcf9d110150db1588cafa595a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>rcv_fin_seq</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a1259e7450282a5b49755ea64b538a724</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>nagle_enabled</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>ad0a43b2fd46e7659e79c3cfd90c926a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>delayed_acks_enabled</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a43536d5fd1e75c068cbcfe4ccf8fc79d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>limited_transmit_enabled</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a406b24dd2a997eae7618c762dfe2e48d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>increased_IW_enabled</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a7c3d5a7916b1d457f6065c488684d1d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>full_sized_segment_counter</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a5d47c2c046bb9fe704be153bb0731e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>ack_now</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>ac945d97e6a37246ca8cf3648e01a8a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>afterRto</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>abff94bf9ec66bdbde487a74849de721e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>sack_support</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a25835ffc35b7d02038a899a25657870b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>sack_enabled</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a47c0467054bd0209efc992c63d5d4d04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>snd_sack_perm</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a5db0ff74ca0d19891ca3c7e02f99d9a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>rcv_sack_perm</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>abd85c9f0a5e0769ae58e357f11e541fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>start_seqno</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>aa65590b4103c7d29454d8ea5b3a781c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>end_seqno</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>ab59f15cb0300b2bb025186468e7a03a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>snd_sack</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>ad03a121385224b940565040fe9eb433a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>snd_dsack</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a8a15484ad9b2724916935eab69c6693f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Sack</type>
      <name>sacks_array</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>adf151c2f3284a3f4847fade882886400</anchor>
      <arglist>[MAX_SACK_BLOCKS]</arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>highRxt</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a9162bd39de68566f78ab0946fac613e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>pipe</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a3c0e8d7110b3fdb2a5d2de5314a2c987</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>recoveryPoint</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a4bf93e62de5a888f200f3bce908913af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>sackedBytes</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a22c51e4c43cf036417d95e3584a616ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>sackedBytes_old</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>afc44bbf1e92ac47b7ef4ed4158af9a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>lossRecovery</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a69fd5385780f1352abd11bbbc2c2c2ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>dupacks</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>ae3ddd98e68751df8e6a8f4c0c7081f28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>snd_sacks</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a0af59887792b19719cace81e44089eed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>rcv_sacks</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a89f41e684a082c84539dc4876bca0322</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>rcv_oooseg</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a2297a0a5817443e592d2770ec016b0a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>maxRcvBuffer</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>af4c6ad2cfc1d77875d1d2e049e77d50d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>usedRcvBuffer</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a3cb8ed26db2dbc9c3821a199354367ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>freeRcvBuffer</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a0a9bd82033191de60a5bc5b3915ba8ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>tcpRcvQueueDrops</name>
      <anchorfile>class_t_c_p_state_variables.html</anchorfile>
      <anchor>a47f5ceae81f976297ea36112eb36c133</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPStatusInfo</name>
    <filename>class_t_c_p_status_info.html</filename>
    <base>TCPCommand</base>
    <member kind="function">
      <type></type>
      <name>TCPStatusInfo</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a5ff079657252b69fe7437bc329404192</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCPStatusInfo</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>addc2c5e1c12104f5eeb61497fe4bd9fa</anchor>
      <arglist>(const TCPStatusInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPStatusInfo</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>abf4f6118daa819e4cb46dbc80055c89b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPStatusInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a69c40ee8053b422e1d92c0a2628f8c0a</anchor>
      <arglist>(const TCPStatusInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TCPStatusInfo *</type>
      <name>dup</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a8d46c6460f685a0f25724c6242331f66</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a833d8940b4d50d4e9f232856d4d0bf50</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a957eb442970546105ff7a480f36c14fd</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getState</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a0b27f43d39330202697345b9a3196feb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setState</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a9d53ae33cb699b56e6653f05fbbe39ad</anchor>
      <arglist>(int state_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getStateName</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a932630391592c669cda6a3603f022af2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStateName</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a4b75cddbe2115eaee18b201848cf8809</anchor>
      <arglist>(const char *stateName_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>getLocalAddr</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>ab7b48445d78c001f5ec49887ef5e2c30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>getLocalAddr</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>ac4c12a5bdb18cd92ba49d851f9c8abbc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLocalAddr</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>aa9b66d12f0fd12fe1d624bf3c3a086c9</anchor>
      <arglist>(const IPvXAddress &amp;localAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>getRemoteAddr</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a1523d7aaf06c79492ec94f47a4ce2503</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>getRemoteAddr</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>afed4e786c129ef4353c480fe27ac9124</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRemoteAddr</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>ab724afec9a98a1e8b97aecd215532d09</anchor>
      <arglist>(const IPvXAddress &amp;remoteAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getLocalPort</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>ae7b43bc6cec672cf1fe66a0fe569c9df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLocalPort</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a2c331b96b3d2b5985c68acc34e0491b2</anchor>
      <arglist>(int localPort_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRemotePort</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a022918fc693d9b458b5f72a34391d27b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRemotePort</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a563ff999e1ebd3d676bb9b39ae149dc8</anchor>
      <arglist>(int remotePort_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSnd_mss</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>aeac3674d0bd26eaab577ba22238465b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSnd_mss</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a8269ea89d5873e8b621af318edb66e6e</anchor>
      <arglist>(unsigned int snd_mss_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSnd_una</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a87eaa1278f8168f17396120f33ab75e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSnd_una</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>aaf950a6e099525bd6fda884422b3f946</anchor>
      <arglist>(unsigned int snd_una_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSnd_nxt</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a443ad2d259a129f55e1721d77a5eaa98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSnd_nxt</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a87a0e0d0851d4177adb4a36b143f5910</anchor>
      <arglist>(unsigned int snd_nxt_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSnd_max</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a07867ef50b3a79219c7f09c7374b10db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSnd_max</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a8d7c02804ac7faff3875f25077cc5706</anchor>
      <arglist>(unsigned int snd_max_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSnd_wnd</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>aaee5450acd1a6e356f6031b232d45ccf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSnd_wnd</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>abf6e868184dd0bb7ede4fe38967249ce</anchor>
      <arglist>(unsigned int snd_wnd_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSnd_up</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a4482064bd15d846f0db2cc9112bec7e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSnd_up</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a147a1dfd66eb3febea9c3b319fee33c3</anchor>
      <arglist>(unsigned int snd_up_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSnd_wl1</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a6082ca0bfbae4508c619471c5be2a8b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSnd_wl1</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a7590a55627be6e6d881c879da9ca5c8e</anchor>
      <arglist>(unsigned int snd_wl1_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSnd_wl2</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a019bd65a2b8464f49b33bca85cf31512</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSnd_wl2</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a9188adae28c390fba8db3f50518fb476</anchor>
      <arglist>(unsigned int snd_wl2_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getIss</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>ab476a0f42d382388ff2afd7a07d5fb70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIss</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a0634c9ecc358eca78ae06588b1fcf590</anchor>
      <arglist>(unsigned int iss_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getRcv_nxt</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a54ff5b3c2c4c569ed4adb2051250b010</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRcv_nxt</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a51a3f75bdab906d74e9d40ecf3463fd6</anchor>
      <arglist>(unsigned int rcv_nxt_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getRcv_wnd</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>ae11c41c2d224cecdcc4a4bfe18fd96fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRcv_wnd</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>af48c361b81087bce015098c7f1d599a6</anchor>
      <arglist>(unsigned int rcv_wnd_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getRcv_up</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>ab6cd89f8796773dcc6bf77f82fd0d8a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRcv_up</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a5a3fde4159c8c44c6e13e70358241c57</anchor>
      <arglist>(unsigned int rcv_up_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getIrs</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a5904455b31d2d34e34757d98dd3d47d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIrs</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>aadbf506809640cf65edc754fa1530708</anchor>
      <arglist>(unsigned int irs_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getFin_ack_rcvd</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a70a93dd590e2334f4fbd136d95e70a49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFin_ack_rcvd</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>ad192278807282716a1a7567856d48605</anchor>
      <arglist>(bool fin_ack_rcvd_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a09bb60e2120f782b81bbf87a3913c1cf</anchor>
      <arglist>(const TCPStatusInfo &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>state_var</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>aaa8cf741b8b185a9f8359cdbf14eab4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>stateName_var</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a970dbd1cbc4897b540da2069abb1678d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPvXAddress</type>
      <name>localAddr_var</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a6e94c260bb20bdac212d2275c67ac90f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPvXAddress</type>
      <name>remoteAddr_var</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a03b2709358c1a5c78be25c568b333d04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>localPort_var</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a481e6696960299be862ac23a93908978</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>remotePort_var</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>abddaa7b1304c23886a1f11bde98bd0e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>snd_mss_var</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>ad849ac814221091a8cadf1ec0969cb8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>snd_una_var</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a3c35d0e9e218c87655cb87868c1e1721</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>snd_nxt_var</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>acf3bd22b0b9f163a14504de06c8e3e7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>snd_max_var</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>aa21addbe803e98d7a464caed87915976</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>snd_wnd_var</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>aa40cb96924578b2dc0aff99d1fb94fbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>snd_up_var</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a40bb488ab3dbb9944a5ccd27f0ec51d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>snd_wl1_var</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>aeb891a60cee7b25c70172d10d438ae43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>snd_wl2_var</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>af224865a1ebb283b5f74c6da63ff3d07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>iss_var</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a06e99b9fd7b42a22bcb9b65a38c36318</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rcv_nxt_var</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>adfd1b3c39e2befe46196ebfa8506d3a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rcv_wnd_var</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>a12d14cccdc5a10675e13f89609258235</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rcv_up_var</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>aa663b03aac7fab986c53ae7adb3e2bb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>irs_var</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>af6d3aeed08616cba4f8b82d444d2eafa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>fin_ack_rcvd_var</name>
      <anchorfile>class_t_c_p_status_info.html</anchorfile>
      <anchor>ade1daf50e30f0084b8e02a10c44b8141</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPTahoe</name>
    <filename>class_t_c_p_tahoe.html</filename>
    <base>TCPTahoeRenoFamily</base>
    <member kind="function">
      <type></type>
      <name>TCPTahoe</name>
      <anchorfile>class_t_c_p_tahoe.html</anchorfile>
      <anchor>a5a64fe0d3a6fbc4d3023ddbd44fb57c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDataAck</name>
      <anchorfile>class_t_c_p_tahoe.html</anchorfile>
      <anchor>ab0f1ac1b45b76e45ad5b0ff24faaac80</anchor>
      <arglist>(uint32 firstSeqAcked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDuplicateAck</name>
      <anchorfile>class_t_c_p_tahoe.html</anchorfile>
      <anchor>a5c9cd2ff02da7ddc8c1578b0e6a81236</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPStateVariables *</type>
      <name>createStateVariables</name>
      <anchorfile>class_t_c_p_tahoe.html</anchorfile>
      <anchor>a1201982938120547dbf4c1233755996a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>recalculateSlowStartThreshold</name>
      <anchorfile>class_t_c_p_tahoe.html</anchorfile>
      <anchor>a2bcfd7100334e5ee3df7a4df4eefae28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processRexmitTimer</name>
      <anchorfile>class_t_c_p_tahoe.html</anchorfile>
      <anchor>a7e4ea81dbdbfd0eb8321ccf653a6eb00</anchor>
      <arglist>(TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPTahoeStateVariables *&amp;</type>
      <name>state</name>
      <anchorfile>class_t_c_p_tahoe.html</anchorfile>
      <anchor>ab9e381bb2b273e372fbf2a701f0f1004</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPTahoeRenoFamily</name>
    <filename>class_t_c_p_tahoe_reno_family.html</filename>
    <base>TCPBaseAlg</base>
    <member kind="function">
      <type></type>
      <name>TCPTahoeRenoFamily</name>
      <anchorfile>class_t_c_p_tahoe_reno_family.html</anchorfile>
      <anchor>a6f9f3227fcc7e429f8b206e93f6e908c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPTahoeRenoFamilyStateVariables *&amp;</type>
      <name>state</name>
      <anchorfile>class_t_c_p_tahoe_reno_family.html</anchorfile>
      <anchor>a55124a30f4315fd87a0fba1ff2d87a1f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPTahoeRenoFamilyStateVariables</name>
    <filename>class_t_c_p_tahoe_reno_family_state_variables.html</filename>
    <base>TCPBaseAlgStateVariables</base>
    <member kind="function">
      <type></type>
      <name>TCPTahoeRenoFamilyStateVariables</name>
      <anchorfile>class_t_c_p_tahoe_reno_family_state_variables.html</anchorfile>
      <anchor>a5c3d4be10188f57cbb06415409e264e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>class_t_c_p_tahoe_reno_family_state_variables.html</anchorfile>
      <anchor>ad886fd2ce18e4e40dda4edc3131db02f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>class_t_c_p_tahoe_reno_family_state_variables.html</anchorfile>
      <anchor>aa431d0a0ce49d33e7a968675261fc491</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>ssthresh</name>
      <anchorfile>class_t_c_p_tahoe_reno_family_state_variables.html</anchorfile>
      <anchor>ae2250c3174db96489f30be8acabd0e9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPVirtualDataRcvQueue</name>
    <filename>class_t_c_p_virtual_data_rcv_queue.html</filename>
    <base>TCPReceiveQueue</base>
    <class kind="struct">TCPVirtualDataRcvQueue::Region</class>
    <member kind="function">
      <type></type>
      <name>TCPVirtualDataRcvQueue</name>
      <anchorfile>class_t_c_p_virtual_data_rcv_queue.html</anchorfile>
      <anchor>a6ff50b1360d80254f69aaf59c7489922</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPVirtualDataRcvQueue</name>
      <anchorfile>class_t_c_p_virtual_data_rcv_queue.html</anchorfile>
      <anchor>aeda3bd955956c803010cc642ddf7b60b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>class_t_c_p_virtual_data_rcv_queue.html</anchorfile>
      <anchor>adeeeae16fa0cb45c5ae87e6174d793fc</anchor>
      <arglist>(uint32 startSeq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>class_t_c_p_virtual_data_rcv_queue.html</anchorfile>
      <anchor>ac6e69a676e9389cbc140d1a65b4c9af6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>insertBytesFromSegment</name>
      <anchorfile>class_t_c_p_virtual_data_rcv_queue.html</anchorfile>
      <anchor>a83b598c81e2dfc8d72f7584408b99802</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>extractBytesUpTo</name>
      <anchorfile>class_t_c_p_virtual_data_rcv_queue.html</anchorfile>
      <anchor>af1cafaf5415f693ec82f7f3747ea2311</anchor>
      <arglist>(uint32 seq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getAmountOfBufferedBytes</name>
      <anchorfile>class_t_c_p_virtual_data_rcv_queue.html</anchorfile>
      <anchor>a758ece402d5028e49a78001bfe46824a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getAmountOfFreeBytes</name>
      <anchorfile>class_t_c_p_virtual_data_rcv_queue.html</anchorfile>
      <anchor>a1264793628d3daad951c7b8e9ccb3573</anchor>
      <arglist>(uint32 maxRcvBuffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getQueueLength</name>
      <anchorfile>class_t_c_p_virtual_data_rcv_queue.html</anchorfile>
      <anchor>afb91465790f48c2f74dd2352bdc60e50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getQueueStatus</name>
      <anchorfile>class_t_c_p_virtual_data_rcv_queue.html</anchorfile>
      <anchor>a3de12b62a10e1c856b3a75bb08e7951e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getLE</name>
      <anchorfile>class_t_c_p_virtual_data_rcv_queue.html</anchorfile>
      <anchor>a8797005ee3238eaa1b5ee432eaeb00df</anchor>
      <arglist>(uint32 fromSeqNum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getRE</name>
      <anchorfile>class_t_c_p_virtual_data_rcv_queue.html</anchorfile>
      <anchor>a7fcbb2266911c8cf166b90170c6d7a03</anchor>
      <arglist>(uint32 toSeqNum)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; Region &gt;</type>
      <name>RegionList</name>
      <anchorfile>class_t_c_p_virtual_data_rcv_queue.html</anchorfile>
      <anchor>af6f88d0a61c53fa784940e54451095c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>merge</name>
      <anchorfile>class_t_c_p_virtual_data_rcv_queue.html</anchorfile>
      <anchor>a710b6b567c02c1e3e0535ec919330c7c</anchor>
      <arglist>(uint32 segmentBegin, uint32 segmentEnd)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ulong</type>
      <name>extractTo</name>
      <anchorfile>class_t_c_p_virtual_data_rcv_queue.html</anchorfile>
      <anchor>adefc2b346dd80461a5f49d3aab62a7a7</anchor>
      <arglist>(uint32 toSeq)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>rcv_nxt</name>
      <anchorfile>class_t_c_p_virtual_data_rcv_queue.html</anchorfile>
      <anchor>a48ec8399adbfb1f4706324dd988141c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RegionList</type>
      <name>regionList</name>
      <anchorfile>class_t_c_p_virtual_data_rcv_queue.html</anchorfile>
      <anchor>a634551288bef5f92a3e2cc32d52dd037</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TCPVirtualDataRcvQueue::Region</name>
    <filename>struct_t_c_p_virtual_data_rcv_queue_1_1_region.html</filename>
    <member kind="variable">
      <type>uint32</type>
      <name>begin</name>
      <anchorfile>struct_t_c_p_virtual_data_rcv_queue_1_1_region.html</anchorfile>
      <anchor>a3f1fbde5f8521a0df60ee1d559f8d6c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>end</name>
      <anchorfile>struct_t_c_p_virtual_data_rcv_queue_1_1_region.html</anchorfile>
      <anchor>aa87622af37b22b3ee3d3a3e02cab6c4c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPVirtualDataSendQueue</name>
    <filename>class_t_c_p_virtual_data_send_queue.html</filename>
    <base>TCPSendQueue</base>
    <member kind="function">
      <type></type>
      <name>TCPVirtualDataSendQueue</name>
      <anchorfile>class_t_c_p_virtual_data_send_queue.html</anchorfile>
      <anchor>ae5ba6d515c3c5d608f78d5d548067fee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPVirtualDataSendQueue</name>
      <anchorfile>class_t_c_p_virtual_data_send_queue.html</anchorfile>
      <anchor>af36c4b859ece8bb50635f6ed943feb04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>class_t_c_p_virtual_data_send_queue.html</anchorfile>
      <anchor>ad229fe158e328cca309ad2507bf9b48f</anchor>
      <arglist>(uint32 startSeq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>class_t_c_p_virtual_data_send_queue.html</anchorfile>
      <anchor>af777c28d258deccf11b9eea6c41ac8cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enqueueAppData</name>
      <anchorfile>class_t_c_p_virtual_data_send_queue.html</anchorfile>
      <anchor>adac98ffafc58eca16437a21f7808eaba</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getBufferEndSeq</name>
      <anchorfile>class_t_c_p_virtual_data_send_queue.html</anchorfile>
      <anchor>a8daa84dfe5e311b35a9e01960c58b93c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TCPSegment *</type>
      <name>createSegmentWithBytes</name>
      <anchorfile>class_t_c_p_virtual_data_send_queue.html</anchorfile>
      <anchor>aedff3a104851f83cd9d64fcd0d93d146</anchor>
      <arglist>(uint32 fromSeq, ulong numBytes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>discardUpTo</name>
      <anchorfile>class_t_c_p_virtual_data_send_queue.html</anchorfile>
      <anchor>a087c3dd3d4c24e9d19b1514b5fddfcfe</anchor>
      <arglist>(uint32 seqNum)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>begin</name>
      <anchorfile>class_t_c_p_virtual_data_send_queue.html</anchorfile>
      <anchor>a002ad85dc2bf699a1ba080ec124cc300</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>end</name>
      <anchorfile>class_t_c_p_virtual_data_send_queue.html</anchorfile>
      <anchor>a1b0a4048f3421695521b2a18d19432c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TED</name>
    <filename>class_t_e_d.html</filename>
    <class kind="struct">TED::edge_t</class>
    <class kind="struct">TED::vertex_t</class>
    <member kind="function">
      <type></type>
      <name>TED</name>
      <anchorfile>class_t_e_d.html</anchorfile>
      <anchor>a9409f89b04543db5a393de0ff92ec22a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TED</name>
      <anchorfile>class_t_e_d.html</anchorfile>
      <anchor>a88fac0388c77fed57058e620cfcbee16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkLinkValidity</name>
      <anchorfile>class_t_e_d.html</anchorfile>
      <anchor>a52fe287c977d8dc0b17744f446d42211</anchor>
      <arglist>(TELinkStateInfo link, TELinkStateInfo *&amp;match)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateTimestamp</name>
      <anchorfile>class_t_e_d.html</anchorfile>
      <anchor>a37fa2a3c4c66ae13c8af636b1483bc5d</anchor>
      <arglist>(TELinkStateInfo *link)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress</type>
      <name>getInterfaceAddrByPeerAddress</name>
      <anchorfile>class_t_e_d.html</anchorfile>
      <anchor>aa83e78954a200bcb27bb2404bb5b8b25</anchor>
      <arglist>(IPAddress peerIP)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress</type>
      <name>peerRemoteInterface</name>
      <anchorfile>class_t_e_d.html</anchorfile>
      <anchor>a2cbea20c740531cd560319d0e53c1ddf</anchor>
      <arglist>(IPAddress peerIP)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress</type>
      <name>getPeerByLocalAddress</name>
      <anchorfile>class_t_e_d.html</anchorfile>
      <anchor>ab55f38433f365eb6411ce8d0caf20ca7</anchor>
      <arglist>(IPAddress localInf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress</type>
      <name>primaryAddress</name>
      <anchorfile>class_t_e_d.html</anchorfile>
      <anchor>aae88ed1b8900a569352c44f142cbc5a7</anchor>
      <arglist>(IPAddress localInf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isLocalPeer</name>
      <anchorfile>class_t_e_d.html</anchorfile>
      <anchor>a9cc1e3dea5953e7b28631734fcc6895f</anchor>
      <arglist>(IPAddress inetAddr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isLocalAddress</name>
      <anchorfile>class_t_e_d.html</anchorfile>
      <anchor>a31051946d209ff61ec712905ffe805c3</anchor>
      <arglist>(IPAddress addr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>linkIndex</name>
      <anchorfile>class_t_e_d.html</anchorfile>
      <anchor>aff4add6e86b7bc9ea84079aae0bb3e51</anchor>
      <arglist>(IPAddress localInf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>linkIndex</name>
      <anchorfile>class_t_e_d.html</anchorfile>
      <anchor>adc61dd8f63049f938129be476136d846</anchor>
      <arglist>(IPAddress advrouter, IPAddress linkid)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddressVector</type>
      <name>getLocalAddress</name>
      <anchorfile>class_t_e_d.html</anchorfile>
      <anchor>ad644828663099041792ba8d7769c709a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rebuildRoutingTable</name>
      <anchorfile>class_t_e_d.html</anchorfile>
      <anchor>a20dbae0b12fb78bc9771eba4e11f0edc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>TELinkStateInfoVector</type>
      <name>ted</name>
      <anchorfile>class_t_e_d.html</anchorfile>
      <anchor>a8ab5c356644784262be0ae484395441e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_t_e_d.html</anchorfile>
      <anchor>afad702310eca4f7c9cd4cc0c994cb996</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_t_e_d.html</anchorfile>
      <anchor>a1e4c4ce9568543f1cdb77f1ddc65d4b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_t_e_d.html</anchorfile>
      <anchor>acbfd544bab3c8e3dbb6646730f8651b0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IPAddressVector</type>
      <name>calculateShortestPath</name>
      <anchorfile>class_t_e_d.html</anchorfile>
      <anchor>a58d1f05680c55637c2a727c26bc4b621</anchor>
      <arglist>(IPAddressVector dest, const TELinkStateInfoVector &amp;topology, double req_bandwidth, int priority)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>assignIndex</name>
      <anchorfile>class_t_e_d.html</anchorfile>
      <anchor>a7cf6199d3850dcefc1760129c30ecad1</anchor>
      <arglist>(std::vector&lt; vertex_t &gt; &amp;vertices, IPAddress nodeAddr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; vertex_t &gt;</type>
      <name>calculateShortestPaths</name>
      <anchorfile>class_t_e_d.html</anchorfile>
      <anchor>ab2c7318565cf3f4331409155cd323057</anchor>
      <arglist>(const TELinkStateInfoVector &amp;topology, double req_bandwidth, int priority)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IRoutingTable *</type>
      <name>rt</name>
      <anchorfile>class_t_e_d.html</anchorfile>
      <anchor>a9abf4d5fb005f0a51c59ae25aeb55e44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IInterfaceTable *</type>
      <name>ift</name>
      <anchorfile>class_t_e_d.html</anchorfile>
      <anchor>ac0b818ffeadae19fce49446708a46c1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>routerId</name>
      <anchorfile>class_t_e_d.html</anchorfile>
      <anchor>a55191236221fee8208a48124b8fffa0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NotificationBoard *</type>
      <name>nb</name>
      <anchorfile>class_t_e_d.html</anchorfile>
      <anchor>aca8d1a4e3fff1ced1a69271cec3789d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddressVector</type>
      <name>interfaceAddrs</name>
      <anchorfile>class_t_e_d.html</anchorfile>
      <anchor>aa0649c6cfd4582efb9b840e54bd35523</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxMessageId</name>
      <anchorfile>class_t_e_d.html</anchorfile>
      <anchor>a7e2e6277451bc7c030eac0a37e7d6547</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TED::edge_t</name>
    <filename>struct_t_e_d_1_1edge__t.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>src</name>
      <anchorfile>struct_t_e_d_1_1edge__t.html</anchorfile>
      <anchor>a610afe3f5ff427858b36bd744e7afceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>dest</name>
      <anchorfile>struct_t_e_d_1_1edge__t.html</anchorfile>
      <anchor>ae90c89b766935df6473efef1fc97de8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>metric</name>
      <anchorfile>struct_t_e_d_1_1edge__t.html</anchorfile>
      <anchor>a068b9c641fa0427391b17fae13bf53d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TED::vertex_t</name>
    <filename>struct_t_e_d_1_1vertex__t.html</filename>
    <member kind="variable">
      <type>IPAddress</type>
      <name>node</name>
      <anchorfile>struct_t_e_d_1_1vertex__t.html</anchorfile>
      <anchor>a18faf12584318ab04da2ec48097c946c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>parent</name>
      <anchorfile>struct_t_e_d_1_1vertex__t.html</anchorfile>
      <anchor>a5a65db58fc1f94dad63e0e1b140692d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dist</name>
      <anchorfile>struct_t_e_d_1_1vertex__t.html</anchorfile>
      <anchor>a789d65e8872eea5ed669887b1db386bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TEDAccess</name>
    <filename>class_t_e_d_access.html</filename>
    <base>ModuleAccess&lt; TED &gt;</base>
    <member kind="function">
      <type></type>
      <name>TEDAccess</name>
      <anchorfile>class_t_e_d_access.html</anchorfile>
      <anchor>aabe96d2073a7e79cd46021938c01183e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TEDChangeInfo</name>
    <filename>class_t_e_d_change_info.html</filename>
    <member kind="function">
      <type></type>
      <name>TEDChangeInfo</name>
      <anchorfile>class_t_e_d_change_info.html</anchorfile>
      <anchor>aaad52710250d9d409e2c6f5d5daf55b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEDChangeInfo</name>
      <anchorfile>class_t_e_d_change_info.html</anchorfile>
      <anchor>af23c8fbad6470b5e297146827cdf1618</anchor>
      <arglist>(const TEDChangeInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TEDChangeInfo</name>
      <anchorfile>class_t_e_d_change_info.html</anchorfile>
      <anchor>a99bc4145ab0599deb63537e7cd85627c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TEDChangeInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>class_t_e_d_change_info.html</anchorfile>
      <anchor>a5aee50c2a8506ad46499ee0e42d935ab</anchor>
      <arglist>(const TEDChangeInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TEDChangeInfo *</type>
      <name>dup</name>
      <anchorfile>class_t_e_d_change_info.html</anchorfile>
      <anchor>a8d58c737456589b3be1f30d1bfbabfad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_t_e_d_change_info.html</anchorfile>
      <anchor>a689c90ecb88f3e9a618a8c0888d35bfa</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_t_e_d_change_info.html</anchorfile>
      <anchor>aab4d6d46d61c72ebab4d8f20978b74c9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTedLinkIndicesArraySize</name>
      <anchorfile>class_t_e_d_change_info.html</anchorfile>
      <anchor>a9b38462cb6f5358730bfc8c84ce2edf8</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getTedLinkIndicesArraySize</name>
      <anchorfile>class_t_e_d_change_info.html</anchorfile>
      <anchor>ac48593c552294643f40a5cc0274df24f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTedLinkIndices</name>
      <anchorfile>class_t_e_d_change_info.html</anchorfile>
      <anchor>a668b950cc07b1ad7bf124a434cca7f4a</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTedLinkIndices</name>
      <anchorfile>class_t_e_d_change_info.html</anchorfile>
      <anchor>a0266442f016422d4bc5048953f082cb9</anchor>
      <arglist>(unsigned int k, int tedLinkIndices_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_t_e_d_change_info.html</anchorfile>
      <anchor>aaf29b9a9a3d7cc191e72166099a9e5d5</anchor>
      <arglist>(const TEDChangeInfo &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>tedLinkIndices_var</name>
      <anchorfile>class_t_e_d_change_info.html</anchorfile>
      <anchor>a30eee70949742425be64b83d2f9c4b41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>tedLinkIndices_arraysize</name>
      <anchorfile>class_t_e_d_change_info.html</anchorfile>
      <anchor>a49a617084fd0ce6f72fdb04717d751f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TELinkStateInfo</name>
    <filename>struct_t_e_link_state_info.html</filename>
    <member kind="function">
      <type></type>
      <name>TELinkStateInfo</name>
      <anchorfile>struct_t_e_link_state_info.html</anchorfile>
      <anchor>afa95736624aa66f1c64ad185c7b6c376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>::IPAddress</type>
      <name>advrouter</name>
      <anchorfile>struct_t_e_link_state_info.html</anchorfile>
      <anchor>aee75e6121e86aeb81b8a40ced4bf87ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::IPAddress</type>
      <name>linkid</name>
      <anchorfile>struct_t_e_link_state_info.html</anchorfile>
      <anchor>aedb61793558294ab9baa7e12ed234a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::IPAddress</type>
      <name>local</name>
      <anchorfile>struct_t_e_link_state_info.html</anchorfile>
      <anchor>a9cab57d07fc02fd811a681ae9e181157</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::IPAddress</type>
      <name>remote</name>
      <anchorfile>struct_t_e_link_state_info.html</anchorfile>
      <anchor>acb17e7f016e73875363011d79ce73cf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>metric</name>
      <anchorfile>struct_t_e_link_state_info.html</anchorfile>
      <anchor>aeb7bf5a5d219add3e52236937987d136</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>MaxBandwidth</name>
      <anchorfile>struct_t_e_link_state_info.html</anchorfile>
      <anchor>a4422a9f93cc6a9d0201c99464b3b6230</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>UnResvBandwidth</name>
      <anchorfile>struct_t_e_link_state_info.html</anchorfile>
      <anchor>a0873c0b4c842d2d499eb132fd3544576</anchor>
      <arglist>[8]</arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>timestamp</name>
      <anchorfile>struct_t_e_link_state_info.html</anchorfile>
      <anchor>aa24de7bab6ca40a3bde503020a5fea4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>sourceId</name>
      <anchorfile>struct_t_e_link_state_info.html</anchorfile>
      <anchor>a6b8efb793bb004e2690683df82617b7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>messageId</name>
      <anchorfile>struct_t_e_link_state_info.html</anchorfile>
      <anchor>a42d87cca3f1ca1d777da0645732b898d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>state</name>
      <anchorfile>struct_t_e_link_state_info.html</anchorfile>
      <anchor>ae21f911b46b70aa9a10d3e173afed860</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TelnetApp</name>
    <filename>class_telnet_app.html</filename>
    <base>TCPGenericCliAppBase</base>
    <member kind="function">
      <type></type>
      <name>TelnetApp</name>
      <anchorfile>class_telnet_app.html</anchorfile>
      <anchor>a12ea522a06302cbf7bc1e8a7ee83e5e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TelnetApp</name>
      <anchorfile>class_telnet_app.html</anchorfile>
      <anchor>a34534b6dda349f7e80f2cf2552d2194d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_telnet_app.html</anchorfile>
      <anchor>a9aad8abbf28e8d601bcb2d96782734b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimer</name>
      <anchorfile>class_telnet_app.html</anchorfile>
      <anchor>adc72aea793ce93513afef058c4e6471d</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketEstablished</name>
      <anchorfile>class_telnet_app.html</anchorfile>
      <anchor>a1b320cd9262367d60f65bf8067f80076</anchor>
      <arglist>(int connId, void *yourPtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketDataArrived</name>
      <anchorfile>class_telnet_app.html</anchorfile>
      <anchor>aa8970c8031fce975f916df35f8db4ec3</anchor>
      <arglist>(int connId, void *yourPtr, cPacket *msg, bool urgent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketClosed</name>
      <anchorfile>class_telnet_app.html</anchorfile>
      <anchor>a6118600399f307b07f13c4b7a35507ba</anchor>
      <arglist>(int connId, void *yourPtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketFailure</name>
      <anchorfile>class_telnet_app.html</anchorfile>
      <anchor>abc753928be72e7be027401bc74345f9e</anchor>
      <arglist>(int connId, void *yourPtr, int code)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>timeoutMsg</name>
      <anchorfile>class_telnet_app.html</anchorfile>
      <anchor>aafe6f0b26257106a7aca454c2e474830</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numLinesToType</name>
      <anchorfile>class_telnet_app.html</anchorfile>
      <anchor>adf9e5e3acba3fe595db116ab2d28e803</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numCharsToType</name>
      <anchorfile>class_telnet_app.html</anchorfile>
      <anchor>ae1c75eafd550d2a2ca5bf5724f10d47b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThruputMeter</name>
    <filename>class_thruput_meter.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateStats</name>
      <anchorfile>class_thruput_meter.html</anchorfile>
      <anchor>ac502c3a200a0e692f1970fd618a92b8f</anchor>
      <arglist>(simtime_t now, unsigned long bits)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginNewInterval</name>
      <anchorfile>class_thruput_meter.html</anchorfile>
      <anchor>ad893b2172d27f06f048b5567ff592a24</anchor>
      <arglist>(simtime_t now)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_thruput_meter.html</anchorfile>
      <anchor>abaedeb4c32f3c43abd0ef1250d633733</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_thruput_meter.html</anchorfile>
      <anchor>ace3298cd14d0c487534414192a30a4ac</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_thruput_meter.html</anchorfile>
      <anchor>a581d7a05bbd3b06b945e102500d741b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>startTime</name>
      <anchorfile>class_thruput_meter.html</anchorfile>
      <anchor>a1f0ec2e192d015b57164ed8dd0f9d424</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>batchSize</name>
      <anchorfile>class_thruput_meter.html</anchorfile>
      <anchor>a6e87fef4164ade4d71285cf26b86cc65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxInterval</name>
      <anchorfile>class_thruput_meter.html</anchorfile>
      <anchor>a0d1c6353fd1b8b231f1cb8854b9c4cb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numPackets</name>
      <anchorfile>class_thruput_meter.html</anchorfile>
      <anchor>a1758eaba18eb41b2d33616abd642d8ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numBits</name>
      <anchorfile>class_thruput_meter.html</anchorfile>
      <anchor>a77cdc88c2d95ab098ad6f2801b70cfb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>intvlStartTime</name>
      <anchorfile>class_thruput_meter.html</anchorfile>
      <anchor>a9a057dcb55739ad835eb016dc2fff7be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>intvlLastPkTime</name>
      <anchorfile>class_thruput_meter.html</anchorfile>
      <anchor>a36c642c796c5ae77d590598c77c1f9a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>intvlNumPackets</name>
      <anchorfile>class_thruput_meter.html</anchorfile>
      <anchor>a4b22a4ac9dc6245bb978d7084d3ae101</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>intvlNumBits</name>
      <anchorfile>class_thruput_meter.html</anchorfile>
      <anchor>ae876eb3825498c7c321e564bc48255ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>bitpersecVector</name>
      <anchorfile>class_thruput_meter.html</anchorfile>
      <anchor>ac6a0214a4e8be6e585fe7f80350bab08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>pkpersecVector</name>
      <anchorfile>class_thruput_meter.html</anchorfile>
      <anchor>a4b95f76e824b9ef2f373c77fdf3b4020</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tlv</name>
    <filename>structtlv.html</filename>
    <member kind="variable">
      <type>unsigned short</type>
      <name>type</name>
      <anchorfile>structtlv.html</anchorfile>
      <anchor>a60122e63806d4021da7cf097e3dafd3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>structtlv.html</anchorfile>
      <anchor>a2aad7ea82faec89538b02306f67454d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>value</name>
      <anchorfile>structtlv.html</anchorfile>
      <anchor>a9efcedcdae750eb6f18dd343eacc9e40</anchor>
      <arglist>[0]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TOSData</name>
    <filename>struct_t_o_s_data.html</filename>
    <member kind="function">
      <type></type>
      <name>TOSData</name>
      <anchorfile>struct_t_o_s_data.html</anchorfile>
      <anchor>a15e730725d901675f054ecb486c3efe9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>tos</name>
      <anchorfile>struct_t_o_s_data.html</anchorfile>
      <anchor>ab4c8735860c5405b84f24f1ebe2cdeb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>tosMetric</name>
      <anchorfile>struct_t_o_s_data.html</anchorfile>
      <anchor>afef7e9672f68fbd7bf8d4e63f01efc3c</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TransmComplete</name>
    <filename>class_transm_complete.html</filename>
    <member kind="function">
      <type></type>
      <name>TransmComplete</name>
      <anchorfile>class_transm_complete.html</anchorfile>
      <anchor>a2cf40dbac45da507e0fc1aa3f20fb436</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransmComplete</name>
      <anchorfile>class_transm_complete.html</anchorfile>
      <anchor>a7f2713c0905e0d8b6b57dc59f27c65e1</anchor>
      <arglist>(const TransmComplete &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TransmComplete</name>
      <anchorfile>class_transm_complete.html</anchorfile>
      <anchor>a31aaedc6c10ff528eb004a2c417912f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TransmComplete &amp;</type>
      <name>operator=</name>
      <anchorfile>class_transm_complete.html</anchorfile>
      <anchor>a4cc52ee2e67af2eed952f85ec886853f</anchor>
      <arglist>(const TransmComplete &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransmComplete *</type>
      <name>dup</name>
      <anchorfile>class_transm_complete.html</anchorfile>
      <anchor>afa708eed11a59f53b0959610c2d131bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_transm_complete.html</anchorfile>
      <anchor>af1d531c3d33a48dfa7e599129784320e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_transm_complete.html</anchorfile>
      <anchor>ac24d807bd655b624c12e8c8499b2c128</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_transm_complete.html</anchorfile>
      <anchor>a8135773f02dff51b66542483c071bc16</anchor>
      <arglist>(const TransmComplete &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TurtleMobility</name>
    <filename>class_turtle_mobility.html</filename>
    <base>LineSegmentsMobilityBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_turtle_mobility.html</anchorfile>
      <anchor>a212749b0f24e8668cbc65703a20f8f7b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchorfile>class_turtle_mobility.html</anchorfile>
      <anchor>a77b7dc906cdb7ac02ee420a4a8028ac9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>class_turtle_mobility.html</anchorfile>
      <anchor>adaaddb924e5b4fefc549e217d36317ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>resumeScript</name>
      <anchorfile>class_turtle_mobility.html</anchorfile>
      <anchor>a6301ae69ac2657ffb813f422885b4323</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>executeStatement</name>
      <anchorfile>class_turtle_mobility.html</anchorfile>
      <anchor>adf8a33f548f1f30804b8e8399b7f0dfd</anchor>
      <arglist>(cXMLElement *nextStatement)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>class_turtle_mobility.html</anchorfile>
      <anchor>a9139ae0504735451c6767415f1951992</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>gotoNextStatement</name>
      <anchorfile>class_turtle_mobility.html</anchorfile>
      <anchor>a999d116108ecc399eae6aaca63a45bcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cXMLElement *</type>
      <name>turtleScript</name>
      <anchorfile>class_turtle_mobility.html</anchorfile>
      <anchor>a08babee46db12aad334943374937962b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cXMLElement *</type>
      <name>nextStatement</name>
      <anchorfile>class_turtle_mobility.html</anchorfile>
      <anchor>aadb591a9cc96eb64acde49644c45805b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speed</name>
      <anchorfile>class_turtle_mobility.html</anchorfile>
      <anchor>a0369b5e57db118aba35e9a116203eb4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>angle</name>
      <anchorfile>class_turtle_mobility.html</anchorfile>
      <anchor>a8e8e4dc8443ca6866b5540b3005e7b24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BorderPolicy</type>
      <name>borderPolicy</name>
      <anchorfile>class_turtle_mobility.html</anchorfile>
      <anchor>ae43798eb0dd7cb1e08eba3350edc46fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stack&lt; long &gt;</type>
      <name>loopVars</name>
      <anchorfile>class_turtle_mobility.html</anchorfile>
      <anchor>ac46a272d9b3a0d28684e4ea3ea675cbc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TxNotifDetails</name>
    <filename>class_tx_notif_details.html</filename>
    <member kind="function">
      <type></type>
      <name>TxNotifDetails</name>
      <anchorfile>class_tx_notif_details.html</anchorfile>
      <anchor>a94074be6592fc5a8ecbd6df09b8795d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cPacket *</type>
      <name>getPacket</name>
      <anchorfile>class_tx_notif_details.html</anchorfile>
      <anchor>a4adf108f7298255d0f2f6a7962b0b030</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>InterfaceEntry *</type>
      <name>getInterfaceEntry</name>
      <anchorfile>class_tx_notif_details.html</anchorfile>
      <anchor>af7fed7112f5c22bebca2799b8e811c3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPacket</name>
      <anchorfile>class_tx_notif_details.html</anchorfile>
      <anchor>a13390b6f2e423838865ae60d3c85e8f3</anchor>
      <arglist>(cPacket *m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInterfaceEntry</name>
      <anchorfile>class_tx_notif_details.html</anchorfile>
      <anchor>ae50a3f06a96c7564ea94600a167ad1a4</anchor>
      <arglist>(InterfaceEntry *e)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPacket *</type>
      <name>msg</name>
      <anchorfile>class_tx_notif_details.html</anchorfile>
      <anchor>aaf03190a4ffd23218d97dc2c2217e40b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterfaceEntry *</type>
      <name>ie</name>
      <anchorfile>class_tx_notif_details.html</anchorfile>
      <anchor>a5a6776001c5177730e06a3299db905c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UDP</name>
    <filename>class_u_d_p.html</filename>
    <class kind="struct">UDP::SockDesc</class>
    <member kind="typedef">
      <type>std::list&lt; SockDesc * &gt;</type>
      <name>SockDescList</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>a17d5eac534fa0d896ceef2831cd28d77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; int, SockDesc * &gt;</type>
      <name>SocketsByIdMap</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>a68d5e94d3be14183856abf7f7ac8002a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; int, SockDescList &gt;</type>
      <name>SocketsByPortMap</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>a829a029b999e1f99838cd59e10eab3a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UDP</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>ac9e9b89f827804de5bb675e8adbc9eab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UDP</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>ac9c6eaf3e5f1bd64ea3ac0552137ca0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDisplayString</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>a5c2df70abc011c2753a47cbff187a306</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>a7ad4f9f51d27f92e0d23041f9b64a896</anchor>
      <arglist>(int gateIndex, UDPControlInfo *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>connect</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>a9fb94355db86e280d8de7b1ef7ced43c</anchor>
      <arglist>(int sockId, IPvXAddress addr, int port)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>unbind</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>a92b95e9e592cd6beff8f0b20228bc214</anchor>
      <arglist>(int sockId)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual short</type>
      <name>getEphemeralPort</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>a56d497b22c8f110dbfc52ee7e85c9f1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>matchesSocket</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>a7e436c2b0a7b563bae29603603422cc0</anchor>
      <arglist>(SockDesc *sd, UDPPacket *udp, IPControlInfo *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>matchesSocket</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>a6529b4917795bbb08f2fe013045718aa</anchor>
      <arglist>(SockDesc *sd, UDPPacket *udp, IPv6ControlInfo *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>matchesSocket</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>a2b23bb364855683d34fdfb3bcb06eceb</anchor>
      <arglist>(SockDesc *sd, const IPvXAddress &amp;localAddr, const IPvXAddress &amp;remoteAddr, short remotePort)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendUp</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>affa73f57d52206f4aa5bc2539ac63c0f</anchor>
      <arglist>(cPacket *payload, UDPPacket *udpHeader, IPControlInfo *ctrl, SockDesc *sd)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendUp</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>ac693a0a152b8577d646493c325f15b45</anchor>
      <arglist>(cPacket *payload, UDPPacket *udpHeader, IPv6ControlInfo *ctrl, SockDesc *sd)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processUndeliverablePacket</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>a5a411e560693182d2cde11ab5566e1fc</anchor>
      <arglist>(UDPPacket *udpPacket, cPolymorphic *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendUpErrorNotification</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>a787238b9470b0fd4235b1c347cdb0639</anchor>
      <arglist>(SockDesc *sd, int msgkind, const IPvXAddress &amp;localAddr, const IPvXAddress &amp;remoteAddr, short remotePort)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processICMPError</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>a8f0e27d03d3e209f437bfa72dd3efe38</anchor>
      <arglist>(cPacket *icmpErrorMsg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processUDPPacket</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>a333fddcf308d3c6348c9cc5e6bfa796d</anchor>
      <arglist>(UDPPacket *udpPacket)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processMsgFromApp</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>a1d2e34c55abb9e373694d77d3bac8f09</anchor>
      <arglist>(cPacket *appData)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processCommandFromApp</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>ae251c9826aa3b5242ad02d6620ea2616</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual UDPPacket *</type>
      <name>createUDPPacket</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>af5e2c13d9e3a33936212cefdfa723d18</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>a9ff0a87c6965238d54bb67997d6912ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>a79daccc47126abbf6740b029d7a57089</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SocketsByIdMap</type>
      <name>socketsByIdMap</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>a7019475e3a2bd786a634fbbe72aa91c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SocketsByPortMap</type>
      <name>socketsByPortMap</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>af6f8ebb75300e83c3b28ba5bd0ed585d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>lastEphemeralPort</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>afe1f879c3d04242bda6a3572266ce406</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ICMP *</type>
      <name>icmp</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>a4995c941113ffc075a8a4b6051fb1ca4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ICMPv6 *</type>
      <name>icmpv6</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>a63a772449305921a2f57b9066336c389</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numSent</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>aa7f7b7568b014af23fb3f7c2efc218c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numPassedUp</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>ab6bee27f7907a894de4173e003adbd69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numDroppedWrongPort</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>ac262e3d6e3c88dbb2ff457c1c8837162</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numDroppedBadChecksum</name>
      <anchorfile>class_u_d_p.html</anchorfile>
      <anchor>a9ed09aeb9c434f9c7931dc82d3b2d34c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>UDP::SockDesc</name>
    <filename>struct_u_d_p_1_1_sock_desc.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>sockId</name>
      <anchorfile>struct_u_d_p_1_1_sock_desc.html</anchorfile>
      <anchor>a2f2c9aa8db7d1aecbb69e3e0e408eb38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>userId</name>
      <anchorfile>struct_u_d_p_1_1_sock_desc.html</anchorfile>
      <anchor>ab4782744c99f5ea899b27f006f95e07f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>appGateIndex</name>
      <anchorfile>struct_u_d_p_1_1_sock_desc.html</anchorfile>
      <anchor>a65d3866c27cdcf1e8ef5daa3b629941b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>onlyLocalPortIsSet</name>
      <anchorfile>struct_u_d_p_1_1_sock_desc.html</anchorfile>
      <anchor>ac7f22b1ee6cf0737ded160cd14ea94c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>localAddr</name>
      <anchorfile>struct_u_d_p_1_1_sock_desc.html</anchorfile>
      <anchor>abf6b873188b84f96d07151201027dbf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>remoteAddr</name>
      <anchorfile>struct_u_d_p_1_1_sock_desc.html</anchorfile>
      <anchor>a1ac8306556dcad399b43b3c5756eb60c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>localPort</name>
      <anchorfile>struct_u_d_p_1_1_sock_desc.html</anchorfile>
      <anchor>a23b0f3cf9d296e1420b444fc124085c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>remotePort</name>
      <anchorfile>struct_u_d_p_1_1_sock_desc.html</anchorfile>
      <anchor>a89a69ab47b6c22d9162e611e9938077d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>interfaceId</name>
      <anchorfile>struct_u_d_p_1_1_sock_desc.html</anchorfile>
      <anchor>a9e86591528ff3f245561f4869e908705</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UDPAppBase</name>
    <filename>class_u_d_p_app_base.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>bindToPort</name>
      <anchorfile>class_u_d_p_app_base.html</anchorfile>
      <anchor>a3f670cbeb07cba7840c4434ac9720208</anchor>
      <arglist>(int port)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToUDP</name>
      <anchorfile>class_u_d_p_app_base.html</anchorfile>
      <anchor>a1cc7e672ca71ba6c150ce40ddcdb7641</anchor>
      <arglist>(cPacket *msg, int srcPort, const IPvXAddress &amp;destAddr, int destPort)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>printPacket</name>
      <anchorfile>class_u_d_p_app_base.html</anchorfile>
      <anchor>aed3a561c1e404da6f017b2df213c7672</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UDPBasicApp</name>
    <filename>class_u_d_p_basic_app.html</filename>
    <base>UDPAppBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IPvXAddress</type>
      <name>chooseDestAddr</name>
      <anchorfile>class_u_d_p_basic_app.html</anchorfile>
      <anchor>aba9b6d53b5648b619e1884b53ada81f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>createPacket</name>
      <anchorfile>class_u_d_p_basic_app.html</anchorfile>
      <anchor>a7dac2c2fcd02c79c20f4047edf415c5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendPacket</name>
      <anchorfile>class_u_d_p_basic_app.html</anchorfile>
      <anchor>a741d381ac91600260a09f24687995621</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPacket</name>
      <anchorfile>class_u_d_p_basic_app.html</anchorfile>
      <anchor>a2f647ce86d7a8041a6b8f2694659df16</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_u_d_p_basic_app.html</anchorfile>
      <anchor>ad248ddfae18ad67e043e46bc22866c68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_u_d_p_basic_app.html</anchorfile>
      <anchor>aa1166c1fd9f264d710e687c7e2368665</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_u_d_p_basic_app.html</anchorfile>
      <anchor>aa0b1d5a58209392795dc0e70f3f1b038</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>nodeName</name>
      <anchorfile>class_u_d_p_basic_app.html</anchorfile>
      <anchor>a861b308d6b41554be6e78adb96855774</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>localPort</name>
      <anchorfile>class_u_d_p_basic_app.html</anchorfile>
      <anchor>a179291d792698ac2a1a5b51782c847bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>destPort</name>
      <anchorfile>class_u_d_p_basic_app.html</anchorfile>
      <anchor>aba62ab15914e8d0cb71d7acb2a5f8de2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IPvXAddress &gt;</type>
      <name>destAddresses</name>
      <anchorfile>class_u_d_p_basic_app.html</anchorfile>
      <anchor>ad82956aa18229717feaf7f22a7f10c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numSent</name>
      <anchorfile>class_u_d_p_basic_app.html</anchorfile>
      <anchor>abe83bd29c60c77550f67366a9ca51272</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numReceived</name>
      <anchorfile>class_u_d_p_basic_app.html</anchorfile>
      <anchor>aeabc0f7cff0000eb5dd375d9223dbe24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static int</type>
      <name>counter</name>
      <anchorfile>class_u_d_p_basic_app.html</anchorfile>
      <anchor>ab55e1a403e0c8681e986695d6286f591</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UDPControlInfo</name>
    <filename>class_u_d_p_control_info.html</filename>
    <member kind="function">
      <type></type>
      <name>UDPControlInfo</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>af52c34ea99edb65fd44af09d8b0f50c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UDPControlInfo</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>a7b26901f7528de88817c78d39c0dfb1f</anchor>
      <arglist>(const UDPControlInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UDPControlInfo</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>ab4b21492bf3dbc1c7d98120573550420</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UDPControlInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>a83b2eec750e4b528e25d9e2cc94a20f4</anchor>
      <arglist>(const UDPControlInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UDPControlInfo *</type>
      <name>dup</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>a8709f4b2d1657b1866b623efc02be013</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>a60b275abb7aee7754a12cdbef764b3a2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>ae0e49dbeeb5cce8afd2298e254003aa9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSockId</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>a8a846212bd94f8f2b59ea56c3238ae6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSockId</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>a7e967a5de6a63108ef71234d6d3a776c</anchor>
      <arglist>(int sockId_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getUserId</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>aa77dbd727be5ceb2a7921ed96349ae82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUserId</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>a9530da4d40bbfbebdc94d8b3b5e92d9c</anchor>
      <arglist>(int userId_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>getSrcAddr</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>a0dbca3fa110977e974dba0c3f7e28604</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>getSrcAddr</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>a614042358c8e3ef8d6fc28efb94da2c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcAddr</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>ab57fbe096480605dcf870a03e322c229</anchor>
      <arglist>(const IPvXAddress &amp;srcAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>getDestAddr</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>a477fd2ebd3ff52956f283bf4a8f8a0d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>getDestAddr</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>a31e685a9f072e8da78151e3a0ea4111b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestAddr</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>a3deaa1c1ccc124db8104cb6ea710c3a9</anchor>
      <arglist>(const IPvXAddress &amp;destAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSrcPort</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>a174a1520000a47394c851bcc9990b1b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcPort</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>aa7ab223982d1c05cedac68348ff065c6</anchor>
      <arglist>(int srcPort_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDestPort</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>a8a288303fcf9d8740a3d285ab82a2ded</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestPort</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>ae2dc723a3ade849c1eb21b3bc849b5da</anchor>
      <arglist>(int destPort_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getInterfaceId</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>a371cfc0b09b71bf2cb851dfcfdc37583</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInterfaceId</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>a743cd5b201ff86b062f73ee84eb6dcfd</anchor>
      <arglist>(int interfaceId_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>ad01f28a77a740551889289b1abf30c07</anchor>
      <arglist>(const UDPControlInfo &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sockId_var</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>a0add411cbef2e163a61492feb3cfe076</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>userId_var</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>a8027108bd3df41af3b644d7e6298aee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPvXAddress</type>
      <name>srcAddr_var</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>a5727508f951d99c7673c018a18300ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IPvXAddress</type>
      <name>destAddr_var</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>a4b1e997fab2f7fc3bfa7e14e578a7705</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>srcPort_var</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>ae8941d404385d32933a084681215f6ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>destPort_var</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>ab73513cc348e8285260962ddaabefb05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>interfaceId_var</name>
      <anchorfile>class_u_d_p_control_info.html</anchorfile>
      <anchor>ad5d1531fcde4e21c6d6c5db42862dc28</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UDPEchoApp</name>
    <filename>class_u_d_p_echo_app.html</filename>
    <base>UDPBasicApp</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>createPacket</name>
      <anchorfile>class_u_d_p_echo_app.html</anchorfile>
      <anchor>aadf4761d17b97f9c4e7548ea6339dfec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPacket</name>
      <anchorfile>class_u_d_p_echo_app.html</anchorfile>
      <anchor>afcce8e21a27ab5746fa9581035595faa</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_u_d_p_echo_app.html</anchorfile>
      <anchor>ab4850b5b8e54a48b045260341e66bbe0</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_u_d_p_echo_app.html</anchorfile>
      <anchor>ac01cfc78f60076531918a6b6c0ded595</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UDPEchoAppMsg</name>
    <filename>class_u_d_p_echo_app_msg.html</filename>
    <member kind="function">
      <type></type>
      <name>UDPEchoAppMsg</name>
      <anchorfile>class_u_d_p_echo_app_msg.html</anchorfile>
      <anchor>a2da1640f1a31b52c4ace605777059b58</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UDPEchoAppMsg</name>
      <anchorfile>class_u_d_p_echo_app_msg.html</anchorfile>
      <anchor>a249d275e309ad62e20b8ab54dd01c33b</anchor>
      <arglist>(const UDPEchoAppMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UDPEchoAppMsg</name>
      <anchorfile>class_u_d_p_echo_app_msg.html</anchorfile>
      <anchor>afafdb1b5a2bf1d8a1c21eb7282e00238</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UDPEchoAppMsg &amp;</type>
      <name>operator=</name>
      <anchorfile>class_u_d_p_echo_app_msg.html</anchorfile>
      <anchor>af236e85af2dceac8bc77aaacd82ff0e7</anchor>
      <arglist>(const UDPEchoAppMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UDPEchoAppMsg *</type>
      <name>dup</name>
      <anchorfile>class_u_d_p_echo_app_msg.html</anchorfile>
      <anchor>a527b60295636ca8242d388eb071bf4ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_u_d_p_echo_app_msg.html</anchorfile>
      <anchor>a21bd14e11233375282b51787ea44007f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_u_d_p_echo_app_msg.html</anchorfile>
      <anchor>a0c0ab45c5f99ef884efff10902d7122a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getIsRequest</name>
      <anchorfile>class_u_d_p_echo_app_msg.html</anchorfile>
      <anchor>a6e6805647208c383d9cc7d0b90134f1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsRequest</name>
      <anchorfile>class_u_d_p_echo_app_msg.html</anchorfile>
      <anchor>aa67bf8ef745b3aa027751b4b736c225c</anchor>
      <arglist>(bool isRequest_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_u_d_p_echo_app_msg.html</anchorfile>
      <anchor>a04bc2aa41e26ec3391d67b8d014f354e</anchor>
      <arglist>(const UDPEchoAppMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isRequest_var</name>
      <anchorfile>class_u_d_p_echo_app_msg.html</anchorfile>
      <anchor>a3204fcac5781181d3f5f1fe8010d7d0b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>udphdr</name>
    <filename>structudphdr.html</filename>
    <member kind="variable">
      <type>u_short</type>
      <name>uh_sport</name>
      <anchorfile>structudphdr.html</anchorfile>
      <anchor>aa7c9a73e8bdb99a5733308c8cb06b252</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>uh_dport</name>
      <anchorfile>structudphdr.html</anchorfile>
      <anchor>ae6ca4a05728506fa15ca7133337b725d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>uh_ulen</name>
      <anchorfile>structudphdr.html</anchorfile>
      <anchor>a98e57a55e7566aa92200b717c839245d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>uh_sum</name>
      <anchorfile>structudphdr.html</anchorfile>
      <anchor>ab1e21ec30b525d78c15a12e3a55b4978</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UDPPacket</name>
    <filename>class_u_d_p_packet.html</filename>
    <member kind="function">
      <type></type>
      <name>UDPPacket</name>
      <anchorfile>class_u_d_p_packet.html</anchorfile>
      <anchor>add11a793a3c3670a48d09b003ca7019f</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UDPPacket</name>
      <anchorfile>class_u_d_p_packet.html</anchorfile>
      <anchor>afe9e6b388b5423f0b037db942f4e00ac</anchor>
      <arglist>(const UDPPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UDPPacket</name>
      <anchorfile>class_u_d_p_packet.html</anchorfile>
      <anchor>aaaf8ee09bfa62c362174a679575b902e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UDPPacket &amp;</type>
      <name>operator=</name>
      <anchorfile>class_u_d_p_packet.html</anchorfile>
      <anchor>a9520f073bb17dad6ddf5bda678609ca0</anchor>
      <arglist>(const UDPPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UDPPacket *</type>
      <name>dup</name>
      <anchorfile>class_u_d_p_packet.html</anchorfile>
      <anchor>a0a6b4be02b4f84e14730dd2100551044</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_u_d_p_packet.html</anchorfile>
      <anchor>a2018e5a753dfd712c00e71b0a2e58aad</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_u_d_p_packet.html</anchorfile>
      <anchor>a892ed28d1f650b19c357b7a844fbce80</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSourcePort</name>
      <anchorfile>class_u_d_p_packet.html</anchorfile>
      <anchor>a68edddd0010b738746cf2f95dcc1f093</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSourcePort</name>
      <anchorfile>class_u_d_p_packet.html</anchorfile>
      <anchor>a9c28ca4ee2e727821098778284828cb1</anchor>
      <arglist>(int sourcePort_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDestinationPort</name>
      <anchorfile>class_u_d_p_packet.html</anchorfile>
      <anchor>a7bb08c4bb25f612dc60dc51726082c46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestinationPort</name>
      <anchorfile>class_u_d_p_packet.html</anchorfile>
      <anchor>a4c525359d95d3fe285d8420952cef94b</anchor>
      <arglist>(int destinationPort_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_u_d_p_packet.html</anchorfile>
      <anchor>aa7b8fce5b5030220fc73af34d06e263b</anchor>
      <arglist>(const UDPPacket &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sourcePort_var</name>
      <anchorfile>class_u_d_p_packet.html</anchorfile>
      <anchor>a38f19844d8eedf47f0746838201efae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>destinationPort_var</name>
      <anchorfile>class_u_d_p_packet.html</anchorfile>
      <anchor>aeba84f10948a359632014a3af35f6c2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UDPSerializer</name>
    <filename>class_u_d_p_serializer.html</filename>
    <member kind="function">
      <type></type>
      <name>UDPSerializer</name>
      <anchorfile>class_u_d_p_serializer.html</anchorfile>
      <anchor>aceb678993f057d550163c108da36927d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>serialize</name>
      <anchorfile>class_u_d_p_serializer.html</anchorfile>
      <anchor>af442bc00006930edf772c9edbd3fcbc3</anchor>
      <arglist>(const UDPPacket *pkt, unsigned char *buf, unsigned int bufsize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>class_u_d_p_serializer.html</anchorfile>
      <anchor>a33ac27c3de4d8176edc2ce5e0c4b087c</anchor>
      <arglist>(const unsigned char *buf, unsigned int bufsize, UDPPacket *pkt)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UDPSink</name>
    <filename>class_u_d_p_sink.html</filename>
    <base>UDPAppBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPacket</name>
      <anchorfile>class_u_d_p_sink.html</anchorfile>
      <anchor>a7c7d52ad303da4756d655ddb074334e0</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_u_d_p_sink.html</anchorfile>
      <anchor>a9ee39dcab80abb5a1e61c8acb36e4bea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_u_d_p_sink.html</anchorfile>
      <anchor>a663406e0103df924b10a1aa2c833c59d</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numReceived</name>
      <anchorfile>class_u_d_p_sink.html</anchorfile>
      <anchor>ab2308365fd164a370697626c737e3b07</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UDPSocket</name>
    <filename>class_u_d_p_socket.html</filename>
    <class kind="class">UDPSocket::CallbackInterface</class>
    <member kind="enumeration">
      <name>State</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a5014109a7fe16237e65baadd418ff0a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_BOUND</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a5014109a7fe16237e65baadd418ff0a9ac704f6b8c3206743c5c2278cdf3dd802</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOUND</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a5014109a7fe16237e65baadd418ff0a9aa0b73190522702b863712d7b1c0dff25</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UDPSocket</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a4f86f3023f5a08f6355802599a10e100</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UDPSocket</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>adb1a5254938e5acf5d44ff7a347e9f0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSocketId</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>af5bb85d266bfa45deef05139a37f3b13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserId</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a203956b4a7c2dae419254b3facd6e628</anchor>
      <arglist>(int userId)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getUserId</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a53810b33ec46dfa5a3bced904c81d6cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getState</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a3db063f5952639b8d41e9244a734cdcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPvXAddress</type>
      <name>getLocalAddress</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a9a04b91093d8f895e914badfa94f59f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalPort</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a2c063bac9a4295583e808c39b7d7c8cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutputGate</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a606e9a6e14bcd2e68bb2906b0dc5a6b7</anchor>
      <arglist>(cGate *toUdp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a4f85cea0efe5b7963fbc4103bad665c3</anchor>
      <arglist>(int localPort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>acc5d82edaf1a1ef18e6de4f81690f7d7</anchor>
      <arglist>(IPvXAddress localAddr, int localPort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a405241427a332c48dcb53b94afef6606</anchor>
      <arglist>(IPvXAddress remoteAddr, int remotePort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMulticastInterfaceId</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a9e70af3cc5bd06dc9445ad8d9d7d5219</anchor>
      <arglist>(int interfaceId)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMulticastInterfaceId</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>aed6f309ec0200682d0b1accea573cacf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendTo</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>ae24c4132eb222af55be418025c6b20e9</anchor>
      <arglist>(cMessage *msg, IPvXAddress destAddr, int destPort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a71a60e1939120f3a73b7dcc8278dd859</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>adf03e1406e434b6a31a673dfbc18a132</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>stateName</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a96a6744afcb98357e3473616121c3804</anchor>
      <arglist>(int state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>generateSocketId</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a33867fc36dae0097215522ece28cd376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToUDP</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a6260ac4ab8fc6e6d2204575e7a308b6f</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sockId</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a56a65b23971434e874af2033c81cac8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>usrId</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a1bf203aec1b0e0442cad684f0771e8c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sockstate</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a05df7ac12a0a651565ec33d73bac1bd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>localAddr</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a658005c4136e5126e2e96b383a4d3aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>localPrt</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a44909171c842b340c8e07294a89087e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>remoteAddr</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a2b843f46471cda1dabcff737989481e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>remotePrt</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a3e6beba1b5b5ba6f8bc104b70c8b24d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mcastIfaceId</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a2d459dab0b3dba1e2bbb24101b60ecaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CallbackInterface *</type>
      <name>cb</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a310fcc43a7f0d2fdc92e035e993576ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>yourPtr</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>aa637e3739bed4d4aa524928fc5bfd2e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cGate *</type>
      <name>gateToUdp</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a091f27abc3256dbe06c34d39d8106ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>belongsToSocket</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a82dd8611ed6f0165cf22e03acd83fea8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCallbackObject</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>afa86a677258a88ceedda7e6308d19441</anchor>
      <arglist>(CallbackInterface *cb, void *yourPtr=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processMessage</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>aec424dacb4f75ec6b91482b38cd0b234</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>belongsToAnyUDPSocket</name>
      <anchorfile>class_u_d_p_socket.html</anchorfile>
      <anchor>a56fb687d07e360e71892c57b03612926</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UDPSocket::CallbackInterface</name>
    <filename>class_u_d_p_socket_1_1_callback_interface.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CallbackInterface</name>
      <anchorfile>class_u_d_p_socket_1_1_callback_interface.html</anchorfile>
      <anchor>a9a0dba123b84d371bbfa1e70223a7ee5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>socketDatagramArrived</name>
      <anchorfile>class_u_d_p_socket_1_1_callback_interface.html</anchorfile>
      <anchor>ad2838c2f287bf3f2f7d87bbe7cdcd60a</anchor>
      <arglist>(int sockId, void *yourPtr, cMessage *msg, UDPControlInfo *ctrl)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>socketPeerClosed</name>
      <anchorfile>class_u_d_p_socket_1_1_callback_interface.html</anchorfile>
      <anchor>a7a6484477e87bc4dc938874af44ef445</anchor>
      <arglist>(int sockId, void *yourPtr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UDPVideoStreamCli</name>
    <filename>class_u_d_p_video_stream_cli.html</filename>
    <base>UDPAppBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>requestStream</name>
      <anchorfile>class_u_d_p_video_stream_cli.html</anchorfile>
      <anchor>a06b297b74a2efd5e5ba62097f6d9547c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveStream</name>
      <anchorfile>class_u_d_p_video_stream_cli.html</anchorfile>
      <anchor>a1ec9345718f1eb39326843765112069d</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_u_d_p_video_stream_cli.html</anchorfile>
      <anchor>afc9418fb493694341b730609c220d86e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_u_d_p_video_stream_cli.html</anchorfile>
      <anchor>aae58caf50012f12c6313f1eb59f1be21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_u_d_p_video_stream_cli.html</anchorfile>
      <anchor>a353ea0429a74fc1b24a9e3752e5dfa03</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>eed</name>
      <anchorfile>class_u_d_p_video_stream_cli.html</anchorfile>
      <anchor>a3892f7717a4069a113ae0ff92ef49d3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UDPVideoStreamSvr</name>
    <filename>class_u_d_p_video_stream_svr.html</filename>
    <base>UDPAppBase</base>
    <class kind="struct">UDPVideoStreamSvr::VideoStreamData</class>
    <member kind="function">
      <type></type>
      <name>UDPVideoStreamSvr</name>
      <anchorfile>class_u_d_p_video_stream_svr.html</anchorfile>
      <anchor>aa4818770918097ce01da8928111e5cc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UDPVideoStreamSvr</name>
      <anchorfile>class_u_d_p_video_stream_svr.html</anchorfile>
      <anchor>a38d6c4cc50ce19e12b1653c8b400047d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; VideoStreamData * &gt;</type>
      <name>VideoStreamVector</name>
      <anchorfile>class_u_d_p_video_stream_svr.html</anchorfile>
      <anchor>a2b5fa87477ed83d07cf532d5ea876abe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processStreamRequest</name>
      <anchorfile>class_u_d_p_video_stream_svr.html</anchorfile>
      <anchor>ae5a0df7652fe7507da3fd9868324b6f8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendStreamData</name>
      <anchorfile>class_u_d_p_video_stream_svr.html</anchorfile>
      <anchor>ad485162bd9103839dfcd3e20056cc5d0</anchor>
      <arglist>(cMessage *timer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_u_d_p_video_stream_svr.html</anchorfile>
      <anchor>a9d8e84e32e1d2d9ec05dea83831a804b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_u_d_p_video_stream_svr.html</anchorfile>
      <anchor>a25110b96ca30800684d495bfef2579c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_u_d_p_video_stream_svr.html</anchorfile>
      <anchor>a92d09c41dd345a84303f8be392ffb201</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VideoStreamVector</type>
      <name>streamVector</name>
      <anchorfile>class_u_d_p_video_stream_svr.html</anchorfile>
      <anchor>a9a4496248410d5013064480b67cc7ad6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>serverPort</name>
      <anchorfile>class_u_d_p_video_stream_svr.html</anchorfile>
      <anchor>ac80d7110e23e899e1c13a02aee4d8615</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPar *</type>
      <name>waitInterval</name>
      <anchorfile>class_u_d_p_video_stream_svr.html</anchorfile>
      <anchor>a9884379ddf693cb0776db24a26eaff36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPar *</type>
      <name>packetLen</name>
      <anchorfile>class_u_d_p_video_stream_svr.html</anchorfile>
      <anchor>a2701ce408bc7d6f06be13a9af3356a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPar *</type>
      <name>videoSize</name>
      <anchorfile>class_u_d_p_video_stream_svr.html</anchorfile>
      <anchor>af166ff8f3b53e25b1e0e49a7f8361a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numStreams</name>
      <anchorfile>class_u_d_p_video_stream_svr.html</anchorfile>
      <anchor>a75bb2d846ce8b49c2f0515774f59146d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numPkSent</name>
      <anchorfile>class_u_d_p_video_stream_svr.html</anchorfile>
      <anchor>a295a8c9bf560c7ff3dba50faf7aaebb7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>UDPVideoStreamSvr::VideoStreamData</name>
    <filename>struct_u_d_p_video_stream_svr_1_1_video_stream_data.html</filename>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>clientAddr</name>
      <anchorfile>struct_u_d_p_video_stream_svr_1_1_video_stream_data.html</anchorfile>
      <anchor>a0fb1488bafc5c8ca36b401619bada604</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>clientPort</name>
      <anchorfile>struct_u_d_p_video_stream_svr_1_1_video_stream_data.html</anchorfile>
      <anchor>a74930a7bf2b421ef718458084333e372</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>videoSize</name>
      <anchorfile>struct_u_d_p_video_stream_svr_1_1_video_stream_data.html</anchorfile>
      <anchor>a86b363f7fde331914e15b257c2914132</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>bytesLeft</name>
      <anchorfile>struct_u_d_p_video_stream_svr_1_1_video_stream_data.html</anchorfile>
      <anchor>a82cdab4d25a4117c7365eb994728411f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>numPkSent</name>
      <anchorfile>struct_u_d_p_video_stream_svr_1_1_video_stream_data.html</anchorfile>
      <anchor>a00bbb1794d1a11aee660a1a034884611</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WirelessMacBase</name>
    <filename>class_wireless_mac_base.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_wireless_mac_base.html</anchorfile>
      <anchor>a74866aacf342c21cd220d959698d87af</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_wireless_mac_base.html</anchorfile>
      <anchor>aa0117d9f5b465c487b6b4e7bd78eeab6</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_wireless_mac_base.html</anchorfile>
      <anchor>a1c7f3c2581f66d7de17af4a730ae0c4d</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>class_wireless_mac_base.html</anchorfile>
      <anchor>ab44661d865472b3799cbe4b086e131b9</anchor>
      <arglist>(cPacket *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleCommand</name>
      <anchorfile>class_wireless_mac_base.html</anchorfile>
      <anchor>a2a5fd20a6064b4754954638bc93f8d8d</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>class_wireless_mac_base.html</anchorfile>
      <anchor>ab1db1fa4fd9ecec9d8fa1a38a9a365e1</anchor>
      <arglist>(cPacket *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isUpperMsg</name>
      <anchorfile>class_wireless_mac_base.html</anchorfile>
      <anchor>a86b406729713114bdceb21e07bcefd12</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isLowerMsg</name>
      <anchorfile>class_wireless_mac_base.html</anchorfile>
      <anchor>af982fd8985b1ceca8771b43908a027c5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDown</name>
      <anchorfile>class_wireless_mac_base.html</anchorfile>
      <anchor>a97af424876ed4fc77702d183f38dc83c</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendUp</name>
      <anchorfile>class_wireless_mac_base.html</anchorfile>
      <anchor>a5454ec5040663e5af4ddb00f525a3caf</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NotificationBoard *</type>
      <name>nb</name>
      <anchorfile>class_wireless_mac_base.html</anchorfile>
      <anchor>a779ea8a0af7e4ef85c5faa85d6a281ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>uppergateIn</name>
      <anchorfile>class_wireless_mac_base.html</anchorfile>
      <anchor>a39e646fa2c0a9318a99fbe31e7f5aea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>uppergateOut</name>
      <anchorfile>class_wireless_mac_base.html</anchorfile>
      <anchor>a6c6bcf9c82a4695a5aef1dc6c325b86e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowergateIn</name>
      <anchorfile>class_wireless_mac_base.html</anchorfile>
      <anchor>a853dbb7a3e6a4afb665c6c407d9e4b03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowergateOut</name>
      <anchorfile>class_wireless_mac_base.html</anchorfile>
      <anchor>a87ed2e8f34b1a0dc6c02d532f808fff8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ConstType</name>
    <filename>namespace_const_type.html</filename>
    <member kind="variable">
      <type>const char</type>
      <name>libDataMarker</name>
      <anchorfile>namespace_const_type.html</anchorfile>
      <anchor>a8508f8afe8e287e0281c19895dbb82ea</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>prtDataMarker</name>
      <anchorfile>namespace_const_type.html</anchorfile>
      <anchor>a0155b7dea0d056a6a9bdba7db526d4fb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>UnknownData</name>
      <anchorfile>namespace_const_type.html</anchorfile>
      <anchor>aa420fb21ac0b7e11a3136ca9f392b721</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>NoLabel</name>
      <anchorfile>namespace_const_type.html</anchorfile>
      <anchor>a2eef76e17cf0d9b44d67242f8b919ee6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>wildcast</name>
      <anchorfile>namespace_const_type.html</anchorfile>
      <anchor>a43c92ceb4fb2521883284dc104a9af5e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>empty</name>
      <anchorfile>namespace_const_type.html</anchorfile>
      <anchor>a292c6824a659d30847032a3c0d1c0217</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>ldp_port</name>
      <anchorfile>namespace_const_type.html</anchorfile>
      <anchor>a3e52513fcc6c9eecd73ab4369eb00b16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>LDP_KIND</name>
      <anchorfile>namespace_const_type.html</anchorfile>
      <anchor>aef316a5cfb9408a60d2b5abfa85a3e22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>HOW_KIND</name>
      <anchorfile>namespace_const_type.html</anchorfile>
      <anchor>acfbe71c2603724a07b0374830aff2160</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>creator</name>
    <filename>namespacecreator.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>secondaryRouters</name>
      <anchorfile>namespacecreator.html</anchorfile>
      <anchor>ad2c1ad3cd677aa34deb8638829b69438</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>hostsPerRouter</name>
      <anchorfile>namespacecreator.html</anchorfile>
      <anchor>aa806a492c63163b8a8fdb74054821f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tuple</type>
      <name>mainRouterFile</name>
      <anchorfile>namespacecreator.html</anchorfile>
      <anchor>af5876fc8cd43b08198e336687396eab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tuple</type>
      <name>secondaryRouterFile</name>
      <anchorfile>namespacecreator.html</anchorfile>
      <anchor>acd03107c8f9326e996ce09cc844846c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tuple</type>
      <name>hostRoutingFile</name>
      <anchorfile>namespacecreator.html</anchorfile>
      <anchor>a577abc70ca7c724eaaa1c5f48ae4837c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tuple</type>
      <name>networkFile</name>
      <anchorfile>namespacecreator.html</anchorfile>
      <anchor>a091469d01f07ed443bc3da5a120856ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tuple</type>
      <name>omnetppiniFile</name>
      <anchorfile>namespacecreator.html</anchorfile>
      <anchor>aa6f5967db051f093b1952d6572f08c68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>INETFw</name>
    <filename>namespace_i_n_e_t_fw.html</filename>
    <class kind="struct">INETFw::in_addr</class>
    <class kind="struct">INETFw::ip</class>
    <class kind="struct">INETFw::ip_timestamp</class>
    <class kind="struct">INETFw::icmp_ra_addr</class>
    <class kind="struct">INETFw::icmp</class>
    <class kind="struct">INETFw::common_header</class>
    <class kind="struct">INETFw::chunk</class>
    <class kind="struct">INETFw::data_chunk</class>
    <class kind="struct">INETFw::init_chunk</class>
    <class kind="struct">INETFw::init_ack_chunk</class>
    <class kind="struct">INETFw::sack_chunk</class>
    <class kind="struct">INETFw::heartbeat_chunk</class>
    <class kind="struct">INETFw::heartbeat_ack_chunk</class>
    <class kind="struct">INETFw::abort_chunk</class>
    <class kind="struct">INETFw::shutdown_chunk</class>
    <class kind="struct">INETFw::shutdown_ack_chunk</class>
    <class kind="struct">INETFw::shutdown_complete_chunk</class>
    <class kind="struct">INETFw::cookie_echo_chunk</class>
    <class kind="struct">INETFw::cookie_ack_chunk</class>
    <class kind="struct">INETFw::error_chunk</class>
    <class kind="struct">INETFw::init_ipv4_address_parameter</class>
    <class kind="struct">INETFw::init_ipv6_address_parameter</class>
    <class kind="struct">INETFw::init_cookie_parameter</class>
    <class kind="struct">INETFw::cookie_parameter</class>
    <class kind="struct">INETFw::tlv</class>
    <class kind="struct">INETFw::supported_address_types_parameter</class>
    <class kind="struct">INETFw::heartbeat_info</class>
    <class kind="struct">INETFw::error_cause</class>
    <class kind="struct">INETFw::sack_gap</class>
    <class kind="struct">INETFw::sack_duptsn</class>
    <class kind="struct">INETFw::data_vector</class>
    <class kind="struct">INETFw::udphdr</class>
    <member kind="typedef">
      <type>uint8_t</type>
      <name>u_int8_t</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>a23812f1766cbbe0c6937e1f6a0bd1e44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint16_t</type>
      <name>u_int16_t</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>a6072db88dd85bd17edbe11fd6b549fc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>u_int32_t</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>adf1477229faac921e666df15f0b2393e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint64_t</type>
      <name>u_int64_t</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>a38563a06a87032668abf8d1f38e432b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>uchar</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>a9b4dc1e44f295beef00449594caada09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>ushort</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>ab83dab3a4f17cb2c315b96667bb2ac6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>uint</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>a7a7a977b39f779a2541f01094113f2e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>ulong</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>a91375c46de81adeef975dfba55a7ac6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>u_char</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>addded7fc9139f96ecde2be7640fd2168</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>u_short</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>aa670e1c87fd1f37e0370245c3660e2ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>u_int</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>a43e2f06570b9dd04cf51b8babde74a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>u_long</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>a76239570618a6d9fa72bffcab9357df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>u_int32_t</type>
      <name>in_addr_t</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>a779e0264fd3f7f10d2b38ecefcfeaaf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>u_int16_t</type>
      <name>n_short</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>a01865de570dce6ede2a3d9de920259fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>u_int32_t</type>
      <name>n_long</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>ab0ee9def2a61115a60290d8c8da871b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>u_int32_t</type>
      <name>n_time</name>
      <anchorfile>namespace_i_n_e_t_fw.html</anchorfile>
      <anchor>a3a80e9084be58a6137a1b2963c564655</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::in_addr</name>
    <filename>struct_i_n_e_t_fw_1_1in__addr.html</filename>
    <member kind="variable">
      <type>in_addr_t</type>
      <name>s_addr</name>
      <anchorfile>struct_i_n_e_t_fw_1_1in__addr.html</anchorfile>
      <anchor>a3b6ef12385f913cc23a199205d9bf858</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::ip</name>
    <filename>struct_i_n_e_t_fw_1_1ip.html</filename>
    <member kind="variable">
      <type>u_char</type>
      <name>ip_hl</name>
      <anchorfile>struct_i_n_e_t_fw_1_1ip.html</anchorfile>
      <anchor>a735917e7ba8e3512f790e748558ba0ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ip_v</name>
      <anchorfile>struct_i_n_e_t_fw_1_1ip.html</anchorfile>
      <anchor>ab74e6295152f54fb6789cf3e879e2e49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ip_tos</name>
      <anchorfile>struct_i_n_e_t_fw_1_1ip.html</anchorfile>
      <anchor>a6bb0ce0b741d5362c1ffb59de45c002f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>ip_len</name>
      <anchorfile>struct_i_n_e_t_fw_1_1ip.html</anchorfile>
      <anchor>a9b922c0c4825305ad111de9a1d490999</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>ip_id</name>
      <anchorfile>struct_i_n_e_t_fw_1_1ip.html</anchorfile>
      <anchor>a39ffb0f3d854db34ce84722763494e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>ip_off</name>
      <anchorfile>struct_i_n_e_t_fw_1_1ip.html</anchorfile>
      <anchor>aff8779cf5afee1aba77287abc6b3e647</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ip_ttl</name>
      <anchorfile>struct_i_n_e_t_fw_1_1ip.html</anchorfile>
      <anchor>af6da26caa84ccb1a03aaa1c4b908eb6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ip_p</name>
      <anchorfile>struct_i_n_e_t_fw_1_1ip.html</anchorfile>
      <anchor>a13e417b652ed826ff0c5cbdcddbfbfa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>ip_sum</name>
      <anchorfile>struct_i_n_e_t_fw_1_1ip.html</anchorfile>
      <anchor>a834452d6936e01a21447abeb037d87ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct in_addr ip_src</type>
      <name>ip_dst</name>
      <anchorfile>struct_i_n_e_t_fw_1_1ip.html</anchorfile>
      <anchor>a68892eac9dc7a7e27aef51358f93324f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::ip_timestamp</name>
    <filename>struct_i_n_e_t_fw_1_1ip__timestamp.html</filename>
    <class kind="union">INETFw::ip_timestamp::ipt_timestamp</class>
    <member kind="variable">
      <type>u_char</type>
      <name>ipt_code</name>
      <anchorfile>struct_i_n_e_t_fw_1_1ip__timestamp.html</anchorfile>
      <anchor>acef74409bb1cd69f42fd01ba477e84fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ipt_len</name>
      <anchorfile>struct_i_n_e_t_fw_1_1ip__timestamp.html</anchorfile>
      <anchor>aaa11624ff6570272524d53d862437cc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ipt_ptr</name>
      <anchorfile>struct_i_n_e_t_fw_1_1ip__timestamp.html</anchorfile>
      <anchor>aa1f551b443486c3ff9637e3ba7c99b34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ipt_flg</name>
      <anchorfile>struct_i_n_e_t_fw_1_1ip__timestamp.html</anchorfile>
      <anchor>a07a852aa3d67f9369f358ce832b1b270</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ipt_oflw</name>
      <anchorfile>struct_i_n_e_t_fw_1_1ip__timestamp.html</anchorfile>
      <anchor>af00cb31df56ab314a380f4b57a42af94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>union INETFw::ip_timestamp::ipt_timestamp</type>
      <name>ipt_timestamp</name>
      <anchorfile>struct_i_n_e_t_fw_1_1ip__timestamp.html</anchorfile>
      <anchor>a1924744b9a0a42d1c00b8a5a52c0b7c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>INETFw::ip_timestamp::ipt_timestamp</name>
    <filename>union_i_n_e_t_fw_1_1ip__timestamp_1_1ipt__timestamp.html</filename>
    <class kind="struct">INETFw::ip_timestamp::ipt_timestamp::ipt_ta</class>
    <member kind="variable">
      <type>n_long</type>
      <name>ipt_time</name>
      <anchorfile>union_i_n_e_t_fw_1_1ip__timestamp_1_1ipt__timestamp.html</anchorfile>
      <anchor>a20618d2796a928f09e2a57e88d330fbc</anchor>
      <arglist>[1]</arglist>
    </member>
    <member kind="variable">
      <type>struct INETFw::ip_timestamp::ipt_timestamp::ipt_ta</type>
      <name>ipt_ta</name>
      <anchorfile>union_i_n_e_t_fw_1_1ip__timestamp_1_1ipt__timestamp.html</anchorfile>
      <anchor>ab5fb92a2b2560fd596d42ff15fb08502</anchor>
      <arglist>[1]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::ip_timestamp::ipt_timestamp::ipt_ta</name>
    <filename>struct_i_n_e_t_fw_1_1ip__timestamp_1_1ipt__timestamp_1_1ipt__ta.html</filename>
    <member kind="variable">
      <type>struct in_addr</type>
      <name>ipt_addr</name>
      <anchorfile>struct_i_n_e_t_fw_1_1ip__timestamp_1_1ipt__timestamp_1_1ipt__ta.html</anchorfile>
      <anchor>a8ec80581dfc8435e6a746cdb528f7208</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_long</type>
      <name>ipt_time</name>
      <anchorfile>struct_i_n_e_t_fw_1_1ip__timestamp_1_1ipt__timestamp_1_1ipt__ta.html</anchorfile>
      <anchor>a4a029c5c4b19e3510ce44fe88fb1c754</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::icmp_ra_addr</name>
    <filename>struct_i_n_e_t_fw_1_1icmp__ra__addr.html</filename>
    <member kind="variable">
      <type>u_int32_t</type>
      <name>ira_addr</name>
      <anchorfile>struct_i_n_e_t_fw_1_1icmp__ra__addr.html</anchorfile>
      <anchor>af7a6706a9195ef23af02b6fc64ebf753</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_int32_t</type>
      <name>ira_preference</name>
      <anchorfile>struct_i_n_e_t_fw_1_1icmp__ra__addr.html</anchorfile>
      <anchor>a7d24bad9db1be9d637ed50f84da1242a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::icmp</name>
    <filename>struct_i_n_e_t_fw_1_1icmp.html</filename>
    <member kind="variable">
      <type>u_char</type>
      <name>icmp_type</name>
      <anchorfile>struct_i_n_e_t_fw_1_1icmp.html</anchorfile>
      <anchor>a6e91d36369576323d6b36ddbb6fa6ebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>icmp_code</name>
      <anchorfile>struct_i_n_e_t_fw_1_1icmp.html</anchorfile>
      <anchor>ab16c210091fbbd19fd18a3e88aa783d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>icmp_cksum</name>
      <anchorfile>struct_i_n_e_t_fw_1_1icmp.html</anchorfile>
      <anchor>a624dfdee437245270e2979e40d7d97a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>union INETFw::icmp::@8</type>
      <name>icmp_hun</name>
      <anchorfile>struct_i_n_e_t_fw_1_1icmp.html</anchorfile>
      <anchor>aaf3663f2bdcfe5429adacb441daf54b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ih_pptr</name>
      <anchorfile>union_i_n_e_t_fw_1_1icmp_1_1@8.html</anchorfile>
      <anchor>a9afe4757decd22c05f8e20c1fbf902d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct in_addr</type>
      <name>ih_gwaddr</name>
      <anchorfile>union_i_n_e_t_fw_1_1icmp_1_1@8.html</anchorfile>
      <anchor>a24eebb46ab18d3d12a830792fb37d27f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct INETFw::icmp::@8::ih_idseq</type>
      <name>ih_idseq</name>
      <anchorfile>union_i_n_e_t_fw_1_1icmp_1_1@8.html</anchorfile>
      <anchor>ad14ab4447b2c0964b9b95d9aa693a1b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_short</type>
      <name>icd_id</name>
      <anchorfile>struct_i_n_e_t_fw_1_1icmp_1_1@8_1_1ih__idseq.html</anchorfile>
      <anchor>a6d6cfd1696dedd6968dc28c2a58e0bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_short</type>
      <name>icd_seq</name>
      <anchorfile>struct_i_n_e_t_fw_1_1icmp_1_1@8_1_1ih__idseq.html</anchorfile>
      <anchor>a3e3fe65d7638e5676d67591a6eae141e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ih_void</name>
      <anchorfile>union_i_n_e_t_fw_1_1icmp_1_1@8.html</anchorfile>
      <anchor>ae51af3bc403f6a2633ed145fc25b8ff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct INETFw::icmp::@8::ih_pmtu</type>
      <name>ih_pmtu</name>
      <anchorfile>union_i_n_e_t_fw_1_1icmp_1_1@8.html</anchorfile>
      <anchor>a2b1774456444009c50232ee8f4c7842c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_short</type>
      <name>ipm_void</name>
      <anchorfile>struct_i_n_e_t_fw_1_1icmp_1_1@8_1_1ih__pmtu.html</anchorfile>
      <anchor>a3f86bad64f3b724907c76ff106e75284</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_short</type>
      <name>ipm_nextmtu</name>
      <anchorfile>struct_i_n_e_t_fw_1_1icmp_1_1@8_1_1ih__pmtu.html</anchorfile>
      <anchor>a738f17a6fa26bbb77fe1d1fb3e84632b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct INETFw::icmp::@8::ih_rtradv</type>
      <name>ih_rtradv</name>
      <anchorfile>union_i_n_e_t_fw_1_1icmp_1_1@8.html</anchorfile>
      <anchor>a390f576a874d7b302f5bf3d057a2eac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>irt_num_addrs</name>
      <anchorfile>struct_i_n_e_t_fw_1_1icmp_1_1@8_1_1ih__rtradv.html</anchorfile>
      <anchor>ab421560e7d0188ac51bc4b31c07977ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>irt_wpa</name>
      <anchorfile>struct_i_n_e_t_fw_1_1icmp_1_1@8_1_1ih__rtradv.html</anchorfile>
      <anchor>a18d868814e20710dd05fbbc766e3b577</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_int16_t</type>
      <name>irt_lifetime</name>
      <anchorfile>struct_i_n_e_t_fw_1_1icmp_1_1@8_1_1ih__rtradv.html</anchorfile>
      <anchor>aba834a3ac035de8a834505523b59cf5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>union INETFw::icmp::@9</type>
      <name>icmp_dun</name>
      <anchorfile>struct_i_n_e_t_fw_1_1icmp.html</anchorfile>
      <anchor>a753a203b5e56936a3a4bf48b33a0fceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct INETFw::icmp::@9::id_ts</type>
      <name>id_ts</name>
      <anchorfile>union_i_n_e_t_fw_1_1icmp_1_1@9.html</anchorfile>
      <anchor>a13210e97ef4b8775b21d494c2976c705</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_time</type>
      <name>its_otime</name>
      <anchorfile>struct_i_n_e_t_fw_1_1icmp_1_1@9_1_1id__ts.html</anchorfile>
      <anchor>a4861ea2522e0467f51ce1695bcf87d52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_time</type>
      <name>its_rtime</name>
      <anchorfile>struct_i_n_e_t_fw_1_1icmp_1_1@9_1_1id__ts.html</anchorfile>
      <anchor>abc6a5377d512bcc07072d5f3ce1f4141</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_time</type>
      <name>its_ttime</name>
      <anchorfile>struct_i_n_e_t_fw_1_1icmp_1_1@9_1_1id__ts.html</anchorfile>
      <anchor>abad7f5bebb2a59d1e7fdf1ca62b8ba87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct INETFw::icmp::@9::id_ip</type>
      <name>id_ip</name>
      <anchorfile>union_i_n_e_t_fw_1_1icmp_1_1@9.html</anchorfile>
      <anchor>a1d37b34e1d776b437d29ab8e53370681</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct ip</type>
      <name>idi_ip</name>
      <anchorfile>struct_i_n_e_t_fw_1_1icmp_1_1@9_1_1id__ip.html</anchorfile>
      <anchor>a10b3b8ecf921964f056f4f7049719e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct icmp_ra_addr</type>
      <name>id_radv</name>
      <anchorfile>union_i_n_e_t_fw_1_1icmp_1_1@9.html</anchorfile>
      <anchor>a5f36cd812d096a9dea43e40890eab4f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_int32_t</type>
      <name>id_mask</name>
      <anchorfile>union_i_n_e_t_fw_1_1icmp_1_1@9.html</anchorfile>
      <anchor>a4bba436d0d1e05d531407d4daa83a874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>id_data</name>
      <anchorfile>union_i_n_e_t_fw_1_1icmp_1_1@9.html</anchorfile>
      <anchor>abb4b0d20fbfc665eaabdf9df4c614a55</anchor>
      <arglist>[1]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::common_header</name>
    <filename>struct_i_n_e_t_fw_1_1common__header.html</filename>
    <member kind="variable">
      <type>unsigned short</type>
      <name>source_port</name>
      <anchorfile>struct_i_n_e_t_fw_1_1common__header.html</anchorfile>
      <anchor>a16df1d45094b56d46256db05ebb39fc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>destination_port</name>
      <anchorfile>struct_i_n_e_t_fw_1_1common__header.html</anchorfile>
      <anchor>a6b69320aeac29fa21ad450b2104336c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>verification_tag</name>
      <anchorfile>struct_i_n_e_t_fw_1_1common__header.html</anchorfile>
      <anchor>a7405e47d14a91f6fa6558a25770b94b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>checksum</name>
      <anchorfile>struct_i_n_e_t_fw_1_1common__header.html</anchorfile>
      <anchor>ad9a0af9b8746c7819868702a962fabea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::chunk</name>
    <filename>struct_i_n_e_t_fw_1_1chunk.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>struct_i_n_e_t_fw_1_1chunk.html</anchorfile>
      <anchor>a69925dfff6d4ce8883b99cfafed2ce27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>flags</name>
      <anchorfile>struct_i_n_e_t_fw_1_1chunk.html</anchorfile>
      <anchor>a99aa72f9aff492e4a5e4447dd0d53e05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>struct_i_n_e_t_fw_1_1chunk.html</anchorfile>
      <anchor>a022a582b013130ede9f353c628d32b49</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::data_chunk</name>
    <filename>struct_i_n_e_t_fw_1_1data__chunk.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>struct_i_n_e_t_fw_1_1data__chunk.html</anchorfile>
      <anchor>a109e8b0a1dcbe8922d54aa7a1e959e33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>flags</name>
      <anchorfile>struct_i_n_e_t_fw_1_1data__chunk.html</anchorfile>
      <anchor>a41dcf9feaa1ad2f81414ca7eab15e3b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>struct_i_n_e_t_fw_1_1data__chunk.html</anchorfile>
      <anchor>a0ab55ad1c1ba0ab2aa4082aed1ccf537</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>tsn</name>
      <anchorfile>struct_i_n_e_t_fw_1_1data__chunk.html</anchorfile>
      <anchor>a25db3ec53867059f7ffe5b050a43ae14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>sid</name>
      <anchorfile>struct_i_n_e_t_fw_1_1data__chunk.html</anchorfile>
      <anchor>a22aace84bd5e2295d4e706a55437cc1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>ssn</name>
      <anchorfile>struct_i_n_e_t_fw_1_1data__chunk.html</anchorfile>
      <anchor>a240c6255e13bad8f6a7d41f5ec3559ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>ppi</name>
      <anchorfile>struct_i_n_e_t_fw_1_1data__chunk.html</anchorfile>
      <anchor>a379ae5a1ddc385ee44d98cffd39632ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>user_data</name>
      <anchorfile>struct_i_n_e_t_fw_1_1data__chunk.html</anchorfile>
      <anchor>a3747c423ac3fa73c5954351d1e38ded0</anchor>
      <arglist>[0]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::init_chunk</name>
    <filename>struct_i_n_e_t_fw_1_1init__chunk.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__chunk.html</anchorfile>
      <anchor>a9cdebf76f678051b3692f14e6d92aae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>flags</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__chunk.html</anchorfile>
      <anchor>a8b0d56d06d49b51197d6200cddba834a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__chunk.html</anchorfile>
      <anchor>abec859657533276691154da1930ab359</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>initiate_tag</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__chunk.html</anchorfile>
      <anchor>a7315d4164cc15995adf0bdec0511af1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>a_rwnd</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__chunk.html</anchorfile>
      <anchor>a54cf1029a7b2d050336e4c76cd197654</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>mos</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__chunk.html</anchorfile>
      <anchor>a947a36c02bac8bb6549ad270fe51714e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>mis</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__chunk.html</anchorfile>
      <anchor>ae3094436bd6843ba61ab9b20f44e87f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>initial_tsn</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__chunk.html</anchorfile>
      <anchor>ad0e25ef59a88465391ed7ed5608f9b70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>parameter</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__chunk.html</anchorfile>
      <anchor>a574d759c200094feb71a527d39de1c94</anchor>
      <arglist>[0]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::init_ack_chunk</name>
    <filename>struct_i_n_e_t_fw_1_1init__ack__chunk.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__ack__chunk.html</anchorfile>
      <anchor>a0b3250c76a08f6fa3363814b5f91f25c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>flags</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__ack__chunk.html</anchorfile>
      <anchor>a4d70902b4a99a5b76947b077effe19a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__ack__chunk.html</anchorfile>
      <anchor>a8c48ee6a532fe3294acbb64acee05184</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>initiate_tag</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__ack__chunk.html</anchorfile>
      <anchor>a7a54bd2ed88345cdb5c902f56bc8d3c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>a_rwnd</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__ack__chunk.html</anchorfile>
      <anchor>aa95033ee21e5290df42be51a8b696679</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>mos</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__ack__chunk.html</anchorfile>
      <anchor>af32685d03e6d9489916b3e6824261ac5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>mis</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__ack__chunk.html</anchorfile>
      <anchor>af18c98e1baef7393f88d5141b17e0c91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>initial_tsn</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__ack__chunk.html</anchorfile>
      <anchor>af9294b9a9ff18b46973e93b122b74413</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>parameter</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__ack__chunk.html</anchorfile>
      <anchor>a41f0c942c00df414bce98cea3a93ef7d</anchor>
      <arglist>[0]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::sack_chunk</name>
    <filename>struct_i_n_e_t_fw_1_1sack__chunk.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>struct_i_n_e_t_fw_1_1sack__chunk.html</anchorfile>
      <anchor>a82a5148eb8f2d054a93bc15b01f90ed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>flags</name>
      <anchorfile>struct_i_n_e_t_fw_1_1sack__chunk.html</anchorfile>
      <anchor>a1db99d729c62fab4c73713b4859ddb7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>struct_i_n_e_t_fw_1_1sack__chunk.html</anchorfile>
      <anchor>a00b437d0173221e4f0962cecaafbe7e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>cum_tsn_ack</name>
      <anchorfile>struct_i_n_e_t_fw_1_1sack__chunk.html</anchorfile>
      <anchor>a561d6bef13b80381e25a0712b3b283a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>a_rwnd</name>
      <anchorfile>struct_i_n_e_t_fw_1_1sack__chunk.html</anchorfile>
      <anchor>a9d989ff6f677f8d5afcbbe2d73ece439</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>nr_of_gaps</name>
      <anchorfile>struct_i_n_e_t_fw_1_1sack__chunk.html</anchorfile>
      <anchor>addf4a98ed2d76970afe2a63340a95f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>nr_of_dups</name>
      <anchorfile>struct_i_n_e_t_fw_1_1sack__chunk.html</anchorfile>
      <anchor>a36b9ecced9fc135bc8906b8d5a58c7ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>tsns</name>
      <anchorfile>struct_i_n_e_t_fw_1_1sack__chunk.html</anchorfile>
      <anchor>a2bd969342983c52a6ee459f819b8c820</anchor>
      <arglist>[0]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::heartbeat_chunk</name>
    <filename>struct_i_n_e_t_fw_1_1heartbeat__chunk.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>struct_i_n_e_t_fw_1_1heartbeat__chunk.html</anchorfile>
      <anchor>a024a36abc0874b6ec935c82aa1c09e45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>flags</name>
      <anchorfile>struct_i_n_e_t_fw_1_1heartbeat__chunk.html</anchorfile>
      <anchor>a90eda309e3081f402b0fcbd7cb2b4ee9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>struct_i_n_e_t_fw_1_1heartbeat__chunk.html</anchorfile>
      <anchor>a4417dfe66d15d64507e259dc533adead</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>heartbeat_info</name>
      <anchorfile>struct_i_n_e_t_fw_1_1heartbeat__chunk.html</anchorfile>
      <anchor>a9cfa3ce0d55977ae1e05c3912ca0c754</anchor>
      <arglist>[0]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::heartbeat_ack_chunk</name>
    <filename>struct_i_n_e_t_fw_1_1heartbeat__ack__chunk.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>struct_i_n_e_t_fw_1_1heartbeat__ack__chunk.html</anchorfile>
      <anchor>aaef8cb3cb98d2936416619092e1409de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>flags</name>
      <anchorfile>struct_i_n_e_t_fw_1_1heartbeat__ack__chunk.html</anchorfile>
      <anchor>a40e6a8bc2b1429b5ed0507e5e131051c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>struct_i_n_e_t_fw_1_1heartbeat__ack__chunk.html</anchorfile>
      <anchor>af05e4e0ce777bc2ce5272709d26bfb1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>heartbeat_info</name>
      <anchorfile>struct_i_n_e_t_fw_1_1heartbeat__ack__chunk.html</anchorfile>
      <anchor>a5f854dc5bc74f201f4ff525663242502</anchor>
      <arglist>[0]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::abort_chunk</name>
    <filename>struct_i_n_e_t_fw_1_1abort__chunk.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>struct_i_n_e_t_fw_1_1abort__chunk.html</anchorfile>
      <anchor>afd7b4ac79c01f4f7daf23664cd483832</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>flags</name>
      <anchorfile>struct_i_n_e_t_fw_1_1abort__chunk.html</anchorfile>
      <anchor>af7c6588f89c568b6ca8dcf40cb32daf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>struct_i_n_e_t_fw_1_1abort__chunk.html</anchorfile>
      <anchor>ac0550cef90bd35ba1bf8430ee783743d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>error_causes</name>
      <anchorfile>struct_i_n_e_t_fw_1_1abort__chunk.html</anchorfile>
      <anchor>a233058ac9e068b3c140312abdf399b36</anchor>
      <arglist>[0]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::shutdown_chunk</name>
    <filename>struct_i_n_e_t_fw_1_1shutdown__chunk.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>struct_i_n_e_t_fw_1_1shutdown__chunk.html</anchorfile>
      <anchor>af51d4366e493acaeda6614987c7572ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>flags</name>
      <anchorfile>struct_i_n_e_t_fw_1_1shutdown__chunk.html</anchorfile>
      <anchor>a8c11a5e6bce33753bede20be4116b3a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>struct_i_n_e_t_fw_1_1shutdown__chunk.html</anchorfile>
      <anchor>a3ec4f8285d54892e78ec52507e542f96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>cumulative_tsn_ack</name>
      <anchorfile>struct_i_n_e_t_fw_1_1shutdown__chunk.html</anchorfile>
      <anchor>a294183dee80de069c3e9583ff376b791</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::shutdown_ack_chunk</name>
    <filename>struct_i_n_e_t_fw_1_1shutdown__ack__chunk.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>struct_i_n_e_t_fw_1_1shutdown__ack__chunk.html</anchorfile>
      <anchor>ae746b496e56ae3c2b8855f7ef4f04975</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>flags</name>
      <anchorfile>struct_i_n_e_t_fw_1_1shutdown__ack__chunk.html</anchorfile>
      <anchor>afff3afbebbb06fd240b35d60ace74571</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>struct_i_n_e_t_fw_1_1shutdown__ack__chunk.html</anchorfile>
      <anchor>a5bb998c2808be3907aa9b5475b1c56ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::shutdown_complete_chunk</name>
    <filename>struct_i_n_e_t_fw_1_1shutdown__complete__chunk.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>struct_i_n_e_t_fw_1_1shutdown__complete__chunk.html</anchorfile>
      <anchor>a8f6c99af679dd511647d2747bf0a630d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>flags</name>
      <anchorfile>struct_i_n_e_t_fw_1_1shutdown__complete__chunk.html</anchorfile>
      <anchor>a234c2bbc04b3655058a07315144f5dc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>struct_i_n_e_t_fw_1_1shutdown__complete__chunk.html</anchorfile>
      <anchor>a81f2f464f168ed2650f5cf162ba95072</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::cookie_echo_chunk</name>
    <filename>struct_i_n_e_t_fw_1_1cookie__echo__chunk.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>struct_i_n_e_t_fw_1_1cookie__echo__chunk.html</anchorfile>
      <anchor>aacca81a316c96b6a54ea6d7d6daedc97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>flags</name>
      <anchorfile>struct_i_n_e_t_fw_1_1cookie__echo__chunk.html</anchorfile>
      <anchor>a88961a5a30664c689c92ef91d1e20428</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>struct_i_n_e_t_fw_1_1cookie__echo__chunk.html</anchorfile>
      <anchor>a952814830fb2a5568b7a0b540ae8841e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>state_cookie</name>
      <anchorfile>struct_i_n_e_t_fw_1_1cookie__echo__chunk.html</anchorfile>
      <anchor>aef00e45b7a6273712cb7c75b4b459c10</anchor>
      <arglist>[0]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::cookie_ack_chunk</name>
    <filename>struct_i_n_e_t_fw_1_1cookie__ack__chunk.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>struct_i_n_e_t_fw_1_1cookie__ack__chunk.html</anchorfile>
      <anchor>a908232d2d65b3f327c8a8e7712f0ed2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>flags</name>
      <anchorfile>struct_i_n_e_t_fw_1_1cookie__ack__chunk.html</anchorfile>
      <anchor>afcb556602ae372c14aafb8f76d6e90f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>struct_i_n_e_t_fw_1_1cookie__ack__chunk.html</anchorfile>
      <anchor>a95acfc6cbf8dfc2f783f2523f071f7f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::error_chunk</name>
    <filename>struct_i_n_e_t_fw_1_1error__chunk.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>struct_i_n_e_t_fw_1_1error__chunk.html</anchorfile>
      <anchor>a3ba5d36bfe9d3c3b41b6fe6ebb94a87e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>flags</name>
      <anchorfile>struct_i_n_e_t_fw_1_1error__chunk.html</anchorfile>
      <anchor>a8a289af1659045a9b902cf5c6334fc59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>struct_i_n_e_t_fw_1_1error__chunk.html</anchorfile>
      <anchor>ab5bfa384fe76de61e158ddde3d148fc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>error_causes</name>
      <anchorfile>struct_i_n_e_t_fw_1_1error__chunk.html</anchorfile>
      <anchor>a5fe24450008ac675af67db68daf82943</anchor>
      <arglist>[0]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::init_ipv4_address_parameter</name>
    <filename>struct_i_n_e_t_fw_1_1init__ipv4__address__parameter.html</filename>
    <member kind="variable">
      <type>unsigned short</type>
      <name>type</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__ipv4__address__parameter.html</anchorfile>
      <anchor>ae6f54209bc788f8225512e9caf290da0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__ipv4__address__parameter.html</anchorfile>
      <anchor>a823367d591586e1469d57df9a3278d30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>address</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__ipv4__address__parameter.html</anchorfile>
      <anchor>a9538c188df90d12ec2860698be2d2368</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::init_ipv6_address_parameter</name>
    <filename>struct_i_n_e_t_fw_1_1init__ipv6__address__parameter.html</filename>
    <member kind="variable">
      <type>unsigned short</type>
      <name>type</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__ipv6__address__parameter.html</anchorfile>
      <anchor>ac3b7deceb526226f1d728d58d9e66ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__ipv6__address__parameter.html</anchorfile>
      <anchor>af00833badde3e5afe2d0d99d734f59d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>address</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__ipv6__address__parameter.html</anchorfile>
      <anchor>adfb4cf9aa03f83ebf1636acd6e501af4</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::init_cookie_parameter</name>
    <filename>struct_i_n_e_t_fw_1_1init__cookie__parameter.html</filename>
    <member kind="variable">
      <type>unsigned short</type>
      <name>type</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__cookie__parameter.html</anchorfile>
      <anchor>a14e5be998afe475f8ff332622f3bfc5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__cookie__parameter.html</anchorfile>
      <anchor>aca52f335a966cd309357456ebdffdd73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>creationTime</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__cookie__parameter.html</anchorfile>
      <anchor>aebe858a7bbcb4e6993ce77152b5fdd2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>localTag</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__cookie__parameter.html</anchorfile>
      <anchor>ab2cae663323b64da289760e11bf97a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>peerTag</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__cookie__parameter.html</anchorfile>
      <anchor>af89b5edd30a497adb8d1236173653c16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>localTieTag</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__cookie__parameter.html</anchorfile>
      <anchor>aa289cc30d97125318f42cb82346cb042</anchor>
      <arglist>[32]</arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>peerTieTag</name>
      <anchorfile>struct_i_n_e_t_fw_1_1init__cookie__parameter.html</anchorfile>
      <anchor>a4ef1c054d13571f1aa5c827596f18989</anchor>
      <arglist>[32]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::cookie_parameter</name>
    <filename>struct_i_n_e_t_fw_1_1cookie__parameter.html</filename>
    <member kind="variable">
      <type>unsigned int</type>
      <name>creationTime</name>
      <anchorfile>struct_i_n_e_t_fw_1_1cookie__parameter.html</anchorfile>
      <anchor>a96b0f36a38c9886943c75ba5b29c0ef0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>localTag</name>
      <anchorfile>struct_i_n_e_t_fw_1_1cookie__parameter.html</anchorfile>
      <anchor>a023a4299beb2cfb28dd2ef1dfd0478c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>peerTag</name>
      <anchorfile>struct_i_n_e_t_fw_1_1cookie__parameter.html</anchorfile>
      <anchor>a648153b48ec8424e1f72ff921b8a644d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>localTieTag</name>
      <anchorfile>struct_i_n_e_t_fw_1_1cookie__parameter.html</anchorfile>
      <anchor>ad99c0071b11d8dfd434ec386226611f7</anchor>
      <arglist>[32]</arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>peerTieTag</name>
      <anchorfile>struct_i_n_e_t_fw_1_1cookie__parameter.html</anchorfile>
      <anchor>a34286a6e985ef4527a947f4199333dc0</anchor>
      <arglist>[32]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::tlv</name>
    <filename>struct_i_n_e_t_fw_1_1tlv.html</filename>
    <member kind="variable">
      <type>unsigned short</type>
      <name>type</name>
      <anchorfile>struct_i_n_e_t_fw_1_1tlv.html</anchorfile>
      <anchor>a0376609c5b5aeb16ae4840581987d033</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>struct_i_n_e_t_fw_1_1tlv.html</anchorfile>
      <anchor>ad8504a2c0218d4213b377e2ddb240a9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>value</name>
      <anchorfile>struct_i_n_e_t_fw_1_1tlv.html</anchorfile>
      <anchor>ab0de063235e7569ee8c41a4d3f94312c</anchor>
      <arglist>[0]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::supported_address_types_parameter</name>
    <filename>struct_i_n_e_t_fw_1_1supported__address__types__parameter.html</filename>
    <member kind="variable">
      <type>unsigned short</type>
      <name>type</name>
      <anchorfile>struct_i_n_e_t_fw_1_1supported__address__types__parameter.html</anchorfile>
      <anchor>a149ee2f7dad36d74724e488903940246</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>struct_i_n_e_t_fw_1_1supported__address__types__parameter.html</anchorfile>
      <anchor>a51610238a939c7fd088bf7a795d70357</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>address_type</name>
      <anchorfile>struct_i_n_e_t_fw_1_1supported__address__types__parameter.html</anchorfile>
      <anchor>a11dffde51b23deb764cd03e2f340db26</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::heartbeat_info</name>
    <filename>struct_i_n_e_t_fw_1_1heartbeat__info.html</filename>
    <member kind="variable">
      <type>unsigned short</type>
      <name>type</name>
      <anchorfile>struct_i_n_e_t_fw_1_1heartbeat__info.html</anchorfile>
      <anchor>a9c496e01fb626983dd7449c4d299c4dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>struct_i_n_e_t_fw_1_1heartbeat__info.html</anchorfile>
      <anchor>a165225a4bed745a098ebc07d514b0a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>union INETFw::heartbeat_info::@10</type>
      <name>heartbeat_info_union</name>
      <anchorfile>struct_i_n_e_t_fw_1_1heartbeat__info.html</anchorfile>
      <anchor>a660043450552ea6e7f2593dea66fcccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>info</name>
      <anchorfile>union_i_n_e_t_fw_1_1heartbeat__info_1_1@10.html</anchorfile>
      <anchor>ae1d828149c76458ba57983cb40cc1dc0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>struct INETFw::heartbeat_info::@10::@11</type>
      <name>addr_and_time</name>
      <anchorfile>union_i_n_e_t_fw_1_1heartbeat__info_1_1@10.html</anchorfile>
      <anchor>a65d6066a6fb2ee130286e14aa6da93e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>addr</name>
      <anchorfile>struct_i_n_e_t_fw_1_1heartbeat__info_1_1@10_1_1@11.html</anchorfile>
      <anchor>a838ffa93824993403b740864a1e69f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>time</name>
      <anchorfile>struct_i_n_e_t_fw_1_1heartbeat__info_1_1@10_1_1@11.html</anchorfile>
      <anchor>a74d8af351aaa23f665892c3c3d22d5bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::error_cause</name>
    <filename>struct_i_n_e_t_fw_1_1error__cause.html</filename>
    <member kind="variable">
      <type>unsigned short</type>
      <name>cause_code</name>
      <anchorfile>struct_i_n_e_t_fw_1_1error__cause.html</anchorfile>
      <anchor>ab4f60e84cc5d646726d5eabfc2fd8d92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>length</name>
      <anchorfile>struct_i_n_e_t_fw_1_1error__cause.html</anchorfile>
      <anchor>a78866bd0dbaf4d4c3652fda6362d04ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>info</name>
      <anchorfile>struct_i_n_e_t_fw_1_1error__cause.html</anchorfile>
      <anchor>a9e7677d29ccdd69535fff27c181e7450</anchor>
      <arglist>[0]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::sack_gap</name>
    <filename>struct_i_n_e_t_fw_1_1sack__gap.html</filename>
    <member kind="variable">
      <type>unsigned short</type>
      <name>start</name>
      <anchorfile>struct_i_n_e_t_fw_1_1sack__gap.html</anchorfile>
      <anchor>a06092a86c2ef2a22d5412e2d7096563f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>stop</name>
      <anchorfile>struct_i_n_e_t_fw_1_1sack__gap.html</anchorfile>
      <anchor>aff0a1d1c21dd6d36e7b0fff135c93e23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::sack_duptsn</name>
    <filename>struct_i_n_e_t_fw_1_1sack__duptsn.html</filename>
    <member kind="variable">
      <type>unsigned int</type>
      <name>tsn</name>
      <anchorfile>struct_i_n_e_t_fw_1_1sack__duptsn.html</anchorfile>
      <anchor>a264c16210059305d5716d62f3f44366e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::data_vector</name>
    <filename>struct_i_n_e_t_fw_1_1data__vector.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>data</name>
      <anchorfile>struct_i_n_e_t_fw_1_1data__vector.html</anchorfile>
      <anchor>afde96dce63b62a4c06a7deb55600afff</anchor>
      <arglist>[0]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::udphdr</name>
    <filename>struct_i_n_e_t_fw_1_1udphdr.html</filename>
    <member kind="variable">
      <type>u_short</type>
      <name>uh_sport</name>
      <anchorfile>struct_i_n_e_t_fw_1_1udphdr.html</anchorfile>
      <anchor>ab8bbf67c9a04ceefd4980db520b7a822</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>uh_dport</name>
      <anchorfile>struct_i_n_e_t_fw_1_1udphdr.html</anchorfile>
      <anchor>a79560505dfa185351e697b1578916d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>uh_ulen</name>
      <anchorfile>struct_i_n_e_t_fw_1_1udphdr.html</anchorfile>
      <anchor>a3cd66635449a8a7acff3cc62e2613151</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>uh_sum</name>
      <anchorfile>struct_i_n_e_t_fw_1_1udphdr.html</anchorfile>
      <anchor>a8afa08cfb47f6f71fab36638c50fde28</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>OPP_Global</name>
    <filename>namespace_o_p_p___global.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>ltostr</name>
      <anchorfile>namespace_o_p_p___global.html</anchorfile>
      <anchor>a64ba6d3fb361bb5591c36db6dc01f9d8</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>dtostr</name>
      <anchorfile>namespace_o_p_p___global.html</anchorfile>
      <anchor>a5545cd41f8cfd68ece1adc16fa40db91</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>atod</name>
      <anchorfile>namespace_o_p_p___global.html</anchorfile>
      <anchor>a7adfc7b335166f5c41477f2181f495c3</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>atoul</name>
      <anchorfile>namespace_o_p_p___global.html</anchorfile>
      <anchor>a7a945483736b99900d3da3c648c33f5e</anchor>
      <arglist>(const char *s)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>OSPF</name>
    <filename>namespace_o_s_p_f.html</filename>
    <class kind="class">OSPF::Interface</class>
    <class kind="class">OSPF::InterfaceState</class>
    <class kind="class">OSPF::InterfaceStateBackup</class>
    <class kind="class">OSPF::InterfaceStateDesignatedRouter</class>
    <class kind="class">OSPF::InterfaceStateDown</class>
    <class kind="class">OSPF::InterfaceStateLoopback</class>
    <class kind="class">OSPF::InterfaceStateNotDesignatedRouter</class>
    <class kind="class">OSPF::InterfaceStatePointToPoint</class>
    <class kind="class">OSPF::InterfaceStateWaiting</class>
    <class kind="class">OSPF::DatabaseDescriptionHandler</class>
    <class kind="class">OSPF::HelloHandler</class>
    <class kind="class">OSPF::IMessageHandler</class>
    <class kind="class">OSPF::LinkStateAcknowledgementHandler</class>
    <class kind="class">OSPF::LinkStateRequestHandler</class>
    <class kind="class">OSPF::LinkStateUpdateHandler</class>
    <class kind="class">OSPF::MessageHandler</class>
    <class kind="class">OSPF::Neighbor</class>
    <class kind="class">OSPF::NeighborState</class>
    <class kind="class">OSPF::NeighborStateAttempt</class>
    <class kind="class">OSPF::NeighborStateDown</class>
    <class kind="class">OSPF::NeighborStateExchange</class>
    <class kind="class">OSPF::NeighborStateExchangeStart</class>
    <class kind="class">OSPF::NeighborStateFull</class>
    <class kind="class">OSPF::NeighborStateInit</class>
    <class kind="class">OSPF::NeighborStateLoading</class>
    <class kind="class">OSPF::NeighborStateTwoWay</class>
    <class kind="struct">OSPF::NextHop</class>
    <class kind="class">OSPF::RoutingInfo</class>
    <class kind="class">OSPF::LSATrackingInfo</class>
    <class kind="class">OSPF::RouterLSA</class>
    <class kind="class">OSPF::NetworkLSA</class>
    <class kind="class">OSPF::SummaryLSA</class>
    <class kind="class">OSPF::ASExternalLSA</class>
    <class kind="class">OSPF::Area</class>
    <class kind="struct">OSPF::AuthenticationKeyType</class>
    <class kind="struct">OSPF::IPv4Address</class>
    <class kind="class">OSPF::IPv4Address_Less</class>
    <class kind="struct">OSPF::IPv4AddressRange</class>
    <class kind="class">OSPF::IPv4AddressRange_Less</class>
    <class kind="struct">OSPF::HostRouteParameters</class>
    <class kind="struct">OSPF::LSAKeyType</class>
    <class kind="class">OSPF::LSAKeyType_Less</class>
    <class kind="struct">OSPF::DesignatedRouterID</class>
    <class kind="class">OSPF::Router</class>
    <class kind="class">OSPF::RoutingTableEntry</class>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>Metric</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>a4a99812a2d079df0f7208f2740cdb0ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>RouterID</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>ad64f22839cca7ec05fee5b7596411197</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>AreaID</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>a8d10c460f2da4aae5dd61d2a082dfc56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>LinkStateID</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>a8ac3195d08bc351276d08e1c28e0d2dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>AuthenticationType</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>a2e0cad18e6b80ee3a427a65a0b395aaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NullType</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>a2e0cad18e6b80ee3a427a65a0b395aafaa912eb1946419ebf910b2b8322788ca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SimplePasswordType</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>a2e0cad18e6b80ee3a427a65a0b395aafa13c53535f35435755bfb2dcf2d709076</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CrytographicType</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>a2e0cad18e6b80ee3a427a65a0b395aafa2f33878554866e1aa7ef58a8df3d320e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const RouterID</type>
      <name>NullRouterID</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>aa0223d58cbf9a99558b9460b23186730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AreaID</type>
      <name>BackboneAreaID</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>adb591659bd229b640cdc32ebaef95222</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LinkStateID</type>
      <name>NullLinkStateID</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>a5fa445758d16c9a7146fb9f59c3647ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IPv4Address</type>
      <name>NullIPv4Address</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>a8948acb62332232ba35305c0a0babc8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IPv4Address</type>
      <name>AllSPFRouters</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>afdf11c20cc9287464a9a673199e01004</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IPv4Address</type>
      <name>AllDRouters</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>a3f675193744b50804fea173a3f6f6bdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IPv4AddressRange</type>
      <name>NullIPv4AddressRange</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>ad8bce8fb1420d6747aba9a122e7300ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DesignatedRouterID</type>
      <name>NullDesignatedRouterID</name>
      <anchorfile>namespace_o_s_p_f.html</anchorfile>
      <anchor>a1025f956e059380bda5d71fc1e3324f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::Interface</name>
    <filename>class_o_s_p_f_1_1_interface.html</filename>
    <member kind="enumeration">
      <name>InterfaceEventType</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>ae0aca9ab8ca338c25d9afa6e65fc8824</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InterfaceUp</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>ae0aca9ab8ca338c25d9afa6e65fc8824a6a25beadf72c89b1677a33bad09e09f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HelloTimer</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>ae0aca9ab8ca338c25d9afa6e65fc8824a201aa41e319d6cde96895c357a8ade48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WaitTimer</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>ae0aca9ab8ca338c25d9afa6e65fc8824ae1fb186ab28c6abab8fd0b0239a65ec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AcknowledgementTimer</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>ae0aca9ab8ca338c25d9afa6e65fc8824a32c11ca15d804668badbab6543eee1a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BackupSeen</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>ae0aca9ab8ca338c25d9afa6e65fc8824a1449c6066285b3bb8ab9ea5794e74446</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NeighborChange</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>ae0aca9ab8ca338c25d9afa6e65fc8824a55c96f449efe8107f4dc859edfe599ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LoopIndication</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>ae0aca9ab8ca338c25d9afa6e65fc8824a53043ecda3212723eb1b31f0da71b5c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnloopIndication</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>ae0aca9ab8ca338c25d9afa6e65fc8824af4e3ac2b70c87288da04afadde9ca480</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InterfaceDown</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>ae0aca9ab8ca338c25d9afa6e65fc8824aff0fe406e16e5989df3d3d5f789b04bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>OSPFInterfaceType</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a558b3988a38b079460b57f092eacf4ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnknownType</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a558b3988a38b079460b57f092eacf4aca263b7ca858c5d2f55a787e0209cd7a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PointToPoint</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a558b3988a38b079460b57f092eacf4aca4dac0c4eca27454daabf38ea32f47775</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Broadcast</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a558b3988a38b079460b57f092eacf4aca15decf080ad941585245418cfb9458c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NBMA</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a558b3988a38b079460b57f092eacf4acae26d6f3ee5ee0f7c1ed2f2196c1dfe07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PointToMultiPoint</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a558b3988a38b079460b57f092eacf4aca661d5c29aedcfc3f712b4084e12d51ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Virtual</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a558b3988a38b079460b57f092eacf4acaf27b340cd6ffc282630c03185294088b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>InterfaceStateType</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a68805ad1115c7149d5f8a139437e6249</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DownState</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a68805ad1115c7149d5f8a139437e6249ab3a6716ba0f851245d5e2e50bf425035</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LoopbackState</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a68805ad1115c7149d5f8a139437e6249acff1fbaa2721aa7da821f6d067d918a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WaitingState</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a68805ad1115c7149d5f8a139437e6249a4b12c46ab26b94b0f002e9a8f54ae385</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PointToPointState</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a68805ad1115c7149d5f8a139437e6249a4afd8475ebf100839309f695531289d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NotDesignatedRouterState</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a68805ad1115c7149d5f8a139437e6249a39ffb348308b078fa08b177dbaa77fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BackupState</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a68805ad1115c7149d5f8a139437e6249a9d19f5853d01eca65e69e75665a010cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DesignatedRouterState</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a68805ad1115c7149d5f8a139437e6249a39fb4e003926b18827b15d54a71a3ce2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interface</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a35e19d6d44125ed42ef53da87de403a3</anchor>
      <arglist>(OSPFInterfaceType ifType=UnknownType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Interface</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>aef212290dc8f40986ae42a631a78a6b8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ProcessEvent</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a7efb487b2f5c22c8734c71535f05edb7</anchor>
      <arglist>(InterfaceEventType event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>aa74a52ba5410d79366928fd4a2074baa</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SendHelloPacket</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>af5bcfcd208d73be7deeda67c1072ec19</anchor>
      <arglist>(IPv4Address destination, short ttl=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SendLSAcknowledgement</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a18eb0e118ec0cbff1659da14b08ba695</anchor>
      <arglist>(OSPFLSAHeader *lsaHeader, IPv4Address destination)</arglist>
    </member>
    <member kind="function">
      <type>Neighbor *</type>
      <name>GetNeighborByID</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a62df5516c0a1c6080c654c87927554c0</anchor>
      <arglist>(RouterID neighborID)</arglist>
    </member>
    <member kind="function">
      <type>Neighbor *</type>
      <name>GetNeighborByAddress</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a7d77a0ec7d5dea0713174e7e2c678645</anchor>
      <arglist>(IPv4Address address)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddNeighbor</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a906b7bb39eaf75d7ccc6e7aaa710c724</anchor>
      <arglist>(Neighbor *neighbor)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceStateType</type>
      <name>GetState</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a93b0578a717b1d7ed98780108305c9d5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasAnyNeighborInStates</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>aa8054b75c3d15d159962186f65f432e4</anchor>
      <arglist>(int states) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveFromAllRetransmissionLists</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a561af59933cfbf37a2a648ab4b0b9edf</anchor>
      <arglist>(LSAKeyType lsaKey)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOnAnyRetransmissionList</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a5beaa088d57b627586cde7dbb56b1f13</anchor>
      <arglist>(LSAKeyType lsaKey) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FloodLSA</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>adaf7b6e469c924c1461eae6af743ee3d</anchor>
      <arglist>(OSPFLSA *lsa, Interface *intf=NULL, Neighbor *neighbor=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddDelayedAcknowledgement</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a6c0ab797cd72372506650ec8803c4702</anchor>
      <arglist>(OSPFLSAHeader &amp;lsaHeader)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SendDelayedAcknowledgements</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>af95c6306ce9369415e0604b2682a920d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AgeTransmittedLSALists</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>ae269c6e1a2d29001ca1dd2202c2318cb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>OSPFLinkStateUpdatePacket *</type>
      <name>CreateUpdatePacket</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a052082a12b71791be8b9f903b6f2767c</anchor>
      <arglist>(OSPFLSA *lsa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetType</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>adcd4b8414def2afd4eee3af284da430d</anchor>
      <arglist>(OSPFInterfaceType ifType)</arglist>
    </member>
    <member kind="function">
      <type>OSPFInterfaceType</type>
      <name>GetType</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>afc695bd11de24180427aef1161c772a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIfIndex</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a7c4201bb2f873917dd32fc330daef413</anchor>
      <arglist>(unsigned char index)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>GetIfIndex</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a7c01c910662a0b9c2c066ccae38416db</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMTU</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>ada41c1007da4948c83e71e6358ec1fab</anchor>
      <arglist>(unsigned short ifMTU)</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetMTU</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a6f0d207f1f82ea85d14555e51ec0cadf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAreaID</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>ae0216e64c1bce8a8fdfa68165cb73ae5</anchor>
      <arglist>(AreaID areaId)</arglist>
    </member>
    <member kind="function">
      <type>AreaID</type>
      <name>GetAreaID</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>ad5f88b646ecd75f2e99b64513a9ba454</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransitAreaID</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>ad8a79f289516209fb374cdbe61447a0b</anchor>
      <arglist>(AreaID areaId)</arglist>
    </member>
    <member kind="function">
      <type>AreaID</type>
      <name>GetTransitAreaID</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a11ec00d0ae3e21d8b459b65a0aad381a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOutputCost</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a5deaa4e5d2b7e75d934c79e3b727e954</anchor>
      <arglist>(Metric cost)</arglist>
    </member>
    <member kind="function">
      <type>Metric</type>
      <name>GetOutputCost</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a26a0851171b175422e0cbe2c087d058a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRetransmissionInterval</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a21654ec08c047a82e4f9ada4253334e3</anchor>
      <arglist>(short interval)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>GetRetransmissionInterval</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>afa2801e82d7f5d6ac567d2905f904a2c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransmissionDelay</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a5071ff810d8d1698334c3cedaecb95e2</anchor>
      <arglist>(short delay)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>GetTransmissionDelay</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a566029db9c7b30ef3112e13360db1c45</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcknowledgementDelay</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a7eecaf026f4efcdd5509868996703020</anchor>
      <arglist>(short delay)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>GetAcknowledgementDelay</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a951f9be48c0d6c23af1128bc13ac7268</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRouterPriority</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>ad2b8d0dc855d09bdbd2115a6db6cf00e</anchor>
      <arglist>(unsigned char priority)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>GetRouterPriority</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>afb2510bbc8220f493ab29e16d1019efd</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHelloInterval</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a293d869360c0365c5975a84e585233aa</anchor>
      <arglist>(short interval)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>GetHelloInterval</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>acbe4102fed53ad77e349da0ed816c023</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPollInterval</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a39ab8d1060b5e7eeff0b5bd1e50c1d6a</anchor>
      <arglist>(short interval)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>GetPollInterval</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>aff9be885669bc74385f8b106ae42a8d8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRouterDeadInterval</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a689a2f9ca652351f3404c25a8e2acd8f</anchor>
      <arglist>(short interval)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>GetRouterDeadInterval</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>ace7825b52c05dd76bc3cf34081f27130</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAuthenticationType</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a35a3101643696ffe3576162b69bf2bc5</anchor>
      <arglist>(AuthenticationType type)</arglist>
    </member>
    <member kind="function">
      <type>AuthenticationType</type>
      <name>GetAuthenticationType</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a8928fffd647d5b2c79a04fc85758af68</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAuthenticationKey</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a5b1fafec8e83e59b39e7ec17c162c9cb</anchor>
      <arglist>(AuthenticationKeyType key)</arglist>
    </member>
    <member kind="function">
      <type>AuthenticationKeyType</type>
      <name>GetAuthenticationKey</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a9aca983b1f1e402b1fa30d4edb299402</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAddressRange</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a1c612594712df715ad3cff6a672833b2</anchor>
      <arglist>(IPv4AddressRange range)</arglist>
    </member>
    <member kind="function">
      <type>IPv4AddressRange</type>
      <name>GetAddressRange</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a13403146ed20a460dc19fc9089e55c90</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>OSPFTimer *</type>
      <name>GetHelloTimer</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a456fa7255ea279ae0b1788fe8d32f828</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>OSPFTimer *</type>
      <name>GetWaitTimer</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a0666cb7e26bf1ffb1ca3500f372c2f4b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>OSPFTimer *</type>
      <name>GetAcknowledgementTimer</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a14b5ac2420c95e0e2d18aa43ed0fbb16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>DesignatedRouterID</type>
      <name>GetDesignatedRouter</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>afaccea11d77f53ba17dedcb3eaf93dd1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>DesignatedRouterID</type>
      <name>GetBackupDesignatedRouter</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a459eb228be7a9b36c641ec97edff14f6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetNeighborCount</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a3cb63721849b942a133667f25746482b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Neighbor *</type>
      <name>GetNeighbor</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a259d687e493b93dd618fe7b352c3401a</anchor>
      <arglist>(unsigned long i)</arglist>
    </member>
    <member kind="function">
      <type>const Neighbor *</type>
      <name>GetNeighbor</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a4d88bc6c63686b2eab5601015b93074c</anchor>
      <arglist>(unsigned long i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetArea</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>ac46c7d59df0b9968fe6e7ccf81b731dc</anchor>
      <arglist>(Area *area)</arglist>
    </member>
    <member kind="function">
      <type>Area *</type>
      <name>GetArea</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a353330e70282153a34fcf9d4ee276acc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const Area *</type>
      <name>GetArea</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a4c6a27e2f70e73d153ec8a5e90cdd7b3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>GetStateString</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a606390b6d25b4326720aa4674558beec</anchor>
      <arglist>(InterfaceStateType stateType)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ChangeState</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>ab7b6f16457d743ff9e525beb5f0647de</anchor>
      <arglist>(InterfaceState *newState, InterfaceState *currentState)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPFInterfaceType</type>
      <name>interfaceType</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a8d7ae4be845b975503eb1178c4a3d749</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InterfaceState *</type>
      <name>state</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a30e23532102fe3c76c22032d4c70355f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InterfaceState *</type>
      <name>previousState</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a7907f473ff18206d62a0cb1ff4db4f10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned char</type>
      <name>ifIndex</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a23bdd2ac5845fa6a5c244044f846b3a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned short</type>
      <name>mtu</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a53345717126363978a61c3645b8f3e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IPv4AddressRange</type>
      <name>interfaceAddressRange</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a834f58c4cc265ce24378a70ea4d6964b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AreaID</type>
      <name>areaID</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>aa56c3151f51534e8af8318c86b85dd5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AreaID</type>
      <name>transitAreaID</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a1408e9ad961af8acde7a57455ff8df4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>short</type>
      <name>helloInterval</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a3c89dcbbb7f5eb2553e0677acdaf2f84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>short</type>
      <name>pollInterval</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a67c459633ee824392efcfae29fa333c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>short</type>
      <name>routerDeadInterval</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a06c0f30ef9dbf5b988e987ad72e3946f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>short</type>
      <name>interfaceTransmissionDelay</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a528d267bd3a86cc3a95d811920cfc69e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned char</type>
      <name>routerPriority</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>acf81bf9cd0a68e514565465f8ca63bb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPFTimer *</type>
      <name>helloTimer</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>abefefb9638d2eff253ca6077f879b175</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPFTimer *</type>
      <name>waitTimer</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a91db223e4833e9c782f38638a29c76ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPFTimer *</type>
      <name>acknowledgementTimer</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a5658b96b836b7910111190ca530dad01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; RouterID, Neighbor * &gt;</type>
      <name>neighboringRoutersByID</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a2be31e851d95a480b0d2a9a328efd264</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; IPv4Address, Neighbor *, IPv4Address_Less &gt;</type>
      <name>neighboringRoutersByAddress</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>aaa76c62dacc7f8ee62fbe5f3785bef2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Neighbor * &gt;</type>
      <name>neighboringRouters</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a7435ebb20414f378a2b5a12f06b7572a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; IPv4Address, std::list&lt; OSPFLSAHeader &gt;, IPv4Address_Less &gt;</type>
      <name>delayedAcknowledgements</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>af119a27aa6b3d21ac48352abd2cf2818</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DesignatedRouterID</type>
      <name>designatedRouter</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a2aa7970a1a4f77bbe3718c1669e0f9a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DesignatedRouterID</type>
      <name>backupDesignatedRouter</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a1c438d26ca9d60a131c2040f20376334</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Metric</type>
      <name>interfaceOutputCost</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>ad2b795cfa4810b05b15c3bb6117594b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>short</type>
      <name>retransmissionInterval</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a6a0fb3975ca78d163d1e3dab1642ffd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>short</type>
      <name>acknowledgementDelay</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a23e3ef1bdf8266d8729f20d62f106509</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AuthenticationType</type>
      <name>authenticationType</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a146ecbf957430b57f2d7c7340ddaea4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AuthenticationKeyType</type>
      <name>authenticationKey</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a433bf99728cfe9fed8ef9a0c3f75a889</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Area *</type>
      <name>parentArea</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a7a0c392cb0be636208fc0c2bc3ae520f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>InterfaceState</name>
      <anchorfile>class_o_s_p_f_1_1_interface.html</anchorfile>
      <anchor>a5b34d2f1e03ca45a289bea31d8ccde5b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::InterfaceState</name>
    <filename>class_o_s_p_f_1_1_interface_state.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InterfaceState</name>
      <anchorfile>class_o_s_p_f_1_1_interface_state.html</anchorfile>
      <anchor>a4ea64d4cf5a613899ca35a61760e4d78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchorfile>class_o_s_p_f_1_1_interface_state.html</anchorfile>
      <anchor>a2a41c0f4f5decb321c67e0fcceac9bca</anchor>
      <arglist>(Interface *intf, Interface::InterfaceEventType event)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Interface::InterfaceStateType</type>
      <name>GetState</name>
      <anchorfile>class_o_s_p_f_1_1_interface_state.html</anchorfile>
      <anchor>a67e02942e33a243dd57f1130015f41b6</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ChangeState</name>
      <anchorfile>class_o_s_p_f_1_1_interface_state.html</anchorfile>
      <anchor>a10805e77b3f9a99f2e678f8e29f3b7bc</anchor>
      <arglist>(Interface *intf, InterfaceState *newState, InterfaceState *currentState)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CalculateDesignatedRouter</name>
      <anchorfile>class_o_s_p_f_1_1_interface_state.html</anchorfile>
      <anchor>a4a784ea0a363117c123cdac528001767</anchor>
      <arglist>(Interface *intf)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::InterfaceStateBackup</name>
    <filename>class_o_s_p_f_1_1_interface_state_backup.html</filename>
    <base>OSPF::InterfaceState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchorfile>class_o_s_p_f_1_1_interface_state_backup.html</anchorfile>
      <anchor>a3cf01c564824be047a09ccc879e3bbf2</anchor>
      <arglist>(Interface *intf, Interface::InterfaceEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Interface::InterfaceStateType</type>
      <name>GetState</name>
      <anchorfile>class_o_s_p_f_1_1_interface_state_backup.html</anchorfile>
      <anchor>a85080008592dbbe949afc7ac3adb6584</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::InterfaceStateDesignatedRouter</name>
    <filename>class_o_s_p_f_1_1_interface_state_designated_router.html</filename>
    <base>OSPF::InterfaceState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchorfile>class_o_s_p_f_1_1_interface_state_designated_router.html</anchorfile>
      <anchor>a8d095bf645a3a0624395d66b694523e4</anchor>
      <arglist>(Interface *intf, Interface::InterfaceEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Interface::InterfaceStateType</type>
      <name>GetState</name>
      <anchorfile>class_o_s_p_f_1_1_interface_state_designated_router.html</anchorfile>
      <anchor>a42d492104adee9b397ff394f8fd36744</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::InterfaceStateDown</name>
    <filename>class_o_s_p_f_1_1_interface_state_down.html</filename>
    <base>OSPF::InterfaceState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchorfile>class_o_s_p_f_1_1_interface_state_down.html</anchorfile>
      <anchor>a83cea8a35e1668a5c945c7deb8bf0c9b</anchor>
      <arglist>(Interface *intf, Interface::InterfaceEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Interface::InterfaceStateType</type>
      <name>GetState</name>
      <anchorfile>class_o_s_p_f_1_1_interface_state_down.html</anchorfile>
      <anchor>a99b0dd96b7b945a60621e5c06b6fce5f</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::InterfaceStateLoopback</name>
    <filename>class_o_s_p_f_1_1_interface_state_loopback.html</filename>
    <base>OSPF::InterfaceState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchorfile>class_o_s_p_f_1_1_interface_state_loopback.html</anchorfile>
      <anchor>a314fe175f1d25591d684033d3a5c877d</anchor>
      <arglist>(Interface *intf, Interface::InterfaceEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Interface::InterfaceStateType</type>
      <name>GetState</name>
      <anchorfile>class_o_s_p_f_1_1_interface_state_loopback.html</anchorfile>
      <anchor>a4db9f28a6eee35ee49217954152ee838</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::InterfaceStateNotDesignatedRouter</name>
    <filename>class_o_s_p_f_1_1_interface_state_not_designated_router.html</filename>
    <base>OSPF::InterfaceState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchorfile>class_o_s_p_f_1_1_interface_state_not_designated_router.html</anchorfile>
      <anchor>a66a27381b680b112dff13e1eea9b1cdf</anchor>
      <arglist>(Interface *intf, Interface::InterfaceEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Interface::InterfaceStateType</type>
      <name>GetState</name>
      <anchorfile>class_o_s_p_f_1_1_interface_state_not_designated_router.html</anchorfile>
      <anchor>aa238a3961a33022f2cb6bb1c3908a4ea</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::InterfaceStatePointToPoint</name>
    <filename>class_o_s_p_f_1_1_interface_state_point_to_point.html</filename>
    <base>OSPF::InterfaceState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchorfile>class_o_s_p_f_1_1_interface_state_point_to_point.html</anchorfile>
      <anchor>ad1f8cf4997cd0466739dc1f92bd729c5</anchor>
      <arglist>(Interface *intf, Interface::InterfaceEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Interface::InterfaceStateType</type>
      <name>GetState</name>
      <anchorfile>class_o_s_p_f_1_1_interface_state_point_to_point.html</anchorfile>
      <anchor>a8bb3dc631e34456b4ad8735db7526488</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::InterfaceStateWaiting</name>
    <filename>class_o_s_p_f_1_1_interface_state_waiting.html</filename>
    <base>OSPF::InterfaceState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchorfile>class_o_s_p_f_1_1_interface_state_waiting.html</anchorfile>
      <anchor>a1c171914cc5f51b2abfd31a2989f381f</anchor>
      <arglist>(Interface *intf, Interface::InterfaceEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Interface::InterfaceStateType</type>
      <name>GetState</name>
      <anchorfile>class_o_s_p_f_1_1_interface_state_waiting.html</anchorfile>
      <anchor>ad0568a18125c70edb03df5903b87caac</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::DatabaseDescriptionHandler</name>
    <filename>class_o_s_p_f_1_1_database_description_handler.html</filename>
    <base>OSPF::IMessageHandler</base>
    <member kind="function">
      <type></type>
      <name>DatabaseDescriptionHandler</name>
      <anchorfile>class_o_s_p_f_1_1_database_description_handler.html</anchorfile>
      <anchor>a0c573454fafa46000ad7624e449ab19d</anchor>
      <arglist>(Router *containingRouter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ProcessPacket</name>
      <anchorfile>class_o_s_p_f_1_1_database_description_handler.html</anchorfile>
      <anchor>a16c34f7cbe35797f0cd9c45b35e62137</anchor>
      <arglist>(OSPFPacket *packet, Interface *intf, Neighbor *neighbor)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>ProcessDDPacket</name>
      <anchorfile>class_o_s_p_f_1_1_database_description_handler.html</anchorfile>
      <anchor>adc25d3b381b76c21203d40fbc42b411f</anchor>
      <arglist>(OSPFDatabaseDescriptionPacket *ddPacket, Interface *intf, Neighbor *neighbor, bool inExchangeStart)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::HelloHandler</name>
    <filename>class_o_s_p_f_1_1_hello_handler.html</filename>
    <base>OSPF::IMessageHandler</base>
    <member kind="function">
      <type></type>
      <name>HelloHandler</name>
      <anchorfile>class_o_s_p_f_1_1_hello_handler.html</anchorfile>
      <anchor>a68abd842d191000fd909a237f274c4b9</anchor>
      <arglist>(Router *containingRouter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ProcessPacket</name>
      <anchorfile>class_o_s_p_f_1_1_hello_handler.html</anchorfile>
      <anchor>a61a40e4c5d465a0119db5f51e1929475</anchor>
      <arglist>(OSPFPacket *packet, Interface *intf, Neighbor *unused=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::IMessageHandler</name>
    <filename>class_o_s_p_f_1_1_i_message_handler.html</filename>
    <member kind="function">
      <type></type>
      <name>IMessageHandler</name>
      <anchorfile>class_o_s_p_f_1_1_i_message_handler.html</anchorfile>
      <anchor>afa003e6c747b4a1961dede68915231ee</anchor>
      <arglist>(Router *containingRouter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IMessageHandler</name>
      <anchorfile>class_o_s_p_f_1_1_i_message_handler.html</anchorfile>
      <anchor>ae472fec3c06bd036b8adc2c5ac774248</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ProcessPacket</name>
      <anchorfile>class_o_s_p_f_1_1_i_message_handler.html</anchorfile>
      <anchor>a43972c1d4506fbc22085c992e70fdd5c</anchor>
      <arglist>(OSPFPacket *, Interface *intf, Neighbor *neighbor)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Router *</type>
      <name>router</name>
      <anchorfile>class_o_s_p_f_1_1_i_message_handler.html</anchorfile>
      <anchor>a24cb6c6f9b62a4e403d5171a0d36f22a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::LinkStateAcknowledgementHandler</name>
    <filename>class_o_s_p_f_1_1_link_state_acknowledgement_handler.html</filename>
    <base>OSPF::IMessageHandler</base>
    <member kind="function">
      <type></type>
      <name>LinkStateAcknowledgementHandler</name>
      <anchorfile>class_o_s_p_f_1_1_link_state_acknowledgement_handler.html</anchorfile>
      <anchor>ad08701f9fba063cdaa349836da79aac5</anchor>
      <arglist>(Router *containingRouter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ProcessPacket</name>
      <anchorfile>class_o_s_p_f_1_1_link_state_acknowledgement_handler.html</anchorfile>
      <anchor>a28a3d383f22f078cb0244eb1ee135576</anchor>
      <arglist>(OSPFPacket *packet, Interface *intf, Neighbor *neighbor)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::LinkStateRequestHandler</name>
    <filename>class_o_s_p_f_1_1_link_state_request_handler.html</filename>
    <base>OSPF::IMessageHandler</base>
    <member kind="function">
      <type></type>
      <name>LinkStateRequestHandler</name>
      <anchorfile>class_o_s_p_f_1_1_link_state_request_handler.html</anchorfile>
      <anchor>a4173b4ad1ad0c30da932947490ef2c94</anchor>
      <arglist>(Router *containingRouter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ProcessPacket</name>
      <anchorfile>class_o_s_p_f_1_1_link_state_request_handler.html</anchorfile>
      <anchor>ae830cfcbc5a9a0800795bcbffe86c5d2</anchor>
      <arglist>(OSPFPacket *packet, Interface *intf, Neighbor *neighbor)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::LinkStateUpdateHandler</name>
    <filename>class_o_s_p_f_1_1_link_state_update_handler.html</filename>
    <base>OSPF::IMessageHandler</base>
    <class kind="struct">OSPF::LinkStateUpdateHandler::AcknowledgementFlags</class>
    <member kind="function">
      <type></type>
      <name>LinkStateUpdateHandler</name>
      <anchorfile>class_o_s_p_f_1_1_link_state_update_handler.html</anchorfile>
      <anchor>a544075a05d7a4981d645632854e899f1</anchor>
      <arglist>(Router *containingRouter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ProcessPacket</name>
      <anchorfile>class_o_s_p_f_1_1_link_state_update_handler.html</anchorfile>
      <anchor>ab02516786a23f1e61f1e8365da975acd</anchor>
      <arglist>(OSPFPacket *packet, Interface *intf, Neighbor *neighbor)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>ValidateLSChecksum</name>
      <anchorfile>class_o_s_p_f_1_1_link_state_update_handler.html</anchorfile>
      <anchor>afae74b5227e4fffedf21c04d3b40832c</anchor>
      <arglist>(OSPFLSA *lsa)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>AcknowledgeLSA</name>
      <anchorfile>class_o_s_p_f_1_1_link_state_update_handler.html</anchorfile>
      <anchor>a38af02fa49145eb0d7915d41e97a7f37</anchor>
      <arglist>(OSPFLSAHeader &amp;lsaHeader, Interface *intf, AcknowledgementFlags acknowledgementFlags, RouterID lsaSource)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OSPF::LinkStateUpdateHandler::AcknowledgementFlags</name>
    <filename>struct_o_s_p_f_1_1_link_state_update_handler_1_1_acknowledgement_flags.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>floodedBackOut</name>
      <anchorfile>struct_o_s_p_f_1_1_link_state_update_handler_1_1_acknowledgement_flags.html</anchorfile>
      <anchor>af48a4e40e70fb72cde79e36d97406b1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>lsaIsNewer</name>
      <anchorfile>struct_o_s_p_f_1_1_link_state_update_handler_1_1_acknowledgement_flags.html</anchorfile>
      <anchor>abadbc8cd6b4d63d54c09650fd76846cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>lsaIsDuplicate</name>
      <anchorfile>struct_o_s_p_f_1_1_link_state_update_handler_1_1_acknowledgement_flags.html</anchorfile>
      <anchor>a8de3813295d422dbb8e122b2ef126ca2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>impliedAcknowledgement</name>
      <anchorfile>struct_o_s_p_f_1_1_link_state_update_handler_1_1_acknowledgement_flags.html</anchorfile>
      <anchor>a8286e6927b3255775fa393a20fca6fd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>lsaReachedMaxAge</name>
      <anchorfile>struct_o_s_p_f_1_1_link_state_update_handler_1_1_acknowledgement_flags.html</anchorfile>
      <anchor>a18b5841bc72ce40a6e7065a7dab4bc1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>noLSAInstanceInDatabase</name>
      <anchorfile>struct_o_s_p_f_1_1_link_state_update_handler_1_1_acknowledgement_flags.html</anchorfile>
      <anchor>a23897af0d195c4df03290a17ce3d56b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>anyNeighborInExchangeOrLoadingState</name>
      <anchorfile>struct_o_s_p_f_1_1_link_state_update_handler_1_1_acknowledgement_flags.html</anchorfile>
      <anchor>aec4b4015c5bff0caabd496429dfffabf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::MessageHandler</name>
    <filename>class_o_s_p_f_1_1_message_handler.html</filename>
    <base>OSPF::IMessageHandler</base>
    <member kind="function">
      <type></type>
      <name>MessageHandler</name>
      <anchorfile>class_o_s_p_f_1_1_message_handler.html</anchorfile>
      <anchor>af7d2a9ed6aa5e65de95552ea03a9a4b2</anchor>
      <arglist>(Router *containingRouter, cSimpleModule *containingModule)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MessageReceived</name>
      <anchorfile>class_o_s_p_f_1_1_message_handler.html</anchorfile>
      <anchor>a7b619e82b4d8755c245f8f2e341297e5</anchor>
      <arglist>(cMessage *message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HandleTimer</name>
      <anchorfile>class_o_s_p_f_1_1_message_handler.html</anchorfile>
      <anchor>a65a2017ec4cf8031bd3bd894f199defd</anchor>
      <arglist>(OSPFTimer *timer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ProcessPacket</name>
      <anchorfile>class_o_s_p_f_1_1_message_handler.html</anchorfile>
      <anchor>a529456d5970cfc56830f577f69d9ae65</anchor>
      <arglist>(OSPFPacket *packet, Interface *unused1=NULL, Neighbor *unused2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SendPacket</name>
      <anchorfile>class_o_s_p_f_1_1_message_handler.html</anchorfile>
      <anchor>a55453afdec67b74ad3cd39a8a49ad73a</anchor>
      <arglist>(OSPFPacket *packet, IPv4Address destination, int outputIfIndex, short ttl=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearTimer</name>
      <anchorfile>class_o_s_p_f_1_1_message_handler.html</anchorfile>
      <anchor>a49719380085c8b71bcf46cbcafa8dd58</anchor>
      <arglist>(OSPFTimer *timer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>StartTimer</name>
      <anchorfile>class_o_s_p_f_1_1_message_handler.html</anchorfile>
      <anchor>a7680ccb9763e25c9841911992bc7caa5</anchor>
      <arglist>(OSPFTimer *timer, simtime_t delay)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintEvent</name>
      <anchorfile>class_o_s_p_f_1_1_message_handler.html</anchorfile>
      <anchor>a7dcd4bbcac0b9f1698cfa5d2471b32de</anchor>
      <arglist>(const char *eventString, const Interface *onInterface=NULL, const Neighbor *forNeighbor=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintHelloPacket</name>
      <anchorfile>class_o_s_p_f_1_1_message_handler.html</anchorfile>
      <anchor>aa971f2b35695466662ba2944b5d5d539</anchor>
      <arglist>(const OSPFHelloPacket *helloPacket, IPv4Address destination, int outputIfIndex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintDatabaseDescriptionPacket</name>
      <anchorfile>class_o_s_p_f_1_1_message_handler.html</anchorfile>
      <anchor>a07febbc66bd4ca64fdc2ee6c2552c47c</anchor>
      <arglist>(const OSPFDatabaseDescriptionPacket *ddPacket, IPv4Address destination, int outputIfIndex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintLinkStateRequestPacket</name>
      <anchorfile>class_o_s_p_f_1_1_message_handler.html</anchorfile>
      <anchor>a87f81a244e23f362341de332248f84c6</anchor>
      <arglist>(const OSPFLinkStateRequestPacket *requestPacket, IPv4Address destination, int outputIfIndex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintLinkStateUpdatePacket</name>
      <anchorfile>class_o_s_p_f_1_1_message_handler.html</anchorfile>
      <anchor>a66edf75e4208b32dfe31a1efc8b73c59</anchor>
      <arglist>(const OSPFLinkStateUpdatePacket *updatePacket, IPv4Address destination, int outputIfIndex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintLinkStateAcknowledgementPacket</name>
      <anchorfile>class_o_s_p_f_1_1_message_handler.html</anchorfile>
      <anchor>a8747f18ec54ea4220d8f846757a424e6</anchor>
      <arglist>(const OSPFLinkStateAcknowledgementPacket *ackPacket, IPv4Address destination, int outputIfIndex) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AuthenticatePacket</name>
      <anchorfile>class_o_s_p_f_1_1_message_handler.html</anchorfile>
      <anchor>a8e8437d353e4d13c4f4a2c90e2e96fe7</anchor>
      <arglist>(OSPFPacket *packet)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cSimpleModule *</type>
      <name>ospfModule</name>
      <anchorfile>class_o_s_p_f_1_1_message_handler.html</anchorfile>
      <anchor>a18c760d31880694b4ed4973bb93ea638</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>HelloHandler</type>
      <name>helloHandler</name>
      <anchorfile>class_o_s_p_f_1_1_message_handler.html</anchorfile>
      <anchor>a85474cc1c54724abf28933b6cec3699e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DatabaseDescriptionHandler</type>
      <name>ddHandler</name>
      <anchorfile>class_o_s_p_f_1_1_message_handler.html</anchorfile>
      <anchor>a00b868950f332591015261092ccb50e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LinkStateRequestHandler</type>
      <name>lsRequestHandler</name>
      <anchorfile>class_o_s_p_f_1_1_message_handler.html</anchorfile>
      <anchor>a73b57fc18ee1b8ef3798e8563e7f637d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LinkStateUpdateHandler</type>
      <name>lsUpdateHandler</name>
      <anchorfile>class_o_s_p_f_1_1_message_handler.html</anchorfile>
      <anchor>ae1650421c3651603bf9b635a0340aa62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LinkStateAcknowledgementHandler</type>
      <name>lsAckHandler</name>
      <anchorfile>class_o_s_p_f_1_1_message_handler.html</anchorfile>
      <anchor>af484fbec05b71c51ac96714b3f279db1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::Neighbor</name>
    <filename>class_o_s_p_f_1_1_neighbor.html</filename>
    <class kind="struct">OSPF::Neighbor::DDPacketID</class>
    <class kind="struct">OSPF::Neighbor::TransmittedLSA</class>
    <member kind="enumeration">
      <name>NeighborEventType</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>aa11c941b2bc4a36c36fba1cb453a4172</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HelloReceived</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>aa11c941b2bc4a36c36fba1cb453a4172a724a7f11da01778981aedda6ed33f6d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Start</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>aa11c941b2bc4a36c36fba1cb453a4172a8b790198cfe23bbe30ae8dbb6153548a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TwoWayReceived</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>aa11c941b2bc4a36c36fba1cb453a4172a6335dbb7e3dbb7b0d9347cf865eec9d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NegotiationDone</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>aa11c941b2bc4a36c36fba1cb453a4172a68092a284f8d5886b97c1d870d615ddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ExchangeDone</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>aa11c941b2bc4a36c36fba1cb453a4172a5d54c2471829a59b2d197ecd294c07bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BadLinkStateRequest</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>aa11c941b2bc4a36c36fba1cb453a4172a5405a9fa545e4a35867f82f5060b03f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LoadingDone</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>aa11c941b2bc4a36c36fba1cb453a4172a01ad8428930a50ed30a3c16e330d3688</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsAdjacencyOK</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>aa11c941b2bc4a36c36fba1cb453a4172afcad1cc85205f2b8c8fc2da780b8c3cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SequenceNumberMismatch</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>aa11c941b2bc4a36c36fba1cb453a4172a1bc1430607b1cbe754c219564b625777</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OneWayReceived</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>aa11c941b2bc4a36c36fba1cb453a4172a27a074032a38e99b64583022bedacadb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KillNeighbor</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>aa11c941b2bc4a36c36fba1cb453a4172a3fbd4b922a50537533cf7a4dd45268e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InactivityTimer</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>aa11c941b2bc4a36c36fba1cb453a4172af22504ea3725e7d5a1075b400eb526ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PollTimer</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>aa11c941b2bc4a36c36fba1cb453a4172a41fade5afa36755d7c2f075b5dbdbf01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LinkDown</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>aa11c941b2bc4a36c36fba1cb453a4172ad6b6fbea782b923337b68e8b963114d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DDRetransmissionTimer</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>aa11c941b2bc4a36c36fba1cb453a4172ae063a974c93292e8af74f478de6fefd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UpdateRetransmissionTimer</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>aa11c941b2bc4a36c36fba1cb453a4172a690457e0a4d897d5e9e71c91aa5db00c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RequestRetransmissionTimer</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>aa11c941b2bc4a36c36fba1cb453a4172a5c0eb092bf49b5aa7349029d1b31c1a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>NeighborStateType</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>abe30518a64009a9ae44944c1036a4c0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DownState</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>abe30518a64009a9ae44944c1036a4c0aafffabea956666082e709fc0cc82f6520</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AttemptState</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>abe30518a64009a9ae44944c1036a4c0aaad206e0f7521afaefa0b08d336b84199</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InitState</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>abe30518a64009a9ae44944c1036a4c0aad7b22d69601f22f77b0839c2ae33cccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TwoWayState</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>abe30518a64009a9ae44944c1036a4c0aaa2bc2a9a78de6ca762416b243c632e46</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ExchangeStartState</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>abe30518a64009a9ae44944c1036a4c0aae0cb7a4653f8f3b4503b75bdfef8a994</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ExchangeState</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>abe30518a64009a9ae44944c1036a4c0aab642c302eb79dfe9cd827bc8af960e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LoadingState</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>abe30518a64009a9ae44944c1036a4c0aa8a2da2947457a95e834ef3a256b2717a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FullState</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>abe30518a64009a9ae44944c1036a4c0aa040ad05c4a2d67aa2a167e45d4b74788</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>DatabaseExchangeRelationshipType</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a070be08a1440a92a8a72c545aefa2dce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Master</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a070be08a1440a92a8a72c545aefa2dcea7e0f6c7b05faf7c741792cf8f8808fe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Slave</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a070be08a1440a92a8a72c545aefa2dcea24282c4d17f737f34152596465657c92</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Neighbor</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>ac0d1dae9f8a875f57b3a6c2de07d04ea</anchor>
      <arglist>(RouterID neighbor=NullRouterID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Neighbor</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>ac644dda18267a67dc246209d827d4cb6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ProcessEvent</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a14aa3724c4f692d5c9635bd24b9dfce7</anchor>
      <arglist>(NeighborEventType event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>aa41557dcd8fef714161f3e2d376a000e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitFirstAdjacency</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>aa89e94d044b7b67e02077ba956acbd07</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>NeighborStateType</type>
      <name>GetState</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a934bedd2e5f14281416666a48f357bc9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SendDatabaseDescriptionPacket</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>adf812c7ce3a4e03a7904d97b006ff1e3</anchor>
      <arglist>(bool init=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RetransmitDatabaseDescriptionPacket</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a2bfb63430d3e74405879ad4cd7aa3272</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CreateDatabaseSummary</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a5f89aa9c034e0bd33eedab6b1bb72226</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SendLinkStateRequestPacket</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a4212b9dbd0b79d1ef9bfe85ac8267100</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RetransmitUpdatePacket</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a50e25124f66ac7cba2e504d8126143dc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>NeedAdjacency</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>adee2155542c702edd0f47a073ceb2f50</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddToRetransmissionList</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a2221bdf8287a29b7933f71f67c7494c2</anchor>
      <arglist>(OSPFLSA *lsa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveFromRetransmissionList</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a4178567f75086697ffaaa8fa84f8ecfd</anchor>
      <arglist>(LSAKeyType lsaKey)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLSAOnRetransmissionList</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a1946d8848475e4a3e293db9f3ea8a23b</anchor>
      <arglist>(LSAKeyType lsaKey) const </arglist>
    </member>
    <member kind="function">
      <type>OSPFLSA *</type>
      <name>FindOnRetransmissionList</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a5a254e001e861aa4b9bb0b22f47fd383</anchor>
      <arglist>(LSAKeyType lsaKey)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>StartUpdateRetransmissionTimer</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>ab904bd50a7bec507ba8a7008d49ab789</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearUpdateRetransmissionTimer</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a715d28649a4745ac8e31359b089d9a51</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddToRequestList</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a272ae712a6e08024bd31c068330db3a7</anchor>
      <arglist>(OSPFLSAHeader *lsaHeader)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveFromRequestList</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a5a219f0cd115c8c24daed1f9835ade34</anchor>
      <arglist>(LSAKeyType lsaKey)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLSAOnRequestList</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>abf038d84fea09916cc0a790b0eebedd7</anchor>
      <arglist>(LSAKeyType lsaKey) const </arglist>
    </member>
    <member kind="function">
      <type>OSPFLSAHeader *</type>
      <name>FindOnRequestList</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a663ffe2ace1c868d20a043e0a6b836fe</anchor>
      <arglist>(LSAKeyType lsaKey)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>StartRequestRetransmissionTimer</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a61301d1573cf63159273cb68e2e53763</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearRequestRetransmissionTimer</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>ad1cdf086b2ae5157802b7bdaae0f1b48</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddToTransmittedLSAList</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>af0029c47d548b629b1aa87ee87a228f2</anchor>
      <arglist>(LSAKeyType lsaKey)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOnTransmittedLSAList</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>abc2ca980b90c9d5777899c4af5ec4f19</anchor>
      <arglist>(LSAKeyType lsaKey) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AgeTransmittedLSAList</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a4dec304088cd5c106f941d6d468843f2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetUniqueULong</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a7550c5042e07afb95fdd49289aea589f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteLastSentDDPacket</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a15c633b43a32bd2d38ce0921db4a5f24</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNeighborID</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>ad91998f47a8916d1000fec1c77befa9d</anchor>
      <arglist>(RouterID id)</arglist>
    </member>
    <member kind="function">
      <type>RouterID</type>
      <name>GetNeighborID</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>ad80d61e8d0737c7e0a12f1837ac99ffb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPriority</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a870a8aa258b8d1250b5e13c67688898b</anchor>
      <arglist>(unsigned char priority)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>GetPriority</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a81e7ec86bff4a427f34bd091e3fb6698</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAddress</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a4fa4de2681d4abe417553d7883869529</anchor>
      <arglist>(IPv4Address address)</arglist>
    </member>
    <member kind="function">
      <type>IPv4Address</type>
      <name>GetAddress</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>afb8fc0467b13a32ccd3b088528bb9266</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDesignatedRouter</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>afb58da3d58077c7c89045b5c575596fc</anchor>
      <arglist>(DesignatedRouterID routerID)</arglist>
    </member>
    <member kind="function">
      <type>DesignatedRouterID</type>
      <name>GetDesignatedRouter</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a9720f23a8ca94abd5027932d93684ea2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBackupDesignatedRouter</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>af2e8cb36fbb0c1edf991e3cf031d1541</anchor>
      <arglist>(DesignatedRouterID routerID)</arglist>
    </member>
    <member kind="function">
      <type>DesignatedRouterID</type>
      <name>GetBackupDesignatedRouter</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a460e1cfd8816b958fef01acce13ce82b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRouterDeadInterval</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a4dca6c45c0bfc9a4e7a1c4d4e13c7d1c</anchor>
      <arglist>(short interval)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>GetRouterDeadInterval</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a57c953f2cde97fca37f4fef38053fe66</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDDSequenceNumber</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a462db3f65a9ccc1fdde0037d6c23ee40</anchor>
      <arglist>(unsigned long sequenceNumber)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetDDSequenceNumber</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a44a26dd715aba6313975255e7b491116</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOptions</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a7ee629261a42e29a5478b7cd674b673b</anchor>
      <arglist>(OSPFOptions options)</arglist>
    </member>
    <member kind="function">
      <type>OSPFOptions</type>
      <name>GetOptions</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>ac822689f92a8a7cfd3075f65632bb2a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLastReceivedDDPacket</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a69df1b5ebcc0db17810dd620ae7a987c</anchor>
      <arglist>(DDPacketID packetID)</arglist>
    </member>
    <member kind="function">
      <type>DDPacketID</type>
      <name>GetLastReceivedDDPacket</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a8128e6f359eb5627649ba96f24bbce4a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDatabaseExchangeRelationship</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a3e662a17205a647fad4352a7a8a1d081</anchor>
      <arglist>(DatabaseExchangeRelationshipType relation)</arglist>
    </member>
    <member kind="function">
      <type>DatabaseExchangeRelationshipType</type>
      <name>GetDatabaseExchangeRelationship</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>aaefc9f21d8f84801d516adef2c32534c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetInterface</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a0a4b934cc0fb0b8d327c3e76a64b76e1</anchor>
      <arglist>(Interface *intf)</arglist>
    </member>
    <member kind="function">
      <type>Interface *</type>
      <name>GetInterface</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a834d76cc1498ba625bdf8b4dde71579e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const Interface *</type>
      <name>GetInterface</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a7fe4f0ff4c6e0c8e038ae36af979dd90</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>OSPFTimer *</type>
      <name>GetInactivityTimer</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>abb7cef0d7236a84bfd3f0f9e0af8b5be</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>OSPFTimer *</type>
      <name>GetPollTimer</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a90d2eea19cb500c13ea5224d343b308a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>OSPFTimer *</type>
      <name>GetDDRetransmissionTimer</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a37c520b9509690acc42e58f7ba424e8f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>OSPFTimer *</type>
      <name>GetUpdateRetransmissionTimer</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a280e7e06e35a36d0da935e7a8919bb7e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsUpdateRetransmissionTimerActive</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>ada9f6a84cfa9bf0de8d711eb18349754</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsRequestRetransmissionTimerActive</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>ae16c32f7fbca1565995cb1899e537272</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFirstAdjacencyInited</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>aed538bcc14777f5baf7f03053c023ccb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DesignatedRoutersAreSetUp</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a1b7fd2c538261ac4e0523a8222b4d84f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUpDesignatedRouters</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>ae4aaed5a9eb7477702574a8b50b6c1e0</anchor>
      <arglist>(bool setUp)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetDatabaseSummaryListCount</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>aaaddc18501a30587fbe99d1aa7c83dc7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IncrementDDSequenceNumber</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a5cad8417ec5cb78156250d30b0e424f9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLinkStateRequestListEmpty</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>aea93ed0658f2cd5b2260ab42003bce67</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLinkStateRetransmissionListEmpty</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>af7159dd3df72313237628b207bb8d1fb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PopFirstLinkStateRequest</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a0d1f0e80010fa4ff9bdcf99b1c190cc5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>GetStateString</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a1830058e7bc4b1e69eae61232f8922f3</anchor>
      <arglist>(NeighborStateType stateType)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ChangeState</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a6140003d6b9f16a9143c23828c0f0a3a</anchor>
      <arglist>(NeighborState *newState, NeighborState *currentState)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NeighborState *</type>
      <name>state</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a15b4d7dedb191cea27bd0040037db585</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NeighborState *</type>
      <name>previousState</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a0b3558e2235c9e1fe2d5bc487673ad21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPFTimer *</type>
      <name>inactivityTimer</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a6f6dd65b0d5da2ceab8e9dafcb2ef2b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPFTimer *</type>
      <name>pollTimer</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a7094cb29ba7300f31a562998a5f06215</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPFTimer *</type>
      <name>ddRetransmissionTimer</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a1ab34bfa23f0ea1d83aa6479eecb7ec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPFTimer *</type>
      <name>updateRetransmissionTimer</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a1fc983376fb9ed27d7883d3506f93daf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>updateRetransmissionTimerActive</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a086248f6c5f74717af6f9d5a28fe8197</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPFTimer *</type>
      <name>requestRetransmissionTimer</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a8b016be447c6ff8551f56d9886464e1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>requestRetransmissionTimerActive</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>af26e387fb4236d51e32103ddfc0e847f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DatabaseExchangeRelationshipType</type>
      <name>databaseExchangeRelationship</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a791bb8a717151f3c5885e8b9e05de4df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>firstAdjacencyInited</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a6609e57fa44b06c92dc9ce59daa6349c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long</type>
      <name>ddSequenceNumber</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a3b438ef044354fb2fba6ed341587a908</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DDPacketID</type>
      <name>lastReceivedDDPacket</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a241ec680a899f5b6ee22298ae71b17da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RouterID</type>
      <name>neighborID</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>aa438fe511cdaa5aae2c1e59b8674a5be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned char</type>
      <name>neighborPriority</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>aa2b9c72c8d4e9417dc4b262ea285899a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IPv4Address</type>
      <name>neighborIPAddress</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a194b2af3e1b142b0a3b85561191a142a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPFOptions</type>
      <name>neighborOptions</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a886aa13137654090a0d339fd18059f72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DesignatedRouterID</type>
      <name>neighborsDesignatedRouter</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a8c4792f213e8346f4b2f0abb78ef9c09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DesignatedRouterID</type>
      <name>neighborsBackupDesignatedRouter</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>af693816362409c14afb1f08adfdf6648</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>designatedRoutersSetUp</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a1395d1de73a101959d82bf2d8f645aa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>short</type>
      <name>neighborsRouterDeadInterval</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>ace27cfeee2212c860c1ec048e8dc5986</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; OSPFLSA * &gt;</type>
      <name>linkStateRetransmissionList</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a6e041afc04c34c6fd9a67b3eb66eb368</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; OSPFLSAHeader * &gt;</type>
      <name>databaseSummaryList</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>aeca1fcac7958aa29b9b3189441c72f4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; OSPFLSAHeader * &gt;</type>
      <name>linkStateRequestList</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a4eec78b8b9b3cfbdd62df9f4a62543dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; TransmittedLSA &gt;</type>
      <name>transmittedLSAs</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a8a4da4dfac169a643d160c03fb87f1cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPFDatabaseDescriptionPacket *</type>
      <name>lastTransmittedDDPacket</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>a6ca4933bbd50dce1a8e112279b0932e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Interface *</type>
      <name>parentInterface</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>ae28b8d8da37f7f42bf4858b9a16dbd3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static unsigned long</type>
      <name>ddSequenceNumberInitSeed</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>ac507f82ede85422878514371d0caa6e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>NeighborState</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor.html</anchorfile>
      <anchor>ae4edf7ca3c6e93c93c320106e95a7fca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OSPF::Neighbor::DDPacketID</name>
    <filename>struct_o_s_p_f_1_1_neighbor_1_1_d_d_packet_i_d.html</filename>
    <member kind="variable">
      <type>OSPFDDOptions</type>
      <name>ddOptions</name>
      <anchorfile>struct_o_s_p_f_1_1_neighbor_1_1_d_d_packet_i_d.html</anchorfile>
      <anchor>a31049124001ced8917df9779d253890c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OSPFOptions</type>
      <name>options</name>
      <anchorfile>struct_o_s_p_f_1_1_neighbor_1_1_d_d_packet_i_d.html</anchorfile>
      <anchor>ae64f7b512e17277d7751104072d74718</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>sequenceNumber</name>
      <anchorfile>struct_o_s_p_f_1_1_neighbor_1_1_d_d_packet_i_d.html</anchorfile>
      <anchor>a52ff6c768aa7bde52d267b4f5b12d494</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OSPF::Neighbor::TransmittedLSA</name>
    <filename>struct_o_s_p_f_1_1_neighbor_1_1_transmitted_l_s_a.html</filename>
    <member kind="variable">
      <type>LSAKeyType</type>
      <name>lsaKey</name>
      <anchorfile>struct_o_s_p_f_1_1_neighbor_1_1_transmitted_l_s_a.html</anchorfile>
      <anchor>aa7b0b4a17194023e403a4d012086b9c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>age</name>
      <anchorfile>struct_o_s_p_f_1_1_neighbor_1_1_transmitted_l_s_a.html</anchorfile>
      <anchor>a0d85c5b18c001a54a121fa87ead0742d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::NeighborState</name>
    <filename>class_o_s_p_f_1_1_neighbor_state.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NeighborState</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor_state.html</anchorfile>
      <anchor>aec2c368d1d597979bd23912205199c9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor_state.html</anchorfile>
      <anchor>a57af8f9fedef48be652d77ff9c8be26e</anchor>
      <arglist>(Neighbor *neighbor, Neighbor::NeighborEventType event)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Neighbor::NeighborStateType</type>
      <name>GetState</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor_state.html</anchorfile>
      <anchor>ade7322e8c3e8379d99b85b9ff5ca925e</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ChangeState</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor_state.html</anchorfile>
      <anchor>a2aaa9b77d04ee05f86463f5f468080d9</anchor>
      <arglist>(Neighbor *neighbor, NeighborState *newState, NeighborState *currentState)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::NeighborStateAttempt</name>
    <filename>class_o_s_p_f_1_1_neighbor_state_attempt.html</filename>
    <base>OSPF::NeighborState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor_state_attempt.html</anchorfile>
      <anchor>adc63475f921161565800b1c33e78f814</anchor>
      <arglist>(Neighbor *neighbor, Neighbor::NeighborEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Neighbor::NeighborStateType</type>
      <name>GetState</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor_state_attempt.html</anchorfile>
      <anchor>a4447683c66bbfb70a19b41d7be429cc5</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::NeighborStateDown</name>
    <filename>class_o_s_p_f_1_1_neighbor_state_down.html</filename>
    <base>OSPF::NeighborState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor_state_down.html</anchorfile>
      <anchor>a16ce80eb3f947c2adb62b2d885e835fd</anchor>
      <arglist>(Neighbor *neighbor, Neighbor::NeighborEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Neighbor::NeighborStateType</type>
      <name>GetState</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor_state_down.html</anchorfile>
      <anchor>a047cf95bbe95a2cc4381c1aa3792571f</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::NeighborStateExchange</name>
    <filename>class_o_s_p_f_1_1_neighbor_state_exchange.html</filename>
    <base>OSPF::NeighborState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor_state_exchange.html</anchorfile>
      <anchor>a3b983ffc2fdb9213d062f34e0fb18f00</anchor>
      <arglist>(Neighbor *neighbor, Neighbor::NeighborEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Neighbor::NeighborStateType</type>
      <name>GetState</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor_state_exchange.html</anchorfile>
      <anchor>a41f16dee8ded589fdb614ceebe3bf054</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::NeighborStateExchangeStart</name>
    <filename>class_o_s_p_f_1_1_neighbor_state_exchange_start.html</filename>
    <base>OSPF::NeighborState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor_state_exchange_start.html</anchorfile>
      <anchor>ab759e2911bdf00193e6695400828978b</anchor>
      <arglist>(Neighbor *neighbor, Neighbor::NeighborEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Neighbor::NeighborStateType</type>
      <name>GetState</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor_state_exchange_start.html</anchorfile>
      <anchor>aced841c99d6badd0f265a0940efea008</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::NeighborStateFull</name>
    <filename>class_o_s_p_f_1_1_neighbor_state_full.html</filename>
    <base>OSPF::NeighborState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor_state_full.html</anchorfile>
      <anchor>a12f0324da877b3cac8b5afbd509df0ae</anchor>
      <arglist>(Neighbor *neighbor, Neighbor::NeighborEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Neighbor::NeighborStateType</type>
      <name>GetState</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor_state_full.html</anchorfile>
      <anchor>a88c9eee3bbe331e23a8ee59985dc35c6</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::NeighborStateInit</name>
    <filename>class_o_s_p_f_1_1_neighbor_state_init.html</filename>
    <base>OSPF::NeighborState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor_state_init.html</anchorfile>
      <anchor>a17087f77a78bfd579667580af4314bd5</anchor>
      <arglist>(Neighbor *neighbor, Neighbor::NeighborEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Neighbor::NeighborStateType</type>
      <name>GetState</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor_state_init.html</anchorfile>
      <anchor>a20344000c7e42c2339ab40655043f748</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::NeighborStateLoading</name>
    <filename>class_o_s_p_f_1_1_neighbor_state_loading.html</filename>
    <base>OSPF::NeighborState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor_state_loading.html</anchorfile>
      <anchor>ae2fb7a1b73472a27b95b7fd370595a9c</anchor>
      <arglist>(Neighbor *neighbor, Neighbor::NeighborEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Neighbor::NeighborStateType</type>
      <name>GetState</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor_state_loading.html</anchorfile>
      <anchor>ac72aac0ad15099438213493d56849d2a</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::NeighborStateTwoWay</name>
    <filename>class_o_s_p_f_1_1_neighbor_state_two_way.html</filename>
    <base>OSPF::NeighborState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor_state_two_way.html</anchorfile>
      <anchor>a3088a5eaa889a2f1394fd891e74648a1</anchor>
      <arglist>(Neighbor *neighbor, Neighbor::NeighborEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Neighbor::NeighborStateType</type>
      <name>GetState</name>
      <anchorfile>class_o_s_p_f_1_1_neighbor_state_two_way.html</anchorfile>
      <anchor>adc6be1a2e6db9efe5ec5424d249c4802</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OSPF::NextHop</name>
    <filename>struct_o_s_p_f_1_1_next_hop.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>ifIndex</name>
      <anchorfile>struct_o_s_p_f_1_1_next_hop.html</anchorfile>
      <anchor>a39285f02ad3dc64d7b4869d3d07dafd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPv4Address</type>
      <name>hopAddress</name>
      <anchorfile>struct_o_s_p_f_1_1_next_hop.html</anchorfile>
      <anchor>ad93bc896458c9a36a7a2510ed44a0356</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RouterID</type>
      <name>advertisingRouter</name>
      <anchorfile>struct_o_s_p_f_1_1_next_hop.html</anchorfile>
      <anchor>a8129ab4ea58affbb888039901cd7b311</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::RoutingInfo</name>
    <filename>class_o_s_p_f_1_1_routing_info.html</filename>
    <member kind="function">
      <type></type>
      <name>RoutingInfo</name>
      <anchorfile>class_o_s_p_f_1_1_routing_info.html</anchorfile>
      <anchor>a77cbbf05820ed047fbaf99b2bfbc720f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoutingInfo</name>
      <anchorfile>class_o_s_p_f_1_1_routing_info.html</anchorfile>
      <anchor>abd442196f4fa01a7f7760bc492ffb12d</anchor>
      <arglist>(const RoutingInfo &amp;routingInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RoutingInfo</name>
      <anchorfile>class_o_s_p_f_1_1_routing_info.html</anchorfile>
      <anchor>a2140908b40dbbff80d8c01136e511b9d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddNextHop</name>
      <anchorfile>class_o_s_p_f_1_1_routing_info.html</anchorfile>
      <anchor>a3d0c2746f5641acb02d74c1c66d61c29</anchor>
      <arglist>(NextHop nextHop)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearNextHops</name>
      <anchorfile>class_o_s_p_f_1_1_routing_info.html</anchorfile>
      <anchor>a3cb73da01d09efedc612e5800ade83c2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetNextHopCount</name>
      <anchorfile>class_o_s_p_f_1_1_routing_info.html</anchorfile>
      <anchor>ac03fbd19eb4db0bab84fdaa55e67c07e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>NextHop</type>
      <name>GetNextHop</name>
      <anchorfile>class_o_s_p_f_1_1_routing_info.html</anchorfile>
      <anchor>a767d2cf6ca5920845bc8cdaf17b67ad0</anchor>
      <arglist>(unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDistance</name>
      <anchorfile>class_o_s_p_f_1_1_routing_info.html</anchorfile>
      <anchor>aef4bd8b8337528ab921deab9530972bd</anchor>
      <arglist>(unsigned long d)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetDistance</name>
      <anchorfile>class_o_s_p_f_1_1_routing_info.html</anchorfile>
      <anchor>ab334313d3d0efe385a6aff38efb40996</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetParent</name>
      <anchorfile>class_o_s_p_f_1_1_routing_info.html</anchorfile>
      <anchor>a401b325b05a47bcc0af81217d9ad5dc2</anchor>
      <arglist>(OSPFLSA *p)</arglist>
    </member>
    <member kind="function">
      <type>OSPFLSA *</type>
      <name>GetParent</name>
      <anchorfile>class_o_s_p_f_1_1_routing_info.html</anchorfile>
      <anchor>acec4ddb814bd218432c247cf32912f48</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; NextHop &gt;</type>
      <name>nextHops</name>
      <anchorfile>class_o_s_p_f_1_1_routing_info.html</anchorfile>
      <anchor>a55ab2eb54231015358f705202da2be1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long</type>
      <name>distance</name>
      <anchorfile>class_o_s_p_f_1_1_routing_info.html</anchorfile>
      <anchor>a80082f45e8e72779724bf8b56d1384f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPFLSA *</type>
      <name>parent</name>
      <anchorfile>class_o_s_p_f_1_1_routing_info.html</anchorfile>
      <anchor>ad7bf1ee0434bde18fb764bf2c95312d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::LSATrackingInfo</name>
    <filename>class_o_s_p_f_1_1_l_s_a_tracking_info.html</filename>
    <member kind="enumeration">
      <name>InstallSource</name>
      <anchorfile>class_o_s_p_f_1_1_l_s_a_tracking_info.html</anchorfile>
      <anchor>a25c15e523b3de9f3a023fbf0f6acbcfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Originated</name>
      <anchorfile>class_o_s_p_f_1_1_l_s_a_tracking_info.html</anchorfile>
      <anchor>a25c15e523b3de9f3a023fbf0f6acbcfcac3c865818131fa4d69cdf5281934f10e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flooded</name>
      <anchorfile>class_o_s_p_f_1_1_l_s_a_tracking_info.html</anchorfile>
      <anchor>a25c15e523b3de9f3a023fbf0f6acbcfca87dc05e24a9ad81b84bee9fa820954ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LSATrackingInfo</name>
      <anchorfile>class_o_s_p_f_1_1_l_s_a_tracking_info.html</anchorfile>
      <anchor>aa2112ae7ff404164df13ac6fedd67ecc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LSATrackingInfo</name>
      <anchorfile>class_o_s_p_f_1_1_l_s_a_tracking_info.html</anchorfile>
      <anchor>a46995bc74eed031a5ae559a903da95fb</anchor>
      <arglist>(const LSATrackingInfo &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSource</name>
      <anchorfile>class_o_s_p_f_1_1_l_s_a_tracking_info.html</anchorfile>
      <anchor>ae129816a5603d664d66883b4bffb0e63</anchor>
      <arglist>(InstallSource installSource)</arglist>
    </member>
    <member kind="function">
      <type>InstallSource</type>
      <name>GetSource</name>
      <anchorfile>class_o_s_p_f_1_1_l_s_a_tracking_info.html</anchorfile>
      <anchor>a35c6733ac72d28e9b7e3fa4639ff1ae8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IncrementInstallTime</name>
      <anchorfile>class_o_s_p_f_1_1_l_s_a_tracking_info.html</anchorfile>
      <anchor>abf7755405bc9db270e9d3db6beb9f13d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetInstallTime</name>
      <anchorfile>class_o_s_p_f_1_1_l_s_a_tracking_info.html</anchorfile>
      <anchor>afd5847fa618f11211c2e4141fb1fe63c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetInstallTime</name>
      <anchorfile>class_o_s_p_f_1_1_l_s_a_tracking_info.html</anchorfile>
      <anchor>a0dcda399412c3a967660af78bea9ba63</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InstallSource</type>
      <name>source</name>
      <anchorfile>class_o_s_p_f_1_1_l_s_a_tracking_info.html</anchorfile>
      <anchor>a7b511478da079f242a5383c9e22e871e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long</type>
      <name>installTime</name>
      <anchorfile>class_o_s_p_f_1_1_l_s_a_tracking_info.html</anchorfile>
      <anchor>a0c1a6c4516088ed6999b8eccffcb1377</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::RouterLSA</name>
    <filename>class_o_s_p_f_1_1_router_l_s_a.html</filename>
    <base>OSPFRouterLSA</base>
    <base>OSPF::RoutingInfo</base>
    <base>OSPF::LSATrackingInfo</base>
    <member kind="function">
      <type></type>
      <name>RouterLSA</name>
      <anchorfile>class_o_s_p_f_1_1_router_l_s_a.html</anchorfile>
      <anchor>a55bdef219829a7de5617350b63b55765</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RouterLSA</name>
      <anchorfile>class_o_s_p_f_1_1_router_l_s_a.html</anchorfile>
      <anchor>a7ca5ae326107c6eff1f5d6549deffbe4</anchor>
      <arglist>(const OSPFRouterLSA &amp;lsa)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RouterLSA</name>
      <anchorfile>class_o_s_p_f_1_1_router_l_s_a.html</anchorfile>
      <anchor>ad337d72d017754d18266629b412574ab</anchor>
      <arglist>(const RouterLSA &amp;lsa)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RouterLSA</name>
      <anchorfile>class_o_s_p_f_1_1_router_l_s_a.html</anchorfile>
      <anchor>a163c8f527a3a932bc17fea7e5671ba28</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ValidateLSChecksum</name>
      <anchorfile>class_o_s_p_f_1_1_router_l_s_a.html</anchorfile>
      <anchor>a47516c35c7ec348c3fd668ae13e8f124</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Update</name>
      <anchorfile>class_o_s_p_f_1_1_router_l_s_a.html</anchorfile>
      <anchor>ab15ecd9bdfdb616aeacf47a4e8a7c313</anchor>
      <arglist>(const OSPFRouterLSA *lsa)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DiffersFrom</name>
      <anchorfile>class_o_s_p_f_1_1_router_l_s_a.html</anchorfile>
      <anchor>a3109a8df04e2973e94aec022dfda6eec</anchor>
      <arglist>(const OSPFRouterLSA *routerLSA) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::NetworkLSA</name>
    <filename>class_o_s_p_f_1_1_network_l_s_a.html</filename>
    <base>OSPFNetworkLSA</base>
    <base>OSPF::RoutingInfo</base>
    <base>OSPF::LSATrackingInfo</base>
    <member kind="function">
      <type></type>
      <name>NetworkLSA</name>
      <anchorfile>class_o_s_p_f_1_1_network_l_s_a.html</anchorfile>
      <anchor>a2e4b393897b22382ec28ceaa5439f212</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NetworkLSA</name>
      <anchorfile>class_o_s_p_f_1_1_network_l_s_a.html</anchorfile>
      <anchor>a7f11776bfd738c7b7758dd37fd0a0673</anchor>
      <arglist>(const OSPFNetworkLSA &amp;lsa)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NetworkLSA</name>
      <anchorfile>class_o_s_p_f_1_1_network_l_s_a.html</anchorfile>
      <anchor>af6e12b274b002eb3b795f65bbd4d3d57</anchor>
      <arglist>(const NetworkLSA &amp;lsa)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NetworkLSA</name>
      <anchorfile>class_o_s_p_f_1_1_network_l_s_a.html</anchorfile>
      <anchor>a87ba51e9cd70449bf4542a6e47f79603</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ValidateLSChecksum</name>
      <anchorfile>class_o_s_p_f_1_1_network_l_s_a.html</anchorfile>
      <anchor>a7089d0ab1b1c2a41602765c5f8962a05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Update</name>
      <anchorfile>class_o_s_p_f_1_1_network_l_s_a.html</anchorfile>
      <anchor>a9b94613fc2d18148c66e7aa4e67591e8</anchor>
      <arglist>(const OSPFNetworkLSA *lsa)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DiffersFrom</name>
      <anchorfile>class_o_s_p_f_1_1_network_l_s_a.html</anchorfile>
      <anchor>ad2be8ac8dd58652e406d2e836387ad8c</anchor>
      <arglist>(const OSPFNetworkLSA *networkLSA) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::SummaryLSA</name>
    <filename>class_o_s_p_f_1_1_summary_l_s_a.html</filename>
    <base>OSPFSummaryLSA</base>
    <base>OSPF::RoutingInfo</base>
    <base>OSPF::LSATrackingInfo</base>
    <member kind="function">
      <type></type>
      <name>SummaryLSA</name>
      <anchorfile>class_o_s_p_f_1_1_summary_l_s_a.html</anchorfile>
      <anchor>abd75cfac591a90eb4743326d8950e003</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SummaryLSA</name>
      <anchorfile>class_o_s_p_f_1_1_summary_l_s_a.html</anchorfile>
      <anchor>aae97517e3f1f197c37d8e51a6186498d</anchor>
      <arglist>(const OSPFSummaryLSA &amp;lsa)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SummaryLSA</name>
      <anchorfile>class_o_s_p_f_1_1_summary_l_s_a.html</anchorfile>
      <anchor>ab628ffecef0eb240440a804d4abb42a4</anchor>
      <arglist>(const SummaryLSA &amp;lsa)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SummaryLSA</name>
      <anchorfile>class_o_s_p_f_1_1_summary_l_s_a.html</anchorfile>
      <anchor>a7f681ef4b689db91dc649bcab85a9d2b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetPurgeable</name>
      <anchorfile>class_o_s_p_f_1_1_summary_l_s_a.html</anchorfile>
      <anchor>a7333fd42ec0b500dab43dc307146bc71</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPurgeable</name>
      <anchorfile>class_o_s_p_f_1_1_summary_l_s_a.html</anchorfile>
      <anchor>aafbd3e2ac6de2f9f298c0d88ada17419</anchor>
      <arglist>(bool purge=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ValidateLSChecksum</name>
      <anchorfile>class_o_s_p_f_1_1_summary_l_s_a.html</anchorfile>
      <anchor>ae362d98b7880e6e33d6f793900d6680c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Update</name>
      <anchorfile>class_o_s_p_f_1_1_summary_l_s_a.html</anchorfile>
      <anchor>a62193e28648ec7901ef303803f8cf148</anchor>
      <arglist>(const OSPFSummaryLSA *lsa)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DiffersFrom</name>
      <anchorfile>class_o_s_p_f_1_1_summary_l_s_a.html</anchorfile>
      <anchor>aa7c947c6ed20bfcd08c25befa2dd0ad7</anchor>
      <arglist>(const OSPFSummaryLSA *summaryLSA) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>purgeable</name>
      <anchorfile>class_o_s_p_f_1_1_summary_l_s_a.html</anchorfile>
      <anchor>a99fd285e5c51c243456e8702c3280609</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::ASExternalLSA</name>
    <filename>class_o_s_p_f_1_1_a_s_external_l_s_a.html</filename>
    <base>OSPFASExternalLSA</base>
    <base>OSPF::RoutingInfo</base>
    <base>OSPF::LSATrackingInfo</base>
    <member kind="function">
      <type></type>
      <name>ASExternalLSA</name>
      <anchorfile>class_o_s_p_f_1_1_a_s_external_l_s_a.html</anchorfile>
      <anchor>a389d2ce80fb258e1fa21c462d24dec9e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ASExternalLSA</name>
      <anchorfile>class_o_s_p_f_1_1_a_s_external_l_s_a.html</anchorfile>
      <anchor>a88067746796d2abb19bc7db30a6e9de8</anchor>
      <arglist>(const OSPFASExternalLSA &amp;lsa)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ASExternalLSA</name>
      <anchorfile>class_o_s_p_f_1_1_a_s_external_l_s_a.html</anchorfile>
      <anchor>ad994824067b09c4ef845b7fdc3018b24</anchor>
      <arglist>(const ASExternalLSA &amp;lsa)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ASExternalLSA</name>
      <anchorfile>class_o_s_p_f_1_1_a_s_external_l_s_a.html</anchorfile>
      <anchor>a5eadab8f4375cd6ae18e5b8bd4fe7035</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetPurgeable</name>
      <anchorfile>class_o_s_p_f_1_1_a_s_external_l_s_a.html</anchorfile>
      <anchor>a64d8238a6678ab6f7e9ec666fb517adb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPurgeable</name>
      <anchorfile>class_o_s_p_f_1_1_a_s_external_l_s_a.html</anchorfile>
      <anchor>a8fe5357ac7e0c69be23dddb2701d1f2f</anchor>
      <arglist>(bool purge=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ValidateLSChecksum</name>
      <anchorfile>class_o_s_p_f_1_1_a_s_external_l_s_a.html</anchorfile>
      <anchor>a28349b0233b3e4e767e9e3c59ad2ecce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Update</name>
      <anchorfile>class_o_s_p_f_1_1_a_s_external_l_s_a.html</anchorfile>
      <anchor>a3bfdf218c05ec4d4b3056b656b2ee6c7</anchor>
      <arglist>(const OSPFASExternalLSA *lsa)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DiffersFrom</name>
      <anchorfile>class_o_s_p_f_1_1_a_s_external_l_s_a.html</anchorfile>
      <anchor>a3f9f10a6ce650f17d16c3a85a6a19047</anchor>
      <arglist>(const OSPFASExternalLSA *asExternalLSA) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>purgeable</name>
      <anchorfile>class_o_s_p_f_1_1_a_s_external_l_s_a.html</anchorfile>
      <anchor>ab027a22a0666814d90cacf497feb0838</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::Area</name>
    <filename>class_o_s_p_f_1_1_area.html</filename>
    <member kind="function">
      <type></type>
      <name>Area</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a803bb5a6411e34438364264b1c0b8517</anchor>
      <arglist>(AreaID id=BackboneAreaID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Area</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a004805978aff8b19795efc9f2938b40c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAreaID</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a66bc7608dcd3298b889b58c8f8b890c8</anchor>
      <arglist>(AreaID areaId)</arglist>
    </member>
    <member kind="function">
      <type>AreaID</type>
      <name>GetAreaID</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a5cbe0e459923e9c74db35df51031cb8d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddAddressRange</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a0e17e1016c0431e17ed1dec9e42eddcf</anchor>
      <arglist>(IPv4AddressRange addressRange, bool advertise)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetAddressRangeCount</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>ac8a5bc70b7467a9614900a1590b8262b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>IPv4AddressRange</type>
      <name>GetAddressRange</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a390797c4f46a0ee09bc7327c7a818352</anchor>
      <arglist>(unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddHostRoute</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>aadd71837885c90c5bd658f577464383e</anchor>
      <arglist>(HostRouteParameters &amp;hostRouteParameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransitCapability</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a301e7cb1b47825e31ba7638468f6127c</anchor>
      <arglist>(bool transit)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetTransitCapability</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a9b7af10c58767ce4329802c396369745</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetExternalRoutingCapability</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a5060a99bf739416c16e7a595b3baa66a</anchor>
      <arglist>(bool flooded)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetExternalRoutingCapability</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>aab71c3614910d8eacb48abd45ef8bff7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStubDefaultCost</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a5155ce525d9b42cee7be815bd6019868</anchor>
      <arglist>(Metric cost)</arglist>
    </member>
    <member kind="function">
      <type>Metric</type>
      <name>GetStubDefaultCost</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>aba1670829505075f9c015875e8eb005e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSPFTreeRoot</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>afe6b63fafb7cbb25cff46f585aca0536</anchor>
      <arglist>(RouterLSA *root)</arglist>
    </member>
    <member kind="function">
      <type>RouterLSA *</type>
      <name>GetSPFTreeRoot</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a034db8752e39d45dfd6bca80714db963</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const RouterLSA *</type>
      <name>GetSPFTreeRoot</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a7e538aab8dfe485473bba9849ad76a8b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRouter</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a350562bd30814f42f8ec22a2380cd128</anchor>
      <arglist>(Router *router)</arglist>
    </member>
    <member kind="function">
      <type>Router *</type>
      <name>GetRouter</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a6aee4ce011dc75bc4c42269d90b71192</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const Router *</type>
      <name>GetRouter</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a567128617c14ce1057632040e5db6db4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetRouterLSACount</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>aa81707dbba8b2d144fb716321ca1fe00</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>RouterLSA *</type>
      <name>GetRouterLSA</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>ab354a48245f018de8ca715ee01a813bd</anchor>
      <arglist>(unsigned long i)</arglist>
    </member>
    <member kind="function">
      <type>const RouterLSA *</type>
      <name>GetRouterLSA</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>ad197380aaba6e8a5643da804e27a0505</anchor>
      <arglist>(unsigned long i) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetNetworkLSACount</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>afea1c22b0d27fd7f474b639441b13710</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>NetworkLSA *</type>
      <name>GetNetworkLSA</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a815ac7831b40ef48333fb0feaac4eabf</anchor>
      <arglist>(unsigned long i)</arglist>
    </member>
    <member kind="function">
      <type>const NetworkLSA *</type>
      <name>GetNetworkLSA</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>ac68734aa60b708a1b9ee46784d5c08e2</anchor>
      <arglist>(unsigned long i) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetSummaryLSACount</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a9de87968d01edcf4395d307cc756a218</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SummaryLSA *</type>
      <name>GetSummaryLSA</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a96e106976343b17f35893e3654048a7f</anchor>
      <arglist>(unsigned long i)</arglist>
    </member>
    <member kind="function">
      <type>const SummaryLSA *</type>
      <name>GetSummaryLSA</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>aa4e32fc658fed5f800b326d34b1ec871</anchor>
      <arglist>(unsigned long i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ContainsAddress</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>ad8fe8b944a025c98d794e6b596c09605</anchor>
      <arglist>(IPv4Address address) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasAddressRange</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a2fd7fef2bd7a8d0bfd307dd215b6bd48</anchor>
      <arglist>(IPv4AddressRange addressRange) const </arglist>
    </member>
    <member kind="function">
      <type>IPv4AddressRange</type>
      <name>GetContainingAddressRange</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a1ef09f6b661eb45c4f214449d0dbc7a4</anchor>
      <arglist>(IPv4AddressRange addressRange, bool *advertise=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddInterface</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>af8d0698ec928feab6f61f1f48f800d93</anchor>
      <arglist>(Interface *intf)</arglist>
    </member>
    <member kind="function">
      <type>Interface *</type>
      <name>GetInterface</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a506b46da4bbfd99a9fa52aff01705a7c</anchor>
      <arglist>(unsigned char ifIndex)</arglist>
    </member>
    <member kind="function">
      <type>Interface *</type>
      <name>GetInterface</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a37ca4dd96f7aeb21cbb5efb338b26265</anchor>
      <arglist>(IPv4Address address)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasVirtualLink</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a5969043ca1092e2853b89077ec7e53b4</anchor>
      <arglist>(AreaID withTransitArea) const </arglist>
    </member>
    <member kind="function">
      <type>Interface *</type>
      <name>FindVirtualLink</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a65053ce5ad220d0100c34ed63c2e6313</anchor>
      <arglist>(RouterID routerID)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>InstallRouterLSA</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a2bf1e74a4aff5191ee798ec0de232010</anchor>
      <arglist>(OSPFRouterLSA *lsa)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>InstallNetworkLSA</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a1c7d08c397f076fd2ac40a63ef9f51a3</anchor>
      <arglist>(OSPFNetworkLSA *lsa)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>InstallSummaryLSA</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>aaa2f9d212fb47636537c58759f11cae2</anchor>
      <arglist>(OSPFSummaryLSA *lsa)</arglist>
    </member>
    <member kind="function">
      <type>RouterLSA *</type>
      <name>FindRouterLSA</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>af1e1cc1b23a4bef7324631f7b6806dba</anchor>
      <arglist>(LinkStateID linkStateID)</arglist>
    </member>
    <member kind="function">
      <type>const RouterLSA *</type>
      <name>FindRouterLSA</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>aadd78e4f99ec59720dced22c53ac3813</anchor>
      <arglist>(LinkStateID linkStateID) const </arglist>
    </member>
    <member kind="function">
      <type>NetworkLSA *</type>
      <name>FindNetworkLSA</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a39ce9a6b66354f420682a42ae0c9038b</anchor>
      <arglist>(LinkStateID linkStateID)</arglist>
    </member>
    <member kind="function">
      <type>const NetworkLSA *</type>
      <name>FindNetworkLSA</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a31f9407c7082e65d72932ac9b1e2c86f</anchor>
      <arglist>(LinkStateID linkStateID) const </arglist>
    </member>
    <member kind="function">
      <type>SummaryLSA *</type>
      <name>FindSummaryLSA</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a6c1833506ce8805bf3f34bfba64906ed</anchor>
      <arglist>(LSAKeyType lsaKey)</arglist>
    </member>
    <member kind="function">
      <type>const SummaryLSA *</type>
      <name>FindSummaryLSA</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>afcb6cee0a8145c1842e5f8d3b0c34200</anchor>
      <arglist>(LSAKeyType lsaKey) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AgeDatabase</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a947902f71ffcad23fb9c4266d96db8cb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasAnyNeighborInStates</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a737904bc19a6cdbfb1e14e7831dfb47d</anchor>
      <arglist>(int states) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveFromAllRetransmissionLists</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a2b66d15f4f48ffd539a2b6e9ca284b10</anchor>
      <arglist>(LSAKeyType lsaKey)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOnAnyRetransmissionList</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>af75bb826b64157d3fed461b919154893</anchor>
      <arglist>(LSAKeyType lsaKey) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FloodLSA</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a9a8c725b4e795a67374c2b358ba4f00b</anchor>
      <arglist>(OSPFLSA *lsa, Interface *intf=NULL, Neighbor *neighbor=NULL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLocalAddress</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a64e65e4bbd94b7d4281ebf597aa8c39a</anchor>
      <arglist>(IPv4Address address) const </arglist>
    </member>
    <member kind="function">
      <type>RouterLSA *</type>
      <name>OriginateRouterLSA</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>ae5c00fa88fd4354c68b53c332520b794</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>NetworkLSA *</type>
      <name>OriginateNetworkLSA</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a6618d36cce9a113c6de92c593128cc24</anchor>
      <arglist>(const Interface *intf)</arglist>
    </member>
    <member kind="function">
      <type>SummaryLSA *</type>
      <name>OriginateSummaryLSA</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>ad90ee6523ce24723074bbf184979c9ef</anchor>
      <arglist>(const RoutingTableEntry *entry, const std::map&lt; LSAKeyType, bool, LSAKeyType_Less &gt; &amp;originatedLSAs, SummaryLSA *&amp;lsaToReoriginate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalculateShortestPathTree</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a0c8f468da68bdc0a57b1f8e645848d82</anchor>
      <arglist>(std::vector&lt; RoutingTableEntry * &gt; &amp;newRoutingTable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalculateInterAreaRoutes</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a943ee3f25aa5db9b909d762fe4ad7434</anchor>
      <arglist>(std::vector&lt; RoutingTableEntry * &gt; &amp;newRoutingTable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReCheckSummaryLSAs</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a170b5b08721de3e00cc290144e5a2197</anchor>
      <arglist>(std::vector&lt; RoutingTableEntry * &gt; &amp;newRoutingTable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>info</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a0f19ce1e08f3dc481a1aca12a50b77a5</anchor>
      <arglist>(char *buffer)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>detailedInfo</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>adba43f8684567753e4f4baeb4b7e42f5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>SummaryLSA *</type>
      <name>OriginateSummaryLSA</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a93d598368ae5b98c8100beb227138557</anchor>
      <arglist>(const OSPF::SummaryLSA *summaryLSA)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>HasLink</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a38318792f80c7223d855afa484a5f8db</anchor>
      <arglist>(OSPFLSA *fromLSA, OSPFLSA *toLSA) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::vector&lt; NextHop &gt; *</type>
      <name>CalculateNextHops</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a15febbcc84580dba0790d7a8d9c29e12</anchor>
      <arglist>(OSPFLSA *destination, OSPFLSA *parent) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::vector&lt; NextHop &gt; *</type>
      <name>CalculateNextHops</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>ac02695b237f93cc94258821bc56e4a96</anchor>
      <arglist>(Link &amp;destination, OSPFLSA *parent) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>LinkStateID</type>
      <name>GetUniqueLinkStateID</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a8f3e4d8ba4c2ef6e39aff7a894a0930d</anchor>
      <arglist>(IPv4AddressRange destination, Metric destinationCost, SummaryLSA *&amp;lsaToReoriginate) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>FindSameOrWorseCostRoute</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>ae5311cfb2167689e2f2e1f2fa43e3f49</anchor>
      <arglist>(const std::vector&lt; OSPF::RoutingTableEntry * &gt; &amp;newRoutingTable, const OSPF::SummaryLSA &amp;currentLSA, unsigned short currentCost, bool &amp;destinationInRoutingTable, std::list&lt; OSPF::RoutingTableEntry * &gt; &amp;sameOrWorseCost) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>RoutingTableEntry *</type>
      <name>CreateRoutingTableEntryFromSummaryLSA</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a8b699f247444a684fc77f9339866f2ee</anchor>
      <arglist>(const OSPF::SummaryLSA &amp;summaryLSA, unsigned short entryCost, const OSPF::RoutingTableEntry &amp;borderRouterEntry) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AreaID</type>
      <name>areaID</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a79b61d64ccf5b9ffa56f939e554f527d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; IPv4AddressRange, bool, IPv4AddressRange_Less &gt;</type>
      <name>advertiseAddressRanges</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a61164f27457079ed7b228f22eb34b6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; IPv4AddressRange &gt;</type>
      <name>areaAddressRanges</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>afc8f425b930adefe88597907fa35eb82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Interface * &gt;</type>
      <name>associatedInterfaces</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a15770c76d0f9983dff32b90ef4baed14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; HostRouteParameters &gt;</type>
      <name>hostRoutes</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>aa2f3b9aea3ef2ed19ebfb57efa49814d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; LinkStateID, RouterLSA * &gt;</type>
      <name>routerLSAsByID</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>acf31519c705202e97735e7f59e9768f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RouterLSA * &gt;</type>
      <name>routerLSAs</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a2a256e63fffe4a7cac4d19f5c8d5367d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; LinkStateID, NetworkLSA * &gt;</type>
      <name>networkLSAsByID</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>ad06ec433a0e32551971bcd0c258710e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; NetworkLSA * &gt;</type>
      <name>networkLSAs</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>ad489853a12aa1e7416349b1ff1342775</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; LSAKeyType, SummaryLSA *, LSAKeyType_Less &gt;</type>
      <name>summaryLSAsByID</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>abaff08fa70b519600431fc85c65b3557</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; SummaryLSA * &gt;</type>
      <name>summaryLSAs</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>abdcc07e64f9b834a6d9eafde9a9fbc1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>transitCapability</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>ae24e93c4afa254f46574394d3f95fe6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>externalRoutingCapability</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>ad7036fff37a9b5fd83336e252fc5b842</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Metric</type>
      <name>stubDefaultCost</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>ab2d2e196b8d831d381ee896eeb7a6b07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RouterLSA *</type>
      <name>spfTreeRoot</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a36ed4ca431cee553b421718011f11a3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Router *</type>
      <name>parentRouter</name>
      <anchorfile>class_o_s_p_f_1_1_area.html</anchorfile>
      <anchor>a3494ab7ca899a6de29d6b821524315ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OSPF::AuthenticationKeyType</name>
    <filename>struct_o_s_p_f_1_1_authentication_key_type.html</filename>
    <member kind="variable">
      <type>char</type>
      <name>bytes</name>
      <anchorfile>struct_o_s_p_f_1_1_authentication_key_type.html</anchorfile>
      <anchor>a09102c74d106ef556c423ea0438aed4a</anchor>
      <arglist>[8]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OSPF::IPv4Address</name>
    <filename>struct_o_s_p_f_1_1_i_pv4_address.html</filename>
    <member kind="function">
      <type>unsigned int</type>
      <name>asInt</name>
      <anchorfile>struct_o_s_p_f_1_1_i_pv4_address.html</anchorfile>
      <anchor>a8a0425cc07f3d4cc35eab26fa0083f3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>bytes</name>
      <anchorfile>struct_o_s_p_f_1_1_i_pv4_address.html</anchorfile>
      <anchor>ab663782908267ede8ceb383bbe5062c8</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::IPv4Address_Less</name>
    <filename>class_o_s_p_f_1_1_i_pv4_address___less.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>class_o_s_p_f_1_1_i_pv4_address___less.html</anchorfile>
      <anchor>a2345741c3ebafdb0d0ae11a204470fd3</anchor>
      <arglist>(IPv4Address leftAddress, IPv4Address rightAddress) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OSPF::IPv4AddressRange</name>
    <filename>struct_o_s_p_f_1_1_i_pv4_address_range.html</filename>
    <member kind="variable">
      <type>IPv4Address</type>
      <name>address</name>
      <anchorfile>struct_o_s_p_f_1_1_i_pv4_address_range.html</anchorfile>
      <anchor>a74993d6571119644535ac918c4240722</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPv4Address</type>
      <name>mask</name>
      <anchorfile>struct_o_s_p_f_1_1_i_pv4_address_range.html</anchorfile>
      <anchor>a452878c3f507f27d1de9c5b7cda2ae70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::IPv4AddressRange_Less</name>
    <filename>class_o_s_p_f_1_1_i_pv4_address_range___less.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>class_o_s_p_f_1_1_i_pv4_address_range___less.html</anchorfile>
      <anchor>a27155927a1c9efc00d201329ab24af55</anchor>
      <arglist>(IPv4AddressRange leftAddressRange, IPv4AddressRange rightAddressRange) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OSPF::HostRouteParameters</name>
    <filename>struct_o_s_p_f_1_1_host_route_parameters.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>ifIndex</name>
      <anchorfile>struct_o_s_p_f_1_1_host_route_parameters.html</anchorfile>
      <anchor>ad87d530d4294ea13f03264b82df05baf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPv4Address</type>
      <name>address</name>
      <anchorfile>struct_o_s_p_f_1_1_host_route_parameters.html</anchorfile>
      <anchor>aa5fed9620e06e6ae079b51bc5aca8e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Metric</type>
      <name>linkCost</name>
      <anchorfile>struct_o_s_p_f_1_1_host_route_parameters.html</anchorfile>
      <anchor>aa9a4eb549077183bf19aff1f5672255e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OSPF::LSAKeyType</name>
    <filename>struct_o_s_p_f_1_1_l_s_a_key_type.html</filename>
    <member kind="variable">
      <type>LinkStateID</type>
      <name>linkStateID</name>
      <anchorfile>struct_o_s_p_f_1_1_l_s_a_key_type.html</anchorfile>
      <anchor>a3a05e7e193451f3979803d5e93362ead</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RouterID</type>
      <name>advertisingRouter</name>
      <anchorfile>struct_o_s_p_f_1_1_l_s_a_key_type.html</anchorfile>
      <anchor>a583e0f1cf5e052a08dc21dbcd405e8b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::LSAKeyType_Less</name>
    <filename>class_o_s_p_f_1_1_l_s_a_key_type___less.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>class_o_s_p_f_1_1_l_s_a_key_type___less.html</anchorfile>
      <anchor>addd0323ea5b66124cab8dca9b1beaaf7</anchor>
      <arglist>(LSAKeyType leftKey, LSAKeyType rightKey) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OSPF::DesignatedRouterID</name>
    <filename>struct_o_s_p_f_1_1_designated_router_i_d.html</filename>
    <member kind="variable">
      <type>RouterID</type>
      <name>routerID</name>
      <anchorfile>struct_o_s_p_f_1_1_designated_router_i_d.html</anchorfile>
      <anchor>a7132bdabe0f15493518622d1b9e84f0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPv4Address</type>
      <name>ipInterfaceAddress</name>
      <anchorfile>struct_o_s_p_f_1_1_designated_router_i_d.html</anchorfile>
      <anchor>a3e44bfb89c52a2179bfe69cbd73fc30e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::Router</name>
    <filename>class_o_s_p_f_1_1_router.html</filename>
    <member kind="function">
      <type></type>
      <name>Router</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a35bbf6cd398015ef42d76223e745ba2e</anchor>
      <arglist>(RouterID id, cSimpleModule *containingModule)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Router</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>afbabadb5293a72cd1e1bffde128df247</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRouterID</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>acc3ff0effb2c8b74440b479b201880df</anchor>
      <arglist>(RouterID id)</arglist>
    </member>
    <member kind="function">
      <type>RouterID</type>
      <name>GetRouterID</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a12b09f4263d005f7b0cd808502c1de48</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRFC1583Compatibility</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>ae27ea511ced12487b158e87d4582ea21</anchor>
      <arglist>(bool compatibility)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetRFC1583Compatibility</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>affd6a398ee914b26e5c06e72c9998e8d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetAreaCount</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a69d95bca021305439e63ebb712a9559c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>MessageHandler *</type>
      <name>GetMessageHandler</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>ab2b6452dadb00d2970e3432b0b29e17f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetASExternalLSACount</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a18459104f498a4de761216210665220a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ASExternalLSA *</type>
      <name>GetASExternalLSA</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>abfec528130746982c850c80084a9502b</anchor>
      <arglist>(unsigned long i)</arglist>
    </member>
    <member kind="function">
      <type>const ASExternalLSA *</type>
      <name>GetASExternalLSA</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a53df3fd45ff91fa56b853289dc23a435</anchor>
      <arglist>(unsigned long i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetASBoundaryRouter</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>ac380db94a6b8c16941d338a11b3b6b11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetRoutingTableEntryCount</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a07874bd84b94970be2c08b01a50bff9e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>RoutingTableEntry *</type>
      <name>GetRoutingTableEntry</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>adc36bddb2349df8c7f013e0c1062909e</anchor>
      <arglist>(unsigned long i)</arglist>
    </member>
    <member kind="function">
      <type>const RoutingTableEntry *</type>
      <name>GetRoutingTableEntry</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a9464f6da7a2b4028f100d18952984eb8</anchor>
      <arglist>(unsigned long i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddRoutingTableEntry</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a429edf824d86c3200851393676608603</anchor>
      <arglist>(RoutingTableEntry *entry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddWatches</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a41c5b61bcaa1c23247f64d5eebba64b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddArea</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>aeb3b4bfce0df4171c50b5d174112b130</anchor>
      <arglist>(Area *area)</arglist>
    </member>
    <member kind="function">
      <type>Area *</type>
      <name>GetArea</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>af1593be786d4bdd63bb6805d5bdefb50</anchor>
      <arglist>(AreaID areaID)</arglist>
    </member>
    <member kind="function">
      <type>Area *</type>
      <name>GetArea</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a3c81e4d286cf26f247db7940b6775580</anchor>
      <arglist>(IPv4Address address)</arglist>
    </member>
    <member kind="function">
      <type>Interface *</type>
      <name>GetNonVirtualInterface</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a1b1dc6a8a245040f1202d833090ce8b3</anchor>
      <arglist>(unsigned char ifIndex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>InstallLSA</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a0b35533c0a9820cdd8887d5812c2db9b</anchor>
      <arglist>(OSPFLSA *lsa, AreaID areaID=BackboneAreaID)</arglist>
    </member>
    <member kind="function">
      <type>OSPFLSA *</type>
      <name>FindLSA</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>ab0c1b846020c1b0f5d2853cd849891df</anchor>
      <arglist>(LSAType lsaType, LSAKeyType lsaKey, AreaID areaID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AgeDatabase</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>ae6711720d55119affde22ea9baeda7d2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasAnyNeighborInStates</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>afc4272a1f634c3329523df334e67aa3c</anchor>
      <arglist>(int states) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveFromAllRetransmissionLists</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>ac754f8ed7d454fc7bfe53ac877eebe53</anchor>
      <arglist>(LSAKeyType lsaKey)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOnAnyRetransmissionList</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>aae605eb327107bfecd3b8f2307f788f4</anchor>
      <arglist>(LSAKeyType lsaKey) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FloodLSA</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a2cfb1ebf041766dadf2fcd6e1fdebe27</anchor>
      <arglist>(OSPFLSA *lsa, AreaID areaID=BackboneAreaID, Interface *intf=NULL, Neighbor *neighbor=NULL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLocalAddress</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a1e457a90074dfce50e04ba85571ccff6</anchor>
      <arglist>(IPv4Address address) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasAddressRange</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a2ac64ff56b3bcde574fde26a5247286d</anchor>
      <arglist>(IPv4AddressRange addressRange) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDestinationUnreachable</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>ad3bfc2d2a7560d2ba946288aa241725b</anchor>
      <arglist>(OSPFLSA *lsa) const </arglist>
    </member>
    <member kind="function">
      <type>RoutingTableEntry *</type>
      <name>Lookup</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>ac6f97cebf080df401b616411acd54090</anchor>
      <arglist>(IPAddress destination, std::vector&lt; RoutingTableEntry * &gt; *table=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RebuildRoutingTable</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a184025a0ac2c61dc9c580b2321a9c9a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>IPv4AddressRange</type>
      <name>GetContainingAddressRange</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a9a35624ca66179bda14774a1fbdc44bf</anchor>
      <arglist>(IPv4AddressRange addressRange, bool *advertise=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UpdateExternalRoute</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>aed64d2915aba911a976c06f053ecf19f</anchor>
      <arglist>(IPv4Address networkAddress, const OSPFASExternalLSAContents &amp;externalRouteContents, int ifIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveExternalRoute</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a5ec34d1a9d49f94ddd6c2552c1f100a6</anchor>
      <arglist>(IPv4Address networkAddress)</arglist>
    </member>
    <member kind="function">
      <type>RoutingTableEntry *</type>
      <name>GetPreferredEntry</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a1fc64753c023df6b7318008d50aef805</anchor>
      <arglist>(const OSPFLSA &amp;lsa, bool skipSelfOriginated, std::vector&lt; RoutingTableEntry * &gt; *fromRoutingTable=NULL)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>InstallASExternalLSA</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a8615120ec6c21bfd812b533e5532ddcb</anchor>
      <arglist>(OSPFASExternalLSA *lsa)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ASExternalLSA *</type>
      <name>FindASExternalLSA</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a5aec9d69b413708dd0617190268af187</anchor>
      <arglist>(LSAKeyType lsaKey)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>const ASExternalLSA *</type>
      <name>FindASExternalLSA</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>ae8bdbafe5f6d9219c34cea801132b232</anchor>
      <arglist>(LSAKeyType lsaKey) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>ASExternalLSA *</type>
      <name>OriginateASExternalLSA</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>adf337b0a712b070d288f208ea5cd591a</anchor>
      <arglist>(ASExternalLSA *lsa)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>LinkStateID</type>
      <name>GetUniqueLinkStateID</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a711150516e1e27419e4c2c9770a3d9db</anchor>
      <arglist>(IPv4AddressRange destination, Metric destinationCost, OSPF::ASExternalLSA *&amp;lsaToReoriginate, bool externalMetricIsType2=false) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>CalculateASExternalRoutes</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a3949265e72dab00a009aaa0758cd2623</anchor>
      <arglist>(std::vector&lt; RoutingTableEntry * &gt; &amp;newRoutingTable)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>NotifyAboutRoutingTableChanges</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a57df70b2d8008b2ea1827e06ab750500</anchor>
      <arglist>(std::vector&lt; RoutingTableEntry * &gt; &amp;oldRoutingTable)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>HasRouteToASBoundaryRouter</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a5bb62fe635f3bbe881e9917564334751</anchor>
      <arglist>(const std::vector&lt; RoutingTableEntry * &gt; &amp;inRoutingTable, OSPF::RouterID routerID) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::vector&lt; RoutingTableEntry * &gt;</type>
      <name>GetRoutesToASBoundaryRouter</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a32016e85660ea37254e44312a80153eb</anchor>
      <arglist>(const std::vector&lt; RoutingTableEntry * &gt; &amp;fromRoutingTable, OSPF::RouterID routerID) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>PruneASBoundaryRouterEntries</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>aa28b138458a39381a75d969e82dbfde0</anchor>
      <arglist>(std::vector&lt; RoutingTableEntry * &gt; &amp;asbrEntries) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>RoutingTableEntry *</type>
      <name>SelectLeastCostRoutingEntry</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a173315c49c051dfedef06a432071d358</anchor>
      <arglist>(std::vector&lt; RoutingTableEntry * &gt; &amp;entries) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RouterID</type>
      <name>routerID</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a3ebbdb2a44054edf297b21360de68cb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; AreaID, Area * &gt;</type>
      <name>areasByID</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>ab2c936939863bd82c6628c794e6409e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Area * &gt;</type>
      <name>areas</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a5ce9c0ecf94cbc5872c346750e4de6b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; LSAKeyType, ASExternalLSA *, LSAKeyType_Less &gt;</type>
      <name>asExternalLSAsByID</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>abbdacd52ab234eb19f6eeb24a06222c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; ASExternalLSA * &gt;</type>
      <name>asExternalLSAs</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a20e18099b999ef4fd3eebca715173f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; IPv4Address, OSPFASExternalLSAContents, IPv4Address_Less &gt;</type>
      <name>externalRoutes</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a2fa24502500b746a3056832733228a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPFTimer *</type>
      <name>ageTimer</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>acafd411e92c5c3bc952daadbc0d53cf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RoutingTableEntry * &gt;</type>
      <name>routingTable</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>aff527f73b1c4068c21abb9fe9dd9f090</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MessageHandler *</type>
      <name>messageHandler</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a532e99a63a766b3aabc007fd929fb48f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>rfc1583Compatibility</name>
      <anchorfile>class_o_s_p_f_1_1_router.html</anchorfile>
      <anchor>a10f71a71f20baa02d35f94d602758357</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::RoutingTableEntry</name>
    <filename>class_o_s_p_f_1_1_routing_table_entry.html</filename>
    <base>IPRoute</base>
    <member kind="enumeration">
      <name>RoutingPathType</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>a32d865d25745b844bcc6100e11dfd254</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntraArea</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>a32d865d25745b844bcc6100e11dfd254aada3ad1646360d0d106905c77733f600</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InterArea</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>a32d865d25745b844bcc6100e11dfd254a9e19536f5d4fede2389e66c6ff4969fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Type1External</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>a32d865d25745b844bcc6100e11dfd254aa222aff0a2b4a30f1a3f2020b697e558</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Type2External</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>a32d865d25745b844bcc6100e11dfd254aa63a69910a414a0c0b98c96f51395766</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>RoutingDestinationType</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>a2631310eb579608601040618919173bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoutingTableEntry</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>aebf3f323bb98708c776d95cddc14d77e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoutingTableEntry</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>a977d5793425bd59c1316e69b483ab6f9</anchor>
      <arglist>(const RoutingTableEntry &amp;entry)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RoutingTableEntry</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>ae5f616805204f1bb308d65bd0ca5b948</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>a34f55260007141ecd5993cade99d716c</anchor>
      <arglist>(const RoutingTableEntry &amp;entry) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>ab91782034e78f0b052a3b9488dd4f9f2</anchor>
      <arglist>(const RoutingTableEntry &amp;entry) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDestinationType</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>a6f721739fbc1c2a18341afb4d8916db6</anchor>
      <arglist>(RoutingDestinationType type)</arglist>
    </member>
    <member kind="function">
      <type>RoutingDestinationType</type>
      <name>GetDestinationType</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>ad8499eafeaedf12631fcf23389edaf44</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDestinationID</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>ae75063f049d56aa1209e02e0767c170c</anchor>
      <arglist>(IPAddress destID)</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>GetDestinationID</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>aabd6e43c5ef3feb40a60b6c03163c2a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAddressMask</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>affeb736e63b6a2387d9a3c9ee23baa35</anchor>
      <arglist>(IPAddress destMask)</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>GetAddressMask</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>a9810faee6aeee3f09397f43d6b204703</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOptionalCapabilities</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>a0188055090c62f98d6c140188ab739e5</anchor>
      <arglist>(OSPFOptions options)</arglist>
    </member>
    <member kind="function">
      <type>OSPFOptions</type>
      <name>GetOptionalCapabilities</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>ae884c1b81de3de243028a602e6be4333</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetArea</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>a8af24090ee7cfa811b46e2aed1d282a5</anchor>
      <arglist>(AreaID source)</arglist>
    </member>
    <member kind="function">
      <type>AreaID</type>
      <name>GetArea</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>aa1f39ae9bee53ff52d744012c9adefdf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPathType</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>a7ca15b35b5d0c9d2818ba07ef50b7419</anchor>
      <arglist>(RoutingPathType type)</arglist>
    </member>
    <member kind="function">
      <type>RoutingPathType</type>
      <name>GetPathType</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>ae6952c69005f7d3d6421ea52439c776e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCost</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>a6e9bfa59d5a79d87894d26e48f08043d</anchor>
      <arglist>(Metric pathCost)</arglist>
    </member>
    <member kind="function">
      <type>Metric</type>
      <name>GetCost</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>a098e2d41bad2cd9236ee0581e6bda190</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetType2Cost</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>a06e98e3f9b93ec4c977298a484a107f9</anchor>
      <arglist>(Metric pathCost)</arglist>
    </member>
    <member kind="function">
      <type>Metric</type>
      <name>GetType2Cost</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>ab4c8f56884183673fae30f0e6e98f0d6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinkStateOrigin</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>af4963909ac78a70f0a029f5fbfef54d6</anchor>
      <arglist>(const OSPFLSA *lsa)</arglist>
    </member>
    <member kind="function">
      <type>const OSPFLSA *</type>
      <name>GetLinkStateOrigin</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>a8a6ed86efbf4b0b456e26321fcd31c03</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddNextHop</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>a4f9abc98f521b252330a7682225fdc10</anchor>
      <arglist>(NextHop hop)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearNextHops</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>ac36685b249b13330263afc5000dea6bc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetNextHopCount</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>ace9a54276cd9bc6b32ff0931d8d98bf4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>NextHop</type>
      <name>GetNextHop</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>a57125558c11e6228690587d03d6f356a</anchor>
      <arglist>(unsigned int index) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>NetworkDestination</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>aaf930613a21a30bef97cab3284d0648f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>AreaBorderRouterDestination</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>af92c5c5be248300e9c778f1a87dda704</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ASBoundaryRouterDestination</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>a5d17313f8ef2882f4e6c84dfbfb07a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RoutingDestinationType</type>
      <name>destinationType</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>a8eac49dfe3ddf61fb77c3c770b87bd23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPFOptions</type>
      <name>optionalCapabilities</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>abcb09b9f365c9d90a65cc1c36c193140</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AreaID</type>
      <name>area</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>a6d52c84ebbd69a97d9ad7e7737c82cfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RoutingPathType</type>
      <name>pathType</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>aa85b7147dec6191be14de4db859c277c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Metric</type>
      <name>cost</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>a7e1aa71adab064d2608e5916752a8137</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Metric</type>
      <name>type2Cost</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>a129ed3b152443bb16bd1c761d722acb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const OSPFLSA *</type>
      <name>linkStateOrigin</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>a9d02697e7fbc50044dbc81d9027a8b61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; NextHop &gt;</type>
      <name>nextHops</name>
      <anchorfile>class_o_s_p_f_1_1_routing_table_entry.html</anchorfile>
      <anchor>a0a47faef58471dc32e662009c6f1d969</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>tcp_old</name>
    <filename>namespacetcp__old.html</filename>
    <class kind="class">tcp_old::DumbTCPStateVariables</class>
    <class kind="class">tcp_old::DumbTCP</class>
    <class kind="class">tcp_old::TCPBaseAlgStateVariables</class>
    <class kind="class">tcp_old::TCPBaseAlg</class>
    <class kind="class">tcp_old::TCPNoCongestionControl</class>
    <class kind="class">tcp_old::TCPReno</class>
    <class kind="class">tcp_old::TCPTahoe</class>
    <class kind="class">tcp_old::TCPTahoeRenoFamilyStateVariables</class>
    <class kind="class">tcp_old::TCPTahoeRenoFamily</class>
    <class kind="class">tcp_old::TCPMsgBasedRcvQueue</class>
    <class kind="class">tcp_old::TCPMsgBasedSendQueue</class>
    <class kind="class">tcp_old::TCPVirtualDataRcvQueue</class>
    <class kind="class">tcp_old::TCPVirtualDataSendQueue</class>
    <class kind="class">tcp_old::TCP</class>
    <class kind="class">tcp_old::TCPAlgorithm</class>
    <class kind="class">tcp_old::TCPStateVariables</class>
    <class kind="class">tcp_old::TCPConnection</class>
    <class kind="class">tcp_old::TCPReceiveQueue</class>
    <class kind="class">tcp_old::TCPSendQueue</class>
    <member kind="typedef">
      <type>TCPBaseAlgStateVariables</type>
      <name>TCPNoCongestionControlStateVariables</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>ae9d7a9544a1ac76a875480f353111fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TCPTahoeRenoFamilyStateVariables</type>
      <name>TCPRenoStateVariables</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>a5d6a0bed379f5b6bd3425398d0360613</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TCPTahoeRenoFamilyStateVariables</type>
      <name>TCPTahoeStateVariables</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>a19c210d0a81aa644ff81066b316c4205</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TcpState</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>acdbb7986967662f90bca9b6ef46f3aca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_INIT</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>acdbb7986967662f90bca9b6ef46f3acaa8b6438b06a8e3cd7537e09f9fb2f0d03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_CLOSED</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>acdbb7986967662f90bca9b6ef46f3acaaae392e6982b73d95ab4e48e3a27ce552</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_LISTEN</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>acdbb7986967662f90bca9b6ef46f3acaa8a809324e3edea6ff6800a639d7bcea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_SYN_SENT</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>acdbb7986967662f90bca9b6ef46f3acaafde4b4cc43d59d14ba2cbf0bc3adb525</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_SYN_RCVD</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>acdbb7986967662f90bca9b6ef46f3acaaf96abc23364b3cdd51216d5cc9a4f3fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_ESTABLISHED</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>acdbb7986967662f90bca9b6ef46f3acaa3b4387f45a765235dfda0bf3111ba1c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_CLOSE_WAIT</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>acdbb7986967662f90bca9b6ef46f3acaa3395b6fd6b4cf5d6165b37929d44eaa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_LAST_ACK</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>acdbb7986967662f90bca9b6ef46f3acaaac5147b505ddf6bb15d84853242bcfdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_FIN_WAIT_1</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>acdbb7986967662f90bca9b6ef46f3acaa1366e9fbbf862cd3fdfa3ea08e641cb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_FIN_WAIT_2</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>acdbb7986967662f90bca9b6ef46f3acaaea07c6aa092a0b2e9141385fb4734797</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_CLOSING</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>acdbb7986967662f90bca9b6ef46f3acaacdbad950a89de6fc964c3257d45e07a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_TIME_WAIT</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>acdbb7986967662f90bca9b6ef46f3acaa8a4fa6fa69c727999ad6b8fe056a6fd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TCPEventCode</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_IGNORE</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32acd405552b4f4c9973d5d5b7e8aae88f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_OPEN_ACTIVE</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a6179df5a4a1f3314be52f5789f5f0bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_OPEN_PASSIVE</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a11dd6ccbd9b9bbb145b64fb99981b530</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_SEND</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32af5e9f1961ac4c76e49f568d8fd304063</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_CLOSE</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a2c5c582787e0b87a4a913e34c4d20d1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_ABORT</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a1fd07d5de8615b02fe30cc7159af37af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_STATUS</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32adea9b33ab4047345817fb7d8066a8ae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_DATA</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a1e5b9fcdbbaae24327c007914ad57a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_ACK</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a823e4834ff13aaff8408c38ac1b0f350</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_SYN</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a6769520e2e41d511462d3608d18326ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_SYN_ACK</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a3239eea5ba6edf6850289914cfac51c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_FIN</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a59323c4bb3247640d61362e7f6ba824e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_FIN_ACK</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a2f4afa3cc8122b708143ae335b542179</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_RST</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a050c79add513afca8554e29b61fd5389</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_UNEXP_SYN</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a55dbf4b3147f64f1baeac365b019dea6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_TIMEOUT_2MSL</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a358c0a11572a1131e318543e4b64764a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_TIMEOUT_CONN_ESTAB</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a6ba25d81f0bcad8dbc3f1f59ce2f08ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_TIMEOUT_FIN_WAIT_2</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>abfa4f59944c07369d42e86a72040dd32a3d31d30a7eca2a0655da0b2c16df9500</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seqLess</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>a17c7a0744a549bb90de7d1bc6b8b72ad</anchor>
      <arglist>(uint32 a, uint32 b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seqLE</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>a2a4d76c437a6e0eb1e1440c02153e5db</anchor>
      <arglist>(uint32 a, uint32 b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seqGreater</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>a91800c1929091c104e787a01f5955a9f</anchor>
      <arglist>(uint32 a, uint32 b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seqGE</name>
      <anchorfile>namespacetcp__old.html</anchorfile>
      <anchor>a0012c6f2a0631480574729efd85a05c9</anchor>
      <arglist>(uint32 a, uint32 b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tcp_old::DumbTCPStateVariables</name>
    <filename>classtcp__old_1_1_dumb_t_c_p_state_variables.html</filename>
    <base>tcp_old::TCPStateVariables</base>
  </compound>
  <compound kind="class">
    <name>tcp_old::DumbTCP</name>
    <filename>classtcp__old_1_1_dumb_t_c_p.html</filename>
    <base>tcp_old::TCPAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>DumbTCP</name>
      <anchorfile>classtcp__old_1_1_dumb_t_c_p.html</anchorfile>
      <anchor>a2b94545d038f9a7e087d2cf10584034d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DumbTCP</name>
      <anchorfile>classtcp__old_1_1_dumb_t_c_p.html</anchorfile>
      <anchor>a67f17b145d9d945a12ff0dafc0c9af4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classtcp__old_1_1_dumb_t_c_p.html</anchorfile>
      <anchor>a126269446a79304596cfa2f9c6ce05f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>established</name>
      <anchorfile>classtcp__old_1_1_dumb_t_c_p.html</anchorfile>
      <anchor>ac6623697e6ea2a1484c7ebaa71d6d9da</anchor>
      <arglist>(bool active)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectionClosed</name>
      <anchorfile>classtcp__old_1_1_dumb_t_c_p.html</anchorfile>
      <anchor>a3e2bed832b7e4e2e258290b947eea526</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processTimer</name>
      <anchorfile>classtcp__old_1_1_dumb_t_c_p.html</anchorfile>
      <anchor>a657167c651630243eec9f6885ce7050b</anchor>
      <arglist>(cMessage *timer, TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendCommandInvoked</name>
      <anchorfile>classtcp__old_1_1_dumb_t_c_p.html</anchorfile>
      <anchor>acac9e70114fe2db39931c4c130a81ef2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedOutOfOrderSegment</name>
      <anchorfile>classtcp__old_1_1_dumb_t_c_p.html</anchorfile>
      <anchor>ae4e6d375ffed529764578686e011726a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSeqChanged</name>
      <anchorfile>classtcp__old_1_1_dumb_t_c_p.html</anchorfile>
      <anchor>a2f6cdf0df70da4714fb31c9c0b88d375</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDataAck</name>
      <anchorfile>classtcp__old_1_1_dumb_t_c_p.html</anchorfile>
      <anchor>a22dfeeb20cbf6f934bc60dba62d42c10</anchor>
      <arglist>(uint32 firstSeqAcked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDuplicateAck</name>
      <anchorfile>classtcp__old_1_1_dumb_t_c_p.html</anchorfile>
      <anchor>a7a6de582e410e39328f6eca68bd08ffc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedAckForDataNotYetSent</name>
      <anchorfile>classtcp__old_1_1_dumb_t_c_p.html</anchorfile>
      <anchor>ae41e06b4a200bc5e3f9292cc0bbd20b4</anchor>
      <arglist>(uint32 seq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ackSent</name>
      <anchorfile>classtcp__old_1_1_dumb_t_c_p.html</anchorfile>
      <anchor>a836f67d0b7562942abaf42d4b3d8c1be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dataSent</name>
      <anchorfile>classtcp__old_1_1_dumb_t_c_p.html</anchorfile>
      <anchor>a312e0203fada40e843fc3635ff4b1cdf</anchor>
      <arglist>(uint32 fromseq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>restartRexmitTimer</name>
      <anchorfile>classtcp__old_1_1_dumb_t_c_p.html</anchorfile>
      <anchor>ab80d79feb0ae9b17d5d80a4be78afbb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPStateVariables *</type>
      <name>createStateVariables</name>
      <anchorfile>classtcp__old_1_1_dumb_t_c_p.html</anchorfile>
      <anchor>a94810e8f1c8193af500416249dae899c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DumbTCPStateVariables *&amp;</type>
      <name>state</name>
      <anchorfile>classtcp__old_1_1_dumb_t_c_p.html</anchorfile>
      <anchor>a849d1e5ecae1bfd9e3f1a31d0a00d05f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>rexmitTimer</name>
      <anchorfile>classtcp__old_1_1_dumb_t_c_p.html</anchorfile>
      <anchor>a5ebbc89b8f848849c4eb81480b4d9a07</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tcp_old::TCPBaseAlgStateVariables</name>
    <filename>classtcp__old_1_1_t_c_p_base_alg_state_variables.html</filename>
    <base>tcp_old::TCPStateVariables</base>
    <member kind="function">
      <type></type>
      <name>TCPBaseAlgStateVariables</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg_state_variables.html</anchorfile>
      <anchor>a43fd2149e9ec289775544fc45d564bf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg_state_variables.html</anchorfile>
      <anchor>a24c5be81ae8c22877d69716f534c3556</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg_state_variables.html</anchorfile>
      <anchor>a685f7ef8f9a5a8674c50525dd4ca7d88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>delayed_acks_enabled</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg_state_variables.html</anchorfile>
      <anchor>a9a5229fbb94355dcf7d673ab31983118</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>nagle_enabled</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg_state_variables.html</anchorfile>
      <anchor>a8a81be3ea66dee6840abd1d2b14b9a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>rexmit_count</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg_state_variables.html</anchorfile>
      <anchor>a4710adb820ba2dffd59605d049a95e7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>rexmit_timeout</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg_state_variables.html</anchorfile>
      <anchor>ab1716091624f9fba5483a27096ddd0d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint</type>
      <name>snd_cwnd</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg_state_variables.html</anchorfile>
      <anchor>a73738d466d937caa81eba0a8678c580d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>rtseq</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg_state_variables.html</anchorfile>
      <anchor>acad28c9a018a6bbaeb822003ce53c0d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>rtseq_sendtime</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg_state_variables.html</anchorfile>
      <anchor>a3db36f802e1ef66fa4f0a4217e65e8d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>srtt</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg_state_variables.html</anchorfile>
      <anchor>a04e4b9733b78ee32e9ea4101cb2ee71f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>rttvar</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg_state_variables.html</anchorfile>
      <anchor>a4aeb5e6bcffd548fd3f21dbb29e520a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tcp_old::TCPBaseAlg</name>
    <filename>classtcp__old_1_1_t_c_p_base_alg.html</filename>
    <base>tcp_old::TCPAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>TCPBaseAlg</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>a2f8265b680a8cee124f685b19919ab03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPBaseAlg</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>a5929dfe85238f1ceccd0f5dd578d4b18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>ae6147731689fcc4c5c79f4cc539c6b7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>established</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>a2cbb83fb79f28eaea3d33acb13526e11</anchor>
      <arglist>(bool active)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectionClosed</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>acf011bd6523207a40e179f1f9f4f448d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processTimer</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>a9008afe23db553e45b37d9811f7af110</anchor>
      <arglist>(cMessage *timer, TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendCommandInvoked</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>adeb5f45e211987af985c94992dc3350f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedOutOfOrderSegment</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>aa49a6c59e453685907e24dc671e3561d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSeqChanged</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>a772c3712679d50b0598957665b14acc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDataAck</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>a55a32a0e93c6417adb091ee162f225e2</anchor>
      <arglist>(uint32 firstSeqAcked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDuplicateAck</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>ad198abc5a259c9b1660ec149aae3b11d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedAckForDataNotYetSent</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>a8d57787d474f4a317bffa76c8f13ef3a</anchor>
      <arglist>(uint32 seq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ackSent</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>ae40c0a08732c067048a9183945153ec1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dataSent</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>a8bbd5e8c6d8b139da0cbc44a3274c9fa</anchor>
      <arglist>(uint32 fromseq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>restartRexmitTimer</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>aa781a26258eb0504bfff79468079e1b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>startRexmitTimer</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>a5fc842a3f9c5297e9ba795843bf0cabb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>rttMeasurementComplete</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>a31986bf6db565ab455f818eafb01320e</anchor>
      <arglist>(simtime_t tSent, simtime_t tAcked)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>sendData</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>a28c072f575629d0c5ec6478edd3bb7e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cMessage *</type>
      <name>cancelEvent</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>aaef53f3ba0bc5012369c58446da0aed1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processRexmitTimer</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>ac8a305a437d4eafd1689204e50af8870</anchor>
      <arglist>(TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPersistTimer</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>a69a0d60fa083b9a3b03e8f80d3c53e6f</anchor>
      <arglist>(TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processDelayedAckTimer</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>ad5f7c065fdf27a650a7c711cf8e31766</anchor>
      <arglist>(TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processKeepAliveTimer</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>a586dd4192388dc907ab36ae4aec4c3d5</anchor>
      <arglist>(TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPBaseAlgStateVariables *&amp;</type>
      <name>state</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>aad952f4bbd257033bc40c1a13542d99e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>rexmitTimer</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>a31e7c26c1483bbdcfb24de643fab5624</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>persistTimer</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>ac91743dd54e430683d3dca8ec6656424</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>delayedAckTimer</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>acf8933cb6f7769f94955dcbe28ae9713</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>keepAliveTimer</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>a28d58e8845917e0248e81af8ab188132</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>cwndVector</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>a44ed6e1611f4f4ad3ade255022a7b748</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>ssthreshVector</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>a805dc5d5cca7ecc801b5bb2497a5e141</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>rttVector</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>a69be7c7a51275657b27c8dcbc84c4250</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>srttVector</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>aa4ff44520c0013f3b7c5a5e1d2932c85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>rttvarVector</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>aeaa609766fa911a28875a26e1cf81dbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>rtoVector</name>
      <anchorfile>classtcp__old_1_1_t_c_p_base_alg.html</anchorfile>
      <anchor>abb761bc8c6217f12c62452863e015c57</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tcp_old::TCPNoCongestionControl</name>
    <filename>classtcp__old_1_1_t_c_p_no_congestion_control.html</filename>
    <base>tcp_old::TCPBaseAlg</base>
    <member kind="function">
      <type></type>
      <name>TCPNoCongestionControl</name>
      <anchorfile>classtcp__old_1_1_t_c_p_no_congestion_control.html</anchorfile>
      <anchor>ae1edd6501c4fe6165c30914e020392ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classtcp__old_1_1_t_c_p_no_congestion_control.html</anchorfile>
      <anchor>a3d875b56a5442cb63a6b37da45efdc9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDataAck</name>
      <anchorfile>classtcp__old_1_1_t_c_p_no_congestion_control.html</anchorfile>
      <anchor>a9e68b13f66146c853c5032476138a123</anchor>
      <arglist>(uint32 firstSeqAcked)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPStateVariables *</type>
      <name>createStateVariables</name>
      <anchorfile>classtcp__old_1_1_t_c_p_no_congestion_control.html</anchorfile>
      <anchor>a16242f2127326e744be2b1c9bdb92822</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processRexmitTimer</name>
      <anchorfile>classtcp__old_1_1_t_c_p_no_congestion_control.html</anchorfile>
      <anchor>acce4963470b581797181af3f924a6433</anchor>
      <arglist>(TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPNoCongestionControlStateVariables *&amp;</type>
      <name>state</name>
      <anchorfile>classtcp__old_1_1_t_c_p_no_congestion_control.html</anchorfile>
      <anchor>a6386a5d973daebac222cc4ee8b5c0929</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tcp_old::TCPReno</name>
    <filename>classtcp__old_1_1_t_c_p_reno.html</filename>
    <base>tcp_old::TCPTahoeRenoFamily</base>
    <member kind="function">
      <type></type>
      <name>TCPReno</name>
      <anchorfile>classtcp__old_1_1_t_c_p_reno.html</anchorfile>
      <anchor>a82c2e1fd14a50b861ba508076935ce83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDataAck</name>
      <anchorfile>classtcp__old_1_1_t_c_p_reno.html</anchorfile>
      <anchor>a346296d9fcd3056d1add56d2f03dd391</anchor>
      <arglist>(uint32 firstSeqAcked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDuplicateAck</name>
      <anchorfile>classtcp__old_1_1_t_c_p_reno.html</anchorfile>
      <anchor>adcf0d263e1c1551648ff9b52dff8326f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPStateVariables *</type>
      <name>createStateVariables</name>
      <anchorfile>classtcp__old_1_1_t_c_p_reno.html</anchorfile>
      <anchor>ac24feb7ff24de36fdab5459335de337a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>recalculateSlowStartThreshold</name>
      <anchorfile>classtcp__old_1_1_t_c_p_reno.html</anchorfile>
      <anchor>a400250f807397650fa3c83c0c46dfd0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processRexmitTimer</name>
      <anchorfile>classtcp__old_1_1_t_c_p_reno.html</anchorfile>
      <anchor>a8200e1aeef42d932ef24f447beaf25f5</anchor>
      <arglist>(TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPRenoStateVariables *&amp;</type>
      <name>state</name>
      <anchorfile>classtcp__old_1_1_t_c_p_reno.html</anchorfile>
      <anchor>a8ae2cdc0c2e232cb974aeb58353daf51</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tcp_old::TCPTahoe</name>
    <filename>classtcp__old_1_1_t_c_p_tahoe.html</filename>
    <base>tcp_old::TCPTahoeRenoFamily</base>
    <member kind="function">
      <type></type>
      <name>TCPTahoe</name>
      <anchorfile>classtcp__old_1_1_t_c_p_tahoe.html</anchorfile>
      <anchor>a5a64fe0d3a6fbc4d3023ddbd44fb57c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDataAck</name>
      <anchorfile>classtcp__old_1_1_t_c_p_tahoe.html</anchorfile>
      <anchor>ab0f1ac1b45b76e45ad5b0ff24faaac80</anchor>
      <arglist>(uint32 firstSeqAcked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDuplicateAck</name>
      <anchorfile>classtcp__old_1_1_t_c_p_tahoe.html</anchorfile>
      <anchor>a5c9cd2ff02da7ddc8c1578b0e6a81236</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPStateVariables *</type>
      <name>createStateVariables</name>
      <anchorfile>classtcp__old_1_1_t_c_p_tahoe.html</anchorfile>
      <anchor>a26f5bafceae30076d0a59c7ecc5cf299</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>recalculateSlowStartThreshold</name>
      <anchorfile>classtcp__old_1_1_t_c_p_tahoe.html</anchorfile>
      <anchor>a2bcfd7100334e5ee3df7a4df4eefae28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processRexmitTimer</name>
      <anchorfile>classtcp__old_1_1_t_c_p_tahoe.html</anchorfile>
      <anchor>a7e4ea81dbdbfd0eb8321ccf653a6eb00</anchor>
      <arglist>(TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPTahoeStateVariables *&amp;</type>
      <name>state</name>
      <anchorfile>classtcp__old_1_1_t_c_p_tahoe.html</anchorfile>
      <anchor>addad4384e3562edb3a1c17732252228d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tcp_old::TCPTahoeRenoFamilyStateVariables</name>
    <filename>classtcp__old_1_1_t_c_p_tahoe_reno_family_state_variables.html</filename>
    <base>tcp_old::TCPBaseAlgStateVariables</base>
    <member kind="function">
      <type></type>
      <name>TCPTahoeRenoFamilyStateVariables</name>
      <anchorfile>classtcp__old_1_1_t_c_p_tahoe_reno_family_state_variables.html</anchorfile>
      <anchor>a5c3d4be10188f57cbb06415409e264e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classtcp__old_1_1_t_c_p_tahoe_reno_family_state_variables.html</anchorfile>
      <anchor>ad886fd2ce18e4e40dda4edc3131db02f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classtcp__old_1_1_t_c_p_tahoe_reno_family_state_variables.html</anchorfile>
      <anchor>aa431d0a0ce49d33e7a968675261fc491</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>uint</type>
      <name>ssthresh</name>
      <anchorfile>classtcp__old_1_1_t_c_p_tahoe_reno_family_state_variables.html</anchorfile>
      <anchor>a216df642474d36c0a621914897a2a722</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tcp_old::TCPTahoeRenoFamily</name>
    <filename>classtcp__old_1_1_t_c_p_tahoe_reno_family.html</filename>
    <base>tcp_old::TCPBaseAlg</base>
    <member kind="function">
      <type></type>
      <name>TCPTahoeRenoFamily</name>
      <anchorfile>classtcp__old_1_1_t_c_p_tahoe_reno_family.html</anchorfile>
      <anchor>a6f9f3227fcc7e429f8b206e93f6e908c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPTahoeRenoFamilyStateVariables *&amp;</type>
      <name>state</name>
      <anchorfile>classtcp__old_1_1_t_c_p_tahoe_reno_family.html</anchorfile>
      <anchor>a01f42d662885d363dd6aaca980bacf23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tcp_old::TCPMsgBasedRcvQueue</name>
    <filename>classtcp__old_1_1_t_c_p_msg_based_rcv_queue.html</filename>
    <base>tcp_old::TCPVirtualDataRcvQueue</base>
    <member kind="function">
      <type></type>
      <name>TCPMsgBasedRcvQueue</name>
      <anchorfile>classtcp__old_1_1_t_c_p_msg_based_rcv_queue.html</anchorfile>
      <anchor>af8f832c859e596c26c7c8bcde24a27e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPMsgBasedRcvQueue</name>
      <anchorfile>classtcp__old_1_1_t_c_p_msg_based_rcv_queue.html</anchorfile>
      <anchor>a5735e78db98e0ba40b4a792b34296582</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classtcp__old_1_1_t_c_p_msg_based_rcv_queue.html</anchorfile>
      <anchor>ae289924ebc9c7b9b4aecb283e0e86925</anchor>
      <arglist>(uint32 startSeq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classtcp__old_1_1_t_c_p_msg_based_rcv_queue.html</anchorfile>
      <anchor>a325fc25951ede88ad561bb540f18269c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>insertBytesFromSegment</name>
      <anchorfile>classtcp__old_1_1_t_c_p_msg_based_rcv_queue.html</anchorfile>
      <anchor>a1ef3021020a378ff3b1e7ec037600307</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>extractBytesUpTo</name>
      <anchorfile>classtcp__old_1_1_t_c_p_msg_based_rcv_queue.html</anchorfile>
      <anchor>ad7704a4fa5bb2a9faf728da118dc1ac9</anchor>
      <arglist>(uint32 seq)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; uint32, cPacket * &gt;</type>
      <name>PayloadList</name>
      <anchorfile>classtcp__old_1_1_t_c_p_msg_based_rcv_queue.html</anchorfile>
      <anchor>af3488220f879ccbe92019079d71a1234</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PayloadList</type>
      <name>payloadList</name>
      <anchorfile>classtcp__old_1_1_t_c_p_msg_based_rcv_queue.html</anchorfile>
      <anchor>ab96cf04ba52c8cddb737e69783373293</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tcp_old::TCPMsgBasedSendQueue</name>
    <filename>classtcp__old_1_1_t_c_p_msg_based_send_queue.html</filename>
    <base>tcp_old::TCPSendQueue</base>
    <class kind="struct">tcp_old::TCPMsgBasedSendQueue::Payload</class>
    <member kind="function">
      <type></type>
      <name>TCPMsgBasedSendQueue</name>
      <anchorfile>classtcp__old_1_1_t_c_p_msg_based_send_queue.html</anchorfile>
      <anchor>a825708443c5793af0f03091d3b9de5b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPMsgBasedSendQueue</name>
      <anchorfile>classtcp__old_1_1_t_c_p_msg_based_send_queue.html</anchorfile>
      <anchor>a0f90f019fd72a38d899571fde3df69ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classtcp__old_1_1_t_c_p_msg_based_send_queue.html</anchorfile>
      <anchor>a52bd8710e88e7237f55e25b0279c0875</anchor>
      <arglist>(uint32 startSeq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classtcp__old_1_1_t_c_p_msg_based_send_queue.html</anchorfile>
      <anchor>ace39e614dd94548a8325cfc72341cae2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enqueueAppData</name>
      <anchorfile>classtcp__old_1_1_t_c_p_msg_based_send_queue.html</anchorfile>
      <anchor>ac926a3c84df79870d64b8e41f662b2cb</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getBufferEndSeq</name>
      <anchorfile>classtcp__old_1_1_t_c_p_msg_based_send_queue.html</anchorfile>
      <anchor>a9eb3ff42a452940baa9eff18ce1b45fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TCPSegment *</type>
      <name>createSegmentWithBytes</name>
      <anchorfile>classtcp__old_1_1_t_c_p_msg_based_send_queue.html</anchorfile>
      <anchor>a7a567c8b65da65321342021a83246aa1</anchor>
      <arglist>(uint32 fromSeq, ulong numBytes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>discardUpTo</name>
      <anchorfile>classtcp__old_1_1_t_c_p_msg_based_send_queue.html</anchorfile>
      <anchor>a8adba4316eb73e75f956062a60774ce5</anchor>
      <arglist>(uint32 seqNum)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; Payload &gt;</type>
      <name>PayloadQueue</name>
      <anchorfile>classtcp__old_1_1_t_c_p_msg_based_send_queue.html</anchorfile>
      <anchor>abc021a3a0b6816f63ebcdbed6512b3b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PayloadQueue</type>
      <name>payloadQueue</name>
      <anchorfile>classtcp__old_1_1_t_c_p_msg_based_send_queue.html</anchorfile>
      <anchor>a01d8b463d5576ece6f755b3cfd76f4d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>begin</name>
      <anchorfile>classtcp__old_1_1_t_c_p_msg_based_send_queue.html</anchorfile>
      <anchor>a749cee7cbcd716219664543acdb48f7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>end</name>
      <anchorfile>classtcp__old_1_1_t_c_p_msg_based_send_queue.html</anchorfile>
      <anchor>ab63b01ec4f334edd8ddd0627e72368a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tcp_old::TCPMsgBasedSendQueue::Payload</name>
    <filename>structtcp__old_1_1_t_c_p_msg_based_send_queue_1_1_payload.html</filename>
    <member kind="variable">
      <type>unsigned int</type>
      <name>endSequenceNo</name>
      <anchorfile>structtcp__old_1_1_t_c_p_msg_based_send_queue_1_1_payload.html</anchorfile>
      <anchor>abc038b15018fc9b41dc187884a40fa32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cPacket *</type>
      <name>msg</name>
      <anchorfile>structtcp__old_1_1_t_c_p_msg_based_send_queue_1_1_payload.html</anchorfile>
      <anchor>a0ee3c74ea2b5415e4fc2ad1be57441a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tcp_old::TCPVirtualDataRcvQueue</name>
    <filename>classtcp__old_1_1_t_c_p_virtual_data_rcv_queue.html</filename>
    <base>tcp_old::TCPReceiveQueue</base>
    <class kind="struct">tcp_old::TCPVirtualDataRcvQueue::Region</class>
    <member kind="function">
      <type></type>
      <name>TCPVirtualDataRcvQueue</name>
      <anchorfile>classtcp__old_1_1_t_c_p_virtual_data_rcv_queue.html</anchorfile>
      <anchor>a6ff50b1360d80254f69aaf59c7489922</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPVirtualDataRcvQueue</name>
      <anchorfile>classtcp__old_1_1_t_c_p_virtual_data_rcv_queue.html</anchorfile>
      <anchor>aeda3bd955956c803010cc642ddf7b60b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classtcp__old_1_1_t_c_p_virtual_data_rcv_queue.html</anchorfile>
      <anchor>adeeeae16fa0cb45c5ae87e6174d793fc</anchor>
      <arglist>(uint32 startSeq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classtcp__old_1_1_t_c_p_virtual_data_rcv_queue.html</anchorfile>
      <anchor>ac6e69a676e9389cbc140d1a65b4c9af6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>insertBytesFromSegment</name>
      <anchorfile>classtcp__old_1_1_t_c_p_virtual_data_rcv_queue.html</anchorfile>
      <anchor>a83b598c81e2dfc8d72f7584408b99802</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>extractBytesUpTo</name>
      <anchorfile>classtcp__old_1_1_t_c_p_virtual_data_rcv_queue.html</anchorfile>
      <anchor>af1cafaf5415f693ec82f7f3747ea2311</anchor>
      <arglist>(uint32 seq)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; Region &gt;</type>
      <name>RegionList</name>
      <anchorfile>classtcp__old_1_1_t_c_p_virtual_data_rcv_queue.html</anchorfile>
      <anchor>a1f0613c258867681a7cc1477fcb3867a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>merge</name>
      <anchorfile>classtcp__old_1_1_t_c_p_virtual_data_rcv_queue.html</anchorfile>
      <anchor>a710b6b567c02c1e3e0535ec919330c7c</anchor>
      <arglist>(uint32 segmentBegin, uint32 segmentEnd)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ulong</type>
      <name>extractTo</name>
      <anchorfile>classtcp__old_1_1_t_c_p_virtual_data_rcv_queue.html</anchorfile>
      <anchor>adefc2b346dd80461a5f49d3aab62a7a7</anchor>
      <arglist>(uint32 toSeq)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>rcv_nxt</name>
      <anchorfile>classtcp__old_1_1_t_c_p_virtual_data_rcv_queue.html</anchorfile>
      <anchor>aadf26e114c295f9884e037bd8d5df067</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RegionList</type>
      <name>regionList</name>
      <anchorfile>classtcp__old_1_1_t_c_p_virtual_data_rcv_queue.html</anchorfile>
      <anchor>afc6a87ea66c05705e49ba1554b99220f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tcp_old::TCPVirtualDataRcvQueue::Region</name>
    <filename>structtcp__old_1_1_t_c_p_virtual_data_rcv_queue_1_1_region.html</filename>
    <member kind="variable">
      <type>uint32</type>
      <name>begin</name>
      <anchorfile>structtcp__old_1_1_t_c_p_virtual_data_rcv_queue_1_1_region.html</anchorfile>
      <anchor>a0ba8bff67a2be641f8192d73d52fd8dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>end</name>
      <anchorfile>structtcp__old_1_1_t_c_p_virtual_data_rcv_queue_1_1_region.html</anchorfile>
      <anchor>a78fc60f47e4946db372a99d8764530b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tcp_old::TCPVirtualDataSendQueue</name>
    <filename>classtcp__old_1_1_t_c_p_virtual_data_send_queue.html</filename>
    <base>tcp_old::TCPSendQueue</base>
    <member kind="function">
      <type></type>
      <name>TCPVirtualDataSendQueue</name>
      <anchorfile>classtcp__old_1_1_t_c_p_virtual_data_send_queue.html</anchorfile>
      <anchor>ae5ba6d515c3c5d608f78d5d548067fee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPVirtualDataSendQueue</name>
      <anchorfile>classtcp__old_1_1_t_c_p_virtual_data_send_queue.html</anchorfile>
      <anchor>af36c4b859ece8bb50635f6ed943feb04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classtcp__old_1_1_t_c_p_virtual_data_send_queue.html</anchorfile>
      <anchor>ad229fe158e328cca309ad2507bf9b48f</anchor>
      <arglist>(uint32 startSeq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classtcp__old_1_1_t_c_p_virtual_data_send_queue.html</anchorfile>
      <anchor>af777c28d258deccf11b9eea6c41ac8cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enqueueAppData</name>
      <anchorfile>classtcp__old_1_1_t_c_p_virtual_data_send_queue.html</anchorfile>
      <anchor>adac98ffafc58eca16437a21f7808eaba</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>getBufferEndSeq</name>
      <anchorfile>classtcp__old_1_1_t_c_p_virtual_data_send_queue.html</anchorfile>
      <anchor>a8daa84dfe5e311b35a9e01960c58b93c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TCPSegment *</type>
      <name>createSegmentWithBytes</name>
      <anchorfile>classtcp__old_1_1_t_c_p_virtual_data_send_queue.html</anchorfile>
      <anchor>aedff3a104851f83cd9d64fcd0d93d146</anchor>
      <arglist>(uint32 fromSeq, ulong numBytes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>discardUpTo</name>
      <anchorfile>classtcp__old_1_1_t_c_p_virtual_data_send_queue.html</anchorfile>
      <anchor>a087c3dd3d4c24e9d19b1514b5fddfcfe</anchor>
      <arglist>(uint32 seqNum)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>begin</name>
      <anchorfile>classtcp__old_1_1_t_c_p_virtual_data_send_queue.html</anchorfile>
      <anchor>addee7d4ff3a5d9a2c35797ef5d92128a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>end</name>
      <anchorfile>classtcp__old_1_1_t_c_p_virtual_data_send_queue.html</anchorfile>
      <anchor>abe63d60e6c03acdc4ccc3c3269beb2e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tcp_old::TCP</name>
    <filename>classtcp__old_1_1_t_c_p.html</filename>
    <class kind="struct">tcp_old::TCP::AppConnKey</class>
    <class kind="struct">tcp_old::TCP::SockPair</class>
    <member kind="function">
      <type></type>
      <name>TCP</name>
      <anchorfile>classtcp__old_1_1_t_c_p.html</anchorfile>
      <anchor>a32ece84eb33bd218f3c0fc3c49288984</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCP</name>
      <anchorfile>classtcp__old_1_1_t_c_p.html</anchorfile>
      <anchor>aa60dfec4c3dfdc84a0a64322eed4ee5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSockPair</name>
      <anchorfile>classtcp__old_1_1_t_c_p.html</anchorfile>
      <anchor>a0521bf14a4f31786b1869f417d56eecb</anchor>
      <arglist>(TCPConnection *conn, IPvXAddress localAddr, IPvXAddress remoteAddr, int localPort, int remotePort)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateSockPair</name>
      <anchorfile>classtcp__old_1_1_t_c_p.html</anchorfile>
      <anchor>a89cade3eb3a3f44ffae57c08dedd9285</anchor>
      <arglist>(TCPConnection *conn, IPvXAddress localAddr, IPvXAddress remoteAddr, int localPort, int remotePort)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addForkedConnection</name>
      <anchorfile>classtcp__old_1_1_t_c_p.html</anchorfile>
      <anchor>abec1cedad1e72a349f7bd804501584fa</anchor>
      <arglist>(TCPConnection *conn, TCPConnection *newConn, IPvXAddress localAddr, IPvXAddress remoteAddr, int localPort, int remotePort)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getEphemeralPort</name>
      <anchorfile>classtcp__old_1_1_t_c_p.html</anchorfile>
      <anchor>a78909d5d3786f662c8a5e38c11573e5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>recordStatistics</name>
      <anchorfile>classtcp__old_1_1_t_c_p.html</anchorfile>
      <anchor>a80ef210c6b5459c5f9d66b1e63224ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>testing</name>
      <anchorfile>classtcp__old_1_1_t_c_p.html</anchorfile>
      <anchor>a9c9119dffa5972905c0b4e79dd5bbfab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>logverbose</name>
      <anchorfile>classtcp__old_1_1_t_c_p.html</anchorfile>
      <anchor>ae864ce487e9184ca283f421970883a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; AppConnKey, TCPConnection * &gt;</type>
      <name>TcpAppConnMap</name>
      <anchorfile>classtcp__old_1_1_t_c_p.html</anchorfile>
      <anchor>a480a6e4a68f23787e517c805dd78aa27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; SockPair, TCPConnection * &gt;</type>
      <name>TcpConnMap</name>
      <anchorfile>classtcp__old_1_1_t_c_p.html</anchorfile>
      <anchor>a46dcaa5ed5383168d4fc270c5fadb743</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPConnection *</type>
      <name>createConnection</name>
      <anchorfile>classtcp__old_1_1_t_c_p.html</anchorfile>
      <anchor>adc9133b7052856727e7baf7d4b9c4cf1</anchor>
      <arglist>(int appGateIndex, int connId)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPConnection *</type>
      <name>findConnForSegment</name>
      <anchorfile>classtcp__old_1_1_t_c_p.html</anchorfile>
      <anchor>ae3af1feecfbffc8893ce259fa1fda7be</anchor>
      <arglist>(TCPSegment *tcpseg, IPvXAddress srcAddr, IPvXAddress destAddr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPConnection *</type>
      <name>findConnForApp</name>
      <anchorfile>classtcp__old_1_1_t_c_p.html</anchorfile>
      <anchor>a18a12d6d42b2dfae01ac2678afc880dd</anchor>
      <arglist>(int appGateIndex, int connId)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>segmentArrivalWhileClosed</name>
      <anchorfile>classtcp__old_1_1_t_c_p.html</anchorfile>
      <anchor>a0878a06694b0e8e84f4a5cb07555258e</anchor>
      <arglist>(TCPSegment *tcpseg, IPvXAddress src, IPvXAddress dest)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeConnection</name>
      <anchorfile>classtcp__old_1_1_t_c_p.html</anchorfile>
      <anchor>a43b1ce87aa8f1f864fef4fef8c48892d</anchor>
      <arglist>(TCPConnection *conn)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDisplayString</name>
      <anchorfile>classtcp__old_1_1_t_c_p.html</anchorfile>
      <anchor>a59fbdacae2969f837f01214e00002699</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classtcp__old_1_1_t_c_p.html</anchorfile>
      <anchor>a2fd4ec69c4627440fd92a77394c7b105</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classtcp__old_1_1_t_c_p.html</anchorfile>
      <anchor>ae3a05ea5147737dd2889b8afc2647f69</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classtcp__old_1_1_t_c_p.html</anchorfile>
      <anchor>a138ccb4a8fb3dd397160d7e4abc52294</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TcpAppConnMap</type>
      <name>tcpAppConnMap</name>
      <anchorfile>classtcp__old_1_1_t_c_p.html</anchorfile>
      <anchor>ae39011c0ffc1db1b9e3f0f5733c92a8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TcpConnMap</type>
      <name>tcpConnMap</name>
      <anchorfile>classtcp__old_1_1_t_c_p.html</anchorfile>
      <anchor>a94052a391617ca88bbdfd2916c11f2ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>lastEphemeralPort</name>
      <anchorfile>classtcp__old_1_1_t_c_p.html</anchorfile>
      <anchor>a85d6679fe3bf005a8c21999461172724</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::multiset&lt; short &gt;</type>
      <name>usedEphemeralPorts</name>
      <anchorfile>classtcp__old_1_1_t_c_p.html</anchorfile>
      <anchor>a451cf5fa0d78e96131548e8cc9f66ae4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tcp_old::TCP::AppConnKey</name>
    <filename>structtcp__old_1_1_t_c_p_1_1_app_conn_key.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structtcp__old_1_1_t_c_p_1_1_app_conn_key.html</anchorfile>
      <anchor>a18e38337ccd12ad12748f8537bafd85f</anchor>
      <arglist>(const AppConnKey &amp;b) const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>appGateIndex</name>
      <anchorfile>structtcp__old_1_1_t_c_p_1_1_app_conn_key.html</anchorfile>
      <anchor>a11fe7b54e9ed9fbc95884ad4ff585a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>connId</name>
      <anchorfile>structtcp__old_1_1_t_c_p_1_1_app_conn_key.html</anchorfile>
      <anchor>a0ed9d07d4735f946e079026ccb09b28d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tcp_old::TCP::SockPair</name>
    <filename>structtcp__old_1_1_t_c_p_1_1_sock_pair.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structtcp__old_1_1_t_c_p_1_1_sock_pair.html</anchorfile>
      <anchor>a18d3b8393c85f1142ce2699c07cd6607</anchor>
      <arglist>(const SockPair &amp;b) const </arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>localAddr</name>
      <anchorfile>structtcp__old_1_1_t_c_p_1_1_sock_pair.html</anchorfile>
      <anchor>aecc56d7bda60c160c75500b3262ccad9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>remoteAddr</name>
      <anchorfile>structtcp__old_1_1_t_c_p_1_1_sock_pair.html</anchorfile>
      <anchor>a485f9e5e03955c18d5937c6dafad1b4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>localPort</name>
      <anchorfile>structtcp__old_1_1_t_c_p_1_1_sock_pair.html</anchorfile>
      <anchor>a958e36469c1f51fd5f61781a46e5428a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>remotePort</name>
      <anchorfile>structtcp__old_1_1_t_c_p_1_1_sock_pair.html</anchorfile>
      <anchor>af6c8a13bf160f36c0cd722dbf113c442</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tcp_old::TCPAlgorithm</name>
    <filename>classtcp__old_1_1_t_c_p_algorithm.html</filename>
    <member kind="function">
      <type></type>
      <name>TCPAlgorithm</name>
      <anchorfile>classtcp__old_1_1_t_c_p_algorithm.html</anchorfile>
      <anchor>af6c9b1afafa3ecfc59c2ce08fdb766f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPAlgorithm</name>
      <anchorfile>classtcp__old_1_1_t_c_p_algorithm.html</anchorfile>
      <anchor>acf41f982a4299329e6b3f40c9b88eabb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConnection</name>
      <anchorfile>classtcp__old_1_1_t_c_p_algorithm.html</anchorfile>
      <anchor>a2b019306b6e6a3984bd2c81b2713c3f4</anchor>
      <arglist>(TCPConnection *_conn)</arglist>
    </member>
    <member kind="function">
      <type>TCPStateVariables *</type>
      <name>getStateVariables</name>
      <anchorfile>classtcp__old_1_1_t_c_p_algorithm.html</anchorfile>
      <anchor>aa1d2b17e15a2c8f339174cf5fd70fc0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classtcp__old_1_1_t_c_p_algorithm.html</anchorfile>
      <anchor>adbd27ed1bccde3db4924db7393ef60ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>established</name>
      <anchorfile>classtcp__old_1_1_t_c_p_algorithm.html</anchorfile>
      <anchor>a6bbeaec803a6c9e148ba36c838c267a5</anchor>
      <arglist>(bool active)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connectionClosed</name>
      <anchorfile>classtcp__old_1_1_t_c_p_algorithm.html</anchorfile>
      <anchor>a3f274c87ed54d3828b9d7908d45aeb70</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>processTimer</name>
      <anchorfile>classtcp__old_1_1_t_c_p_algorithm.html</anchorfile>
      <anchor>a1139760efe38d49068564ab562e5c1f0</anchor>
      <arglist>(cMessage *timer, TCPEventCode &amp;event)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sendCommandInvoked</name>
      <anchorfile>classtcp__old_1_1_t_c_p_algorithm.html</anchorfile>
      <anchor>ae85b3610dd8b6f93018265812e9eaa74</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receivedOutOfOrderSegment</name>
      <anchorfile>classtcp__old_1_1_t_c_p_algorithm.html</anchorfile>
      <anchor>a7ea3a177d38f6a05e84637233ae3b63d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveSeqChanged</name>
      <anchorfile>classtcp__old_1_1_t_c_p_algorithm.html</anchorfile>
      <anchor>a3c59a57936e92218369a8702956df1c7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receivedDataAck</name>
      <anchorfile>classtcp__old_1_1_t_c_p_algorithm.html</anchorfile>
      <anchor>aca06733ab569ab16f026d31a3bfe5077</anchor>
      <arglist>(uint32 firstSeqAcked)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receivedDuplicateAck</name>
      <anchorfile>classtcp__old_1_1_t_c_p_algorithm.html</anchorfile>
      <anchor>a7ea85ca6cca058d942c83cb76eb3109a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receivedAckForDataNotYetSent</name>
      <anchorfile>classtcp__old_1_1_t_c_p_algorithm.html</anchorfile>
      <anchor>a9f6805c97af24ed1cfe2b94adf983a64</anchor>
      <arglist>(uint32 seq)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ackSent</name>
      <anchorfile>classtcp__old_1_1_t_c_p_algorithm.html</anchorfile>
      <anchor>a522fdc8f478a358787e1a21a543532e2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dataSent</name>
      <anchorfile>classtcp__old_1_1_t_c_p_algorithm.html</anchorfile>
      <anchor>a2a8e9ea9d181d94d837c4ca41d38627b</anchor>
      <arglist>(uint32 fromseq)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>restartRexmitTimer</name>
      <anchorfile>classtcp__old_1_1_t_c_p_algorithm.html</anchorfile>
      <anchor>aceb0701fa06010324266e6a8192cce9f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual TCPStateVariables *</type>
      <name>createStateVariables</name>
      <anchorfile>classtcp__old_1_1_t_c_p_algorithm.html</anchorfile>
      <anchor>ae8fdb9d455dc62709aa52ef616fb9ad9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPConnection *</type>
      <name>conn</name>
      <anchorfile>classtcp__old_1_1_t_c_p_algorithm.html</anchorfile>
      <anchor>ace3ece95815d68c2b518716106edac93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPStateVariables *</type>
      <name>state</name>
      <anchorfile>classtcp__old_1_1_t_c_p_algorithm.html</anchorfile>
      <anchor>aa7a304b9e7b34e5dccefc57b3160146c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tcp_old::TCPStateVariables</name>
    <filename>classtcp__old_1_1_t_c_p_state_variables.html</filename>
    <member kind="function">
      <type></type>
      <name>TCPStateVariables</name>
      <anchorfile>classtcp__old_1_1_t_c_p_state_variables.html</anchorfile>
      <anchor>af21b92495e152e5ab984476457fdc75c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classtcp__old_1_1_t_c_p_state_variables.html</anchorfile>
      <anchor>a93fbf3558fe0e1dfa27bdbab25c36aff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classtcp__old_1_1_t_c_p_state_variables.html</anchorfile>
      <anchor>a28c2c961663d8cf69e19b64cb129b40e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>active</name>
      <anchorfile>classtcp__old_1_1_t_c_p_state_variables.html</anchorfile>
      <anchor>afba4a9f34c546c37533eb5311c1da682</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>fork</name>
      <anchorfile>classtcp__old_1_1_t_c_p_state_variables.html</anchorfile>
      <anchor>a4f418e2320cca13bdf3a673ae74989ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint</type>
      <name>snd_mss</name>
      <anchorfile>classtcp__old_1_1_t_c_p_state_variables.html</anchorfile>
      <anchor>aa63003ec3568a869469e95d848e836b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>snd_una</name>
      <anchorfile>classtcp__old_1_1_t_c_p_state_variables.html</anchorfile>
      <anchor>ace4a453b30bdffb99c1c0646fba597dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>snd_nxt</name>
      <anchorfile>classtcp__old_1_1_t_c_p_state_variables.html</anchorfile>
      <anchor>acab59efee35f446ab6310db804cd164d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>snd_max</name>
      <anchorfile>classtcp__old_1_1_t_c_p_state_variables.html</anchorfile>
      <anchor>a7589e90fe54f9579ab547d55760b4d17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint</type>
      <name>snd_wnd</name>
      <anchorfile>classtcp__old_1_1_t_c_p_state_variables.html</anchorfile>
      <anchor>a98ce75b56709cdf80549bf95b9b02023</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>snd_up</name>
      <anchorfile>classtcp__old_1_1_t_c_p_state_variables.html</anchorfile>
      <anchor>a21d3e1fb8154ba3b4fc42e7f5dcbb784</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>snd_wl1</name>
      <anchorfile>classtcp__old_1_1_t_c_p_state_variables.html</anchorfile>
      <anchor>a4ddf055ba61bab9723814bfb1f55cfe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>snd_wl2</name>
      <anchorfile>classtcp__old_1_1_t_c_p_state_variables.html</anchorfile>
      <anchor>aae32069f7798da55852c7244d816b9a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>iss</name>
      <anchorfile>classtcp__old_1_1_t_c_p_state_variables.html</anchorfile>
      <anchor>a74b7f93c1777b2428f37a7b8d2d8a5a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>rcv_nxt</name>
      <anchorfile>classtcp__old_1_1_t_c_p_state_variables.html</anchorfile>
      <anchor>a18b8a2c7e52c332378bd9f70b1d91b29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>rcv_wnd</name>
      <anchorfile>classtcp__old_1_1_t_c_p_state_variables.html</anchorfile>
      <anchor>ab26a1e5c5f13a245ef7578dc87e81cfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>rcv_up</name>
      <anchorfile>classtcp__old_1_1_t_c_p_state_variables.html</anchorfile>
      <anchor>a9ac465cf0b2699f5b5ec86d7b2811b33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>irs</name>
      <anchorfile>classtcp__old_1_1_t_c_p_state_variables.html</anchorfile>
      <anchor>af9fc103c0361bcaffc4c894627abfc2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>dupacks</name>
      <anchorfile>classtcp__old_1_1_t_c_p_state_variables.html</anchorfile>
      <anchor>a74cb98612a9fa541a2682e33f3991582</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>syn_rexmit_count</name>
      <anchorfile>classtcp__old_1_1_t_c_p_state_variables.html</anchorfile>
      <anchor>add0426103a74138a0599e58049526e8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>syn_rexmit_timeout</name>
      <anchorfile>classtcp__old_1_1_t_c_p_state_variables.html</anchorfile>
      <anchor>a9aec9c42959150643d39bde968908d39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>fin_ack_rcvd</name>
      <anchorfile>classtcp__old_1_1_t_c_p_state_variables.html</anchorfile>
      <anchor>ad2deb1000d47f2e1524f1f5dee059b34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>send_fin</name>
      <anchorfile>classtcp__old_1_1_t_c_p_state_variables.html</anchorfile>
      <anchor>a2a8d544b5707071afcc5402e6318e245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>snd_fin_seq</name>
      <anchorfile>classtcp__old_1_1_t_c_p_state_variables.html</anchorfile>
      <anchor>a1156c4cdd71d0e83c9bb401a68e9f606</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>fin_rcvd</name>
      <anchorfile>classtcp__old_1_1_t_c_p_state_variables.html</anchorfile>
      <anchor>a595ba253f26cb674ecd990bfd6d929c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>rcv_fin_seq</name>
      <anchorfile>classtcp__old_1_1_t_c_p_state_variables.html</anchorfile>
      <anchor>a4e7a46f4ab93fc16930f38b65cc5ff07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>afterRto</name>
      <anchorfile>classtcp__old_1_1_t_c_p_state_variables.html</anchorfile>
      <anchor>a3a3438ec884f8d063558f87d793c1fee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tcp_old::TCPConnection</name>
    <filename>classtcp__old_1_1_t_c_p_connection.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendAck</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a60ee5bc5b391d621e7e684857e195151</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>sendData</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>ab2cbccc16b2f006369a83c51426e4bc5</anchor>
      <arglist>(bool fullSegmentsOnly, int congestionWindow=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>sendProbe</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>ab07a8b0ce79c80e9baf75c3e82f56937</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>retransmitOneSegment</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a15eda66a013f23ebc129adcea81a68b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>retransmitData</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>ab2c57b0ff79eb111ca6840b8d7003b04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendRst</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>afa03f88fc4589249aefe6f828eed9dd6</anchor>
      <arglist>(uint32 seqNo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendRst</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a3dc25263bb2f0b1013ee398c1587b128</anchor>
      <arglist>(uint32 seq, IPvXAddress src, IPvXAddress dest, int srcPort, int destPort)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendRstAck</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>ade3c9c38be0aa758b4eb448d5c1169b9</anchor>
      <arglist>(uint32 seq, uint32 ack, IPvXAddress src, IPvXAddress dest, int srcPort, int destPort)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendFin</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a70acf513d8461c73bfd06037036b1682</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendSegment</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a18287c92b45d6d43b8f858420115120c</anchor>
      <arglist>(int bytes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToIP</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a86143cf35f957006c5fe17c506be21c7</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TCPSegment *</type>
      <name>createTCPSegment</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a462206e0bc50ae521a47a797552a0057</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startSynRexmitTimer</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>aa58f44bc38ec0af46aca654f9403771f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>signalConnectionTimeout</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a264eb196b44591ed68422a9e70dab680</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scheduleTimeout</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>ae1ff44c73d20293a446adc091842bedd</anchor>
      <arglist>(cMessage *msg, simtime_t timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printConnBrief</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a8aaec47dd8098dbaa015f2e3e7b16442</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCPConnection</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>aab510bb961623a41ade36bfbda9f86b6</anchor>
      <arglist>(TCP *mod, int appGateIndex, int connId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCPConnection</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a11a3cccb118b0b66bee1a07929510e4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPConnection</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a0b79ac9c31e99766954c9cca733a362d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>segmentArrivalWhileClosed</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a82f6b7680530f0f784e9d8efa78fa5a5</anchor>
      <arglist>(TCPSegment *tcpseg, IPvXAddress src, IPvXAddress dest)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>processTimer</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a6f9e1e7a0cabaf710f2d37a19eea0caf</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>processTCPSegment</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a7f5f8ddb99114615c77fe0ccf16424e7</anchor>
      <arglist>(TCPSegment *tcpSeg, IPvXAddress srcAddr, IPvXAddress destAddr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>processAppCommand</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>aebf3e44d104151c83a84a1efbae3f312</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFsmState</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a55abadf8c9f66428b7f6db8fa90d1af3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TCPStateVariables *</type>
      <name>getState</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a1704500b72eb201d9119192ebb9b4923</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPSendQueue *</type>
      <name>getSendQueue</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a15a684dc0613b455e92c0ae57a00f177</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPReceiveQueue *</type>
      <name>getReceiveQueue</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>ab9c0058b4df0583d36fd462e71c3120d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPAlgorithm *</type>
      <name>getTcpAlgorithm</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a11c0933a5657daacb6cbc27de282187f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCP *</type>
      <name>getTcpMain</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a5ba299a7999e64fe67e8fef5f62c2402</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>printSegmentBrief</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a188549e7c936c8cad622c180d3200c69</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>stateName</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>ab991cf2680a63832310a4a56ac17972e</anchor>
      <arglist>(int state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>eventName</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>af199cd53f71f27341684145c3bdab306</anchor>
      <arglist>(int event)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>indicationName</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>adeef1c0b8f04a744168a107f68c397ba</anchor>
      <arglist>(int code)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>appGateIndex</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>ad04d1e9fb23f48cd53dcd7c411caea80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>connId</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>ae6ce2bfc0b9aa9d110db13efe08b7a0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>localAddr</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>adc50d816f66c74441b608b01ed4800c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>remoteAddr</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>ad54931b7375eb7b6e51ca9862cb0a714</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>localPort</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a3af4312fbe2cd46bb1be1daf65715258</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>remotePort</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>aece396520a4675f35694895f37b35f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPConnection *</type>
      <name>cloneListeningConnection</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a1d5624dcbc77e79d142f6a886b3e788d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initConnection</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a69caa8ea0ffbe8d9f73f935aac1b29d9</anchor>
      <arglist>(TCPOpenCommand *openCmd)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>configureStateVariables</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a8ddd3d422b9d6e00ad15cf99f9870ef4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>selectInitialSeqNum</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a585bbcdd70565eb01b6bfe17a1487c78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSegmentAcceptable</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>acceb561b23349d06b298858e39433435</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendSyn</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>abcd8f7efecc7c0077050184d3384b493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendSynAck</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a675b131a43de7429552a574cabcc12dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cMessage *</type>
      <name>cancelEvent</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>ad06a2b75a619021592db07ab486f0fed</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToApp</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a6aa48826843116a0f5c4e0fa37a69cfc</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendIndicationToApp</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a65a8dc93c08a685f145248d0fb327428</anchor>
      <arglist>(int code)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendEstabIndicationToApp</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>ab04a91abde05d21293c30a78ab968eef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPEventCode</type>
      <name>preanalyseAppCommandEvent</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a792d9159b4e64b344cac79d0716c907a</anchor>
      <arglist>(int commandCode)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>performStateTransition</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>aa1fe5fa359d4063c984d686e4166b798</anchor>
      <arglist>(const TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>stateEntered</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a1be68d20f98e68b01ef9267a8dd2088a</anchor>
      <arglist>(int state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process_OPEN_ACTIVE</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a6ef625498d593ac11744aa92a404e06d</anchor>
      <arglist>(TCPEventCode &amp;event, TCPCommand *tcpCommand, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process_OPEN_PASSIVE</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a26e4a86dfbc1efaf02e99ea14d410ae3</anchor>
      <arglist>(TCPEventCode &amp;event, TCPCommand *tcpCommand, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process_SEND</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a65fa8d6570761c63cdab5cef7f5df685</anchor>
      <arglist>(TCPEventCode &amp;event, TCPCommand *tcpCommand, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process_CLOSE</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a5aa9b20651a4c1f90772a7c02eacbf05</anchor>
      <arglist>(TCPEventCode &amp;event, TCPCommand *tcpCommand, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process_ABORT</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>afb2189f1428627dcde1d1b0bfbc50833</anchor>
      <arglist>(TCPEventCode &amp;event, TCPCommand *tcpCommand, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process_STATUS</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a519a2b6612737fbdbd5641dfa33833e8</anchor>
      <arglist>(TCPEventCode &amp;event, TCPCommand *tcpCommand, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>tryFastRoute</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a9b7d3f811eab0367d3826dfb20c8d931</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPEventCode</type>
      <name>process_RCV_SEGMENT</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a46ac1b09624942471db2eb76ef991143</anchor>
      <arglist>(TCPSegment *tcpseg, IPvXAddress src, IPvXAddress dest)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPEventCode</type>
      <name>processSegmentInListen</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a4d034577df86997140d627feeda66a1f</anchor>
      <arglist>(TCPSegment *tcpseg, IPvXAddress src, IPvXAddress dest)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPEventCode</type>
      <name>processSegmentInSynSent</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a12b903f9e148f5c26f926dcdc8107c86</anchor>
      <arglist>(TCPSegment *tcpseg, IPvXAddress src, IPvXAddress dest)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPEventCode</type>
      <name>processSegment1stThru8th</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>aa0758284e5bd6bd162b6ff267add2e2d</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPEventCode</type>
      <name>processRstInSynReceived</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a4d240ca8f36aa37a29b8bcc44ec052cd</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>processAckInEstabEtc</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>ac1144f5ca6e960176d6e623998cb7456</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process_TIMEOUT_2MSL</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>ae29072ef963e593c4c3053827ebbec6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process_TIMEOUT_CONN_ESTAB</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a7b47d21fa8a97f13cab52097f3332ea6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process_TIMEOUT_FIN_WAIT_2</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a53d62d237307ad56bae8d320ff557e48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process_TIMEOUT_SYN_REXMIT</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a33c6fe420de8b7fc6c09761f70118ed0</anchor>
      <arglist>(TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>sendToIP</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a8763146770969da7d0a1196efe23615c</anchor>
      <arglist>(TCPSegment *tcpseg, IPvXAddress src, IPvXAddress dest)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCP *</type>
      <name>tcpMain</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a6f9eb8f2af118d2f1fcd90df3c87249e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cFSM</type>
      <name>fsm</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a3b7998c1cae436f8d35cabdb073d3881</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPStateVariables *</type>
      <name>state</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>ae549dc567d3d71f2981c3be27cee0ccb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPSendQueue *</type>
      <name>sendQueue</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a7bd9b6b2b4422771b92e00d307983d19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPReceiveQueue *</type>
      <name>receiveQueue</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a2602ec64d45270793076abe5938d16ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPAlgorithm *</type>
      <name>tcpAlgorithm</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a2212cb0deb11d2b1c5826cab57b3f42e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>the2MSLTimer</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a67c3fa718ee0542b4bd93eda8785c0fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>connEstabTimer</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a757386355261e95064b75f2dfec3788e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>finWait2Timer</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a2a3d3f1792941e08c490795d1d2a4bc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>synRexmitTimer</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>ad70c187b499189b370f99433eb825dcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>sndWndVector</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>ab58ab42e2f19a58edcfa549b51a7179b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>sndNxtVector</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a946bf6fc849e9554b489e5fff58be513</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>sndAckVector</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>afe2cc9a34e2074f95626e4085236d561</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>rcvSeqVector</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>acb4230bb789e0bf3e413479e26316d60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>rcvAckVector</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a7b6c1fcdd10a035c035dea350420286d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>unackedVector</name>
      <anchorfile>classtcp__old_1_1_t_c_p_connection.html</anchorfile>
      <anchor>a529775c184153f33ff75a91bacc8b0fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tcp_old::TCPReceiveQueue</name>
    <filename>classtcp__old_1_1_t_c_p_receive_queue.html</filename>
    <member kind="function">
      <type></type>
      <name>TCPReceiveQueue</name>
      <anchorfile>classtcp__old_1_1_t_c_p_receive_queue.html</anchorfile>
      <anchor>a8188610f6133f5c25f3236be91716282</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPReceiveQueue</name>
      <anchorfile>classtcp__old_1_1_t_c_p_receive_queue.html</anchorfile>
      <anchor>a8aa3e55b90c135ccea1fa4a32f5a3600</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConnection</name>
      <anchorfile>classtcp__old_1_1_t_c_p_receive_queue.html</anchorfile>
      <anchor>ad9e22f581f6cc50d43611b5bc723638c</anchor>
      <arglist>(TCPConnection *_conn)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classtcp__old_1_1_t_c_p_receive_queue.html</anchorfile>
      <anchor>aeec7fc4688fecfdd84653b748ff1c21e</anchor>
      <arglist>(uint32 startSeq)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint32</type>
      <name>insertBytesFromSegment</name>
      <anchorfile>classtcp__old_1_1_t_c_p_receive_queue.html</anchorfile>
      <anchor>a28492372a4252f374ba62fbdcce7a566</anchor>
      <arglist>(TCPSegment *tcpseg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cPacket *</type>
      <name>extractBytesUpTo</name>
      <anchorfile>classtcp__old_1_1_t_c_p_receive_queue.html</anchorfile>
      <anchor>a8d5fa8d22c976a8be92512e11b350f9f</anchor>
      <arglist>(uint32 seq)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPConnection *</type>
      <name>conn</name>
      <anchorfile>classtcp__old_1_1_t_c_p_receive_queue.html</anchorfile>
      <anchor>a0cadcfc98ff3ea5afa52969afc24855a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tcp_old::TCPSendQueue</name>
    <filename>classtcp__old_1_1_t_c_p_send_queue.html</filename>
    <member kind="function">
      <type></type>
      <name>TCPSendQueue</name>
      <anchorfile>classtcp__old_1_1_t_c_p_send_queue.html</anchorfile>
      <anchor>a984bb3ffca5eee87b389ae950a51a61a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPSendQueue</name>
      <anchorfile>classtcp__old_1_1_t_c_p_send_queue.html</anchorfile>
      <anchor>ad3ddbd172cf7e9d29da3d2a85eec64ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConnection</name>
      <anchorfile>classtcp__old_1_1_t_c_p_send_queue.html</anchorfile>
      <anchor>a6580be23b72c3b6afd33532555cc165a</anchor>
      <arglist>(TCPConnection *_conn)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classtcp__old_1_1_t_c_p_send_queue.html</anchorfile>
      <anchor>ace918ba2cb215baffc2c3136e35a0d16</anchor>
      <arglist>(uint32 startSeq)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enqueueAppData</name>
      <anchorfile>classtcp__old_1_1_t_c_p_send_queue.html</anchorfile>
      <anchor>a8f1b685a3f9020032805d119adb3089a</anchor>
      <arglist>(cPacket *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint32</type>
      <name>getBufferEndSeq</name>
      <anchorfile>classtcp__old_1_1_t_c_p_send_queue.html</anchorfile>
      <anchor>addf53d15d095b683486ca61554dccae3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>ulong</type>
      <name>getBytesAvailable</name>
      <anchorfile>classtcp__old_1_1_t_c_p_send_queue.html</anchorfile>
      <anchor>acf03e0bbf6565ae7df7afa656d97ca18</anchor>
      <arglist>(uint32 fromSeq)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TCPSegment *</type>
      <name>createSegmentWithBytes</name>
      <anchorfile>classtcp__old_1_1_t_c_p_send_queue.html</anchorfile>
      <anchor>aa2bd6a59bbf6f5adf7ce1d73e374d7fa</anchor>
      <arglist>(uint32 fromSeq, ulong maxNumBytes)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>discardUpTo</name>
      <anchorfile>classtcp__old_1_1_t_c_p_send_queue.html</anchorfile>
      <anchor>aced2fde7fde0ec8f6a32b1e16d6bbda9</anchor>
      <arglist>(uint32 seqNum)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPConnection *</type>
      <name>conn</name>
      <anchorfile>classtcp__old_1_1_t_c_p_send_queue.html</anchorfile>
      <anchor>a95ebf87f03012a368714d2477da32cc1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="dir">
    <name>src/applications/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/</path>
    <filename>dir_d4967169ec7e731d10b0c7ba84f2d7bc.html</filename>
    <dir>src/applications/ethernet/</dir>
    <dir>src/applications/generic/</dir>
    <dir>src/applications/pingapp/</dir>
    <dir>src/applications/rtpapp/</dir>
    <dir>src/applications/sctpapp/</dir>
    <dir>src/applications/tcpapp/</dir>
    <dir>src/applications/udpapp/</dir>
  </compound>
  <compound kind="dir">
    <name>src/networklayer/arp/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/arp/</path>
    <filename>dir_b6aa6a60291a3d15d3c7ed33e1d2dca9.html</filename>
    <file>ARP.cc</file>
    <file>ARP.h</file>
    <file>ARPPacket_m.h</file>
  </compound>
  <compound kind="dir">
    <name>src/networklayer/autorouting/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/autorouting/</path>
    <filename>dir_5b8b5dd86837b191db0f32359bd24b5e.html</filename>
    <file>FlatNetworkConfigurator.cc</file>
    <file>FlatNetworkConfigurator.h</file>
    <file>FlatNetworkConfigurator6.cc</file>
    <file>FlatNetworkConfigurator6.h</file>
    <file>NetworkConfigurator.cc</file>
    <file>NetworkConfigurator.h</file>
  </compound>
  <compound kind="dir">
    <name>src/transport/rtp/profiles/avprofile/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/profiles/avprofile/</path>
    <filename>dir_6ee8648b5b910bdec2065d2159eb5d98.html</filename>
    <file>RTPAVProfile.cc</file>
    <file>RTPAVProfile.h</file>
    <file>RTPAVProfilePayload32Receiver.cc</file>
    <file>RTPAVProfilePayload32Receiver.h</file>
    <file>RTPAVProfilePayload32Sender.cc</file>
    <file>RTPAVProfilePayload32Sender.h</file>
    <file>RTPMpegPacket_m.h</file>
  </compound>
  <compound kind="dir">
    <name>src/base/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/base/</path>
    <filename>dir_9f84b81fb6f77f54d10ce3be84a6c230.html</filename>
    <file>AbstractQueue.cc</file>
    <file>AbstractQueue.h</file>
    <file>BasicModule.cc</file>
    <file>BasicModule.h</file>
    <file>Blackboard.cc</file>
    <file>Blackboard.h</file>
    <file>ByteArrayMessage.cc</file>
    <file>ByteArrayMessage.h</file>
    <file>ByteArrayMessage_m.h</file>
    <file>Coord.h</file>
    <file>EnqueueHook.h</file>
    <file>FSMA.h</file>
    <file>INETDefs.h</file>
    <file>INotifiable.h</file>
    <file>IPassiveQueue.h</file>
    <file>IScriptable.h</file>
    <file>Join.cc</file>
    <file>ModuleAccess.cc</file>
    <file>ModuleAccess.h</file>
    <file>NotificationBoard.cc</file>
    <file>NotificationBoard.h</file>
    <file>NotifierConsts.cc</file>
    <file>NotifierConsts.h</file>
    <file>PassiveQueueBase.cc</file>
    <file>PassiveQueueBase.h</file>
    <file>ProtocolMap.cc</file>
    <file>ProtocolMap.h</file>
    <file>QueueBase.cc</file>
    <file>QueueBase.h</file>
    <file>QueueWithQoS.cc</file>
    <file>QueueWithQoS.h</file>
    <file>ReassemblyBuffer.cc</file>
    <file>ReassemblyBuffer.h</file>
    <file>Sink.cc</file>
    <file>Sink.h</file>
  </compound>
  <compound kind="dir">
    <name>src/networklayer/common/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/common/</path>
    <filename>dir_8c83cdfd276078436c3fc2943467a5ef.html</filename>
    <file>IInterfaceTable.h</file>
    <file>InterfaceEntry.cc</file>
    <file>InterfaceEntry.h</file>
    <file>InterfaceTable.cc</file>
    <file>InterfaceTable.h</file>
    <file>InterfaceTableAccess.h</file>
    <file>InterfaceToken.h</file>
  </compound>
  <compound kind="dir">
    <name>src/transport/contract/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/contract/</path>
    <filename>dir_bdf562644f4b8f6b6efc4d8dd6de82e7.html</filename>
    <file>SCTPCommand.h</file>
    <file>SCTPCommand_m.h</file>
    <file>SCTPSocket.cc</file>
    <file>SCTPSocket.h</file>
    <file>TCPCommand_m.h</file>
    <file>TCPSocket.cc</file>
    <file>TCPSocket.h</file>
    <file>TCPSocketMap.cc</file>
    <file>TCPSocketMap.h</file>
    <file>UDPControlInfo_m.h</file>
    <file>UDPSocket.cc</file>
    <file>UDPSocket.h</file>
  </compound>
  <compound kind="dir">
    <name>src/networklayer/contract/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/contract/</path>
    <filename>dir_365246cce4bc1f08cc4aa712f2356dff.html</filename>
    <file>IPAddress.cc</file>
    <file>IPAddress.h</file>
    <file>IPAddressResolver.cc</file>
    <file>IPAddressResolver.h</file>
    <file>IPControlInfo.cc</file>
    <file>IPControlInfo.h</file>
    <file>IPControlInfo_m.h</file>
    <file>IPProtocolId_m.h</file>
    <file>IPv6Address.cc</file>
    <file>IPv6Address.h</file>
    <file>IPv6ControlInfo.cc</file>
    <file>IPv6ControlInfo.h</file>
    <file>IPv6ControlInfo_m.h</file>
    <file>IPvXAddress.cc</file>
    <file>IPvXAddress.h</file>
  </compound>
  <compound kind="dir">
    <name>src/linklayer/contract/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/contract/</path>
    <filename>dir_1418a17d65ea6cba7c6a7eba4bfd31e4.html</filename>
    <file>Ieee802Ctrl_m.h</file>
    <file>MACAddress.cc</file>
    <file>MACAddress.h</file>
    <file>PhyControlInfo_m.h</file>
    <file>RadioState.h</file>
    <file>TxNotifDetails.h</file>
  </compound>
  <compound kind="dir">
    <name>src/linklayer/mf80211/phyLayer/decider/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mf80211/phyLayer/decider/</path>
    <filename>dir_1eda5dea688b944b0e3edd0db7b1d7fa.html</filename>
    <file>Decider80211.cc</file>
    <file>Decider80211.h</file>
    <file>ErrAndCollDecider.cc</file>
    <file>ErrAndCollDecider.h</file>
    <file>SnrDecider.cc</file>
    <file>SnrDecider.h</file>
  </compound>
  <compound kind="dir">
    <name>src/linklayer/ethernet/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ethernet/</path>
    <filename>dir_c733baf8c334314a68529aad4637aad1.html</filename>
    <file>EtherBus.cc</file>
    <file>EtherBus.h</file>
    <file>EtherEncap.cc</file>
    <file>EtherEncap.h</file>
    <file>EtherFrame_m.h</file>
    <file>EtherHub.cc</file>
    <file>EtherHub.h</file>
    <file>EtherLLC.cc</file>
    <file>EtherLLC.h</file>
    <file>EtherMAC.cc</file>
    <file>EtherMAC.h</file>
    <file>EtherMAC2.cc</file>
    <file>EtherMAC2.h</file>
    <file>EtherMACBase.cc</file>
    <file>EtherMACBase.h</file>
    <file>Ethernet.h</file>
  </compound>
  <compound kind="dir">
    <name>src/applications/ethernet/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/ethernet/</path>
    <filename>dir_3277521621dff1d1e5055c4ed783d911.html</filename>
    <file>EtherApp_m.h</file>
    <file>EtherAppCli.cc</file>
    <file>EtherAppCli.h</file>
    <file>EtherAppSrv.cc</file>
    <file>EtherAppSrv.h</file>
  </compound>
  <compound kind="dir">
    <name>src/linklayer/etherswitch/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/etherswitch/</path>
    <filename>dir_52acef4fd286ef0c2ba455b63b0859c3.html</filename>
    <file>MACRelayUnitBase.cc</file>
    <file>MACRelayUnitBase.h</file>
    <file>MACRelayUnitNP.cc</file>
    <file>MACRelayUnitNP.h</file>
    <file>MACRelayUnitPP.cc</file>
    <file>MACRelayUnitPP.h</file>
  </compound>
  <compound kind="dir">
    <name>examples/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/examples/</path>
    <filename>dir_0427963de8f13527fbff46819e21c1ef.html</filename>
    <dir>examples/rtp/</dir>
  </compound>
  <compound kind="dir">
    <name>src/linklayer/ext/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ext/</path>
    <filename>dir_a1a33a50ce4f70f0a7f569fdf76f074b.html</filename>
    <file>cSocketRTScheduler.cc</file>
    <file>cSocketRTScheduler.h</file>
    <file>ExtFrame_m.h</file>
    <file>ExtInterface.cc</file>
    <file>ExtInterface.h</file>
  </compound>
  <compound kind="dir">
    <name>src/networklayer/extras/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/extras/</path>
    <filename>dir_3cc7b6b6ccfbc7c154dadab892619d75.html</filename>
    <file>Dummy.cc</file>
    <file>FailureManager.cc</file>
    <file>FailureManager.h</file>
    <file>NetworkInfo.cc</file>
    <file>NetworkInfo.h</file>
  </compound>
  <compound kind="dir">
    <name>src/transport/tcp_old/flavours/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/flavours/</path>
    <filename>dir_fac8cdd24fb949647ff7f942c802d6b8.html</filename>
    <file>old/flavours/DumbTCP.cc</file>
    <file>DumbTCP_old.h</file>
    <file>old/flavours/TCPBaseAlg.cc</file>
    <file>TCPBaseAlg_old.h</file>
    <file>old/flavours/TCPNoCongestionControl.cc</file>
    <file>TCPNoCongestionControl_old.h</file>
    <file>old/flavours/TCPReno.cc</file>
    <file>TCPReno_old.h</file>
    <file>old/flavours/TCPTahoe.cc</file>
    <file>TCPTahoe_old.h</file>
    <file>old/flavours/TCPTahoeRenoFamily.cc</file>
    <file>TCPTahoeRenoFamily_old.h</file>
  </compound>
  <compound kind="dir">
    <name>src/transport/tcp/flavours/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/flavours/</path>
    <filename>dir_8399ee4f4e1ed0772dea5c219031c3c8.html</filename>
    <file>flavours/DumbTCP.cc</file>
    <file>DumbTCP.h</file>
    <file>flavours/TCPBaseAlg.cc</file>
    <file>TCPBaseAlg.h</file>
    <file>TCPNewReno.cc</file>
    <file>TCPNewReno.h</file>
    <file>flavours/TCPNoCongestionControl.cc</file>
    <file>TCPNoCongestionControl.h</file>
    <file>flavours/TCPReno.cc</file>
    <file>TCPReno.h</file>
    <file>flavours/TCPTahoe.cc</file>
    <file>TCPTahoe.h</file>
    <file>flavours/TCPTahoeRenoFamily.cc</file>
    <file>TCPTahoeRenoFamily.h</file>
  </compound>
  <compound kind="dir">
    <name>src/applications/generic/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/generic/</path>
    <filename>dir_22df0699c9e938bd75214c7a1b7bf35b.html</filename>
    <file>IPTrafGen.cc</file>
    <file>IPTrafGen.h</file>
  </compound>
  <compound kind="dir">
    <name>src/util/headerserializers/headers/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/headerserializers/headers/</path>
    <filename>dir_b38737cbe47a886fccfe3d09af2a3a60.html</filename>
    <file>bsdint.h</file>
    <file>defs.h</file>
    <file>ethernet.h</file>
    <file>in.h</file>
    <file>in_systm.h</file>
    <file>ip.h</file>
    <file>ip_icmp.h</file>
    <file>sctp.h</file>
    <file>tcp.h</file>
    <file>udp.h</file>
  </compound>
  <compound kind="dir">
    <name>src/util/headerserializers/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/headerserializers/</path>
    <filename>dir_a76da0457022aaae9a599ef816f66f88.html</filename>
    <dir>src/util/headerserializers/headers/</dir>
    <file>ICMPSerializer.cc</file>
    <file>ICMPSerializer.h</file>
    <file>IPSerializer.cc</file>
    <file>IPSerializer.h</file>
    <file>SCTPSerializer.cc</file>
    <file>SCTPSerializer.h</file>
    <file>TCPIPchecksum.cc</file>
    <file>TCPIPchecksum.h</file>
    <file>TCPSerializer.cc</file>
    <file>TCPSerializer.h</file>
    <file>UDPSerializer.cc</file>
    <file>UDPSerializer.h</file>
  </compound>
  <compound kind="dir">
    <name>src/networklayer/icmpv6/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/icmpv6/</path>
    <filename>dir_34539289066c093336ad4859481fa656.html</filename>
    <file>ICMPv6.cc</file>
    <file>ICMPv6.h</file>
    <file>ICMPv6Access.h</file>
    <file>ICMPv6Message_m.h</file>
    <file>IPv6NDMessage_m.h</file>
    <file>IPv6NeighbourCache.cc</file>
    <file>IPv6NeighbourCache.h</file>
    <file>IPv6NeighbourDiscovery.cc</file>
    <file>IPv6NeighbourDiscovery.h</file>
    <file>IPv6NeighbourDiscoveryAccess.h</file>
  </compound>
  <compound kind="dir">
    <name>src/linklayer/ieee80211/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ieee80211/</path>
    <filename>dir_7e2f509a3645bd8d00600cc377a7c9a0.html</filename>
    <dir>src/linklayer/ieee80211/mac/</dir>
    <dir>src/linklayer/ieee80211/mgmt/</dir>
  </compound>
  <compound kind="dir">
    <name>src/networklayer/ospfv2/interface/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/interface/</path>
    <filename>dir_2d7975455ea41775b3b3c7b8a4b868c2.html</filename>
    <file>OSPFInterface.cc</file>
    <file>OSPFInterface.h</file>
    <file>OSPFInterfaceState.cc</file>
    <file>OSPFInterfaceState.h</file>
    <file>OSPFInterfaceStateBackup.cc</file>
    <file>OSPFInterfaceStateBackup.h</file>
    <file>OSPFInterfaceStateDesignatedRouter.cc</file>
    <file>OSPFInterfaceStateDesignatedRouter.h</file>
    <file>OSPFInterfaceStateDown.cc</file>
    <file>OSPFInterfaceStateDown.h</file>
    <file>OSPFInterfaceStateLoopback.cc</file>
    <file>OSPFInterfaceStateLoopback.h</file>
    <file>OSPFInterfaceStateNotDesignatedRouter.cc</file>
    <file>OSPFInterfaceStateNotDesignatedRouter.h</file>
    <file>OSPFInterfaceStatePointToPoint.cc</file>
    <file>OSPFInterfaceStatePointToPoint.h</file>
    <file>OSPFInterfaceStateWaiting.cc</file>
    <file>OSPFInterfaceStateWaiting.h</file>
  </compound>
  <compound kind="dir">
    <name>src/networklayer/ipv4/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv4/</path>
    <filename>dir_9195fcba8746733a950d7a711a1d8465.html</filename>
    <file>ControlManetRouting_m.h</file>
    <file>ErrorHandling.cc</file>
    <file>ErrorHandling.h</file>
    <file>ICMP.cc</file>
    <file>ICMP.h</file>
    <file>ICMPAccess.h</file>
    <file>ICMPMessage.h</file>
    <file>ICMPMessage_m.h</file>
    <file>IP.cc</file>
    <file>IP.h</file>
    <file>IPDatagram.h</file>
    <file>IPDatagram_m.h</file>
    <file>IPFragBuf.cc</file>
    <file>IPFragBuf.h</file>
    <file>IPRoute.cc</file>
    <file>IPRoute.h</file>
    <file>IPv4InterfaceData.cc</file>
    <file>IPv4InterfaceData.h</file>
    <file>IRoutingTable.h</file>
    <file>RoutingTable.cc</file>
    <file>RoutingTable.h</file>
    <file>RoutingTableAccess.h</file>
    <file>RoutingTableParser.cc</file>
    <file>RoutingTableParser.h</file>
  </compound>
  <compound kind="dir">
    <name>src/networklayer/ipv6/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ipv6/</path>
    <filename>dir_6bcc79f88a693591d91b8c14524fbc2e.html</filename>
    <file>IPv6.cc</file>
    <file>IPv6.h</file>
    <file>IPv6Datagram.cc</file>
    <file>IPv6Datagram.h</file>
    <file>IPv6Datagram_m.h</file>
    <file>IPv6ErrorHandling.cc</file>
    <file>IPv6ErrorHandling.h</file>
    <file>IPv6ExtensionHeaders_m.h</file>
    <file>IPv6FragBuf.cc</file>
    <file>IPv6FragBuf.h</file>
    <file>IPv6InterfaceData.cc</file>
    <file>IPv6InterfaceData.h</file>
    <file>RoutingTable6.cc</file>
    <file>RoutingTable6.h</file>
    <file>RoutingTable6Access.h</file>
  </compound>
  <compound kind="dir">
    <name>src/networklayer/ldp/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ldp/</path>
    <filename>dir_ebccddb51127b1c2d68a45c59180f3a8.html</filename>
    <file>LDP.cc</file>
    <file>LDP.h</file>
    <file>LDPPacket_m.h</file>
  </compound>
  <compound kind="dir">
    <name>src/linklayer/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/</path>
    <filename>dir_15f4b73e4143e94d16b8a3f5620d968f.html</filename>
    <dir>src/linklayer/contract/</dir>
    <dir>src/linklayer/ethernet/</dir>
    <dir>src/linklayer/etherswitch/</dir>
    <dir>src/linklayer/ext/</dir>
    <dir>src/linklayer/ieee80211/</dir>
    <dir>src/linklayer/mf80211/</dir>
    <dir>src/linklayer/mfcore/</dir>
    <dir>src/linklayer/ppp/</dir>
    <dir>src/linklayer/radio/</dir>
  </compound>
  <compound kind="dir">
    <name>src/linklayer/ieee80211/mac/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ieee80211/mac/</path>
    <filename>dir_6f7eb2183c4b0e22b6874ca67a26d042.html</filename>
    <file>Ieee80211Consts.h</file>
    <file>Ieee80211Frame_m.h</file>
    <file>Ieee80211Mac.cc</file>
    <file>Ieee80211Mac.h</file>
  </compound>
  <compound kind="dir">
    <name>src/linklayer/mf80211/macLayer/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mf80211/macLayer/</path>
    <filename>dir_a1b773ee3399bc626297e5bcd006a067.html</filename>
    <file>Consts80211.h</file>
    <file>CSMAMacLayer.cc</file>
    <file>CSMAMacLayer.h</file>
    <file>Mac80211.cc</file>
    <file>Mac80211.h</file>
    <file>Mac80211Pkt_m.h</file>
    <file>MacPkt_m.h</file>
  </compound>
  <compound kind="dir">
    <name>src/networklayer/ospfv2/messagehandler/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/messagehandler/</path>
    <filename>dir_ca9bc5e2055c6bb61c37b9272898c8bf.html</filename>
    <file>DatabaseDescriptionHandler.cc</file>
    <file>DatabaseDescriptionHandler.h</file>
    <file>HelloHandler.cc</file>
    <file>HelloHandler.h</file>
    <file>IMessageHandler.h</file>
    <file>LinkStateAcknowledgementHandler.cc</file>
    <file>LinkStateAcknowledgementHandler.h</file>
    <file>LinkStateRequestHandler.cc</file>
    <file>LinkStateRequestHandler.h</file>
    <file>LinkStateUpdateHandler.cc</file>
    <file>LinkStateUpdateHandler.h</file>
    <file>MessageHandler.cc</file>
    <file>MessageHandler.h</file>
  </compound>
  <compound kind="dir">
    <name>src/linklayer/mf80211/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mf80211/</path>
    <filename>dir_f57d8e0a9c85a6e2d7e6708132472644.html</filename>
    <dir>src/linklayer/mf80211/macLayer/</dir>
    <dir>src/linklayer/mf80211/phyLayer/</dir>
  </compound>
  <compound kind="dir">
    <name>src/linklayer/mfcore/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mfcore/</path>
    <filename>dir_a0fb81a835f3fb2a1ea9267837c487ea.html</filename>
    <file>AirFrame_m.h</file>
    <file>BasicDecider.cc</file>
    <file>BasicDecider.h</file>
    <file>BasicSnrEval.cc</file>
    <file>BasicSnrEval.h</file>
    <file>SnrControlInfo_m.h</file>
    <file>SnrList.h</file>
    <file>TransmComplete_m.h</file>
    <file>WirelessMacBase.cc</file>
    <file>WirelessMacBase.h</file>
  </compound>
  <compound kind="dir">
    <name>src/linklayer/ieee80211/mgmt/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ieee80211/mgmt/</path>
    <filename>dir_eb024f02333f02866174d97ffb86ce32.html</filename>
    <file>Ieee80211AgentSTA.cc</file>
    <file>Ieee80211AgentSTA.h</file>
    <file>Ieee80211MgmtAdhoc.cc</file>
    <file>Ieee80211MgmtAdhoc.h</file>
    <file>Ieee80211MgmtAP.cc</file>
    <file>Ieee80211MgmtAP.h</file>
    <file>Ieee80211MgmtAPBase.cc</file>
    <file>Ieee80211MgmtAPBase.h</file>
    <file>Ieee80211MgmtAPSimplified.cc</file>
    <file>Ieee80211MgmtAPSimplified.h</file>
    <file>Ieee80211MgmtBase.cc</file>
    <file>Ieee80211MgmtBase.h</file>
    <file>Ieee80211MgmtFrames_m.h</file>
    <file>Ieee80211MgmtSTA.cc</file>
    <file>Ieee80211MgmtSTA.h</file>
    <file>Ieee80211MgmtSTASimplified.cc</file>
    <file>Ieee80211MgmtSTASimplified.h</file>
    <file>Ieee80211Primitives_m.h</file>
  </compound>
  <compound kind="dir">
    <name>src/mobility/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/mobility/</path>
    <filename>dir_d88b5dcdf1f5aae8c8e5dc7f6ad8ed00.html</filename>
    <file>ANSimMobility.cc</file>
    <file>ANSimMobility.h</file>
    <file>BasicMobility.cc</file>
    <file>BasicMobility.h</file>
    <file>BonnMotionFileCache.cc</file>
    <file>BonnMotionFileCache.h</file>
    <file>BonnMotionMobility.cc</file>
    <file>BonnMotionMobility.h</file>
    <file>CircleMobility.cc</file>
    <file>CircleMobility.h</file>
    <file>ConstSpeedMobility.cc</file>
    <file>ConstSpeedMobility.h</file>
    <file>LinearMobility.cc</file>
    <file>LinearMobility.h</file>
    <file>LineSegmentsMobilityBase.cc</file>
    <file>LineSegmentsMobilityBase.h</file>
    <file>MassMobility.cc</file>
    <file>MassMobility.h</file>
    <file>NullMobility.cc</file>
    <file>NullMobility.h</file>
    <file>RandomWPMobility.cc</file>
    <file>RandomWPMobility.h</file>
    <file>RectangleMobility.cc</file>
    <file>RectangleMobility.h</file>
    <file>TurtleMobility.cc</file>
    <file>TurtleMobility.h</file>
  </compound>
  <compound kind="dir">
    <name>src/networklayer/mpls/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/mpls/</path>
    <filename>dir_a418d3a61a818938cb27c30bc36cdd83.html</filename>
    <file>ConstType.h</file>
    <file>IClassifier.h</file>
    <file>LIBTable.cc</file>
    <file>LIBTable.h</file>
    <file>LIBTableAccess.h</file>
    <file>MPLS.cc</file>
    <file>MPLS.h</file>
    <file>MPLSPacket.cc</file>
    <file>MPLSPacket.h</file>
  </compound>
  <compound kind="dir">
    <name>examples/rtp/multicast2/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/examples/rtp/multicast2/</path>
    <filename>dir_f0207eaed9279f476f1504151a3a5f94.html</filename>
    <file>creator.py</file>
  </compound>
  <compound kind="dir">
    <name>src/networklayer/ospfv2/neighbor/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/neighbor/</path>
    <filename>dir_a5e018c52b92d64a45f880b7ed07d917.html</filename>
    <file>OSPFNeighbor.cc</file>
    <file>OSPFNeighbor.h</file>
    <file>OSPFNeighborState.cc</file>
    <file>OSPFNeighborState.h</file>
    <file>OSPFNeighborStateAttempt.cc</file>
    <file>OSPFNeighborStateAttempt.h</file>
    <file>OSPFNeighborStateDown.cc</file>
    <file>OSPFNeighborStateDown.h</file>
    <file>OSPFNeighborStateExchange.cc</file>
    <file>OSPFNeighborStateExchange.h</file>
    <file>OSPFNeighborStateExchangeStart.cc</file>
    <file>OSPFNeighborStateExchangeStart.h</file>
    <file>OSPFNeighborStateFull.cc</file>
    <file>OSPFNeighborStateFull.h</file>
    <file>OSPFNeighborStateInit.cc</file>
    <file>OSPFNeighborStateInit.h</file>
    <file>OSPFNeighborStateLoading.cc</file>
    <file>OSPFNeighborStateLoading.h</file>
    <file>OSPFNeighborStateTwoWay.cc</file>
    <file>OSPFNeighborStateTwoWay.h</file>
  </compound>
  <compound kind="dir">
    <name>src/networklayer/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/</path>
    <filename>dir_10b2eb36c3bc5c55e7882141837be45a.html</filename>
    <dir>src/networklayer/arp/</dir>
    <dir>src/networklayer/autorouting/</dir>
    <dir>src/networklayer/common/</dir>
    <dir>src/networklayer/contract/</dir>
    <dir>src/networklayer/extras/</dir>
    <dir>src/networklayer/icmpv6/</dir>
    <dir>src/networklayer/ipv4/</dir>
    <dir>src/networklayer/ipv6/</dir>
    <dir>src/networklayer/ldp/</dir>
    <dir>src/networklayer/mpls/</dir>
    <dir>src/networklayer/ospfv2/</dir>
    <dir>src/networklayer/queue/</dir>
    <dir>src/networklayer/rsvp_te/</dir>
    <dir>src/networklayer/ted/</dir>
  </compound>
  <compound kind="dir">
    <name>src/networklayer/ospfv2/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/</path>
    <filename>dir_61429c994d0cab36f72bf07190cd4d82.html</filename>
    <dir>src/networklayer/ospfv2/interface/</dir>
    <dir>src/networklayer/ospfv2/messagehandler/</dir>
    <dir>src/networklayer/ospfv2/neighbor/</dir>
    <dir>src/networklayer/ospfv2/router/</dir>
    <file>OSPFPacket_m.h</file>
    <file>OSPFRouting.cc</file>
    <file>OSPFRouting.h</file>
    <file>OSPFTimer_m.h</file>
  </compound>
  <compound kind="dir">
    <name>src/linklayer/mf80211/phyLayer/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mf80211/phyLayer/</path>
    <filename>dir_9e9b6dd89a5e5193780774bfddd32e4a.html</filename>
    <dir>src/linklayer/mf80211/phyLayer/decider/</dir>
    <dir>src/linklayer/mf80211/phyLayer/snrEval/</dir>
  </compound>
  <compound kind="dir">
    <name>src/applications/pingapp/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/pingapp/</path>
    <filename>dir_362752c9db67f29418fa52cee42b365a.html</filename>
    <file>PingApp.cc</file>
    <file>PingApp.h</file>
    <file>PingPayload_m.h</file>
  </compound>
  <compound kind="dir">
    <name>src/linklayer/ppp/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/ppp/</path>
    <filename>dir_d1cb8950c37b41cb9ad08910618ad1d9.html</filename>
    <file>DropsGenerator.cc</file>
    <file>DropsGenerator.h</file>
    <file>DuplicatesGenerator.cc</file>
    <file>DuplicatesGenerator.h</file>
    <file>PPP.cc</file>
    <file>PPP.h</file>
    <file>PPPFrame_m.h</file>
    <file>ThruputMeter.cc</file>
    <file>ThruputMeter.h</file>
  </compound>
  <compound kind="dir">
    <name>src/transport/rtp/profiles/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/profiles/</path>
    <filename>dir_1c23e4b775b7f1c02e2319b8dc563b55.html</filename>
    <dir>src/transport/rtp/profiles/avprofile/</dir>
  </compound>
  <compound kind="dir">
    <name>src/networklayer/queue/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/queue/</path>
    <filename>dir_ba1ee5286ce84234d475161bd033cc7f.html</filename>
    <file>BasicDSCPClassifier.cc</file>
    <file>BasicDSCPClassifier.h</file>
    <file>DropTailQoSQueue.cc</file>
    <file>DropTailQoSQueue.h</file>
    <file>DropTailQueue.cc</file>
    <file>DropTailQueue.h</file>
    <file>IQoSClassifier.h</file>
    <file>REDQueue.cc</file>
    <file>REDQueue.h</file>
  </compound>
  <compound kind="dir">
    <name>src/transport/tcp_old/queues/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/queues/</path>
    <filename>dir_c8e6063dfc65047e505a81e108900083.html</filename>
    <file>old/queues/TCPMsgBasedRcvQueue.cc</file>
    <file>TCPMsgBasedRcvQueue_old.h</file>
    <file>old/queues/TCPMsgBasedSendQueue.cc</file>
    <file>TCPMsgBasedSendQueue_old.h</file>
    <file>old/queues/TCPVirtualDataRcvQueue.cc</file>
    <file>TCPVirtualDataRcvQueue_old.h</file>
    <file>old/queues/TCPVirtualDataSendQueue.cc</file>
    <file>TCPVirtualDataSendQueue_old.h</file>
  </compound>
  <compound kind="dir">
    <name>src/transport/tcp/queues/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/queues/</path>
    <filename>dir_3efcc27758ef78c633aa7e9ef9497192.html</filename>
    <file>queues/TCPMsgBasedRcvQueue.cc</file>
    <file>TCPMsgBasedRcvQueue.h</file>
    <file>queues/TCPMsgBasedSendQueue.cc</file>
    <file>TCPMsgBasedSendQueue.h</file>
    <file>queues/TCPVirtualDataRcvQueue.cc</file>
    <file>TCPVirtualDataRcvQueue.h</file>
    <file>queues/TCPVirtualDataSendQueue.cc</file>
    <file>TCPVirtualDataSendQueue.h</file>
  </compound>
  <compound kind="dir">
    <name>src/transport/tcp_nsc/queues/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_nsc/queues/</path>
    <filename>dir_e21f09d6fe8cb4bb76caf53f20008c3b.html</filename>
    <file>TCP_NSC_Queues.h</file>
    <file>TCP_NSC_VirtualDataQueues.cc</file>
    <file>TCP_NSC_VirtualDataQueues.h</file>
  </compound>
  <compound kind="dir">
    <name>src/linklayer/radio/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/radio/</path>
    <filename>dir_87439912e21bb46b7242378c002bfe40.html</filename>
    <file>AbstractRadio.cc</file>
    <file>AbstractRadio.h</file>
    <file>GenericRadio.cc</file>
    <file>GenericRadio.h</file>
    <file>GenericRadioModel.cc</file>
    <file>GenericRadioModel.h</file>
    <file>Ieee80211Radio.cc</file>
    <file>Ieee80211Radio.h</file>
    <file>Ieee80211RadioModel.cc</file>
    <file>Ieee80211RadioModel.h</file>
    <file>IModulation.h</file>
    <file>IRadioModel.h</file>
    <file>IReceptionModel.h</file>
    <file>Modulation.cc</file>
    <file>Modulation.h</file>
    <file>PathLossReceptionModel.cc</file>
    <file>PathLossReceptionModel.h</file>
  </compound>
  <compound kind="dir">
    <name>src/networklayer/ospfv2/router/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ospfv2/router/</path>
    <filename>dir_c7e07d3a595faab66eb9d46bd4ccbbb3.html</filename>
    <file>ASExternalLSA.cc</file>
    <file>LSA.h</file>
    <file>NetworkLSA.cc</file>
    <file>OSPFArea.cc</file>
    <file>OSPFArea.h</file>
    <file>OSPFcommon.h</file>
    <file>OSPFRouter.cc</file>
    <file>OSPFRouter.h</file>
    <file>OSPFRoutingTableEntry.h</file>
    <file>RouterLSA.cc</file>
    <file>SummaryLSA.cc</file>
  </compound>
  <compound kind="dir">
    <name>src/networklayer/rsvp_te/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/rsvp_te/</path>
    <filename>dir_b23baf7aa6967dac652ed59e83b4ac7f.html</filename>
    <file>IntServ.h</file>
    <file>IntServ_m.h</file>
    <file>IRSVPClassifier.h</file>
    <file>RSVP.cc</file>
    <file>RSVP.h</file>
    <file>RSVPAccess.h</file>
    <file>RSVPHello_m.h</file>
    <file>RSVPHelloMsg.h</file>
    <file>RSVPPacket.h</file>
    <file>RSVPPacket_m.h</file>
    <file>RSVPPathMsg.h</file>
    <file>RSVPPathMsg_m.h</file>
    <file>RSVPResvMsg.h</file>
    <file>RSVPResvMsg_m.h</file>
    <file>SignallingMsg_m.h</file>
    <file>SimpleClassifier.cc</file>
    <file>SimpleClassifier.h</file>
    <file>Utils.cc</file>
    <file>Utils.h</file>
  </compound>
  <compound kind="dir">
    <name>src/transport/rtp/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/rtp/</path>
    <filename>dir_17381fbf58a15508d01facde0e1d6b52.html</filename>
    <dir>src/transport/rtp/profiles/</dir>
    <file>reports.cc</file>
    <file>reports.h</file>
    <file>RTCP.cc</file>
    <file>RTCP.h</file>
    <file>RTCPPacket.cc</file>
    <file>RTCPPacket.h</file>
    <file>RTP.cc</file>
    <file>RTP.h</file>
    <file>RTPInnerPacket.cc</file>
    <file>RTPInnerPacket.h</file>
    <file>RTPInterfacePacket.cc</file>
    <file>RTPInterfacePacket.h</file>
    <file>RTPPacket.cc</file>
    <file>RTPPacket.h</file>
    <file>RTPParticipantInfo.cc</file>
    <file>RTPParticipantInfo.h</file>
    <file>RTPPayloadReceiver.cc</file>
    <file>RTPPayloadReceiver.h</file>
    <file>RTPPayloadSender.cc</file>
    <file>RTPPayloadSender.h</file>
    <file>RTPProfile.cc</file>
    <file>RTPProfile.h</file>
    <file>RTPReceiverInfo.cc</file>
    <file>RTPReceiverInfo.h</file>
    <file>RTPSenderControlMessage_m.h</file>
    <file>RTPSenderInfo.cc</file>
    <file>RTPSenderInfo.h</file>
    <file>RTPSenderStatusMessage_m.h</file>
    <file>sdes.cc</file>
    <file>sdes.h</file>
  </compound>
  <compound kind="dir">
    <name>examples/rtp/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/examples/rtp/</path>
    <filename>dir_1bacd0c67dbb8c0268601d55663f7470.html</filename>
    <dir>examples/rtp/multicast2/</dir>
  </compound>
  <compound kind="dir">
    <name>src/applications/rtpapp/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/rtpapp/</path>
    <filename>dir_22501a417f93223ad74ca5ef9e6ad001.html</filename>
    <file>RTPApplication.cc</file>
    <file>RTPApplication.h</file>
  </compound>
  <compound kind="dir">
    <name>src/transport/sctp/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/sctp/</path>
    <filename>dir_e67923df1ecdd2b80c0adc9653e0b0d1.html</filename>
    <file>SCTP.cc</file>
    <file>SCTP.h</file>
    <file>SCTPAlg.cc</file>
    <file>SCTPAlg.h</file>
    <file>SCTPAlgorithm.h</file>
    <file>SCTPAssociation.h</file>
    <file>SCTPAssociationBase.cc</file>
    <file>SCTPAssociationEventProc.cc</file>
    <file>SCTPAssociationRcvMessage.cc</file>
    <file>SCTPAssociationSendAll.cc</file>
    <file>SCTPAssociationUtil.cc</file>
    <file>SCTPCCFunctions.cc</file>
    <file>SCTPMessage.cc</file>
    <file>SCTPMessage.h</file>
    <file>SCTPMessage_m.h</file>
    <file>SCTPQueue.cc</file>
    <file>SCTPQueue.h</file>
    <file>SCTPReceiveStream.cc</file>
    <file>SCTPReceiveStream.h</file>
    <file>SCTPSendStream.cc</file>
    <file>SCTPSendStream.h</file>
    <file>SCTPSSFunctions.cc</file>
  </compound>
  <compound kind="dir">
    <name>src/applications/sctpapp/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/sctpapp/</path>
    <filename>dir_cd2be5cf86111e5e06be0ff46af1166f.html</filename>
    <file>SCTPClient.cc</file>
    <file>SCTPClient.h</file>
    <file>SCTPPeer.cc</file>
    <file>SCTPPeer.h</file>
    <file>SCTPServer.cc</file>
    <file>SCTPServer.h</file>
  </compound>
  <compound kind="dir">
    <name>src/linklayer/mf80211/phyLayer/snrEval/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/linklayer/mf80211/phyLayer/snrEval/</path>
    <filename>dir_aef36476fb17134444ae5021426c9069.html</filename>
    <file>GilbertElliotSnr.cc</file>
    <file>GilbertElliotSnr.h</file>
    <file>SnrEval.cc</file>
    <file>SnrEval.h</file>
    <file>SnrEval80211.cc</file>
    <file>SnrEval80211.h</file>
  </compound>
  <compound kind="dir">
    <name>src/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/</path>
    <filename>dir_493eba74639f722aa88bd3d010f621b5.html</filename>
    <dir>src/applications/</dir>
    <dir>src/base/</dir>
    <dir>src/linklayer/</dir>
    <dir>src/mobility/</dir>
    <dir>src/networklayer/</dir>
    <dir>src/transport/</dir>
    <dir>src/util/</dir>
    <dir>src/world/</dir>
    <file>index.h</file>
  </compound>
  <compound kind="dir">
    <name>src/transport/tcp/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp/</path>
    <filename>dir_9d5c10e2e4f3c4eb7cb80fb0f6ea3e10.html</filename>
    <dir>src/transport/tcp/flavours/</dir>
    <dir>src/transport/tcp/queues/</dir>
    <file>TCP.cc</file>
    <file>TCP.h</file>
    <file>TCPAlgorithm.h</file>
    <file>TCPConnection.h</file>
    <file>TCPConnectionBase.cc</file>
    <file>TCPConnectionEventProc.cc</file>
    <file>TCPConnectionRcvSegment.cc</file>
    <file>TCPConnectionUtil.cc</file>
    <file>TCPDoc.h</file>
    <file>TCPReceiveQueue.h</file>
    <file>TCPSACKRexmitQueue.cc</file>
    <file>TCPSACKRexmitQueue.h</file>
    <file>TCPSegment.cc</file>
    <file>TCPSegment.h</file>
    <file>TCPSegment_m.h</file>
    <file>TCPSendQueue.h</file>
  </compound>
  <compound kind="dir">
    <name>src/transport/tcp_nsc/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_nsc/</path>
    <filename>dir_e9c5b5d3feff01241658aa7a5d12a55a.html</filename>
    <dir>src/transport/tcp_nsc/queues/</dir>
    <file>TCP_NSC.cc</file>
    <file>TCP_NSC.h</file>
    <file>TCP_NSC_Connection.cc</file>
    <file>TCP_NSC_Connection.h</file>
  </compound>
  <compound kind="dir">
    <name>src/transport/tcp_old/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/tcp_old/</path>
    <filename>dir_23dcbde7125bae442be2e4354e9c80e9.html</filename>
    <dir>src/transport/tcp_old/flavours/</dir>
    <dir>src/transport/tcp_old/queues/</dir>
    <file>old/TCP.cc</file>
    <file>TCP_old.h</file>
    <file>TCPAlgorithm_old.h</file>
    <file>TCPConnection_old.h</file>
    <file>old/TCPConnectionBase.cc</file>
    <file>old/TCPConnectionEventProc.cc</file>
    <file>old/TCPConnectionRcvSegment.cc</file>
    <file>old/TCPConnectionUtil.cc</file>
    <file>TCPDoc_old.h</file>
    <file>TCPReceiveQueue_old.h</file>
    <file>TCPSendQueue_old.h</file>
  </compound>
  <compound kind="dir">
    <name>src/applications/tcpapp/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/tcpapp/</path>
    <filename>dir_5b827d51c3ff875fce53f8553d176dfc.html</filename>
    <file>GenericAppMsg_m.h</file>
    <file>TCPBasicClientApp.cc</file>
    <file>TCPBasicClientApp.h</file>
    <file>TCPEchoApp.cc</file>
    <file>TCPEchoApp.h</file>
    <file>TCPGenericCliAppBase.cc</file>
    <file>TCPGenericCliAppBase.h</file>
    <file>TCPGenericSrvApp.cc</file>
    <file>TCPGenericSrvApp.h</file>
    <file>TCPGenericSrvThread.cc</file>
    <file>TCPGenericSrvThread.h</file>
    <file>TCPSessionApp.cc</file>
    <file>TCPSessionApp.h</file>
    <file>TCPSinkApp.cc</file>
    <file>TCPSinkApp.h</file>
    <file>TCPSpoof.cc</file>
    <file>TCPSpoof.h</file>
    <file>TCPSrvHostApp.cc</file>
    <file>TCPSrvHostApp.h</file>
    <file>TelnetApp.cc</file>
    <file>TelnetApp.h</file>
  </compound>
  <compound kind="dir">
    <name>src/networklayer/ted/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/networklayer/ted/</path>
    <filename>dir_ffc16e0585e6c03140aa3811b329c302.html</filename>
    <file>LinkStatePacket_m.h</file>
    <file>LinkStateRouting.cc</file>
    <file>LinkStateRouting.h</file>
    <file>TED.cc</file>
    <file>TED.h</file>
    <file>TED_m.h</file>
    <file>TEDAccess.h</file>
  </compound>
  <compound kind="dir">
    <name>src/transport/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/</path>
    <filename>dir_34a6fbd47227bd78d46d19b24c6937db.html</filename>
    <dir>src/transport/contract/</dir>
    <dir>src/transport/rtp/</dir>
    <dir>src/transport/sctp/</dir>
    <dir>src/transport/tcp/</dir>
    <dir>src/transport/tcp_nsc/</dir>
    <dir>src/transport/tcp_old/</dir>
    <dir>src/transport/udp/</dir>
  </compound>
  <compound kind="dir">
    <name>src/transport/udp/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/transport/udp/</path>
    <filename>dir_13eee82b25d1d0ead11619ed9964d03a.html</filename>
    <file>UDP.cc</file>
    <file>UDP.h</file>
    <file>UDPPacket.h</file>
    <file>UDPPacket_m.h</file>
  </compound>
  <compound kind="dir">
    <name>src/applications/udpapp/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/applications/udpapp/</path>
    <filename>dir_1297ed79bc93790fc5fb1e97cf3e08db.html</filename>
    <file>UDPAppBase.cc</file>
    <file>UDPAppBase.h</file>
    <file>UDPBasicApp.cc</file>
    <file>UDPBasicApp.h</file>
    <file>UDPEchoApp.cc</file>
    <file>UDPEchoApp.h</file>
    <file>UDPEchoAppMsg_m.h</file>
    <file>UDPSink.cc</file>
    <file>UDPSink.h</file>
    <file>UDPVideoStreamCli.cc</file>
    <file>UDPVideoStreamCli.h</file>
    <file>UDPVideoStreamSvr.cc</file>
    <file>UDPVideoStreamSvr.h</file>
  </compound>
  <compound kind="dir">
    <name>src/util/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/util/</path>
    <filename>dir_1a1cc47ff911b796c3b0426b22e55889.html</filename>
    <dir>src/util/headerserializers/</dir>
    <file>common.cc</file>
    <file>common.h</file>
    <file>FWMath.h</file>
    <file>NAMTraceWriter.cc</file>
    <file>NAMTraceWriter.h</file>
    <file>opp_utils.cc</file>
    <file>opp_utils.h</file>
    <file>TCPDump.cc</file>
    <file>TCPDump.h</file>
    <file>ThruputMeteringChannel.cc</file>
    <file>ThruputMeteringChannel.h</file>
    <file>XMLUtils.cc</file>
    <file>XMLUtils.h</file>
  </compound>
  <compound kind="dir">
    <name>src/world/</name>
    <path>/home/rhornig/omnetpp-4.0p1/samples/inet/src/world/</path>
    <filename>dir_c2dcd695921bca9d1ef10ab3ed8f69d5.html</filename>
    <file>ChannelAccess.cc</file>
    <file>ChannelAccess.h</file>
    <file>ChannelControl.cc</file>
    <file>ChannelControl.h</file>
    <file>ChannelInstaller.cc</file>
    <file>ChannelInstaller.h</file>
    <file>NAMTrace.cc</file>
    <file>NAMTrace.h</file>
    <file>ScenarioManager.cc</file>
    <file>ScenarioManager.h</file>
  </compound>
</tagfile>
